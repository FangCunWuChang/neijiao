/* soapH.h
   Generated by gSOAP 2.8.51 for WebService.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsMoResponse_GetAhsMoResult_DEFINED
#define SOAP_TYPE__ns1__GetAhsMoResponse_GetAhsMoResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, const char*, int, const _ns1__GetAhsMoResponse_GetAhsMoResult *, const char*);
SOAP_FMAC3 _ns1__GetAhsMoResponse_GetAhsMoResult * SOAP_FMAC4 soap_in__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, const char*, _ns1__GetAhsMoResponse_GetAhsMoResult *, const char*);
SOAP_FMAC1 _ns1__GetAhsMoResponse_GetAhsMoResult * SOAP_FMAC2 soap_instantiate__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsMoResponse_GetAhsMoResult * soap_new__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsMoResponse_GetAhsMoResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsMoResponse_GetAhsMoResult * soap_new_req__ns1__GetAhsMoResponse_GetAhsMoResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__GetAhsMoResponse_GetAhsMoResult *_p = soap_new__ns1__GetAhsMoResponse_GetAhsMoResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsMoResponse_GetAhsMoResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__GetAhsMoResponse_GetAhsMoResult * soap_new_set__ns1__GetAhsMoResponse_GetAhsMoResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__GetAhsMoResponse_GetAhsMoResult *_p = soap_new__ns1__GetAhsMoResponse_GetAhsMoResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsMoResponse_GetAhsMoResult::xsd__schema = xsd__schema;
		_p->_ns1__GetAhsMoResponse_GetAhsMoResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, _ns1__GetAhsMoResponse_GetAhsMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse-GetAhsMoResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse_GetAhsMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse_GetAhsMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse-GetAhsMoResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse_GetAhsMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse_GetAhsMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse-GetAhsMoResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse_GetAhsMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsMoResponse_GetAhsMoResult * SOAP_FMAC4 soap_get__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, _ns1__GetAhsMoResponse_GetAhsMoResult *, const char*, const char*);

inline int soap_read__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, _ns1__GetAhsMoResponse_GetAhsMoResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsMoResponse_GetAhsMoResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse_GetAhsMoResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsMoResponse_GetAhsMoResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsMoResponse_GetAhsMoResult(struct soap *soap, _ns1__GetAhsMoResponse_GetAhsMoResult *p)
{
	if (soap_read__ns1__GetAhsMoResponse_GetAhsMoResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPallentToWMSResponse_GetPallentToWMSResult_DEFINED
#define SOAP_TYPE__ns1__GetPallentToWMSResponse_GetPallentToWMSResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, const char*, int, const _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *, const char*);
SOAP_FMAC3 _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * SOAP_FMAC4 soap_in__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, const char*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *, const char*);
SOAP_FMAC1 _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * SOAP_FMAC2 soap_instantiate__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * soap_new__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * soap_new_req__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(
	struct soap *soap)
{
	_ns1__GetPallentToWMSResponse_GetPallentToWMSResult *_p = soap_new__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * soap_new_set__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__GetPallentToWMSResponse_GetPallentToWMSResult *_p = soap_new__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPallentToWMSResponse_GetPallentToWMSResult::__any = __any;
		_p->_ns1__GetPallentToWMSResponse_GetPallentToWMSResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse-GetPallentToWMSResult", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse_GetPallentToWMSResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse-GetPallentToWMSResult", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse_GetPallentToWMSResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse-GetPallentToWMSResult", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse_GetPallentToWMSResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPallentToWMSResponse_GetPallentToWMSResult * SOAP_FMAC4 soap_get__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *, const char*, const char*);

inline int soap_read__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap *soap, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *p)
{
	if (soap_read__ns1__GetPallentToWMSResponse_GetPallentToWMSResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLinkOutSN_assyDt_DEFINED
#define SOAP_TYPE__ns1__doLinkOutSN_assyDt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLinkOutSN_assyDt(struct soap*, const char*, int, const _ns1__doLinkOutSN_assyDt *, const char*);
SOAP_FMAC3 _ns1__doLinkOutSN_assyDt * SOAP_FMAC4 soap_in__ns1__doLinkOutSN_assyDt(struct soap*, const char*, _ns1__doLinkOutSN_assyDt *, const char*);
SOAP_FMAC1 _ns1__doLinkOutSN_assyDt * SOAP_FMAC2 soap_instantiate__ns1__doLinkOutSN_assyDt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLinkOutSN_assyDt * soap_new__ns1__doLinkOutSN_assyDt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLinkOutSN_assyDt(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLinkOutSN_assyDt * soap_new_req__ns1__doLinkOutSN_assyDt(
	struct soap *soap)
{
	_ns1__doLinkOutSN_assyDt *_p = soap_new__ns1__doLinkOutSN_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLinkOutSN_assyDt * soap_new_set__ns1__doLinkOutSN_assyDt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__doLinkOutSN_assyDt *_p = soap_new__ns1__doLinkOutSN_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLinkOutSN_assyDt::__any = __any;
		_p->_ns1__doLinkOutSN_assyDt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__doLinkOutSN_assyDt(struct soap *soap, _ns1__doLinkOutSN_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLinkOutSN_assyDt(struct soap *soap, const char *URL, _ns1__doLinkOutSN_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLinkOutSN_assyDt(struct soap *soap, const char *URL, _ns1__doLinkOutSN_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLinkOutSN_assyDt * SOAP_FMAC4 soap_get__ns1__doLinkOutSN_assyDt(struct soap*, _ns1__doLinkOutSN_assyDt *, const char*, const char*);

inline int soap_read__ns1__doLinkOutSN_assyDt(struct soap *soap, _ns1__doLinkOutSN_assyDt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLinkOutSN_assyDt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLinkOutSN_assyDt(struct soap *soap, const char *URL, _ns1__doLinkOutSN_assyDt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLinkOutSN_assyDt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLinkOutSN_assyDt(struct soap *soap, _ns1__doLinkOutSN_assyDt *p)
{
	if (soap_read__ns1__doLinkOutSN_assyDt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doPmcSNLink_assyDt_DEFINED
#define SOAP_TYPE__ns1__doPmcSNLink_assyDt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doPmcSNLink_assyDt(struct soap*, const char*, int, const _ns1__doPmcSNLink_assyDt *, const char*);
SOAP_FMAC3 _ns1__doPmcSNLink_assyDt * SOAP_FMAC4 soap_in__ns1__doPmcSNLink_assyDt(struct soap*, const char*, _ns1__doPmcSNLink_assyDt *, const char*);
SOAP_FMAC1 _ns1__doPmcSNLink_assyDt * SOAP_FMAC2 soap_instantiate__ns1__doPmcSNLink_assyDt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doPmcSNLink_assyDt * soap_new__ns1__doPmcSNLink_assyDt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doPmcSNLink_assyDt(soap, n, NULL, NULL, NULL);
}

inline _ns1__doPmcSNLink_assyDt * soap_new_req__ns1__doPmcSNLink_assyDt(
	struct soap *soap)
{
	_ns1__doPmcSNLink_assyDt *_p = soap_new__ns1__doPmcSNLink_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doPmcSNLink_assyDt * soap_new_set__ns1__doPmcSNLink_assyDt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__doPmcSNLink_assyDt *_p = soap_new__ns1__doPmcSNLink_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doPmcSNLink_assyDt::__any = __any;
		_p->_ns1__doPmcSNLink_assyDt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__doPmcSNLink_assyDt(struct soap *soap, _ns1__doPmcSNLink_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink-assyDt", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doPmcSNLink_assyDt(struct soap *soap, const char *URL, _ns1__doPmcSNLink_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink-assyDt", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doPmcSNLink_assyDt(struct soap *soap, const char *URL, _ns1__doPmcSNLink_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink-assyDt", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doPmcSNLink_assyDt * SOAP_FMAC4 soap_get__ns1__doPmcSNLink_assyDt(struct soap*, _ns1__doPmcSNLink_assyDt *, const char*, const char*);

inline int soap_read__ns1__doPmcSNLink_assyDt(struct soap *soap, _ns1__doPmcSNLink_assyDt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doPmcSNLink_assyDt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doPmcSNLink_assyDt(struct soap *soap, const char *URL, _ns1__doPmcSNLink_assyDt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doPmcSNLink_assyDt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doPmcSNLink_assyDt(struct soap *soap, _ns1__doPmcSNLink_assyDt *p)
{
	if (soap_read__ns1__doPmcSNLink_assyDt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult_DEFINED
#define SOAP_TYPE__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, const char*, int, const _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *, const char*);
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * SOAP_FMAC4 soap_in__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, const char*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *, const char*);
SOAP_FMAC1 _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * SOAP_FMAC2 soap_instantiate__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * soap_new__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * soap_new_req__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(
	struct soap *soap)
{
	_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *_p = soap_new__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * soap_new_set__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *_p = soap_new__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult::__any = __any;
		_p->_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse-getPmcPartAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse-getPmcPartAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse-getPmcPartAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult * SOAP_FMAC4 soap_get__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *, const char*, const char*);

inline int soap_read__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap *soap, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *p)
{
	if (soap_read__ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcAssyListResponse_getPmcAssyListResult_DEFINED
#define SOAP_TYPE__ns1__getPmcAssyListResponse_getPmcAssyListResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, const char*, int, const _ns1__getPmcAssyListResponse_getPmcAssyListResult *, const char*);
SOAP_FMAC3 _ns1__getPmcAssyListResponse_getPmcAssyListResult * SOAP_FMAC4 soap_in__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, const char*, _ns1__getPmcAssyListResponse_getPmcAssyListResult *, const char*);
SOAP_FMAC1 _ns1__getPmcAssyListResponse_getPmcAssyListResult * SOAP_FMAC2 soap_instantiate__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcAssyListResponse_getPmcAssyListResult * soap_new__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcAssyListResponse_getPmcAssyListResult * soap_new_req__ns1__getPmcAssyListResponse_getPmcAssyListResult(
	struct soap *soap)
{
	_ns1__getPmcAssyListResponse_getPmcAssyListResult *_p = soap_new__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcAssyListResponse_getPmcAssyListResult * soap_new_set__ns1__getPmcAssyListResponse_getPmcAssyListResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__getPmcAssyListResponse_getPmcAssyListResult *_p = soap_new__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcAssyListResponse_getPmcAssyListResult::__any = __any;
		_p->_ns1__getPmcAssyListResponse_getPmcAssyListResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, _ns1__getPmcAssyListResponse_getPmcAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse-getPmcAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse_getPmcAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse_getPmcAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse-getPmcAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse_getPmcAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse_getPmcAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse-getPmcAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse_getPmcAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcAssyListResponse_getPmcAssyListResult * SOAP_FMAC4 soap_get__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, _ns1__getPmcAssyListResponse_getPmcAssyListResult *, const char*, const char*);

inline int soap_read__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, _ns1__getPmcAssyListResponse_getPmcAssyListResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse_getPmcAssyListResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap *soap, _ns1__getPmcAssyListResponse_getPmcAssyListResult *p)
{
	if (soap_read__ns1__getPmcAssyListResponse_getPmcAssyListResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doAssy_assyDt_DEFINED
#define SOAP_TYPE__ns1__doAssy_assyDt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doAssy_assyDt(struct soap*, const char*, int, const _ns1__doAssy_assyDt *, const char*);
SOAP_FMAC3 _ns1__doAssy_assyDt * SOAP_FMAC4 soap_in__ns1__doAssy_assyDt(struct soap*, const char*, _ns1__doAssy_assyDt *, const char*);
SOAP_FMAC1 _ns1__doAssy_assyDt * SOAP_FMAC2 soap_instantiate__ns1__doAssy_assyDt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doAssy_assyDt * soap_new__ns1__doAssy_assyDt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doAssy_assyDt(soap, n, NULL, NULL, NULL);
}

inline _ns1__doAssy_assyDt * soap_new_req__ns1__doAssy_assyDt(
	struct soap *soap)
{
	_ns1__doAssy_assyDt *_p = soap_new__ns1__doAssy_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doAssy_assyDt * soap_new_set__ns1__doAssy_assyDt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__doAssy_assyDt *_p = soap_new__ns1__doAssy_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doAssy_assyDt::__any = __any;
		_p->_ns1__doAssy_assyDt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__doAssy_assyDt(struct soap *soap, _ns1__doAssy_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy-assyDt", p->soap_type() == SOAP_TYPE__ns1__doAssy_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doAssy_assyDt(struct soap *soap, const char *URL, _ns1__doAssy_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy-assyDt", p->soap_type() == SOAP_TYPE__ns1__doAssy_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doAssy_assyDt(struct soap *soap, const char *URL, _ns1__doAssy_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy-assyDt", p->soap_type() == SOAP_TYPE__ns1__doAssy_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doAssy_assyDt * SOAP_FMAC4 soap_get__ns1__doAssy_assyDt(struct soap*, _ns1__doAssy_assyDt *, const char*, const char*);

inline int soap_read__ns1__doAssy_assyDt(struct soap *soap, _ns1__doAssy_assyDt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doAssy_assyDt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doAssy_assyDt(struct soap *soap, const char *URL, _ns1__doAssy_assyDt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doAssy_assyDt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doAssy_assyDt(struct soap *soap, _ns1__doAssy_assyDt *p)
{
	if (soap_read__ns1__doAssy_assyDt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLinkOutSnResponse_GetLinkOutSnResult_DEFINED
#define SOAP_TYPE__ns1__GetLinkOutSnResponse_GetLinkOutSnResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, const char*, int, const _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *, const char*);
SOAP_FMAC3 _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * SOAP_FMAC4 soap_in__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, const char*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *, const char*);
SOAP_FMAC1 _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * SOAP_FMAC2 soap_instantiate__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * soap_new__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * soap_new_req__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(
	struct soap *soap)
{
	_ns1__GetLinkOutSnResponse_GetLinkOutSnResult *_p = soap_new__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * soap_new_set__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__GetLinkOutSnResponse_GetLinkOutSnResult *_p = soap_new__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLinkOutSnResponse_GetLinkOutSnResult::__any = __any;
		_p->_ns1__GetLinkOutSnResponse_GetLinkOutSnResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse-GetLinkOutSnResult", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse_GetLinkOutSnResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse-GetLinkOutSnResult", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse_GetLinkOutSnResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse-GetLinkOutSnResult", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse_GetLinkOutSnResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLinkOutSnResponse_GetLinkOutSnResult * SOAP_FMAC4 soap_get__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *, const char*, const char*);

inline int soap_read__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap *soap, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *p)
{
	if (soap_read__ns1__GetLinkOutSnResponse_GetLinkOutSnResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPartBomExtResponse_getPartBomExtResult_DEFINED
#define SOAP_TYPE__ns1__getPartBomExtResponse_getPartBomExtResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, const char*, int, const _ns1__getPartBomExtResponse_getPartBomExtResult *, const char*);
SOAP_FMAC3 _ns1__getPartBomExtResponse_getPartBomExtResult * SOAP_FMAC4 soap_in__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, const char*, _ns1__getPartBomExtResponse_getPartBomExtResult *, const char*);
SOAP_FMAC1 _ns1__getPartBomExtResponse_getPartBomExtResult * SOAP_FMAC2 soap_instantiate__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPartBomExtResponse_getPartBomExtResult * soap_new__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPartBomExtResponse_getPartBomExtResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPartBomExtResponse_getPartBomExtResult * soap_new_req__ns1__getPartBomExtResponse_getPartBomExtResult(
	struct soap *soap)
{
	_ns1__getPartBomExtResponse_getPartBomExtResult *_p = soap_new__ns1__getPartBomExtResponse_getPartBomExtResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPartBomExtResponse_getPartBomExtResult * soap_new_set__ns1__getPartBomExtResponse_getPartBomExtResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__getPartBomExtResponse_getPartBomExtResult *_p = soap_new__ns1__getPartBomExtResponse_getPartBomExtResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPartBomExtResponse_getPartBomExtResult::__any = __any;
		_p->_ns1__getPartBomExtResponse_getPartBomExtResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, _ns1__getPartBomExtResponse_getPartBomExtResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse-getPartBomExtResult", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse_getPartBomExtResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse_getPartBomExtResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse-getPartBomExtResult", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse_getPartBomExtResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse_getPartBomExtResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse-getPartBomExtResult", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse_getPartBomExtResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPartBomExtResponse_getPartBomExtResult * SOAP_FMAC4 soap_get__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, _ns1__getPartBomExtResponse_getPartBomExtResult *, const char*, const char*);

inline int soap_read__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, _ns1__getPartBomExtResponse_getPartBomExtResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPartBomExtResponse_getPartBomExtResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse_getPartBomExtResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPartBomExtResponse_getPartBomExtResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPartBomExtResponse_getPartBomExtResult(struct soap *soap, _ns1__getPartBomExtResponse_getPartBomExtResult *p)
{
	if (soap_read__ns1__getPartBomExtResponse_getPartBomExtResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoAssyListResponse_getMoAssyListResult_DEFINED
#define SOAP_TYPE__ns1__getMoAssyListResponse_getMoAssyListResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, const char*, int, const _ns1__getMoAssyListResponse_getMoAssyListResult *, const char*);
SOAP_FMAC3 _ns1__getMoAssyListResponse_getMoAssyListResult * SOAP_FMAC4 soap_in__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, const char*, _ns1__getMoAssyListResponse_getMoAssyListResult *, const char*);
SOAP_FMAC1 _ns1__getMoAssyListResponse_getMoAssyListResult * SOAP_FMAC2 soap_instantiate__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoAssyListResponse_getMoAssyListResult * soap_new__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoAssyListResponse_getMoAssyListResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoAssyListResponse_getMoAssyListResult * soap_new_req__ns1__getMoAssyListResponse_getMoAssyListResult(
	struct soap *soap)
{
	_ns1__getMoAssyListResponse_getMoAssyListResult *_p = soap_new__ns1__getMoAssyListResponse_getMoAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoAssyListResponse_getMoAssyListResult * soap_new_set__ns1__getMoAssyListResponse_getMoAssyListResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__getMoAssyListResponse_getMoAssyListResult *_p = soap_new__ns1__getMoAssyListResponse_getMoAssyListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoAssyListResponse_getMoAssyListResult::__any = __any;
		_p->_ns1__getMoAssyListResponse_getMoAssyListResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, _ns1__getMoAssyListResponse_getMoAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse-getMoAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse_getMoAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse_getMoAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse-getMoAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse_getMoAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse_getMoAssyListResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse-getMoAssyListResult", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse_getMoAssyListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoAssyListResponse_getMoAssyListResult * SOAP_FMAC4 soap_get__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, _ns1__getMoAssyListResponse_getMoAssyListResult *, const char*, const char*);

inline int soap_read__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, _ns1__getMoAssyListResponse_getMoAssyListResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoAssyListResponse_getMoAssyListResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse_getMoAssyListResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoAssyListResponse_getMoAssyListResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoAssyListResponse_getMoAssyListResult(struct soap *soap, _ns1__getMoAssyListResponse_getMoAssyListResult *p)
{
	if (soap_read__ns1__getMoAssyListResponse_getMoAssyListResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getInfoByMoResponse_getInfoByMoResult_DEFINED
#define SOAP_TYPE__ns1__getInfoByMoResponse_getInfoByMoResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, const char*, int, const _ns1__getInfoByMoResponse_getInfoByMoResult *, const char*);
SOAP_FMAC3 _ns1__getInfoByMoResponse_getInfoByMoResult * SOAP_FMAC4 soap_in__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, const char*, _ns1__getInfoByMoResponse_getInfoByMoResult *, const char*);
SOAP_FMAC1 _ns1__getInfoByMoResponse_getInfoByMoResult * SOAP_FMAC2 soap_instantiate__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getInfoByMoResponse_getInfoByMoResult * soap_new__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getInfoByMoResponse_getInfoByMoResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getInfoByMoResponse_getInfoByMoResult * soap_new_req__ns1__getInfoByMoResponse_getInfoByMoResult(
	struct soap *soap)
{
	_ns1__getInfoByMoResponse_getInfoByMoResult *_p = soap_new__ns1__getInfoByMoResponse_getInfoByMoResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getInfoByMoResponse_getInfoByMoResult * soap_new_set__ns1__getInfoByMoResponse_getInfoByMoResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__getInfoByMoResponse_getInfoByMoResult *_p = soap_new__ns1__getInfoByMoResponse_getInfoByMoResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getInfoByMoResponse_getInfoByMoResult::__any = __any;
		_p->_ns1__getInfoByMoResponse_getInfoByMoResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, _ns1__getInfoByMoResponse_getInfoByMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse-getInfoByMoResult", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse_getInfoByMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse_getInfoByMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse-getInfoByMoResult", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse_getInfoByMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse_getInfoByMoResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse-getInfoByMoResult", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse_getInfoByMoResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getInfoByMoResponse_getInfoByMoResult * SOAP_FMAC4 soap_get__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, _ns1__getInfoByMoResponse_getInfoByMoResult *, const char*, const char*);

inline int soap_read__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, _ns1__getInfoByMoResponse_getInfoByMoResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getInfoByMoResponse_getInfoByMoResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse_getInfoByMoResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getInfoByMoResponse_getInfoByMoResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getInfoByMoResponse_getInfoByMoResult(struct soap *soap, _ns1__getInfoByMoResponse_getInfoByMoResult *p)
{
	if (soap_read__ns1__getInfoByMoResponse_getInfoByMoResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMachineForGroupResponse_GetMachineForGroupResult_DEFINED
#define SOAP_TYPE__ns1__GetMachineForGroupResponse_GetMachineForGroupResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, const char*, int, const _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *, const char*);
SOAP_FMAC3 _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * SOAP_FMAC4 soap_in__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, const char*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *, const char*);
SOAP_FMAC1 _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * SOAP_FMAC2 soap_instantiate__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * soap_new__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * soap_new_req__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__GetMachineForGroupResponse_GetMachineForGroupResult *_p = soap_new__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMachineForGroupResponse_GetMachineForGroupResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * soap_new_set__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__GetMachineForGroupResponse_GetMachineForGroupResult *_p = soap_new__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMachineForGroupResponse_GetMachineForGroupResult::xsd__schema = xsd__schema;
		_p->_ns1__GetMachineForGroupResponse_GetMachineForGroupResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse-GetMachineForGroupResult", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse_GetMachineForGroupResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse-GetMachineForGroupResult", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse_GetMachineForGroupResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse-GetMachineForGroupResult", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse_GetMachineForGroupResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMachineForGroupResponse_GetMachineForGroupResult * SOAP_FMAC4 soap_get__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *, const char*, const char*);

inline int soap_read__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap *soap, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *p)
{
	if (soap_read__ns1__GetMachineForGroupResponse_GetMachineForGroupResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetFlatnessFruitRec_dt_DEFINED
#define SOAP_TYPE__ns1__SetFlatnessFruitRec_dt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetFlatnessFruitRec_dt(struct soap*, const char*, int, const _ns1__SetFlatnessFruitRec_dt *, const char*);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec_dt * SOAP_FMAC4 soap_in__ns1__SetFlatnessFruitRec_dt(struct soap*, const char*, _ns1__SetFlatnessFruitRec_dt *, const char*);
SOAP_FMAC1 _ns1__SetFlatnessFruitRec_dt * SOAP_FMAC2 soap_instantiate__ns1__SetFlatnessFruitRec_dt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetFlatnessFruitRec_dt * soap_new__ns1__SetFlatnessFruitRec_dt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetFlatnessFruitRec_dt(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetFlatnessFruitRec_dt * soap_new_req__ns1__SetFlatnessFruitRec_dt(
	struct soap *soap)
{
	_ns1__SetFlatnessFruitRec_dt *_p = soap_new__ns1__SetFlatnessFruitRec_dt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetFlatnessFruitRec_dt * soap_new_set__ns1__SetFlatnessFruitRec_dt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__SetFlatnessFruitRec_dt *_p = soap_new__ns1__SetFlatnessFruitRec_dt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetFlatnessFruitRec_dt::__any = __any;
		_p->_ns1__SetFlatnessFruitRec_dt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__SetFlatnessFruitRec_dt(struct soap *soap, _ns1__SetFlatnessFruitRec_dt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec-dt", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec_dt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetFlatnessFruitRec_dt(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec_dt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec-dt", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec_dt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetFlatnessFruitRec_dt(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec_dt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec-dt", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec_dt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetFlatnessFruitRec_dt * SOAP_FMAC4 soap_get__ns1__SetFlatnessFruitRec_dt(struct soap*, _ns1__SetFlatnessFruitRec_dt *, const char*, const char*);

inline int soap_read__ns1__SetFlatnessFruitRec_dt(struct soap *soap, _ns1__SetFlatnessFruitRec_dt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetFlatnessFruitRec_dt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetFlatnessFruitRec_dt(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec_dt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetFlatnessFruitRec_dt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetFlatnessFruitRec_dt(struct soap *soap, _ns1__SetFlatnessFruitRec_dt *p)
{
	if (soap_read__ns1__SetFlatnessFruitRec_dt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingWeightResponse_GetShippingWeightResult_DEFINED
#define SOAP_TYPE__ns1__GetShippingWeightResponse_GetShippingWeightResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, const char*, int, const _ns1__GetShippingWeightResponse_GetShippingWeightResult *, const char*);
SOAP_FMAC3 _ns1__GetShippingWeightResponse_GetShippingWeightResult * SOAP_FMAC4 soap_in__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, const char*, _ns1__GetShippingWeightResponse_GetShippingWeightResult *, const char*);
SOAP_FMAC1 _ns1__GetShippingWeightResponse_GetShippingWeightResult * SOAP_FMAC2 soap_instantiate__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingWeightResponse_GetShippingWeightResult * soap_new__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingWeightResponse_GetShippingWeightResult * soap_new_req__ns1__GetShippingWeightResponse_GetShippingWeightResult(
	struct soap *soap)
{
	_ns1__GetShippingWeightResponse_GetShippingWeightResult *_p = soap_new__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingWeightResponse_GetShippingWeightResult * soap_new_set__ns1__GetShippingWeightResponse_GetShippingWeightResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__GetShippingWeightResponse_GetShippingWeightResult *_p = soap_new__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingWeightResponse_GetShippingWeightResult::__any = __any;
		_p->_ns1__GetShippingWeightResponse_GetShippingWeightResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, _ns1__GetShippingWeightResponse_GetShippingWeightResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse-GetShippingWeightResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse_GetShippingWeightResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse_GetShippingWeightResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse-GetShippingWeightResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse_GetShippingWeightResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse_GetShippingWeightResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse-GetShippingWeightResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse_GetShippingWeightResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingWeightResponse_GetShippingWeightResult * SOAP_FMAC4 soap_get__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, _ns1__GetShippingWeightResponse_GetShippingWeightResult *, const char*, const char*);

inline int soap_read__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, _ns1__GetShippingWeightResponse_GetShippingWeightResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse_GetShippingWeightResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap *soap, _ns1__GetShippingWeightResponse_GetShippingWeightResult *p)
{
	if (soap_read__ns1__GetShippingWeightResponse_GetShippingWeightResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingForBerthResponse_GetShippingForBerthResult_DEFINED
#define SOAP_TYPE__ns1__GetShippingForBerthResponse_GetShippingForBerthResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, const char*, int, const _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *, const char*);
SOAP_FMAC3 _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * SOAP_FMAC4 soap_in__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, const char*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *, const char*);
SOAP_FMAC1 _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * SOAP_FMAC2 soap_instantiate__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * soap_new__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * soap_new_req__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(
	struct soap *soap)
{
	_ns1__GetShippingForBerthResponse_GetShippingForBerthResult *_p = soap_new__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * soap_new_set__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__GetShippingForBerthResponse_GetShippingForBerthResult *_p = soap_new__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingForBerthResponse_GetShippingForBerthResult::__any = __any;
		_p->_ns1__GetShippingForBerthResponse_GetShippingForBerthResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse-GetShippingForBerthResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse_GetShippingForBerthResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse-GetShippingForBerthResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse_GetShippingForBerthResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse-GetShippingForBerthResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse_GetShippingForBerthResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingForBerthResponse_GetShippingForBerthResult * SOAP_FMAC4 soap_get__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *, const char*, const char*);

inline int soap_read__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap *soap, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *p)
{
	if (soap_read__ns1__GetShippingForBerthResponse_GetShippingForBerthResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingBerthListResponse_GetShippingBerthListResult_DEFINED
#define SOAP_TYPE__ns1__GetShippingBerthListResponse_GetShippingBerthListResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, const char*, int, const _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *, const char*);
SOAP_FMAC3 _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * SOAP_FMAC4 soap_in__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, const char*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *, const char*);
SOAP_FMAC1 _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * SOAP_FMAC2 soap_instantiate__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * soap_new__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * soap_new_req__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__GetShippingBerthListResponse_GetShippingBerthListResult *_p = soap_new__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingBerthListResponse_GetShippingBerthListResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * soap_new_set__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__GetShippingBerthListResponse_GetShippingBerthListResult *_p = soap_new__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingBerthListResponse_GetShippingBerthListResult::xsd__schema = xsd__schema;
		_p->_ns1__GetShippingBerthListResponse_GetShippingBerthListResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse-GetShippingBerthListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse_GetShippingBerthListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse-GetShippingBerthListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse_GetShippingBerthListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse-GetShippingBerthListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse_GetShippingBerthListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingBerthListResponse_GetShippingBerthListResult * SOAP_FMAC4 soap_get__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *, const char*, const char*);

inline int soap_read__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap *soap, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *p)
{
	if (soap_read__ns1__GetShippingBerthListResponse_GetShippingBerthListResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingListResponse_GetShippingListResult_DEFINED
#define SOAP_TYPE__ns1__GetShippingListResponse_GetShippingListResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingListResponse_GetShippingListResult(struct soap*, const char*, int, const _ns1__GetShippingListResponse_GetShippingListResult *, const char*);
SOAP_FMAC3 _ns1__GetShippingListResponse_GetShippingListResult * SOAP_FMAC4 soap_in__ns1__GetShippingListResponse_GetShippingListResult(struct soap*, const char*, _ns1__GetShippingListResponse_GetShippingListResult *, const char*);
SOAP_FMAC1 _ns1__GetShippingListResponse_GetShippingListResult * SOAP_FMAC2 soap_instantiate__ns1__GetShippingListResponse_GetShippingListResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingListResponse_GetShippingListResult * soap_new__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingListResponse_GetShippingListResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingListResponse_GetShippingListResult * soap_new_req__ns1__GetShippingListResponse_GetShippingListResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__GetShippingListResponse_GetShippingListResult *_p = soap_new__ns1__GetShippingListResponse_GetShippingListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingListResponse_GetShippingListResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__GetShippingListResponse_GetShippingListResult * soap_new_set__ns1__GetShippingListResponse_GetShippingListResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__GetShippingListResponse_GetShippingListResult *_p = soap_new__ns1__GetShippingListResponse_GetShippingListResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingListResponse_GetShippingListResult::xsd__schema = xsd__schema;
		_p->_ns1__GetShippingListResponse_GetShippingListResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, _ns1__GetShippingListResponse_GetShippingListResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse-GetShippingListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse_GetShippingListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, const char *URL, _ns1__GetShippingListResponse_GetShippingListResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse-GetShippingListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse_GetShippingListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, const char *URL, _ns1__GetShippingListResponse_GetShippingListResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse-GetShippingListResult", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse_GetShippingListResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingListResponse_GetShippingListResult * SOAP_FMAC4 soap_get__ns1__GetShippingListResponse_GetShippingListResult(struct soap*, _ns1__GetShippingListResponse_GetShippingListResult *, const char*, const char*);

inline int soap_read__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, _ns1__GetShippingListResponse_GetShippingListResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingListResponse_GetShippingListResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, const char *URL, _ns1__GetShippingListResponse_GetShippingListResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingListResponse_GetShippingListResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingListResponse_GetShippingListResult(struct soap *soap, _ns1__GetShippingListResponse_GetShippingListResult *p)
{
	if (soap_read__ns1__GetShippingListResponse_GetShippingListResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLotLinkForApple_assyDt_DEFINED
#define SOAP_TYPE__ns1__doLotLinkForApple_assyDt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLotLinkForApple_assyDt(struct soap*, const char*, int, const _ns1__doLotLinkForApple_assyDt *, const char*);
SOAP_FMAC3 _ns1__doLotLinkForApple_assyDt * SOAP_FMAC4 soap_in__ns1__doLotLinkForApple_assyDt(struct soap*, const char*, _ns1__doLotLinkForApple_assyDt *, const char*);
SOAP_FMAC1 _ns1__doLotLinkForApple_assyDt * SOAP_FMAC2 soap_instantiate__ns1__doLotLinkForApple_assyDt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLotLinkForApple_assyDt * soap_new__ns1__doLotLinkForApple_assyDt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLotLinkForApple_assyDt(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLotLinkForApple_assyDt * soap_new_req__ns1__doLotLinkForApple_assyDt(
	struct soap *soap)
{
	_ns1__doLotLinkForApple_assyDt *_p = soap_new__ns1__doLotLinkForApple_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLotLinkForApple_assyDt * soap_new_set__ns1__doLotLinkForApple_assyDt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__doLotLinkForApple_assyDt *_p = soap_new__ns1__doLotLinkForApple_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLotLinkForApple_assyDt::__any = __any;
		_p->_ns1__doLotLinkForApple_assyDt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__doLotLinkForApple_assyDt(struct soap *soap, _ns1__doLotLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLotLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doLotLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLotLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doLotLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLotLinkForApple_assyDt * SOAP_FMAC4 soap_get__ns1__doLotLinkForApple_assyDt(struct soap*, _ns1__doLotLinkForApple_assyDt *, const char*, const char*);

inline int soap_read__ns1__doLotLinkForApple_assyDt(struct soap *soap, _ns1__doLotLinkForApple_assyDt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLotLinkForApple_assyDt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLotLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doLotLinkForApple_assyDt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLotLinkForApple_assyDt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLotLinkForApple_assyDt(struct soap *soap, _ns1__doLotLinkForApple_assyDt *p)
{
	if (soap_read__ns1__doLotLinkForApple_assyDt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doSnLinkForApple_assyDt_DEFINED
#define SOAP_TYPE__ns1__doSnLinkForApple_assyDt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doSnLinkForApple_assyDt(struct soap*, const char*, int, const _ns1__doSnLinkForApple_assyDt *, const char*);
SOAP_FMAC3 _ns1__doSnLinkForApple_assyDt * SOAP_FMAC4 soap_in__ns1__doSnLinkForApple_assyDt(struct soap*, const char*, _ns1__doSnLinkForApple_assyDt *, const char*);
SOAP_FMAC1 _ns1__doSnLinkForApple_assyDt * SOAP_FMAC2 soap_instantiate__ns1__doSnLinkForApple_assyDt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doSnLinkForApple_assyDt * soap_new__ns1__doSnLinkForApple_assyDt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doSnLinkForApple_assyDt(soap, n, NULL, NULL, NULL);
}

inline _ns1__doSnLinkForApple_assyDt * soap_new_req__ns1__doSnLinkForApple_assyDt(
	struct soap *soap)
{
	_ns1__doSnLinkForApple_assyDt *_p = soap_new__ns1__doSnLinkForApple_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doSnLinkForApple_assyDt * soap_new_set__ns1__doSnLinkForApple_assyDt(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__doSnLinkForApple_assyDt *_p = soap_new__ns1__doSnLinkForApple_assyDt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doSnLinkForApple_assyDt::__any = __any;
		_p->_ns1__doSnLinkForApple_assyDt::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__doSnLinkForApple_assyDt(struct soap *soap, _ns1__doSnLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doSnLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doSnLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doSnLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doSnLinkForApple_assyDt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple-assyDt", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple_assyDt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doSnLinkForApple_assyDt * SOAP_FMAC4 soap_get__ns1__doSnLinkForApple_assyDt(struct soap*, _ns1__doSnLinkForApple_assyDt *, const char*, const char*);

inline int soap_read__ns1__doSnLinkForApple_assyDt(struct soap *soap, _ns1__doSnLinkForApple_assyDt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doSnLinkForApple_assyDt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doSnLinkForApple_assyDt(struct soap *soap, const char *URL, _ns1__doSnLinkForApple_assyDt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doSnLinkForApple_assyDt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doSnLinkForApple_assyDt(struct soap *soap, _ns1__doSnLinkForApple_assyDt *p)
{
	if (soap_read__ns1__doSnLinkForApple_assyDt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult_DEFINED
#define SOAP_TYPE__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, const char*, int, const _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *, const char*);
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * SOAP_FMAC4 soap_in__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, const char*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *, const char*);
SOAP_FMAC1 _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * SOAP_FMAC2 soap_instantiate__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * soap_new__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * soap_new_req__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *_p = soap_new__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * soap_new_set__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *_p = soap_new__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult::xsd__schema = xsd__schema;
		_p->_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse-GetAhsBarcodeResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse-GetAhsBarcodeResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse-GetAhsBarcodeResult", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult * SOAP_FMAC4 soap_get__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *, const char*, const char*);

inline int soap_read__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap *soap, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *p)
{
	if (soap_read__ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsMoResponse_DEFINED
#define SOAP_TYPE__ns1__GetAhsMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsMoResponse(struct soap*, const char*, int, const _ns1__GetAhsMoResponse *, const char*);
SOAP_FMAC3 _ns1__GetAhsMoResponse * SOAP_FMAC4 soap_in__ns1__GetAhsMoResponse(struct soap*, const char*, _ns1__GetAhsMoResponse *, const char*);
SOAP_FMAC1 _ns1__GetAhsMoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAhsMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsMoResponse * soap_new__ns1__GetAhsMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsMoResponse * soap_new_req__ns1__GetAhsMoResponse(
	struct soap *soap)
{
	_ns1__GetAhsMoResponse *_p = soap_new__ns1__GetAhsMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAhsMoResponse * soap_new_set__ns1__GetAhsMoResponse(
	struct soap *soap,
	_ns1__GetAhsMoResponse_GetAhsMoResult *GetAhsMoResult)
{
	_ns1__GetAhsMoResponse *_p = soap_new__ns1__GetAhsMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsMoResponse::GetAhsMoResult = GetAhsMoResult;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsMoResponse(struct soap *soap, _ns1__GetAhsMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsMoResponse(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsMoResponse(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMoResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsMoResponse * SOAP_FMAC4 soap_get__ns1__GetAhsMoResponse(struct soap*, _ns1__GetAhsMoResponse *, const char*, const char*);

inline int soap_read__ns1__GetAhsMoResponse(struct soap *soap, _ns1__GetAhsMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsMoResponse(struct soap *soap, const char *URL, _ns1__GetAhsMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsMoResponse(struct soap *soap, _ns1__GetAhsMoResponse *p)
{
	if (soap_read__ns1__GetAhsMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsMo_DEFINED
#define SOAP_TYPE__ns1__GetAhsMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsMo(struct soap*, const char*, int, const _ns1__GetAhsMo *, const char*);
SOAP_FMAC3 _ns1__GetAhsMo * SOAP_FMAC4 soap_in__ns1__GetAhsMo(struct soap*, const char*, _ns1__GetAhsMo *, const char*);
SOAP_FMAC1 _ns1__GetAhsMo * SOAP_FMAC2 soap_instantiate__ns1__GetAhsMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsMo * soap_new__ns1__GetAhsMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsMo * soap_new_req__ns1__GetAhsMo(
	struct soap *soap)
{
	_ns1__GetAhsMo *_p = soap_new__ns1__GetAhsMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAhsMo * soap_new_set__ns1__GetAhsMo(
	struct soap *soap,
	std::string *MoNumber,
	std::string *sDate,
	std::string *eDate,
	std::string *PrintType)
{
	_ns1__GetAhsMo *_p = soap_new__ns1__GetAhsMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsMo::MoNumber = MoNumber;
		_p->_ns1__GetAhsMo::sDate = sDate;
		_p->_ns1__GetAhsMo::eDate = eDate;
		_p->_ns1__GetAhsMo::PrintType = PrintType;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsMo(struct soap *soap, _ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMo", p->soap_type() == SOAP_TYPE__ns1__GetAhsMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsMo(struct soap *soap, const char *URL, _ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMo", p->soap_type() == SOAP_TYPE__ns1__GetAhsMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsMo(struct soap *soap, const char *URL, _ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsMo", p->soap_type() == SOAP_TYPE__ns1__GetAhsMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsMo * SOAP_FMAC4 soap_get__ns1__GetAhsMo(struct soap*, _ns1__GetAhsMo *, const char*, const char*);

inline int soap_read__ns1__GetAhsMo(struct soap *soap, _ns1__GetAhsMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsMo(struct soap *soap, const char *URL, _ns1__GetAhsMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsMo(struct soap *soap, _ns1__GetAhsMo *p)
{
	if (soap_read__ns1__GetAhsMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackWeigthResponse_DEFINED
#define SOAP_TYPE__ns1__GetPackWeigthResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackWeigthResponse(struct soap*, const char*, int, const _ns1__GetPackWeigthResponse *, const char*);
SOAP_FMAC3 _ns1__GetPackWeigthResponse * SOAP_FMAC4 soap_in__ns1__GetPackWeigthResponse(struct soap*, const char*, _ns1__GetPackWeigthResponse *, const char*);
SOAP_FMAC1 _ns1__GetPackWeigthResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPackWeigthResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackWeigthResponse * soap_new__ns1__GetPackWeigthResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackWeigthResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackWeigthResponse * soap_new_req__ns1__GetPackWeigthResponse(
	struct soap *soap)
{
	_ns1__GetPackWeigthResponse *_p = soap_new__ns1__GetPackWeigthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackWeigthResponse * soap_new_set__ns1__GetPackWeigthResponse(
	struct soap *soap,
	std::string *GetPackWeigthResult)
{
	_ns1__GetPackWeigthResponse *_p = soap_new__ns1__GetPackWeigthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackWeigthResponse::GetPackWeigthResult = GetPackWeigthResult;
	}
	return _p;
}

inline int soap_write__ns1__GetPackWeigthResponse(struct soap *soap, _ns1__GetPackWeigthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigthResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackWeigthResponse(struct soap *soap, const char *URL, _ns1__GetPackWeigthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigthResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackWeigthResponse(struct soap *soap, const char *URL, _ns1__GetPackWeigthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigthResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackWeigthResponse * SOAP_FMAC4 soap_get__ns1__GetPackWeigthResponse(struct soap*, _ns1__GetPackWeigthResponse *, const char*, const char*);

inline int soap_read__ns1__GetPackWeigthResponse(struct soap *soap, _ns1__GetPackWeigthResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackWeigthResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackWeigthResponse(struct soap *soap, const char *URL, _ns1__GetPackWeigthResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackWeigthResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackWeigthResponse(struct soap *soap, _ns1__GetPackWeigthResponse *p)
{
	if (soap_read__ns1__GetPackWeigthResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackWeigth_DEFINED
#define SOAP_TYPE__ns1__GetPackWeigth_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackWeigth(struct soap*, const char*, int, const _ns1__GetPackWeigth *, const char*);
SOAP_FMAC3 _ns1__GetPackWeigth * SOAP_FMAC4 soap_in__ns1__GetPackWeigth(struct soap*, const char*, _ns1__GetPackWeigth *, const char*);
SOAP_FMAC1 _ns1__GetPackWeigth * SOAP_FMAC2 soap_instantiate__ns1__GetPackWeigth(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackWeigth * soap_new__ns1__GetPackWeigth(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackWeigth(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackWeigth * soap_new_req__ns1__GetPackWeigth(
	struct soap *soap)
{
	_ns1__GetPackWeigth *_p = soap_new__ns1__GetPackWeigth(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackWeigth * soap_new_set__ns1__GetPackWeigth(
	struct soap *soap,
	std::string *CartonNo)
{
	_ns1__GetPackWeigth *_p = soap_new__ns1__GetPackWeigth(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackWeigth::CartonNo = CartonNo;
	}
	return _p;
}

inline int soap_write__ns1__GetPackWeigth(struct soap *soap, _ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigth", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackWeigth(struct soap *soap, const char *URL, _ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigth", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackWeigth(struct soap *soap, const char *URL, _ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackWeigth", p->soap_type() == SOAP_TYPE__ns1__GetPackWeigth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackWeigth * SOAP_FMAC4 soap_get__ns1__GetPackWeigth(struct soap*, _ns1__GetPackWeigth *, const char*, const char*);

inline int soap_read__ns1__GetPackWeigth(struct soap *soap, _ns1__GetPackWeigth *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackWeigth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackWeigth(struct soap *soap, const char *URL, _ns1__GetPackWeigth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackWeigth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackWeigth(struct soap *soap, _ns1__GetPackWeigth *p)
{
	if (soap_read__ns1__GetPackWeigth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackStationResponse_DEFINED
#define SOAP_TYPE__ns1__GetPackStationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackStationResponse(struct soap*, const char*, int, const _ns1__GetPackStationResponse *, const char*);
SOAP_FMAC3 _ns1__GetPackStationResponse * SOAP_FMAC4 soap_in__ns1__GetPackStationResponse(struct soap*, const char*, _ns1__GetPackStationResponse *, const char*);
SOAP_FMAC1 _ns1__GetPackStationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPackStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackStationResponse * soap_new__ns1__GetPackStationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackStationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackStationResponse * soap_new_req__ns1__GetPackStationResponse(
	struct soap *soap)
{
	_ns1__GetPackStationResponse *_p = soap_new__ns1__GetPackStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackStationResponse * soap_new_set__ns1__GetPackStationResponse(
	struct soap *soap,
	std::string *GetPackStationResult)
{
	_ns1__GetPackStationResponse *_p = soap_new__ns1__GetPackStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackStationResponse::GetPackStationResult = GetPackStationResult;
	}
	return _p;
}

inline int soap_write__ns1__GetPackStationResponse(struct soap *soap, _ns1__GetPackStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStationResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackStationResponse(struct soap *soap, const char *URL, _ns1__GetPackStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStationResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackStationResponse(struct soap *soap, const char *URL, _ns1__GetPackStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStationResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackStationResponse * SOAP_FMAC4 soap_get__ns1__GetPackStationResponse(struct soap*, _ns1__GetPackStationResponse *, const char*, const char*);

inline int soap_read__ns1__GetPackStationResponse(struct soap *soap, _ns1__GetPackStationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackStationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackStationResponse(struct soap *soap, const char *URL, _ns1__GetPackStationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackStationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackStationResponse(struct soap *soap, _ns1__GetPackStationResponse *p)
{
	if (soap_read__ns1__GetPackStationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackStation_DEFINED
#define SOAP_TYPE__ns1__GetPackStation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackStation(struct soap*, const char*, int, const _ns1__GetPackStation *, const char*);
SOAP_FMAC3 _ns1__GetPackStation * SOAP_FMAC4 soap_in__ns1__GetPackStation(struct soap*, const char*, _ns1__GetPackStation *, const char*);
SOAP_FMAC1 _ns1__GetPackStation * SOAP_FMAC2 soap_instantiate__ns1__GetPackStation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackStation * soap_new__ns1__GetPackStation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackStation(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackStation * soap_new_req__ns1__GetPackStation(
	struct soap *soap)
{
	_ns1__GetPackStation *_p = soap_new__ns1__GetPackStation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackStation * soap_new_set__ns1__GetPackStation(
	struct soap *soap,
	std::string *CartonNo)
{
	_ns1__GetPackStation *_p = soap_new__ns1__GetPackStation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackStation::CartonNo = CartonNo;
	}
	return _p;
}

inline int soap_write__ns1__GetPackStation(struct soap *soap, _ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStation", p->soap_type() == SOAP_TYPE__ns1__GetPackStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackStation(struct soap *soap, const char *URL, _ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStation", p->soap_type() == SOAP_TYPE__ns1__GetPackStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackStation(struct soap *soap, const char *URL, _ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackStation", p->soap_type() == SOAP_TYPE__ns1__GetPackStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackStation * SOAP_FMAC4 soap_get__ns1__GetPackStation(struct soap*, _ns1__GetPackStation *, const char*, const char*);

inline int soap_read__ns1__GetPackStation(struct soap *soap, _ns1__GetPackStation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackStation(struct soap *soap, const char *URL, _ns1__GetPackStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackStation(struct soap *soap, _ns1__GetPackStation *p)
{
	if (soap_read__ns1__GetPackStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetPallentForWMSResponse_DEFINED
#define SOAP_TYPE__ns1__SetPallentForWMSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetPallentForWMSResponse(struct soap*, const char*, int, const _ns1__SetPallentForWMSResponse *, const char*);
SOAP_FMAC3 _ns1__SetPallentForWMSResponse * SOAP_FMAC4 soap_in__ns1__SetPallentForWMSResponse(struct soap*, const char*, _ns1__SetPallentForWMSResponse *, const char*);
SOAP_FMAC1 _ns1__SetPallentForWMSResponse * SOAP_FMAC2 soap_instantiate__ns1__SetPallentForWMSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetPallentForWMSResponse * soap_new__ns1__SetPallentForWMSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetPallentForWMSResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetPallentForWMSResponse * soap_new_req__ns1__SetPallentForWMSResponse(
	struct soap *soap)
{
	_ns1__SetPallentForWMSResponse *_p = soap_new__ns1__SetPallentForWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetPallentForWMSResponse * soap_new_set__ns1__SetPallentForWMSResponse(
	struct soap *soap,
	std::string *SetPallentForWMSResult)
{
	_ns1__SetPallentForWMSResponse *_p = soap_new__ns1__SetPallentForWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPallentForWMSResponse::SetPallentForWMSResult = SetPallentForWMSResult;
	}
	return _p;
}

inline int soap_write__ns1__SetPallentForWMSResponse(struct soap *soap, _ns1__SetPallentForWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMSResponse", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetPallentForWMSResponse(struct soap *soap, const char *URL, _ns1__SetPallentForWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMSResponse", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetPallentForWMSResponse(struct soap *soap, const char *URL, _ns1__SetPallentForWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMSResponse", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetPallentForWMSResponse * SOAP_FMAC4 soap_get__ns1__SetPallentForWMSResponse(struct soap*, _ns1__SetPallentForWMSResponse *, const char*, const char*);

inline int soap_read__ns1__SetPallentForWMSResponse(struct soap *soap, _ns1__SetPallentForWMSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetPallentForWMSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetPallentForWMSResponse(struct soap *soap, const char *URL, _ns1__SetPallentForWMSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetPallentForWMSResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetPallentForWMSResponse(struct soap *soap, _ns1__SetPallentForWMSResponse *p)
{
	if (soap_read__ns1__SetPallentForWMSResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetPallentForWMS_DEFINED
#define SOAP_TYPE__ns1__SetPallentForWMS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetPallentForWMS(struct soap*, const char*, int, const _ns1__SetPallentForWMS *, const char*);
SOAP_FMAC3 _ns1__SetPallentForWMS * SOAP_FMAC4 soap_in__ns1__SetPallentForWMS(struct soap*, const char*, _ns1__SetPallentForWMS *, const char*);
SOAP_FMAC1 _ns1__SetPallentForWMS * SOAP_FMAC2 soap_instantiate__ns1__SetPallentForWMS(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetPallentForWMS * soap_new__ns1__SetPallentForWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetPallentForWMS(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetPallentForWMS * soap_new_req__ns1__SetPallentForWMS(
	struct soap *soap)
{
	_ns1__SetPallentForWMS *_p = soap_new__ns1__SetPallentForWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetPallentForWMS * soap_new_set__ns1__SetPallentForWMS(
	struct soap *soap,
	std::string *OldPallentNo,
	std::string *PallentNo,
	std::string *CartonNo)
{
	_ns1__SetPallentForWMS *_p = soap_new__ns1__SetPallentForWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPallentForWMS::OldPallentNo = OldPallentNo;
		_p->_ns1__SetPallentForWMS::PallentNo = PallentNo;
		_p->_ns1__SetPallentForWMS::CartonNo = CartonNo;
	}
	return _p;
}

inline int soap_write__ns1__SetPallentForWMS(struct soap *soap, _ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMS", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetPallentForWMS(struct soap *soap, const char *URL, _ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMS", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetPallentForWMS(struct soap *soap, const char *URL, _ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPallentForWMS", p->soap_type() == SOAP_TYPE__ns1__SetPallentForWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetPallentForWMS * SOAP_FMAC4 soap_get__ns1__SetPallentForWMS(struct soap*, _ns1__SetPallentForWMS *, const char*, const char*);

inline int soap_read__ns1__SetPallentForWMS(struct soap *soap, _ns1__SetPallentForWMS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetPallentForWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetPallentForWMS(struct soap *soap, const char *URL, _ns1__SetPallentForWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetPallentForWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetPallentForWMS(struct soap *soap, _ns1__SetPallentForWMS *p)
{
	if (soap_read__ns1__SetPallentForWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPallentToWMSResponse_DEFINED
#define SOAP_TYPE__ns1__GetPallentToWMSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPallentToWMSResponse(struct soap*, const char*, int, const _ns1__GetPallentToWMSResponse *, const char*);
SOAP_FMAC3 _ns1__GetPallentToWMSResponse * SOAP_FMAC4 soap_in__ns1__GetPallentToWMSResponse(struct soap*, const char*, _ns1__GetPallentToWMSResponse *, const char*);
SOAP_FMAC1 _ns1__GetPallentToWMSResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPallentToWMSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPallentToWMSResponse * soap_new__ns1__GetPallentToWMSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPallentToWMSResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPallentToWMSResponse * soap_new_req__ns1__GetPallentToWMSResponse(
	struct soap *soap)
{
	_ns1__GetPallentToWMSResponse *_p = soap_new__ns1__GetPallentToWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPallentToWMSResponse * soap_new_set__ns1__GetPallentToWMSResponse(
	struct soap *soap,
	_ns1__GetPallentToWMSResponse_GetPallentToWMSResult *GetPallentToWMSResult)
{
	_ns1__GetPallentToWMSResponse *_p = soap_new__ns1__GetPallentToWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPallentToWMSResponse::GetPallentToWMSResult = GetPallentToWMSResult;
	}
	return _p;
}

inline int soap_write__ns1__GetPallentToWMSResponse(struct soap *soap, _ns1__GetPallentToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPallentToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPallentToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPallentToWMSResponse * SOAP_FMAC4 soap_get__ns1__GetPallentToWMSResponse(struct soap*, _ns1__GetPallentToWMSResponse *, const char*, const char*);

inline int soap_read__ns1__GetPallentToWMSResponse(struct soap *soap, _ns1__GetPallentToWMSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPallentToWMSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPallentToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPallentToWMSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPallentToWMSResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPallentToWMSResponse(struct soap *soap, _ns1__GetPallentToWMSResponse *p)
{
	if (soap_read__ns1__GetPallentToWMSResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPallentToWMS_DEFINED
#define SOAP_TYPE__ns1__GetPallentToWMS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPallentToWMS(struct soap*, const char*, int, const _ns1__GetPallentToWMS *, const char*);
SOAP_FMAC3 _ns1__GetPallentToWMS * SOAP_FMAC4 soap_in__ns1__GetPallentToWMS(struct soap*, const char*, _ns1__GetPallentToWMS *, const char*);
SOAP_FMAC1 _ns1__GetPallentToWMS * SOAP_FMAC2 soap_instantiate__ns1__GetPallentToWMS(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPallentToWMS * soap_new__ns1__GetPallentToWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPallentToWMS(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPallentToWMS * soap_new_req__ns1__GetPallentToWMS(
	struct soap *soap)
{
	_ns1__GetPallentToWMS *_p = soap_new__ns1__GetPallentToWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPallentToWMS * soap_new_set__ns1__GetPallentToWMS(
	struct soap *soap,
	std::string *PallentNo)
{
	_ns1__GetPallentToWMS *_p = soap_new__ns1__GetPallentToWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPallentToWMS::PallentNo = PallentNo;
	}
	return _p;
}

inline int soap_write__ns1__GetPallentToWMS(struct soap *soap, _ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPallentToWMS(struct soap *soap, const char *URL, _ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPallentToWMS(struct soap *soap, const char *URL, _ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPallentToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPallentToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPallentToWMS * SOAP_FMAC4 soap_get__ns1__GetPallentToWMS(struct soap*, _ns1__GetPallentToWMS *, const char*, const char*);

inline int soap_read__ns1__GetPallentToWMS(struct soap *soap, _ns1__GetPallentToWMS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPallentToWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPallentToWMS(struct soap *soap, const char *URL, _ns1__GetPallentToWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPallentToWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPallentToWMS(struct soap *soap, _ns1__GetPallentToWMS *p)
{
	if (soap_read__ns1__GetPallentToWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackToWMSResponse_DEFINED
#define SOAP_TYPE__ns1__GetPackToWMSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackToWMSResponse(struct soap*, const char*, int, const _ns1__GetPackToWMSResponse *, const char*);
SOAP_FMAC3 _ns1__GetPackToWMSResponse * SOAP_FMAC4 soap_in__ns1__GetPackToWMSResponse(struct soap*, const char*, _ns1__GetPackToWMSResponse *, const char*);
SOAP_FMAC1 _ns1__GetPackToWMSResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPackToWMSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackToWMSResponse * soap_new__ns1__GetPackToWMSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackToWMSResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackToWMSResponse * soap_new_req__ns1__GetPackToWMSResponse(
	struct soap *soap)
{
	_ns1__GetPackToWMSResponse *_p = soap_new__ns1__GetPackToWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackToWMSResponse * soap_new_set__ns1__GetPackToWMSResponse(
	struct soap *soap,
	std::string *GetPackToWMSResult)
{
	_ns1__GetPackToWMSResponse *_p = soap_new__ns1__GetPackToWMSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackToWMSResponse::GetPackToWMSResult = GetPackToWMSResult;
	}
	return _p;
}

inline int soap_write__ns1__GetPackToWMSResponse(struct soap *soap, _ns1__GetPackToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPackToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPackToWMSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMSResponse", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackToWMSResponse * SOAP_FMAC4 soap_get__ns1__GetPackToWMSResponse(struct soap*, _ns1__GetPackToWMSResponse *, const char*, const char*);

inline int soap_read__ns1__GetPackToWMSResponse(struct soap *soap, _ns1__GetPackToWMSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackToWMSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackToWMSResponse(struct soap *soap, const char *URL, _ns1__GetPackToWMSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackToWMSResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackToWMSResponse(struct soap *soap, _ns1__GetPackToWMSResponse *p)
{
	if (soap_read__ns1__GetPackToWMSResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPackToWMS_DEFINED
#define SOAP_TYPE__ns1__GetPackToWMS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPackToWMS(struct soap*, const char*, int, const _ns1__GetPackToWMS *, const char*);
SOAP_FMAC3 _ns1__GetPackToWMS * SOAP_FMAC4 soap_in__ns1__GetPackToWMS(struct soap*, const char*, _ns1__GetPackToWMS *, const char*);
SOAP_FMAC1 _ns1__GetPackToWMS * SOAP_FMAC2 soap_instantiate__ns1__GetPackToWMS(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPackToWMS * soap_new__ns1__GetPackToWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPackToWMS(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPackToWMS * soap_new_req__ns1__GetPackToWMS(
	struct soap *soap)
{
	_ns1__GetPackToWMS *_p = soap_new__ns1__GetPackToWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPackToWMS * soap_new_set__ns1__GetPackToWMS(
	struct soap *soap,
	std::string *CartonNo)
{
	_ns1__GetPackToWMS *_p = soap_new__ns1__GetPackToWMS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPackToWMS::CartonNo = CartonNo;
	}
	return _p;
}

inline int soap_write__ns1__GetPackToWMS(struct soap *soap, _ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPackToWMS(struct soap *soap, const char *URL, _ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPackToWMS(struct soap *soap, const char *URL, _ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPackToWMS", p->soap_type() == SOAP_TYPE__ns1__GetPackToWMS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPackToWMS * SOAP_FMAC4 soap_get__ns1__GetPackToWMS(struct soap*, _ns1__GetPackToWMS *, const char*, const char*);

inline int soap_read__ns1__GetPackToWMS(struct soap *soap, _ns1__GetPackToWMS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPackToWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPackToWMS(struct soap *soap, const char *URL, _ns1__GetPackToWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPackToWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPackToWMS(struct soap *soap, _ns1__GetPackToWMS *p)
{
	if (soap_read__ns1__GetPackToWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWeightSetResponse_DEFINED
#define SOAP_TYPE__ns1__GetWeightSetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWeightSetResponse(struct soap*, const char*, int, const _ns1__GetWeightSetResponse *, const char*);
SOAP_FMAC3 _ns1__GetWeightSetResponse * SOAP_FMAC4 soap_in__ns1__GetWeightSetResponse(struct soap*, const char*, _ns1__GetWeightSetResponse *, const char*);
SOAP_FMAC1 _ns1__GetWeightSetResponse * SOAP_FMAC2 soap_instantiate__ns1__GetWeightSetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWeightSetResponse * soap_new__ns1__GetWeightSetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWeightSetResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWeightSetResponse * soap_new_req__ns1__GetWeightSetResponse(
	struct soap *soap)
{
	_ns1__GetWeightSetResponse *_p = soap_new__ns1__GetWeightSetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWeightSetResponse * soap_new_set__ns1__GetWeightSetResponse(
	struct soap *soap,
	std::string *GetWeightSetResult)
{
	_ns1__GetWeightSetResponse *_p = soap_new__ns1__GetWeightSetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWeightSetResponse::GetWeightSetResult = GetWeightSetResult;
	}
	return _p;
}

inline int soap_write__ns1__GetWeightSetResponse(struct soap *soap, _ns1__GetWeightSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSetResponse", p->soap_type() == SOAP_TYPE__ns1__GetWeightSetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWeightSetResponse(struct soap *soap, const char *URL, _ns1__GetWeightSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSetResponse", p->soap_type() == SOAP_TYPE__ns1__GetWeightSetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWeightSetResponse(struct soap *soap, const char *URL, _ns1__GetWeightSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSetResponse", p->soap_type() == SOAP_TYPE__ns1__GetWeightSetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWeightSetResponse * SOAP_FMAC4 soap_get__ns1__GetWeightSetResponse(struct soap*, _ns1__GetWeightSetResponse *, const char*, const char*);

inline int soap_read__ns1__GetWeightSetResponse(struct soap *soap, _ns1__GetWeightSetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetWeightSetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWeightSetResponse(struct soap *soap, const char *URL, _ns1__GetWeightSetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetWeightSetResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetWeightSetResponse(struct soap *soap, _ns1__GetWeightSetResponse *p)
{
	if (soap_read__ns1__GetWeightSetResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWeightSet_DEFINED
#define SOAP_TYPE__ns1__GetWeightSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWeightSet(struct soap*, const char*, int, const _ns1__GetWeightSet *, const char*);
SOAP_FMAC3 _ns1__GetWeightSet * SOAP_FMAC4 soap_in__ns1__GetWeightSet(struct soap*, const char*, _ns1__GetWeightSet *, const char*);
SOAP_FMAC1 _ns1__GetWeightSet * SOAP_FMAC2 soap_instantiate__ns1__GetWeightSet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWeightSet * soap_new__ns1__GetWeightSet(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWeightSet(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWeightSet * soap_new_req__ns1__GetWeightSet(
	struct soap *soap)
{
	_ns1__GetWeightSet *_p = soap_new__ns1__GetWeightSet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWeightSet * soap_new_set__ns1__GetWeightSet(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetWeightSet *_p = soap_new__ns1__GetWeightSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWeightSet::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetWeightSet(struct soap *soap, _ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSet", p->soap_type() == SOAP_TYPE__ns1__GetWeightSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWeightSet(struct soap *soap, const char *URL, _ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSet", p->soap_type() == SOAP_TYPE__ns1__GetWeightSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWeightSet(struct soap *soap, const char *URL, _ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWeightSet", p->soap_type() == SOAP_TYPE__ns1__GetWeightSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWeightSet * SOAP_FMAC4 soap_get__ns1__GetWeightSet(struct soap*, _ns1__GetWeightSet *, const char*, const char*);

inline int soap_read__ns1__GetWeightSet(struct soap *soap, _ns1__GetWeightSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetWeightSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWeightSet(struct soap *soap, const char *URL, _ns1__GetWeightSet *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetWeightSet(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetWeightSet(struct soap *soap, _ns1__GetWeightSet *p)
{
	if (soap_read__ns1__GetWeightSet(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelLnkSNResponse_DEFINED
#define SOAP_TYPE__ns1__CancelLnkSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelLnkSNResponse(struct soap*, const char*, int, const _ns1__CancelLnkSNResponse *, const char*);
SOAP_FMAC3 _ns1__CancelLnkSNResponse * SOAP_FMAC4 soap_in__ns1__CancelLnkSNResponse(struct soap*, const char*, _ns1__CancelLnkSNResponse *, const char*);
SOAP_FMAC1 _ns1__CancelLnkSNResponse * SOAP_FMAC2 soap_instantiate__ns1__CancelLnkSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelLnkSNResponse * soap_new__ns1__CancelLnkSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelLnkSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelLnkSNResponse * soap_new_req__ns1__CancelLnkSNResponse(
	struct soap *soap)
{
	_ns1__CancelLnkSNResponse *_p = soap_new__ns1__CancelLnkSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelLnkSNResponse * soap_new_set__ns1__CancelLnkSNResponse(
	struct soap *soap,
	std::string *CancelLnkSNResult)
{
	_ns1__CancelLnkSNResponse *_p = soap_new__ns1__CancelLnkSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelLnkSNResponse::CancelLnkSNResult = CancelLnkSNResult;
	}
	return _p;
}

inline int soap_write__ns1__CancelLnkSNResponse(struct soap *soap, _ns1__CancelLnkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelLnkSNResponse(struct soap *soap, const char *URL, _ns1__CancelLnkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelLnkSNResponse(struct soap *soap, const char *URL, _ns1__CancelLnkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelLnkSNResponse * SOAP_FMAC4 soap_get__ns1__CancelLnkSNResponse(struct soap*, _ns1__CancelLnkSNResponse *, const char*, const char*);

inline int soap_read__ns1__CancelLnkSNResponse(struct soap *soap, _ns1__CancelLnkSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelLnkSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelLnkSNResponse(struct soap *soap, const char *URL, _ns1__CancelLnkSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelLnkSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelLnkSNResponse(struct soap *soap, _ns1__CancelLnkSNResponse *p)
{
	if (soap_read__ns1__CancelLnkSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelLnkSN_DEFINED
#define SOAP_TYPE__ns1__CancelLnkSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelLnkSN(struct soap*, const char*, int, const _ns1__CancelLnkSN *, const char*);
SOAP_FMAC3 _ns1__CancelLnkSN * SOAP_FMAC4 soap_in__ns1__CancelLnkSN(struct soap*, const char*, _ns1__CancelLnkSN *, const char*);
SOAP_FMAC1 _ns1__CancelLnkSN * SOAP_FMAC2 soap_instantiate__ns1__CancelLnkSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelLnkSN * soap_new__ns1__CancelLnkSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelLnkSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelLnkSN * soap_new_req__ns1__CancelLnkSN(
	struct soap *soap)
{
	_ns1__CancelLnkSN *_p = soap_new__ns1__CancelLnkSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelLnkSN * soap_new_set__ns1__CancelLnkSN(
	struct soap *soap,
	std::string *ZJSN)
{
	_ns1__CancelLnkSN *_p = soap_new__ns1__CancelLnkSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelLnkSN::ZJSN = ZJSN;
	}
	return _p;
}

inline int soap_write__ns1__CancelLnkSN(struct soap *soap, _ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSN", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelLnkSN(struct soap *soap, const char *URL, _ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSN", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelLnkSN(struct soap *soap, const char *URL, _ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelLnkSN", p->soap_type() == SOAP_TYPE__ns1__CancelLnkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelLnkSN * SOAP_FMAC4 soap_get__ns1__CancelLnkSN(struct soap*, _ns1__CancelLnkSN *, const char*, const char*);

inline int soap_read__ns1__CancelLnkSN(struct soap *soap, _ns1__CancelLnkSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelLnkSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelLnkSN(struct soap *soap, const char *URL, _ns1__CancelLnkSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelLnkSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelLnkSN(struct soap *soap, _ns1__CancelLnkSN *p)
{
	if (soap_read__ns1__CancelLnkSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelGrillSNResponse_DEFINED
#define SOAP_TYPE__ns1__CancelGrillSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelGrillSNResponse(struct soap*, const char*, int, const _ns1__CancelGrillSNResponse *, const char*);
SOAP_FMAC3 _ns1__CancelGrillSNResponse * SOAP_FMAC4 soap_in__ns1__CancelGrillSNResponse(struct soap*, const char*, _ns1__CancelGrillSNResponse *, const char*);
SOAP_FMAC1 _ns1__CancelGrillSNResponse * SOAP_FMAC2 soap_instantiate__ns1__CancelGrillSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelGrillSNResponse * soap_new__ns1__CancelGrillSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelGrillSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelGrillSNResponse * soap_new_req__ns1__CancelGrillSNResponse(
	struct soap *soap)
{
	_ns1__CancelGrillSNResponse *_p = soap_new__ns1__CancelGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelGrillSNResponse * soap_new_set__ns1__CancelGrillSNResponse(
	struct soap *soap,
	std::string *CancelGrillSNResult)
{
	_ns1__CancelGrillSNResponse *_p = soap_new__ns1__CancelGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelGrillSNResponse::CancelGrillSNResult = CancelGrillSNResult;
	}
	return _p;
}

inline int soap_write__ns1__CancelGrillSNResponse(struct soap *soap, _ns1__CancelGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelGrillSNResponse(struct soap *soap, const char *URL, _ns1__CancelGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelGrillSNResponse(struct soap *soap, const char *URL, _ns1__CancelGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelGrillSNResponse * SOAP_FMAC4 soap_get__ns1__CancelGrillSNResponse(struct soap*, _ns1__CancelGrillSNResponse *, const char*, const char*);

inline int soap_read__ns1__CancelGrillSNResponse(struct soap *soap, _ns1__CancelGrillSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelGrillSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelGrillSNResponse(struct soap *soap, const char *URL, _ns1__CancelGrillSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelGrillSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelGrillSNResponse(struct soap *soap, _ns1__CancelGrillSNResponse *p)
{
	if (soap_read__ns1__CancelGrillSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelGrillSN_DEFINED
#define SOAP_TYPE__ns1__CancelGrillSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelGrillSN(struct soap*, const char*, int, const _ns1__CancelGrillSN *, const char*);
SOAP_FMAC3 _ns1__CancelGrillSN * SOAP_FMAC4 soap_in__ns1__CancelGrillSN(struct soap*, const char*, _ns1__CancelGrillSN *, const char*);
SOAP_FMAC1 _ns1__CancelGrillSN * SOAP_FMAC2 soap_instantiate__ns1__CancelGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelGrillSN * soap_new__ns1__CancelGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelGrillSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelGrillSN * soap_new_req__ns1__CancelGrillSN(
	struct soap *soap)
{
	_ns1__CancelGrillSN *_p = soap_new__ns1__CancelGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelGrillSN * soap_new_set__ns1__CancelGrillSN(
	struct soap *soap,
	std::string *GrillSN)
{
	_ns1__CancelGrillSN *_p = soap_new__ns1__CancelGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelGrillSN::GrillSN = GrillSN;
	}
	return _p;
}

inline int soap_write__ns1__CancelGrillSN(struct soap *soap, _ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSN", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelGrillSN(struct soap *soap, const char *URL, _ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSN", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelGrillSN(struct soap *soap, const char *URL, _ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelGrillSN", p->soap_type() == SOAP_TYPE__ns1__CancelGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelGrillSN * SOAP_FMAC4 soap_get__ns1__CancelGrillSN(struct soap*, _ns1__CancelGrillSN *, const char*, const char*);

inline int soap_read__ns1__CancelGrillSN(struct soap *soap, _ns1__CancelGrillSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelGrillSN(struct soap *soap, const char *URL, _ns1__CancelGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelGrillSN(struct soap *soap, _ns1__CancelGrillSN *p)
{
	if (soap_read__ns1__CancelGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OutGrillBySNResponse_DEFINED
#define SOAP_TYPE__ns1__OutGrillBySNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutGrillBySNResponse(struct soap*, const char*, int, const _ns1__OutGrillBySNResponse *, const char*);
SOAP_FMAC3 _ns1__OutGrillBySNResponse * SOAP_FMAC4 soap_in__ns1__OutGrillBySNResponse(struct soap*, const char*, _ns1__OutGrillBySNResponse *, const char*);
SOAP_FMAC1 _ns1__OutGrillBySNResponse * SOAP_FMAC2 soap_instantiate__ns1__OutGrillBySNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutGrillBySNResponse * soap_new__ns1__OutGrillBySNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutGrillBySNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutGrillBySNResponse * soap_new_req__ns1__OutGrillBySNResponse(
	struct soap *soap)
{
	_ns1__OutGrillBySNResponse *_p = soap_new__ns1__OutGrillBySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutGrillBySNResponse * soap_new_set__ns1__OutGrillBySNResponse(
	struct soap *soap,
	std::string *OutGrillBySNResult)
{
	_ns1__OutGrillBySNResponse *_p = soap_new__ns1__OutGrillBySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutGrillBySNResponse::OutGrillBySNResult = OutGrillBySNResult;
	}
	return _p;
}

inline int soap_write__ns1__OutGrillBySNResponse(struct soap *soap, _ns1__OutGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutGrillBySNResponse(struct soap *soap, const char *URL, _ns1__OutGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutGrillBySNResponse(struct soap *soap, const char *URL, _ns1__OutGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutGrillBySNResponse * SOAP_FMAC4 soap_get__ns1__OutGrillBySNResponse(struct soap*, _ns1__OutGrillBySNResponse *, const char*, const char*);

inline int soap_read__ns1__OutGrillBySNResponse(struct soap *soap, _ns1__OutGrillBySNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OutGrillBySNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutGrillBySNResponse(struct soap *soap, const char *URL, _ns1__OutGrillBySNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OutGrillBySNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OutGrillBySNResponse(struct soap *soap, _ns1__OutGrillBySNResponse *p)
{
	if (soap_read__ns1__OutGrillBySNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OutGrillBySN_DEFINED
#define SOAP_TYPE__ns1__OutGrillBySN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutGrillBySN(struct soap*, const char*, int, const _ns1__OutGrillBySN *, const char*);
SOAP_FMAC3 _ns1__OutGrillBySN * SOAP_FMAC4 soap_in__ns1__OutGrillBySN(struct soap*, const char*, _ns1__OutGrillBySN *, const char*);
SOAP_FMAC1 _ns1__OutGrillBySN * SOAP_FMAC2 soap_instantiate__ns1__OutGrillBySN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutGrillBySN * soap_new__ns1__OutGrillBySN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutGrillBySN(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutGrillBySN * soap_new_req__ns1__OutGrillBySN(
	struct soap *soap)
{
	_ns1__OutGrillBySN *_p = soap_new__ns1__OutGrillBySN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutGrillBySN * soap_new_set__ns1__OutGrillBySN(
	struct soap *soap,
	std::string *Emp,
	std::string *GrillSN,
	std::string *StationNumber)
{
	_ns1__OutGrillBySN *_p = soap_new__ns1__OutGrillBySN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutGrillBySN::Emp = Emp;
		_p->_ns1__OutGrillBySN::GrillSN = GrillSN;
		_p->_ns1__OutGrillBySN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__OutGrillBySN(struct soap *soap, _ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySN", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutGrillBySN(struct soap *soap, const char *URL, _ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySN", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutGrillBySN(struct soap *soap, const char *URL, _ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutGrillBySN", p->soap_type() == SOAP_TYPE__ns1__OutGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutGrillBySN * SOAP_FMAC4 soap_get__ns1__OutGrillBySN(struct soap*, _ns1__OutGrillBySN *, const char*, const char*);

inline int soap_read__ns1__OutGrillBySN(struct soap *soap, _ns1__OutGrillBySN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OutGrillBySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutGrillBySN(struct soap *soap, const char *URL, _ns1__OutGrillBySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OutGrillBySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OutGrillBySN(struct soap *soap, _ns1__OutGrillBySN *p)
{
	if (soap_read__ns1__OutGrillBySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetGrillTimeResponse_DEFINED
#define SOAP_TYPE__ns1__GetGrillTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGrillTimeResponse(struct soap*, const char*, int, const _ns1__GetGrillTimeResponse *, const char*);
SOAP_FMAC3 _ns1__GetGrillTimeResponse * SOAP_FMAC4 soap_in__ns1__GetGrillTimeResponse(struct soap*, const char*, _ns1__GetGrillTimeResponse *, const char*);
SOAP_FMAC1 _ns1__GetGrillTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGrillTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGrillTimeResponse * soap_new__ns1__GetGrillTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetGrillTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetGrillTimeResponse * soap_new_req__ns1__GetGrillTimeResponse(
	struct soap *soap)
{
	_ns1__GetGrillTimeResponse *_p = soap_new__ns1__GetGrillTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetGrillTimeResponse * soap_new_set__ns1__GetGrillTimeResponse(
	struct soap *soap,
	std::string *GetGrillTimeResult)
{
	_ns1__GetGrillTimeResponse *_p = soap_new__ns1__GetGrillTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetGrillTimeResponse::GetGrillTimeResult = GetGrillTimeResult;
	}
	return _p;
}

inline int soap_write__ns1__GetGrillTimeResponse(struct soap *soap, _ns1__GetGrillTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTimeResponse", p->soap_type() == SOAP_TYPE__ns1__GetGrillTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetGrillTimeResponse(struct soap *soap, const char *URL, _ns1__GetGrillTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTimeResponse", p->soap_type() == SOAP_TYPE__ns1__GetGrillTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetGrillTimeResponse(struct soap *soap, const char *URL, _ns1__GetGrillTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTimeResponse", p->soap_type() == SOAP_TYPE__ns1__GetGrillTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetGrillTimeResponse * SOAP_FMAC4 soap_get__ns1__GetGrillTimeResponse(struct soap*, _ns1__GetGrillTimeResponse *, const char*, const char*);

inline int soap_read__ns1__GetGrillTimeResponse(struct soap *soap, _ns1__GetGrillTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetGrillTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetGrillTimeResponse(struct soap *soap, const char *URL, _ns1__GetGrillTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetGrillTimeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetGrillTimeResponse(struct soap *soap, _ns1__GetGrillTimeResponse *p)
{
	if (soap_read__ns1__GetGrillTimeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetGrillTime_DEFINED
#define SOAP_TYPE__ns1__GetGrillTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGrillTime(struct soap*, const char*, int, const _ns1__GetGrillTime *, const char*);
SOAP_FMAC3 _ns1__GetGrillTime * SOAP_FMAC4 soap_in__ns1__GetGrillTime(struct soap*, const char*, _ns1__GetGrillTime *, const char*);
SOAP_FMAC1 _ns1__GetGrillTime * SOAP_FMAC2 soap_instantiate__ns1__GetGrillTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGrillTime * soap_new__ns1__GetGrillTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetGrillTime(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetGrillTime * soap_new_req__ns1__GetGrillTime(
	struct soap *soap)
{
	_ns1__GetGrillTime *_p = soap_new__ns1__GetGrillTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetGrillTime * soap_new_set__ns1__GetGrillTime(
	struct soap *soap)
{
	_ns1__GetGrillTime *_p = soap_new__ns1__GetGrillTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetGrillTime(struct soap *soap, _ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTime", p->soap_type() == SOAP_TYPE__ns1__GetGrillTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetGrillTime(struct soap *soap, const char *URL, _ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTime", p->soap_type() == SOAP_TYPE__ns1__GetGrillTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetGrillTime(struct soap *soap, const char *URL, _ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetGrillTime", p->soap_type() == SOAP_TYPE__ns1__GetGrillTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetGrillTime * SOAP_FMAC4 soap_get__ns1__GetGrillTime(struct soap*, _ns1__GetGrillTime *, const char*, const char*);

inline int soap_read__ns1__GetGrillTime(struct soap *soap, _ns1__GetGrillTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetGrillTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetGrillTime(struct soap *soap, const char *URL, _ns1__GetGrillTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetGrillTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetGrillTime(struct soap *soap, _ns1__GetGrillTime *p)
{
	if (soap_read__ns1__GetGrillTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsGrillBySNResponse_DEFINED
#define SOAP_TYPE__ns1__InsGrillBySNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsGrillBySNResponse(struct soap*, const char*, int, const _ns1__InsGrillBySNResponse *, const char*);
SOAP_FMAC3 _ns1__InsGrillBySNResponse * SOAP_FMAC4 soap_in__ns1__InsGrillBySNResponse(struct soap*, const char*, _ns1__InsGrillBySNResponse *, const char*);
SOAP_FMAC1 _ns1__InsGrillBySNResponse * SOAP_FMAC2 soap_instantiate__ns1__InsGrillBySNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsGrillBySNResponse * soap_new__ns1__InsGrillBySNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsGrillBySNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsGrillBySNResponse * soap_new_req__ns1__InsGrillBySNResponse(
	struct soap *soap)
{
	_ns1__InsGrillBySNResponse *_p = soap_new__ns1__InsGrillBySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsGrillBySNResponse * soap_new_set__ns1__InsGrillBySNResponse(
	struct soap *soap,
	std::string *InsGrillBySNResult)
{
	_ns1__InsGrillBySNResponse *_p = soap_new__ns1__InsGrillBySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsGrillBySNResponse::InsGrillBySNResult = InsGrillBySNResult;
	}
	return _p;
}

inline int soap_write__ns1__InsGrillBySNResponse(struct soap *soap, _ns1__InsGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsGrillBySNResponse(struct soap *soap, const char *URL, _ns1__InsGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsGrillBySNResponse(struct soap *soap, const char *URL, _ns1__InsGrillBySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySNResponse", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsGrillBySNResponse * SOAP_FMAC4 soap_get__ns1__InsGrillBySNResponse(struct soap*, _ns1__InsGrillBySNResponse *, const char*, const char*);

inline int soap_read__ns1__InsGrillBySNResponse(struct soap *soap, _ns1__InsGrillBySNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsGrillBySNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsGrillBySNResponse(struct soap *soap, const char *URL, _ns1__InsGrillBySNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsGrillBySNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsGrillBySNResponse(struct soap *soap, _ns1__InsGrillBySNResponse *p)
{
	if (soap_read__ns1__InsGrillBySNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsGrillBySN_DEFINED
#define SOAP_TYPE__ns1__InsGrillBySN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsGrillBySN(struct soap*, const char*, int, const _ns1__InsGrillBySN *, const char*);
SOAP_FMAC3 _ns1__InsGrillBySN * SOAP_FMAC4 soap_in__ns1__InsGrillBySN(struct soap*, const char*, _ns1__InsGrillBySN *, const char*);
SOAP_FMAC1 _ns1__InsGrillBySN * SOAP_FMAC2 soap_instantiate__ns1__InsGrillBySN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsGrillBySN * soap_new__ns1__InsGrillBySN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsGrillBySN(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsGrillBySN * soap_new_req__ns1__InsGrillBySN(
	struct soap *soap)
{
	_ns1__InsGrillBySN *_p = soap_new__ns1__InsGrillBySN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsGrillBySN * soap_new_set__ns1__InsGrillBySN(
	struct soap *soap,
	std::string *Emp,
	std::string *GrillSN,
	std::string *OvenSN,
	std::string *StationNumber)
{
	_ns1__InsGrillBySN *_p = soap_new__ns1__InsGrillBySN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsGrillBySN::Emp = Emp;
		_p->_ns1__InsGrillBySN::GrillSN = GrillSN;
		_p->_ns1__InsGrillBySN::OvenSN = OvenSN;
		_p->_ns1__InsGrillBySN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__InsGrillBySN(struct soap *soap, _ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySN", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsGrillBySN(struct soap *soap, const char *URL, _ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySN", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsGrillBySN(struct soap *soap, const char *URL, _ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsGrillBySN", p->soap_type() == SOAP_TYPE__ns1__InsGrillBySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsGrillBySN * SOAP_FMAC4 soap_get__ns1__InsGrillBySN(struct soap*, _ns1__InsGrillBySN *, const char*, const char*);

inline int soap_read__ns1__InsGrillBySN(struct soap *soap, _ns1__InsGrillBySN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsGrillBySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsGrillBySN(struct soap *soap, const char *URL, _ns1__InsGrillBySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsGrillBySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsGrillBySN(struct soap *soap, _ns1__InsGrillBySN *p)
{
	if (soap_read__ns1__InsGrillBySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseGrillSNResponse_DEFINED
#define SOAP_TYPE__ns1__CloseGrillSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseGrillSNResponse(struct soap*, const char*, int, const _ns1__CloseGrillSNResponse *, const char*);
SOAP_FMAC3 _ns1__CloseGrillSNResponse * SOAP_FMAC4 soap_in__ns1__CloseGrillSNResponse(struct soap*, const char*, _ns1__CloseGrillSNResponse *, const char*);
SOAP_FMAC1 _ns1__CloseGrillSNResponse * SOAP_FMAC2 soap_instantiate__ns1__CloseGrillSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseGrillSNResponse * soap_new__ns1__CloseGrillSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseGrillSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseGrillSNResponse * soap_new_req__ns1__CloseGrillSNResponse(
	struct soap *soap)
{
	_ns1__CloseGrillSNResponse *_p = soap_new__ns1__CloseGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CloseGrillSNResponse * soap_new_set__ns1__CloseGrillSNResponse(
	struct soap *soap,
	std::string *CloseGrillSNResult)
{
	_ns1__CloseGrillSNResponse *_p = soap_new__ns1__CloseGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseGrillSNResponse::CloseGrillSNResult = CloseGrillSNResult;
	}
	return _p;
}

inline int soap_write__ns1__CloseGrillSNResponse(struct soap *soap, _ns1__CloseGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseGrillSNResponse(struct soap *soap, const char *URL, _ns1__CloseGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseGrillSNResponse(struct soap *soap, const char *URL, _ns1__CloseGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseGrillSNResponse * SOAP_FMAC4 soap_get__ns1__CloseGrillSNResponse(struct soap*, _ns1__CloseGrillSNResponse *, const char*, const char*);

inline int soap_read__ns1__CloseGrillSNResponse(struct soap *soap, _ns1__CloseGrillSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseGrillSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseGrillSNResponse(struct soap *soap, const char *URL, _ns1__CloseGrillSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseGrillSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseGrillSNResponse(struct soap *soap, _ns1__CloseGrillSNResponse *p)
{
	if (soap_read__ns1__CloseGrillSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseGrillSN_DEFINED
#define SOAP_TYPE__ns1__CloseGrillSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseGrillSN(struct soap*, const char*, int, const _ns1__CloseGrillSN *, const char*);
SOAP_FMAC3 _ns1__CloseGrillSN * SOAP_FMAC4 soap_in__ns1__CloseGrillSN(struct soap*, const char*, _ns1__CloseGrillSN *, const char*);
SOAP_FMAC1 _ns1__CloseGrillSN * SOAP_FMAC2 soap_instantiate__ns1__CloseGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseGrillSN * soap_new__ns1__CloseGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseGrillSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseGrillSN * soap_new_req__ns1__CloseGrillSN(
	struct soap *soap)
{
	_ns1__CloseGrillSN *_p = soap_new__ns1__CloseGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CloseGrillSN * soap_new_set__ns1__CloseGrillSN(
	struct soap *soap,
	std::string *Emp,
	std::string *GrillSN,
	std::string *StationNumber)
{
	_ns1__CloseGrillSN *_p = soap_new__ns1__CloseGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseGrillSN::Emp = Emp;
		_p->_ns1__CloseGrillSN::GrillSN = GrillSN;
		_p->_ns1__CloseGrillSN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__CloseGrillSN(struct soap *soap, _ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSN", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseGrillSN(struct soap *soap, const char *URL, _ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSN", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseGrillSN(struct soap *soap, const char *URL, _ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseGrillSN", p->soap_type() == SOAP_TYPE__ns1__CloseGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseGrillSN * SOAP_FMAC4 soap_get__ns1__CloseGrillSN(struct soap*, _ns1__CloseGrillSN *, const char*, const char*);

inline int soap_read__ns1__CloseGrillSN(struct soap *soap, _ns1__CloseGrillSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseGrillSN(struct soap *soap, const char *URL, _ns1__CloseGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseGrillSN(struct soap *soap, _ns1__CloseGrillSN *p)
{
	if (soap_read__ns1__CloseGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkGrillSNResponse_DEFINED
#define SOAP_TYPE__ns1__LnkGrillSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkGrillSNResponse(struct soap*, const char*, int, const _ns1__LnkGrillSNResponse *, const char*);
SOAP_FMAC3 _ns1__LnkGrillSNResponse * SOAP_FMAC4 soap_in__ns1__LnkGrillSNResponse(struct soap*, const char*, _ns1__LnkGrillSNResponse *, const char*);
SOAP_FMAC1 _ns1__LnkGrillSNResponse * SOAP_FMAC2 soap_instantiate__ns1__LnkGrillSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkGrillSNResponse * soap_new__ns1__LnkGrillSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkGrillSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkGrillSNResponse * soap_new_req__ns1__LnkGrillSNResponse(
	struct soap *soap)
{
	_ns1__LnkGrillSNResponse *_p = soap_new__ns1__LnkGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkGrillSNResponse * soap_new_set__ns1__LnkGrillSNResponse(
	struct soap *soap,
	std::string *LnkGrillSNResult)
{
	_ns1__LnkGrillSNResponse *_p = soap_new__ns1__LnkGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkGrillSNResponse::LnkGrillSNResult = LnkGrillSNResult;
	}
	return _p;
}

inline int soap_write__ns1__LnkGrillSNResponse(struct soap *soap, _ns1__LnkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkGrillSNResponse(struct soap *soap, const char *URL, _ns1__LnkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkGrillSNResponse(struct soap *soap, const char *URL, _ns1__LnkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkGrillSNResponse * SOAP_FMAC4 soap_get__ns1__LnkGrillSNResponse(struct soap*, _ns1__LnkGrillSNResponse *, const char*, const char*);

inline int soap_read__ns1__LnkGrillSNResponse(struct soap *soap, _ns1__LnkGrillSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkGrillSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkGrillSNResponse(struct soap *soap, const char *URL, _ns1__LnkGrillSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkGrillSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkGrillSNResponse(struct soap *soap, _ns1__LnkGrillSNResponse *p)
{
	if (soap_read__ns1__LnkGrillSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkGrillSN_DEFINED
#define SOAP_TYPE__ns1__LnkGrillSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkGrillSN(struct soap*, const char*, int, const _ns1__LnkGrillSN *, const char*);
SOAP_FMAC3 _ns1__LnkGrillSN * SOAP_FMAC4 soap_in__ns1__LnkGrillSN(struct soap*, const char*, _ns1__LnkGrillSN *, const char*);
SOAP_FMAC1 _ns1__LnkGrillSN * SOAP_FMAC2 soap_instantiate__ns1__LnkGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkGrillSN * soap_new__ns1__LnkGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkGrillSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkGrillSN * soap_new_req__ns1__LnkGrillSN(
	struct soap *soap)
{
	_ns1__LnkGrillSN *_p = soap_new__ns1__LnkGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkGrillSN * soap_new_set__ns1__LnkGrillSN(
	struct soap *soap,
	std::string *GrillSN,
	std::string *ZJSN,
	std::string *StationNumber)
{
	_ns1__LnkGrillSN *_p = soap_new__ns1__LnkGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkGrillSN::GrillSN = GrillSN;
		_p->_ns1__LnkGrillSN::ZJSN = ZJSN;
		_p->_ns1__LnkGrillSN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__LnkGrillSN(struct soap *soap, _ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSN", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkGrillSN(struct soap *soap, const char *URL, _ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSN", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkGrillSN(struct soap *soap, const char *URL, _ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkGrillSN", p->soap_type() == SOAP_TYPE__ns1__LnkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkGrillSN * SOAP_FMAC4 soap_get__ns1__LnkGrillSN(struct soap*, _ns1__LnkGrillSN *, const char*, const char*);

inline int soap_read__ns1__LnkGrillSN(struct soap *soap, _ns1__LnkGrillSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkGrillSN(struct soap *soap, const char *URL, _ns1__LnkGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkGrillSN(struct soap *soap, _ns1__LnkGrillSN *p)
{
	if (soap_read__ns1__LnkGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkGrillSNResponse_DEFINED
#define SOAP_TYPE__ns1__chkGrillSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkGrillSNResponse(struct soap*, const char*, int, const _ns1__chkGrillSNResponse *, const char*);
SOAP_FMAC3 _ns1__chkGrillSNResponse * SOAP_FMAC4 soap_in__ns1__chkGrillSNResponse(struct soap*, const char*, _ns1__chkGrillSNResponse *, const char*);
SOAP_FMAC1 _ns1__chkGrillSNResponse * SOAP_FMAC2 soap_instantiate__ns1__chkGrillSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkGrillSNResponse * soap_new__ns1__chkGrillSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkGrillSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkGrillSNResponse * soap_new_req__ns1__chkGrillSNResponse(
	struct soap *soap)
{
	_ns1__chkGrillSNResponse *_p = soap_new__ns1__chkGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkGrillSNResponse * soap_new_set__ns1__chkGrillSNResponse(
	struct soap *soap,
	std::string *chkGrillSNResult)
{
	_ns1__chkGrillSNResponse *_p = soap_new__ns1__chkGrillSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkGrillSNResponse::chkGrillSNResult = chkGrillSNResult;
	}
	return _p;
}

inline int soap_write__ns1__chkGrillSNResponse(struct soap *soap, _ns1__chkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkGrillSNResponse(struct soap *soap, const char *URL, _ns1__chkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkGrillSNResponse(struct soap *soap, const char *URL, _ns1__chkGrillSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkGrillSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkGrillSNResponse * SOAP_FMAC4 soap_get__ns1__chkGrillSNResponse(struct soap*, _ns1__chkGrillSNResponse *, const char*, const char*);

inline int soap_read__ns1__chkGrillSNResponse(struct soap *soap, _ns1__chkGrillSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkGrillSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkGrillSNResponse(struct soap *soap, const char *URL, _ns1__chkGrillSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkGrillSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkGrillSNResponse(struct soap *soap, _ns1__chkGrillSNResponse *p)
{
	if (soap_read__ns1__chkGrillSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkGrillSN_DEFINED
#define SOAP_TYPE__ns1__chkGrillSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkGrillSN(struct soap*, const char*, int, const _ns1__chkGrillSN *, const char*);
SOAP_FMAC3 _ns1__chkGrillSN * SOAP_FMAC4 soap_in__ns1__chkGrillSN(struct soap*, const char*, _ns1__chkGrillSN *, const char*);
SOAP_FMAC1 _ns1__chkGrillSN * SOAP_FMAC2 soap_instantiate__ns1__chkGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkGrillSN * soap_new__ns1__chkGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkGrillSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkGrillSN * soap_new_req__ns1__chkGrillSN(
	struct soap *soap)
{
	_ns1__chkGrillSN *_p = soap_new__ns1__chkGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkGrillSN * soap_new_set__ns1__chkGrillSN(
	struct soap *soap,
	std::string *GrillSN)
{
	_ns1__chkGrillSN *_p = soap_new__ns1__chkGrillSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkGrillSN::GrillSN = GrillSN;
	}
	return _p;
}

inline int soap_write__ns1__chkGrillSN(struct soap *soap, _ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSN", p->soap_type() == SOAP_TYPE__ns1__chkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkGrillSN(struct soap *soap, const char *URL, _ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSN", p->soap_type() == SOAP_TYPE__ns1__chkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkGrillSN(struct soap *soap, const char *URL, _ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkGrillSN", p->soap_type() == SOAP_TYPE__ns1__chkGrillSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkGrillSN * SOAP_FMAC4 soap_get__ns1__chkGrillSN(struct soap*, _ns1__chkGrillSN *, const char*, const char*);

inline int soap_read__ns1__chkGrillSN(struct soap *soap, _ns1__chkGrillSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkGrillSN(struct soap *soap, const char *URL, _ns1__chkGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkGrillSN(struct soap *soap, _ns1__chkGrillSN *p)
{
	if (soap_read__ns1__chkGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkSideSNResponse_DEFINED
#define SOAP_TYPE__ns1__LnkSideSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkSideSNResponse(struct soap*, const char*, int, const _ns1__LnkSideSNResponse *, const char*);
SOAP_FMAC3 _ns1__LnkSideSNResponse * SOAP_FMAC4 soap_in__ns1__LnkSideSNResponse(struct soap*, const char*, _ns1__LnkSideSNResponse *, const char*);
SOAP_FMAC1 _ns1__LnkSideSNResponse * SOAP_FMAC2 soap_instantiate__ns1__LnkSideSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkSideSNResponse * soap_new__ns1__LnkSideSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkSideSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkSideSNResponse * soap_new_req__ns1__LnkSideSNResponse(
	struct soap *soap)
{
	_ns1__LnkSideSNResponse *_p = soap_new__ns1__LnkSideSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkSideSNResponse * soap_new_set__ns1__LnkSideSNResponse(
	struct soap *soap,
	std::string *LnkSideSNResult)
{
	_ns1__LnkSideSNResponse *_p = soap_new__ns1__LnkSideSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkSideSNResponse::LnkSideSNResult = LnkSideSNResult;
	}
	return _p;
}

inline int soap_write__ns1__LnkSideSNResponse(struct soap *soap, _ns1__LnkSideSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkSideSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkSideSNResponse(struct soap *soap, const char *URL, _ns1__LnkSideSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkSideSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkSideSNResponse(struct soap *soap, const char *URL, _ns1__LnkSideSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkSideSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkSideSNResponse * SOAP_FMAC4 soap_get__ns1__LnkSideSNResponse(struct soap*, _ns1__LnkSideSNResponse *, const char*, const char*);

inline int soap_read__ns1__LnkSideSNResponse(struct soap *soap, _ns1__LnkSideSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkSideSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkSideSNResponse(struct soap *soap, const char *URL, _ns1__LnkSideSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkSideSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkSideSNResponse(struct soap *soap, _ns1__LnkSideSNResponse *p)
{
	if (soap_read__ns1__LnkSideSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkSideSN_DEFINED
#define SOAP_TYPE__ns1__LnkSideSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkSideSN(struct soap*, const char*, int, const _ns1__LnkSideSN *, const char*);
SOAP_FMAC3 _ns1__LnkSideSN * SOAP_FMAC4 soap_in__ns1__LnkSideSN(struct soap*, const char*, _ns1__LnkSideSN *, const char*);
SOAP_FMAC1 _ns1__LnkSideSN * SOAP_FMAC2 soap_instantiate__ns1__LnkSideSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkSideSN * soap_new__ns1__LnkSideSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkSideSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkSideSN * soap_new_req__ns1__LnkSideSN(
	struct soap *soap)
{
	_ns1__LnkSideSN *_p = soap_new__ns1__LnkSideSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkSideSN * soap_new_set__ns1__LnkSideSN(
	struct soap *soap,
	std::string *Emp,
	std::string *ZJSN,
	std::string *LnkSN,
	std::string *StationNumber,
	std::string *strType)
{
	_ns1__LnkSideSN *_p = soap_new__ns1__LnkSideSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkSideSN::Emp = Emp;
		_p->_ns1__LnkSideSN::ZJSN = ZJSN;
		_p->_ns1__LnkSideSN::LnkSN = LnkSN;
		_p->_ns1__LnkSideSN::StationNumber = StationNumber;
		_p->_ns1__LnkSideSN::strType = strType;
	}
	return _p;
}

inline int soap_write__ns1__LnkSideSN(struct soap *soap, _ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSN", p->soap_type() == SOAP_TYPE__ns1__LnkSideSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkSideSN(struct soap *soap, const char *URL, _ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSN", p->soap_type() == SOAP_TYPE__ns1__LnkSideSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkSideSN(struct soap *soap, const char *URL, _ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkSideSN", p->soap_type() == SOAP_TYPE__ns1__LnkSideSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkSideSN * SOAP_FMAC4 soap_get__ns1__LnkSideSN(struct soap*, _ns1__LnkSideSN *, const char*, const char*);

inline int soap_read__ns1__LnkSideSN(struct soap *soap, _ns1__LnkSideSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkSideSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkSideSN(struct soap *soap, const char *URL, _ns1__LnkSideSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkSideSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkSideSN(struct soap *soap, _ns1__LnkSideSN *p)
{
	if (soap_read__ns1__LnkSideSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkZJSNResponse_DEFINED
#define SOAP_TYPE__ns1__LnkZJSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkZJSNResponse(struct soap*, const char*, int, const _ns1__LnkZJSNResponse *, const char*);
SOAP_FMAC3 _ns1__LnkZJSNResponse * SOAP_FMAC4 soap_in__ns1__LnkZJSNResponse(struct soap*, const char*, _ns1__LnkZJSNResponse *, const char*);
SOAP_FMAC1 _ns1__LnkZJSNResponse * SOAP_FMAC2 soap_instantiate__ns1__LnkZJSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkZJSNResponse * soap_new__ns1__LnkZJSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkZJSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkZJSNResponse * soap_new_req__ns1__LnkZJSNResponse(
	struct soap *soap)
{
	_ns1__LnkZJSNResponse *_p = soap_new__ns1__LnkZJSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkZJSNResponse * soap_new_set__ns1__LnkZJSNResponse(
	struct soap *soap,
	std::string *LnkZJSNResult)
{
	_ns1__LnkZJSNResponse *_p = soap_new__ns1__LnkZJSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkZJSNResponse::LnkZJSNResult = LnkZJSNResult;
	}
	return _p;
}

inline int soap_write__ns1__LnkZJSNResponse(struct soap *soap, _ns1__LnkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkZJSNResponse(struct soap *soap, const char *URL, _ns1__LnkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkZJSNResponse(struct soap *soap, const char *URL, _ns1__LnkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__LnkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkZJSNResponse * SOAP_FMAC4 soap_get__ns1__LnkZJSNResponse(struct soap*, _ns1__LnkZJSNResponse *, const char*, const char*);

inline int soap_read__ns1__LnkZJSNResponse(struct soap *soap, _ns1__LnkZJSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkZJSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkZJSNResponse(struct soap *soap, const char *URL, _ns1__LnkZJSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkZJSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkZJSNResponse(struct soap *soap, _ns1__LnkZJSNResponse *p)
{
	if (soap_read__ns1__LnkZJSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LnkZJSN_DEFINED
#define SOAP_TYPE__ns1__LnkZJSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LnkZJSN(struct soap*, const char*, int, const _ns1__LnkZJSN *, const char*);
SOAP_FMAC3 _ns1__LnkZJSN * SOAP_FMAC4 soap_in__ns1__LnkZJSN(struct soap*, const char*, _ns1__LnkZJSN *, const char*);
SOAP_FMAC1 _ns1__LnkZJSN * SOAP_FMAC2 soap_instantiate__ns1__LnkZJSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LnkZJSN * soap_new__ns1__LnkZJSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LnkZJSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__LnkZJSN * soap_new_req__ns1__LnkZJSN(
	struct soap *soap)
{
	_ns1__LnkZJSN *_p = soap_new__ns1__LnkZJSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LnkZJSN * soap_new_set__ns1__LnkZJSN(
	struct soap *soap,
	std::string *Emp,
	std::string *SN,
	std::string *ZJSN,
	std::string *StationNumber)
{
	_ns1__LnkZJSN *_p = soap_new__ns1__LnkZJSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LnkZJSN::Emp = Emp;
		_p->_ns1__LnkZJSN::SN = SN;
		_p->_ns1__LnkZJSN::ZJSN = ZJSN;
		_p->_ns1__LnkZJSN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__LnkZJSN(struct soap *soap, _ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSN", p->soap_type() == SOAP_TYPE__ns1__LnkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LnkZJSN(struct soap *soap, const char *URL, _ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSN", p->soap_type() == SOAP_TYPE__ns1__LnkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LnkZJSN(struct soap *soap, const char *URL, _ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LnkZJSN", p->soap_type() == SOAP_TYPE__ns1__LnkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LnkZJSN * SOAP_FMAC4 soap_get__ns1__LnkZJSN(struct soap*, _ns1__LnkZJSN *, const char*, const char*);

inline int soap_read__ns1__LnkZJSN(struct soap *soap, _ns1__LnkZJSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LnkZJSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LnkZJSN(struct soap *soap, const char *URL, _ns1__LnkZJSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__LnkZJSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LnkZJSN(struct soap *soap, _ns1__LnkZJSN *p)
{
	if (soap_read__ns1__LnkZJSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkZJSNResponse_DEFINED
#define SOAP_TYPE__ns1__chkZJSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkZJSNResponse(struct soap*, const char*, int, const _ns1__chkZJSNResponse *, const char*);
SOAP_FMAC3 _ns1__chkZJSNResponse * SOAP_FMAC4 soap_in__ns1__chkZJSNResponse(struct soap*, const char*, _ns1__chkZJSNResponse *, const char*);
SOAP_FMAC1 _ns1__chkZJSNResponse * SOAP_FMAC2 soap_instantiate__ns1__chkZJSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkZJSNResponse * soap_new__ns1__chkZJSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkZJSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkZJSNResponse * soap_new_req__ns1__chkZJSNResponse(
	struct soap *soap)
{
	_ns1__chkZJSNResponse *_p = soap_new__ns1__chkZJSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkZJSNResponse * soap_new_set__ns1__chkZJSNResponse(
	struct soap *soap,
	std::string *chkZJSNResult)
{
	_ns1__chkZJSNResponse *_p = soap_new__ns1__chkZJSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkZJSNResponse::chkZJSNResult = chkZJSNResult;
	}
	return _p;
}

inline int soap_write__ns1__chkZJSNResponse(struct soap *soap, _ns1__chkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkZJSNResponse(struct soap *soap, const char *URL, _ns1__chkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkZJSNResponse(struct soap *soap, const char *URL, _ns1__chkZJSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkZJSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkZJSNResponse * SOAP_FMAC4 soap_get__ns1__chkZJSNResponse(struct soap*, _ns1__chkZJSNResponse *, const char*, const char*);

inline int soap_read__ns1__chkZJSNResponse(struct soap *soap, _ns1__chkZJSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkZJSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkZJSNResponse(struct soap *soap, const char *URL, _ns1__chkZJSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkZJSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkZJSNResponse(struct soap *soap, _ns1__chkZJSNResponse *p)
{
	if (soap_read__ns1__chkZJSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkZJSN_DEFINED
#define SOAP_TYPE__ns1__chkZJSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkZJSN(struct soap*, const char*, int, const _ns1__chkZJSN *, const char*);
SOAP_FMAC3 _ns1__chkZJSN * SOAP_FMAC4 soap_in__ns1__chkZJSN(struct soap*, const char*, _ns1__chkZJSN *, const char*);
SOAP_FMAC1 _ns1__chkZJSN * SOAP_FMAC2 soap_instantiate__ns1__chkZJSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkZJSN * soap_new__ns1__chkZJSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkZJSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkZJSN * soap_new_req__ns1__chkZJSN(
	struct soap *soap)
{
	_ns1__chkZJSN *_p = soap_new__ns1__chkZJSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkZJSN * soap_new_set__ns1__chkZJSN(
	struct soap *soap,
	std::string *ZJSN,
	std::string *StationNumber,
	std::string *strType)
{
	_ns1__chkZJSN *_p = soap_new__ns1__chkZJSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkZJSN::ZJSN = ZJSN;
		_p->_ns1__chkZJSN::StationNumber = StationNumber;
		_p->_ns1__chkZJSN::strType = strType;
	}
	return _p;
}

inline int soap_write__ns1__chkZJSN(struct soap *soap, _ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSN", p->soap_type() == SOAP_TYPE__ns1__chkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkZJSN(struct soap *soap, const char *URL, _ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSN", p->soap_type() == SOAP_TYPE__ns1__chkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkZJSN(struct soap *soap, const char *URL, _ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkZJSN", p->soap_type() == SOAP_TYPE__ns1__chkZJSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkZJSN * SOAP_FMAC4 soap_get__ns1__chkZJSN(struct soap*, _ns1__chkZJSN *, const char*, const char*);

inline int soap_read__ns1__chkZJSN(struct soap *soap, _ns1__chkZJSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkZJSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkZJSN(struct soap *soap, const char *URL, _ns1__chkZJSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkZJSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkZJSN(struct soap *soap, _ns1__chkZJSN *p)
{
	if (soap_read__ns1__chkZJSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkDispensingResponse_DEFINED
#define SOAP_TYPE__ns1__chkDispensingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkDispensingResponse(struct soap*, const char*, int, const _ns1__chkDispensingResponse *, const char*);
SOAP_FMAC3 _ns1__chkDispensingResponse * SOAP_FMAC4 soap_in__ns1__chkDispensingResponse(struct soap*, const char*, _ns1__chkDispensingResponse *, const char*);
SOAP_FMAC1 _ns1__chkDispensingResponse * SOAP_FMAC2 soap_instantiate__ns1__chkDispensingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkDispensingResponse * soap_new__ns1__chkDispensingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkDispensingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkDispensingResponse * soap_new_req__ns1__chkDispensingResponse(
	struct soap *soap)
{
	_ns1__chkDispensingResponse *_p = soap_new__ns1__chkDispensingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkDispensingResponse * soap_new_set__ns1__chkDispensingResponse(
	struct soap *soap,
	std::string *chkDispensingResult)
{
	_ns1__chkDispensingResponse *_p = soap_new__ns1__chkDispensingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkDispensingResponse::chkDispensingResult = chkDispensingResult;
	}
	return _p;
}

inline int soap_write__ns1__chkDispensingResponse(struct soap *soap, _ns1__chkDispensingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensingResponse", p->soap_type() == SOAP_TYPE__ns1__chkDispensingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkDispensingResponse(struct soap *soap, const char *URL, _ns1__chkDispensingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensingResponse", p->soap_type() == SOAP_TYPE__ns1__chkDispensingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkDispensingResponse(struct soap *soap, const char *URL, _ns1__chkDispensingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensingResponse", p->soap_type() == SOAP_TYPE__ns1__chkDispensingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkDispensingResponse * SOAP_FMAC4 soap_get__ns1__chkDispensingResponse(struct soap*, _ns1__chkDispensingResponse *, const char*, const char*);

inline int soap_read__ns1__chkDispensingResponse(struct soap *soap, _ns1__chkDispensingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkDispensingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkDispensingResponse(struct soap *soap, const char *URL, _ns1__chkDispensingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkDispensingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkDispensingResponse(struct soap *soap, _ns1__chkDispensingResponse *p)
{
	if (soap_read__ns1__chkDispensingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkDispensing_DEFINED
#define SOAP_TYPE__ns1__chkDispensing_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkDispensing(struct soap*, const char*, int, const _ns1__chkDispensing *, const char*);
SOAP_FMAC3 _ns1__chkDispensing * SOAP_FMAC4 soap_in__ns1__chkDispensing(struct soap*, const char*, _ns1__chkDispensing *, const char*);
SOAP_FMAC1 _ns1__chkDispensing * SOAP_FMAC2 soap_instantiate__ns1__chkDispensing(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkDispensing * soap_new__ns1__chkDispensing(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkDispensing(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkDispensing * soap_new_req__ns1__chkDispensing(
	struct soap *soap)
{
	_ns1__chkDispensing *_p = soap_new__ns1__chkDispensing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkDispensing * soap_new_set__ns1__chkDispensing(
	struct soap *soap,
	std::string *SN)
{
	_ns1__chkDispensing *_p = soap_new__ns1__chkDispensing(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkDispensing::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__chkDispensing(struct soap *soap, _ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensing", p->soap_type() == SOAP_TYPE__ns1__chkDispensing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkDispensing(struct soap *soap, const char *URL, _ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensing", p->soap_type() == SOAP_TYPE__ns1__chkDispensing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkDispensing(struct soap *soap, const char *URL, _ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkDispensing", p->soap_type() == SOAP_TYPE__ns1__chkDispensing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkDispensing * SOAP_FMAC4 soap_get__ns1__chkDispensing(struct soap*, _ns1__chkDispensing *, const char*, const char*);

inline int soap_read__ns1__chkDispensing(struct soap *soap, _ns1__chkDispensing *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkDispensing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkDispensing(struct soap *soap, const char *URL, _ns1__chkDispensing *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkDispensing(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkDispensing(struct soap *soap, _ns1__chkDispensing *p)
{
	if (soap_read__ns1__chkDispensing(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsIotTestDataResponse_DEFINED
#define SOAP_TYPE__ns1__InsIotTestDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsIotTestDataResponse(struct soap*, const char*, int, const _ns1__InsIotTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__InsIotTestDataResponse * SOAP_FMAC4 soap_in__ns1__InsIotTestDataResponse(struct soap*, const char*, _ns1__InsIotTestDataResponse *, const char*);
SOAP_FMAC1 _ns1__InsIotTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__InsIotTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsIotTestDataResponse * soap_new__ns1__InsIotTestDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsIotTestDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsIotTestDataResponse * soap_new_req__ns1__InsIotTestDataResponse(
	struct soap *soap)
{
	_ns1__InsIotTestDataResponse *_p = soap_new__ns1__InsIotTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsIotTestDataResponse * soap_new_set__ns1__InsIotTestDataResponse(
	struct soap *soap,
	std::string *InsIotTestDataResult)
{
	_ns1__InsIotTestDataResponse *_p = soap_new__ns1__InsIotTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsIotTestDataResponse::InsIotTestDataResult = InsIotTestDataResult;
	}
	return _p;
}

inline int soap_write__ns1__InsIotTestDataResponse(struct soap *soap, _ns1__InsIotTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsIotTestDataResponse(struct soap *soap, const char *URL, _ns1__InsIotTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsIotTestDataResponse(struct soap *soap, const char *URL, _ns1__InsIotTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsIotTestDataResponse * SOAP_FMAC4 soap_get__ns1__InsIotTestDataResponse(struct soap*, _ns1__InsIotTestDataResponse *, const char*, const char*);

inline int soap_read__ns1__InsIotTestDataResponse(struct soap *soap, _ns1__InsIotTestDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsIotTestDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsIotTestDataResponse(struct soap *soap, const char *URL, _ns1__InsIotTestDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsIotTestDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsIotTestDataResponse(struct soap *soap, _ns1__InsIotTestDataResponse *p)
{
	if (soap_read__ns1__InsIotTestDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsIotTestData_DEFINED
#define SOAP_TYPE__ns1__InsIotTestData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsIotTestData(struct soap*, const char*, int, const _ns1__InsIotTestData *, const char*);
SOAP_FMAC3 _ns1__InsIotTestData * SOAP_FMAC4 soap_in__ns1__InsIotTestData(struct soap*, const char*, _ns1__InsIotTestData *, const char*);
SOAP_FMAC1 _ns1__InsIotTestData * SOAP_FMAC2 soap_instantiate__ns1__InsIotTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsIotTestData * soap_new__ns1__InsIotTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsIotTestData(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsIotTestData * soap_new_req__ns1__InsIotTestData(
	struct soap *soap)
{
	_ns1__InsIotTestData *_p = soap_new__ns1__InsIotTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsIotTestData * soap_new_set__ns1__InsIotTestData(
	struct soap *soap,
	std::string *MoNumber,
	std::string *PartNo,
	std::string *StationNumber,
	std::string *Barcode,
	std::string *Machine,
	std::string *Hole,
	std::string *TestTime,
	std::string *strResult,
	std::string *ErrCode,
	std::string *TC1,
	std::string *TC2,
	std::string *TC3,
	std::string *TC4,
	std::string *DT1,
	std::string *DT2,
	std::string *DT3,
	std::string *DT4,
	std::string *TotalTestTime,
	std::string *UserID,
	std::string *Memo1,
	std::string *Memo2,
	std::string *Memo3,
	std::string *Memo4,
	std::string *Memo5,
	std::string *Memo6,
	std::string *Memo7,
	std::string *Memo8,
	std::string *Memo9,
	std::string *Memo10)
{
	_ns1__InsIotTestData *_p = soap_new__ns1__InsIotTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsIotTestData::MoNumber = MoNumber;
		_p->_ns1__InsIotTestData::PartNo = PartNo;
		_p->_ns1__InsIotTestData::StationNumber = StationNumber;
		_p->_ns1__InsIotTestData::Barcode = Barcode;
		_p->_ns1__InsIotTestData::Machine = Machine;
		_p->_ns1__InsIotTestData::Hole = Hole;
		_p->_ns1__InsIotTestData::TestTime = TestTime;
		_p->_ns1__InsIotTestData::strResult = strResult;
		_p->_ns1__InsIotTestData::ErrCode = ErrCode;
		_p->_ns1__InsIotTestData::TC1 = TC1;
		_p->_ns1__InsIotTestData::TC2 = TC2;
		_p->_ns1__InsIotTestData::TC3 = TC3;
		_p->_ns1__InsIotTestData::TC4 = TC4;
		_p->_ns1__InsIotTestData::DT1 = DT1;
		_p->_ns1__InsIotTestData::DT2 = DT2;
		_p->_ns1__InsIotTestData::DT3 = DT3;
		_p->_ns1__InsIotTestData::DT4 = DT4;
		_p->_ns1__InsIotTestData::TotalTestTime = TotalTestTime;
		_p->_ns1__InsIotTestData::UserID = UserID;
		_p->_ns1__InsIotTestData::Memo1 = Memo1;
		_p->_ns1__InsIotTestData::Memo2 = Memo2;
		_p->_ns1__InsIotTestData::Memo3 = Memo3;
		_p->_ns1__InsIotTestData::Memo4 = Memo4;
		_p->_ns1__InsIotTestData::Memo5 = Memo5;
		_p->_ns1__InsIotTestData::Memo6 = Memo6;
		_p->_ns1__InsIotTestData::Memo7 = Memo7;
		_p->_ns1__InsIotTestData::Memo8 = Memo8;
		_p->_ns1__InsIotTestData::Memo9 = Memo9;
		_p->_ns1__InsIotTestData::Memo10 = Memo10;
	}
	return _p;
}

inline int soap_write__ns1__InsIotTestData(struct soap *soap, _ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestData", p->soap_type() == SOAP_TYPE__ns1__InsIotTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsIotTestData(struct soap *soap, const char *URL, _ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestData", p->soap_type() == SOAP_TYPE__ns1__InsIotTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsIotTestData(struct soap *soap, const char *URL, _ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotTestData", p->soap_type() == SOAP_TYPE__ns1__InsIotTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsIotTestData * SOAP_FMAC4 soap_get__ns1__InsIotTestData(struct soap*, _ns1__InsIotTestData *, const char*, const char*);

inline int soap_read__ns1__InsIotTestData(struct soap *soap, _ns1__InsIotTestData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsIotTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsIotTestData(struct soap *soap, const char *URL, _ns1__InsIotTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsIotTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsIotTestData(struct soap *soap, _ns1__InsIotTestData *p)
{
	if (soap_read__ns1__InsIotTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsIotMachineRecResponse_DEFINED
#define SOAP_TYPE__ns1__InsIotMachineRecResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsIotMachineRecResponse(struct soap*, const char*, int, const _ns1__InsIotMachineRecResponse *, const char*);
SOAP_FMAC3 _ns1__InsIotMachineRecResponse * SOAP_FMAC4 soap_in__ns1__InsIotMachineRecResponse(struct soap*, const char*, _ns1__InsIotMachineRecResponse *, const char*);
SOAP_FMAC1 _ns1__InsIotMachineRecResponse * SOAP_FMAC2 soap_instantiate__ns1__InsIotMachineRecResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsIotMachineRecResponse * soap_new__ns1__InsIotMachineRecResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsIotMachineRecResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsIotMachineRecResponse * soap_new_req__ns1__InsIotMachineRecResponse(
	struct soap *soap)
{
	_ns1__InsIotMachineRecResponse *_p = soap_new__ns1__InsIotMachineRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsIotMachineRecResponse * soap_new_set__ns1__InsIotMachineRecResponse(
	struct soap *soap,
	std::string *InsIotMachineRecResult)
{
	_ns1__InsIotMachineRecResponse *_p = soap_new__ns1__InsIotMachineRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsIotMachineRecResponse::InsIotMachineRecResult = InsIotMachineRecResult;
	}
	return _p;
}

inline int soap_write__ns1__InsIotMachineRecResponse(struct soap *soap, _ns1__InsIotMachineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRecResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsIotMachineRecResponse(struct soap *soap, const char *URL, _ns1__InsIotMachineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRecResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsIotMachineRecResponse(struct soap *soap, const char *URL, _ns1__InsIotMachineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRecResponse", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsIotMachineRecResponse * SOAP_FMAC4 soap_get__ns1__InsIotMachineRecResponse(struct soap*, _ns1__InsIotMachineRecResponse *, const char*, const char*);

inline int soap_read__ns1__InsIotMachineRecResponse(struct soap *soap, _ns1__InsIotMachineRecResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsIotMachineRecResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsIotMachineRecResponse(struct soap *soap, const char *URL, _ns1__InsIotMachineRecResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsIotMachineRecResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsIotMachineRecResponse(struct soap *soap, _ns1__InsIotMachineRecResponse *p)
{
	if (soap_read__ns1__InsIotMachineRecResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsIotMachineRec_DEFINED
#define SOAP_TYPE__ns1__InsIotMachineRec_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsIotMachineRec(struct soap*, const char*, int, const _ns1__InsIotMachineRec *, const char*);
SOAP_FMAC3 _ns1__InsIotMachineRec * SOAP_FMAC4 soap_in__ns1__InsIotMachineRec(struct soap*, const char*, _ns1__InsIotMachineRec *, const char*);
SOAP_FMAC1 _ns1__InsIotMachineRec * SOAP_FMAC2 soap_instantiate__ns1__InsIotMachineRec(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsIotMachineRec * soap_new__ns1__InsIotMachineRec(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsIotMachineRec(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsIotMachineRec * soap_new_req__ns1__InsIotMachineRec(
	struct soap *soap)
{
	_ns1__InsIotMachineRec *_p = soap_new__ns1__InsIotMachineRec(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsIotMachineRec * soap_new_set__ns1__InsIotMachineRec(
	struct soap *soap,
	std::string *Machine,
	std::string *Hole,
	std::string *MoNumber,
	std::string *strStatus,
	std::string *ErrCode)
{
	_ns1__InsIotMachineRec *_p = soap_new__ns1__InsIotMachineRec(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsIotMachineRec::Machine = Machine;
		_p->_ns1__InsIotMachineRec::Hole = Hole;
		_p->_ns1__InsIotMachineRec::MoNumber = MoNumber;
		_p->_ns1__InsIotMachineRec::strStatus = strStatus;
		_p->_ns1__InsIotMachineRec::ErrCode = ErrCode;
	}
	return _p;
}

inline int soap_write__ns1__InsIotMachineRec(struct soap *soap, _ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRec", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsIotMachineRec(struct soap *soap, const char *URL, _ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRec", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsIotMachineRec(struct soap *soap, const char *URL, _ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsIotMachineRec", p->soap_type() == SOAP_TYPE__ns1__InsIotMachineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsIotMachineRec * SOAP_FMAC4 soap_get__ns1__InsIotMachineRec(struct soap*, _ns1__InsIotMachineRec *, const char*, const char*);

inline int soap_read__ns1__InsIotMachineRec(struct soap *soap, _ns1__InsIotMachineRec *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsIotMachineRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsIotMachineRec(struct soap *soap, const char *URL, _ns1__InsIotMachineRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsIotMachineRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsIotMachineRec(struct soap *soap, _ns1__InsIotMachineRec *p)
{
	if (soap_read__ns1__InsIotMachineRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLnkDataResponse_DEFINED
#define SOAP_TYPE__ns1__GetLnkDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLnkDataResponse(struct soap*, const char*, int, const _ns1__GetLnkDataResponse *, const char*);
SOAP_FMAC3 _ns1__GetLnkDataResponse * SOAP_FMAC4 soap_in__ns1__GetLnkDataResponse(struct soap*, const char*, _ns1__GetLnkDataResponse *, const char*);
SOAP_FMAC1 _ns1__GetLnkDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLnkDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLnkDataResponse * soap_new__ns1__GetLnkDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLnkDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLnkDataResponse * soap_new_req__ns1__GetLnkDataResponse(
	struct soap *soap)
{
	_ns1__GetLnkDataResponse *_p = soap_new__ns1__GetLnkDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLnkDataResponse * soap_new_set__ns1__GetLnkDataResponse(
	struct soap *soap,
	std::string *GetLnkDataResult)
{
	_ns1__GetLnkDataResponse *_p = soap_new__ns1__GetLnkDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLnkDataResponse::GetLnkDataResult = GetLnkDataResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLnkDataResponse(struct soap *soap, _ns1__GetLnkDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetLnkDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLnkDataResponse(struct soap *soap, const char *URL, _ns1__GetLnkDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetLnkDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLnkDataResponse(struct soap *soap, const char *URL, _ns1__GetLnkDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetLnkDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLnkDataResponse * SOAP_FMAC4 soap_get__ns1__GetLnkDataResponse(struct soap*, _ns1__GetLnkDataResponse *, const char*, const char*);

inline int soap_read__ns1__GetLnkDataResponse(struct soap *soap, _ns1__GetLnkDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLnkDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLnkDataResponse(struct soap *soap, const char *URL, _ns1__GetLnkDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLnkDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLnkDataResponse(struct soap *soap, _ns1__GetLnkDataResponse *p)
{
	if (soap_read__ns1__GetLnkDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLnkData_DEFINED
#define SOAP_TYPE__ns1__GetLnkData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLnkData(struct soap*, const char*, int, const _ns1__GetLnkData *, const char*);
SOAP_FMAC3 _ns1__GetLnkData * SOAP_FMAC4 soap_in__ns1__GetLnkData(struct soap*, const char*, _ns1__GetLnkData *, const char*);
SOAP_FMAC1 _ns1__GetLnkData * SOAP_FMAC2 soap_instantiate__ns1__GetLnkData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLnkData * soap_new__ns1__GetLnkData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLnkData(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLnkData * soap_new_req__ns1__GetLnkData(
	struct soap *soap)
{
	_ns1__GetLnkData *_p = soap_new__ns1__GetLnkData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLnkData * soap_new_set__ns1__GetLnkData(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetLnkData *_p = soap_new__ns1__GetLnkData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLnkData::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetLnkData(struct soap *soap, _ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkData", p->soap_type() == SOAP_TYPE__ns1__GetLnkData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLnkData(struct soap *soap, const char *URL, _ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkData", p->soap_type() == SOAP_TYPE__ns1__GetLnkData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLnkData(struct soap *soap, const char *URL, _ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLnkData", p->soap_type() == SOAP_TYPE__ns1__GetLnkData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLnkData * SOAP_FMAC4 soap_get__ns1__GetLnkData(struct soap*, _ns1__GetLnkData *, const char*, const char*);

inline int soap_read__ns1__GetLnkData(struct soap *soap, _ns1__GetLnkData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLnkData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLnkData(struct soap *soap, const char *URL, _ns1__GetLnkData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLnkData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLnkData(struct soap *soap, _ns1__GetLnkData *p)
{
	if (soap_read__ns1__GetLnkData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTestValueResponse_DEFINED
#define SOAP_TYPE__ns1__GetTestValueResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTestValueResponse(struct soap*, const char*, int, const _ns1__GetTestValueResponse *, const char*);
SOAP_FMAC3 _ns1__GetTestValueResponse * SOAP_FMAC4 soap_in__ns1__GetTestValueResponse(struct soap*, const char*, _ns1__GetTestValueResponse *, const char*);
SOAP_FMAC1 _ns1__GetTestValueResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTestValueResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTestValueResponse * soap_new__ns1__GetTestValueResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTestValueResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTestValueResponse * soap_new_req__ns1__GetTestValueResponse(
	struct soap *soap)
{
	_ns1__GetTestValueResponse *_p = soap_new__ns1__GetTestValueResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTestValueResponse * soap_new_set__ns1__GetTestValueResponse(
	struct soap *soap,
	std::string *GetTestValueResult)
{
	_ns1__GetTestValueResponse *_p = soap_new__ns1__GetTestValueResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTestValueResponse::GetTestValueResult = GetTestValueResult;
	}
	return _p;
}

inline int soap_write__ns1__GetTestValueResponse(struct soap *soap, _ns1__GetTestValueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTestValueResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTestValueResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTestValueResponse * SOAP_FMAC4 soap_get__ns1__GetTestValueResponse(struct soap*, _ns1__GetTestValueResponse *, const char*, const char*);

inline int soap_read__ns1__GetTestValueResponse(struct soap *soap, _ns1__GetTestValueResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTestValueResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTestValueResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTestValueResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTestValueResponse(struct soap *soap, _ns1__GetTestValueResponse *p)
{
	if (soap_read__ns1__GetTestValueResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTestValue_DEFINED
#define SOAP_TYPE__ns1__GetTestValue_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTestValue(struct soap*, const char*, int, const _ns1__GetTestValue *, const char*);
SOAP_FMAC3 _ns1__GetTestValue * SOAP_FMAC4 soap_in__ns1__GetTestValue(struct soap*, const char*, _ns1__GetTestValue *, const char*);
SOAP_FMAC1 _ns1__GetTestValue * SOAP_FMAC2 soap_instantiate__ns1__GetTestValue(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTestValue * soap_new__ns1__GetTestValue(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTestValue(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTestValue * soap_new_req__ns1__GetTestValue(
	struct soap *soap)
{
	_ns1__GetTestValue *_p = soap_new__ns1__GetTestValue(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTestValue * soap_new_set__ns1__GetTestValue(
	struct soap *soap,
	std::string *SPC,
	std::string *SN)
{
	_ns1__GetTestValue *_p = soap_new__ns1__GetTestValue(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTestValue::SPC = SPC;
		_p->_ns1__GetTestValue::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetTestValue(struct soap *soap, _ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValue", p->soap_type() == SOAP_TYPE__ns1__GetTestValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTestValue(struct soap *soap, const char *URL, _ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValue", p->soap_type() == SOAP_TYPE__ns1__GetTestValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTestValue(struct soap *soap, const char *URL, _ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValue", p->soap_type() == SOAP_TYPE__ns1__GetTestValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTestValue * SOAP_FMAC4 soap_get__ns1__GetTestValue(struct soap*, _ns1__GetTestValue *, const char*, const char*);

inline int soap_read__ns1__GetTestValue(struct soap *soap, _ns1__GetTestValue *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTestValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTestValue(struct soap *soap, const char *URL, _ns1__GetTestValue *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTestValue(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTestValue(struct soap *soap, _ns1__GetTestValue *p)
{
	if (soap_read__ns1__GetTestValue(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMoBaseResponse_DEFINED
#define SOAP_TYPE__ns1__GetMoBaseResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMoBaseResponse(struct soap*, const char*, int, const _ns1__GetMoBaseResponse *, const char*);
SOAP_FMAC3 _ns1__GetMoBaseResponse * SOAP_FMAC4 soap_in__ns1__GetMoBaseResponse(struct soap*, const char*, _ns1__GetMoBaseResponse *, const char*);
SOAP_FMAC1 _ns1__GetMoBaseResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMoBaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMoBaseResponse * soap_new__ns1__GetMoBaseResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMoBaseResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMoBaseResponse * soap_new_req__ns1__GetMoBaseResponse(
	struct soap *soap)
{
	_ns1__GetMoBaseResponse *_p = soap_new__ns1__GetMoBaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMoBaseResponse * soap_new_set__ns1__GetMoBaseResponse(
	struct soap *soap,
	std::string *GetMoBaseResult)
{
	_ns1__GetMoBaseResponse *_p = soap_new__ns1__GetMoBaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMoBaseResponse::GetMoBaseResult = GetMoBaseResult;
	}
	return _p;
}

inline int soap_write__ns1__GetMoBaseResponse(struct soap *soap, _ns1__GetMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__GetMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMoBaseResponse(struct soap *soap, const char *URL, _ns1__GetMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__GetMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMoBaseResponse(struct soap *soap, const char *URL, _ns1__GetMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__GetMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMoBaseResponse * SOAP_FMAC4 soap_get__ns1__GetMoBaseResponse(struct soap*, _ns1__GetMoBaseResponse *, const char*, const char*);

inline int soap_read__ns1__GetMoBaseResponse(struct soap *soap, _ns1__GetMoBaseResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMoBaseResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMoBaseResponse(struct soap *soap, const char *URL, _ns1__GetMoBaseResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMoBaseResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMoBaseResponse(struct soap *soap, _ns1__GetMoBaseResponse *p)
{
	if (soap_read__ns1__GetMoBaseResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMoBase_DEFINED
#define SOAP_TYPE__ns1__GetMoBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMoBase(struct soap*, const char*, int, const _ns1__GetMoBase *, const char*);
SOAP_FMAC3 _ns1__GetMoBase * SOAP_FMAC4 soap_in__ns1__GetMoBase(struct soap*, const char*, _ns1__GetMoBase *, const char*);
SOAP_FMAC1 _ns1__GetMoBase * SOAP_FMAC2 soap_instantiate__ns1__GetMoBase(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMoBase * soap_new__ns1__GetMoBase(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMoBase(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMoBase * soap_new_req__ns1__GetMoBase(
	struct soap *soap)
{
	_ns1__GetMoBase *_p = soap_new__ns1__GetMoBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMoBase * soap_new_set__ns1__GetMoBase(
	struct soap *soap,
	std::string *MoNumber)
{
	_ns1__GetMoBase *_p = soap_new__ns1__GetMoBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMoBase::MoNumber = MoNumber;
	}
	return _p;
}

inline int soap_write__ns1__GetMoBase(struct soap *soap, _ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBase", p->soap_type() == SOAP_TYPE__ns1__GetMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMoBase(struct soap *soap, const char *URL, _ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBase", p->soap_type() == SOAP_TYPE__ns1__GetMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMoBase(struct soap *soap, const char *URL, _ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMoBase", p->soap_type() == SOAP_TYPE__ns1__GetMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMoBase * SOAP_FMAC4 soap_get__ns1__GetMoBase(struct soap*, _ns1__GetMoBase *, const char*, const char*);

inline int soap_read__ns1__GetMoBase(struct soap *soap, _ns1__GetMoBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMoBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMoBase(struct soap *soap, const char *URL, _ns1__GetMoBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMoBase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMoBase(struct soap *soap, _ns1__GetMoBase *p)
{
	if (soap_read__ns1__GetMoBase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdSnRecInfoResponse_DEFINED
#define SOAP_TYPE__ns1__UpdSnRecInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdSnRecInfoResponse(struct soap*, const char*, int, const _ns1__UpdSnRecInfoResponse *, const char*);
SOAP_FMAC3 _ns1__UpdSnRecInfoResponse * SOAP_FMAC4 soap_in__ns1__UpdSnRecInfoResponse(struct soap*, const char*, _ns1__UpdSnRecInfoResponse *, const char*);
SOAP_FMAC1 _ns1__UpdSnRecInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdSnRecInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdSnRecInfoResponse * soap_new__ns1__UpdSnRecInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdSnRecInfoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdSnRecInfoResponse * soap_new_req__ns1__UpdSnRecInfoResponse(
	struct soap *soap)
{
	_ns1__UpdSnRecInfoResponse *_p = soap_new__ns1__UpdSnRecInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdSnRecInfoResponse * soap_new_set__ns1__UpdSnRecInfoResponse(
	struct soap *soap,
	std::string *UpdSnRecInfoResult)
{
	_ns1__UpdSnRecInfoResponse *_p = soap_new__ns1__UpdSnRecInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdSnRecInfoResponse::UpdSnRecInfoResult = UpdSnRecInfoResult;
	}
	return _p;
}

inline int soap_write__ns1__UpdSnRecInfoResponse(struct soap *soap, _ns1__UpdSnRecInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfoResponse", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdSnRecInfoResponse(struct soap *soap, const char *URL, _ns1__UpdSnRecInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfoResponse", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdSnRecInfoResponse(struct soap *soap, const char *URL, _ns1__UpdSnRecInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfoResponse", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdSnRecInfoResponse * SOAP_FMAC4 soap_get__ns1__UpdSnRecInfoResponse(struct soap*, _ns1__UpdSnRecInfoResponse *, const char*, const char*);

inline int soap_read__ns1__UpdSnRecInfoResponse(struct soap *soap, _ns1__UpdSnRecInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdSnRecInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdSnRecInfoResponse(struct soap *soap, const char *URL, _ns1__UpdSnRecInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdSnRecInfoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdSnRecInfoResponse(struct soap *soap, _ns1__UpdSnRecInfoResponse *p)
{
	if (soap_read__ns1__UpdSnRecInfoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdSnRecInfo_DEFINED
#define SOAP_TYPE__ns1__UpdSnRecInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdSnRecInfo(struct soap*, const char*, int, const _ns1__UpdSnRecInfo *, const char*);
SOAP_FMAC3 _ns1__UpdSnRecInfo * SOAP_FMAC4 soap_in__ns1__UpdSnRecInfo(struct soap*, const char*, _ns1__UpdSnRecInfo *, const char*);
SOAP_FMAC1 _ns1__UpdSnRecInfo * SOAP_FMAC2 soap_instantiate__ns1__UpdSnRecInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdSnRecInfo * soap_new__ns1__UpdSnRecInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdSnRecInfo(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdSnRecInfo * soap_new_req__ns1__UpdSnRecInfo(
	struct soap *soap)
{
	_ns1__UpdSnRecInfo *_p = soap_new__ns1__UpdSnRecInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdSnRecInfo * soap_new_set__ns1__UpdSnRecInfo(
	struct soap *soap,
	std::string *MO,
	std::string *PartNo,
	std::string *SN,
	std::string *VD,
	std::string *StationNo,
	std::string *BoxSN,
	std::string *PkgTime)
{
	_ns1__UpdSnRecInfo *_p = soap_new__ns1__UpdSnRecInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdSnRecInfo::MO = MO;
		_p->_ns1__UpdSnRecInfo::PartNo = PartNo;
		_p->_ns1__UpdSnRecInfo::SN = SN;
		_p->_ns1__UpdSnRecInfo::VD = VD;
		_p->_ns1__UpdSnRecInfo::StationNo = StationNo;
		_p->_ns1__UpdSnRecInfo::BoxSN = BoxSN;
		_p->_ns1__UpdSnRecInfo::PkgTime = PkgTime;
	}
	return _p;
}

inline int soap_write__ns1__UpdSnRecInfo(struct soap *soap, _ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfo", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdSnRecInfo(struct soap *soap, const char *URL, _ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfo", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdSnRecInfo(struct soap *soap, const char *URL, _ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdSnRecInfo", p->soap_type() == SOAP_TYPE__ns1__UpdSnRecInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdSnRecInfo * SOAP_FMAC4 soap_get__ns1__UpdSnRecInfo(struct soap*, _ns1__UpdSnRecInfo *, const char*, const char*);

inline int soap_read__ns1__UpdSnRecInfo(struct soap *soap, _ns1__UpdSnRecInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdSnRecInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdSnRecInfo(struct soap *soap, const char *URL, _ns1__UpdSnRecInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdSnRecInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdSnRecInfo(struct soap *soap, _ns1__UpdSnRecInfo *p)
{
	if (soap_read__ns1__UpdSnRecInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsBoxInfoResponse_DEFINED
#define SOAP_TYPE__ns1__InsBoxInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsBoxInfoResponse(struct soap*, const char*, int, const _ns1__InsBoxInfoResponse *, const char*);
SOAP_FMAC3 _ns1__InsBoxInfoResponse * SOAP_FMAC4 soap_in__ns1__InsBoxInfoResponse(struct soap*, const char*, _ns1__InsBoxInfoResponse *, const char*);
SOAP_FMAC1 _ns1__InsBoxInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__InsBoxInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsBoxInfoResponse * soap_new__ns1__InsBoxInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsBoxInfoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsBoxInfoResponse * soap_new_req__ns1__InsBoxInfoResponse(
	struct soap *soap)
{
	_ns1__InsBoxInfoResponse *_p = soap_new__ns1__InsBoxInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsBoxInfoResponse * soap_new_set__ns1__InsBoxInfoResponse(
	struct soap *soap,
	std::string *InsBoxInfoResult)
{
	_ns1__InsBoxInfoResponse *_p = soap_new__ns1__InsBoxInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsBoxInfoResponse::InsBoxInfoResult = InsBoxInfoResult;
	}
	return _p;
}

inline int soap_write__ns1__InsBoxInfoResponse(struct soap *soap, _ns1__InsBoxInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfoResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsBoxInfoResponse(struct soap *soap, const char *URL, _ns1__InsBoxInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfoResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsBoxInfoResponse(struct soap *soap, const char *URL, _ns1__InsBoxInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfoResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsBoxInfoResponse * SOAP_FMAC4 soap_get__ns1__InsBoxInfoResponse(struct soap*, _ns1__InsBoxInfoResponse *, const char*, const char*);

inline int soap_read__ns1__InsBoxInfoResponse(struct soap *soap, _ns1__InsBoxInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsBoxInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsBoxInfoResponse(struct soap *soap, const char *URL, _ns1__InsBoxInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsBoxInfoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsBoxInfoResponse(struct soap *soap, _ns1__InsBoxInfoResponse *p)
{
	if (soap_read__ns1__InsBoxInfoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsBoxInfo_DEFINED
#define SOAP_TYPE__ns1__InsBoxInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsBoxInfo(struct soap*, const char*, int, const _ns1__InsBoxInfo *, const char*);
SOAP_FMAC3 _ns1__InsBoxInfo * SOAP_FMAC4 soap_in__ns1__InsBoxInfo(struct soap*, const char*, _ns1__InsBoxInfo *, const char*);
SOAP_FMAC1 _ns1__InsBoxInfo * SOAP_FMAC2 soap_instantiate__ns1__InsBoxInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsBoxInfo * soap_new__ns1__InsBoxInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsBoxInfo(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsBoxInfo * soap_new_req__ns1__InsBoxInfo(
	struct soap *soap,
	int TargetQty,
	int PkgQty)
{
	_ns1__InsBoxInfo *_p = soap_new__ns1__InsBoxInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsBoxInfo::TargetQty = TargetQty;
		_p->_ns1__InsBoxInfo::PkgQty = PkgQty;
	}
	return _p;
}

inline _ns1__InsBoxInfo * soap_new_set__ns1__InsBoxInfo(
	struct soap *soap,
	std::string *MO,
	std::string *PartNo,
	std::string *VD,
	std::string *StationNo,
	std::string *BoxSN,
	int TargetQty,
	int PkgQty,
	std::string *CrePkgTime,
	std::string *EndPkgTime)
{
	_ns1__InsBoxInfo *_p = soap_new__ns1__InsBoxInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsBoxInfo::MO = MO;
		_p->_ns1__InsBoxInfo::PartNo = PartNo;
		_p->_ns1__InsBoxInfo::VD = VD;
		_p->_ns1__InsBoxInfo::StationNo = StationNo;
		_p->_ns1__InsBoxInfo::BoxSN = BoxSN;
		_p->_ns1__InsBoxInfo::TargetQty = TargetQty;
		_p->_ns1__InsBoxInfo::PkgQty = PkgQty;
		_p->_ns1__InsBoxInfo::CrePkgTime = CrePkgTime;
		_p->_ns1__InsBoxInfo::EndPkgTime = EndPkgTime;
	}
	return _p;
}

inline int soap_write__ns1__InsBoxInfo(struct soap *soap, _ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfo", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsBoxInfo(struct soap *soap, const char *URL, _ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfo", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsBoxInfo(struct soap *soap, const char *URL, _ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxInfo", p->soap_type() == SOAP_TYPE__ns1__InsBoxInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsBoxInfo * SOAP_FMAC4 soap_get__ns1__InsBoxInfo(struct soap*, _ns1__InsBoxInfo *, const char*, const char*);

inline int soap_read__ns1__InsBoxInfo(struct soap *soap, _ns1__InsBoxInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsBoxInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsBoxInfo(struct soap *soap, const char *URL, _ns1__InsBoxInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsBoxInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsBoxInfo(struct soap *soap, _ns1__InsBoxInfo *p)
{
	if (soap_read__ns1__InsBoxInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsLnkOutSNResponse_DEFINED
#define SOAP_TYPE__ns1__InsLnkOutSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsLnkOutSNResponse(struct soap*, const char*, int, const _ns1__InsLnkOutSNResponse *, const char*);
SOAP_FMAC3 _ns1__InsLnkOutSNResponse * SOAP_FMAC4 soap_in__ns1__InsLnkOutSNResponse(struct soap*, const char*, _ns1__InsLnkOutSNResponse *, const char*);
SOAP_FMAC1 _ns1__InsLnkOutSNResponse * SOAP_FMAC2 soap_instantiate__ns1__InsLnkOutSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsLnkOutSNResponse * soap_new__ns1__InsLnkOutSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsLnkOutSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsLnkOutSNResponse * soap_new_req__ns1__InsLnkOutSNResponse(
	struct soap *soap)
{
	_ns1__InsLnkOutSNResponse *_p = soap_new__ns1__InsLnkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsLnkOutSNResponse * soap_new_set__ns1__InsLnkOutSNResponse(
	struct soap *soap,
	std::string *InsLnkOutSNResult)
{
	_ns1__InsLnkOutSNResponse *_p = soap_new__ns1__InsLnkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsLnkOutSNResponse::InsLnkOutSNResult = InsLnkOutSNResult;
	}
	return _p;
}

inline int soap_write__ns1__InsLnkOutSNResponse(struct soap *soap, _ns1__InsLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__InsLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__InsLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsLnkOutSNResponse * SOAP_FMAC4 soap_get__ns1__InsLnkOutSNResponse(struct soap*, _ns1__InsLnkOutSNResponse *, const char*, const char*);

inline int soap_read__ns1__InsLnkOutSNResponse(struct soap *soap, _ns1__InsLnkOutSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsLnkOutSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__InsLnkOutSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsLnkOutSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsLnkOutSNResponse(struct soap *soap, _ns1__InsLnkOutSNResponse *p)
{
	if (soap_read__ns1__InsLnkOutSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsLnkOutSN_DEFINED
#define SOAP_TYPE__ns1__InsLnkOutSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsLnkOutSN(struct soap*, const char*, int, const _ns1__InsLnkOutSN *, const char*);
SOAP_FMAC3 _ns1__InsLnkOutSN * SOAP_FMAC4 soap_in__ns1__InsLnkOutSN(struct soap*, const char*, _ns1__InsLnkOutSN *, const char*);
SOAP_FMAC1 _ns1__InsLnkOutSN * SOAP_FMAC2 soap_instantiate__ns1__InsLnkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsLnkOutSN * soap_new__ns1__InsLnkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsLnkOutSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsLnkOutSN * soap_new_req__ns1__InsLnkOutSN(
	struct soap *soap)
{
	_ns1__InsLnkOutSN *_p = soap_new__ns1__InsLnkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsLnkOutSN * soap_new_set__ns1__InsLnkOutSN(
	struct soap *soap,
	std::string *empNO,
	std::string *SN,
	std::string *LnkSN)
{
	_ns1__InsLnkOutSN *_p = soap_new__ns1__InsLnkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsLnkOutSN::empNO = empNO;
		_p->_ns1__InsLnkOutSN::SN = SN;
		_p->_ns1__InsLnkOutSN::LnkSN = LnkSN;
	}
	return _p;
}

inline int soap_write__ns1__InsLnkOutSN(struct soap *soap, _ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsLnkOutSN(struct soap *soap, const char *URL, _ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsLnkOutSN(struct soap *soap, const char *URL, _ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__InsLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsLnkOutSN * SOAP_FMAC4 soap_get__ns1__InsLnkOutSN(struct soap*, _ns1__InsLnkOutSN *, const char*, const char*);

inline int soap_read__ns1__InsLnkOutSN(struct soap *soap, _ns1__InsLnkOutSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsLnkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsLnkOutSN(struct soap *soap, const char *URL, _ns1__InsLnkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsLnkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsLnkOutSN(struct soap *soap, _ns1__InsLnkOutSN *p)
{
	if (soap_read__ns1__InsLnkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNStationEmpResponse_DEFINED
#define SOAP_TYPE__ns1__InsSNStationEmpResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNStationEmpResponse(struct soap*, const char*, int, const _ns1__InsSNStationEmpResponse *, const char*);
SOAP_FMAC3 _ns1__InsSNStationEmpResponse * SOAP_FMAC4 soap_in__ns1__InsSNStationEmpResponse(struct soap*, const char*, _ns1__InsSNStationEmpResponse *, const char*);
SOAP_FMAC1 _ns1__InsSNStationEmpResponse * SOAP_FMAC2 soap_instantiate__ns1__InsSNStationEmpResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNStationEmpResponse * soap_new__ns1__InsSNStationEmpResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNStationEmpResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNStationEmpResponse * soap_new_req__ns1__InsSNStationEmpResponse(
	struct soap *soap)
{
	_ns1__InsSNStationEmpResponse *_p = soap_new__ns1__InsSNStationEmpResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNStationEmpResponse * soap_new_set__ns1__InsSNStationEmpResponse(
	struct soap *soap,
	std::string *InsSNStationEmpResult)
{
	_ns1__InsSNStationEmpResponse *_p = soap_new__ns1__InsSNStationEmpResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNStationEmpResponse::InsSNStationEmpResult = InsSNStationEmpResult;
	}
	return _p;
}

inline int soap_write__ns1__InsSNStationEmpResponse(struct soap *soap, _ns1__InsSNStationEmpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmpResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmpResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNStationEmpResponse(struct soap *soap, const char *URL, _ns1__InsSNStationEmpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmpResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmpResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNStationEmpResponse(struct soap *soap, const char *URL, _ns1__InsSNStationEmpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmpResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmpResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNStationEmpResponse * SOAP_FMAC4 soap_get__ns1__InsSNStationEmpResponse(struct soap*, _ns1__InsSNStationEmpResponse *, const char*, const char*);

inline int soap_read__ns1__InsSNStationEmpResponse(struct soap *soap, _ns1__InsSNStationEmpResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNStationEmpResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNStationEmpResponse(struct soap *soap, const char *URL, _ns1__InsSNStationEmpResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNStationEmpResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNStationEmpResponse(struct soap *soap, _ns1__InsSNStationEmpResponse *p)
{
	if (soap_read__ns1__InsSNStationEmpResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNStationEmp_DEFINED
#define SOAP_TYPE__ns1__InsSNStationEmp_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNStationEmp(struct soap*, const char*, int, const _ns1__InsSNStationEmp *, const char*);
SOAP_FMAC3 _ns1__InsSNStationEmp * SOAP_FMAC4 soap_in__ns1__InsSNStationEmp(struct soap*, const char*, _ns1__InsSNStationEmp *, const char*);
SOAP_FMAC1 _ns1__InsSNStationEmp * SOAP_FMAC2 soap_instantiate__ns1__InsSNStationEmp(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNStationEmp * soap_new__ns1__InsSNStationEmp(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNStationEmp(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNStationEmp * soap_new_req__ns1__InsSNStationEmp(
	struct soap *soap)
{
	_ns1__InsSNStationEmp *_p = soap_new__ns1__InsSNStationEmp(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNStationEmp * soap_new_set__ns1__InsSNStationEmp(
	struct soap *soap,
	std::string *SN,
	std::string *EmpNo,
	std::string *Station)
{
	_ns1__InsSNStationEmp *_p = soap_new__ns1__InsSNStationEmp(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNStationEmp::SN = SN;
		_p->_ns1__InsSNStationEmp::EmpNo = EmpNo;
		_p->_ns1__InsSNStationEmp::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__InsSNStationEmp(struct soap *soap, _ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmp", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmp ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNStationEmp(struct soap *soap, const char *URL, _ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmp", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmp ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNStationEmp(struct soap *soap, const char *URL, _ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNStationEmp", p->soap_type() == SOAP_TYPE__ns1__InsSNStationEmp ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNStationEmp * SOAP_FMAC4 soap_get__ns1__InsSNStationEmp(struct soap*, _ns1__InsSNStationEmp *, const char*, const char*);

inline int soap_read__ns1__InsSNStationEmp(struct soap *soap, _ns1__InsSNStationEmp *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNStationEmp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNStationEmp(struct soap *soap, const char *URL, _ns1__InsSNStationEmp *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNStationEmp(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNStationEmp(struct soap *soap, _ns1__InsSNStationEmp *p)
{
	if (soap_read__ns1__InsSNStationEmp(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelBoxLnkResponse_DEFINED
#define SOAP_TYPE__ns1__CancelBoxLnkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelBoxLnkResponse(struct soap*, const char*, int, const _ns1__CancelBoxLnkResponse *, const char*);
SOAP_FMAC3 _ns1__CancelBoxLnkResponse * SOAP_FMAC4 soap_in__ns1__CancelBoxLnkResponse(struct soap*, const char*, _ns1__CancelBoxLnkResponse *, const char*);
SOAP_FMAC1 _ns1__CancelBoxLnkResponse * SOAP_FMAC2 soap_instantiate__ns1__CancelBoxLnkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelBoxLnkResponse * soap_new__ns1__CancelBoxLnkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelBoxLnkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelBoxLnkResponse * soap_new_req__ns1__CancelBoxLnkResponse(
	struct soap *soap)
{
	_ns1__CancelBoxLnkResponse *_p = soap_new__ns1__CancelBoxLnkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelBoxLnkResponse * soap_new_set__ns1__CancelBoxLnkResponse(
	struct soap *soap,
	std::string *CancelBoxLnkResult)
{
	_ns1__CancelBoxLnkResponse *_p = soap_new__ns1__CancelBoxLnkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelBoxLnkResponse::CancelBoxLnkResult = CancelBoxLnkResult;
	}
	return _p;
}

inline int soap_write__ns1__CancelBoxLnkResponse(struct soap *soap, _ns1__CancelBoxLnkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnkResponse", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelBoxLnkResponse(struct soap *soap, const char *URL, _ns1__CancelBoxLnkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnkResponse", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelBoxLnkResponse(struct soap *soap, const char *URL, _ns1__CancelBoxLnkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnkResponse", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelBoxLnkResponse * SOAP_FMAC4 soap_get__ns1__CancelBoxLnkResponse(struct soap*, _ns1__CancelBoxLnkResponse *, const char*, const char*);

inline int soap_read__ns1__CancelBoxLnkResponse(struct soap *soap, _ns1__CancelBoxLnkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelBoxLnkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelBoxLnkResponse(struct soap *soap, const char *URL, _ns1__CancelBoxLnkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelBoxLnkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelBoxLnkResponse(struct soap *soap, _ns1__CancelBoxLnkResponse *p)
{
	if (soap_read__ns1__CancelBoxLnkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelBoxLnk_DEFINED
#define SOAP_TYPE__ns1__CancelBoxLnk_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelBoxLnk(struct soap*, const char*, int, const _ns1__CancelBoxLnk *, const char*);
SOAP_FMAC3 _ns1__CancelBoxLnk * SOAP_FMAC4 soap_in__ns1__CancelBoxLnk(struct soap*, const char*, _ns1__CancelBoxLnk *, const char*);
SOAP_FMAC1 _ns1__CancelBoxLnk * SOAP_FMAC2 soap_instantiate__ns1__CancelBoxLnk(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelBoxLnk * soap_new__ns1__CancelBoxLnk(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CancelBoxLnk(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelBoxLnk * soap_new_req__ns1__CancelBoxLnk(
	struct soap *soap)
{
	_ns1__CancelBoxLnk *_p = soap_new__ns1__CancelBoxLnk(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CancelBoxLnk * soap_new_set__ns1__CancelBoxLnk(
	struct soap *soap,
	std::string *EmpNo,
	std::string *BoxNo)
{
	_ns1__CancelBoxLnk *_p = soap_new__ns1__CancelBoxLnk(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelBoxLnk::EmpNo = EmpNo;
		_p->_ns1__CancelBoxLnk::BoxNo = BoxNo;
	}
	return _p;
}

inline int soap_write__ns1__CancelBoxLnk(struct soap *soap, _ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnk", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CancelBoxLnk(struct soap *soap, const char *URL, _ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnk", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CancelBoxLnk(struct soap *soap, const char *URL, _ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelBoxLnk", p->soap_type() == SOAP_TYPE__ns1__CancelBoxLnk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelBoxLnk * SOAP_FMAC4 soap_get__ns1__CancelBoxLnk(struct soap*, _ns1__CancelBoxLnk *, const char*, const char*);

inline int soap_read__ns1__CancelBoxLnk(struct soap *soap, _ns1__CancelBoxLnk *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelBoxLnk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CancelBoxLnk(struct soap *soap, const char *URL, _ns1__CancelBoxLnk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CancelBoxLnk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CancelBoxLnk(struct soap *soap, _ns1__CancelBoxLnk *p)
{
	if (soap_read__ns1__CancelBoxLnk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OutStationbyBoxResponse_DEFINED
#define SOAP_TYPE__ns1__OutStationbyBoxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutStationbyBoxResponse(struct soap*, const char*, int, const _ns1__OutStationbyBoxResponse *, const char*);
SOAP_FMAC3 _ns1__OutStationbyBoxResponse * SOAP_FMAC4 soap_in__ns1__OutStationbyBoxResponse(struct soap*, const char*, _ns1__OutStationbyBoxResponse *, const char*);
SOAP_FMAC1 _ns1__OutStationbyBoxResponse * SOAP_FMAC2 soap_instantiate__ns1__OutStationbyBoxResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutStationbyBoxResponse * soap_new__ns1__OutStationbyBoxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutStationbyBoxResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutStationbyBoxResponse * soap_new_req__ns1__OutStationbyBoxResponse(
	struct soap *soap)
{
	_ns1__OutStationbyBoxResponse *_p = soap_new__ns1__OutStationbyBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutStationbyBoxResponse * soap_new_set__ns1__OutStationbyBoxResponse(
	struct soap *soap,
	std::string *OutStationbyBoxResult)
{
	_ns1__OutStationbyBoxResponse *_p = soap_new__ns1__OutStationbyBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutStationbyBoxResponse::OutStationbyBoxResult = OutStationbyBoxResult;
	}
	return _p;
}

inline int soap_write__ns1__OutStationbyBoxResponse(struct soap *soap, _ns1__OutStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__OutStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__OutStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutStationbyBoxResponse * SOAP_FMAC4 soap_get__ns1__OutStationbyBoxResponse(struct soap*, _ns1__OutStationbyBoxResponse *, const char*, const char*);

inline int soap_read__ns1__OutStationbyBoxResponse(struct soap *soap, _ns1__OutStationbyBoxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OutStationbyBoxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__OutStationbyBoxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OutStationbyBoxResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OutStationbyBoxResponse(struct soap *soap, _ns1__OutStationbyBoxResponse *p)
{
	if (soap_read__ns1__OutStationbyBoxResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OutStationbyBox_DEFINED
#define SOAP_TYPE__ns1__OutStationbyBox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutStationbyBox(struct soap*, const char*, int, const _ns1__OutStationbyBox *, const char*);
SOAP_FMAC3 _ns1__OutStationbyBox * SOAP_FMAC4 soap_in__ns1__OutStationbyBox(struct soap*, const char*, _ns1__OutStationbyBox *, const char*);
SOAP_FMAC1 _ns1__OutStationbyBox * SOAP_FMAC2 soap_instantiate__ns1__OutStationbyBox(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutStationbyBox * soap_new__ns1__OutStationbyBox(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutStationbyBox(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutStationbyBox * soap_new_req__ns1__OutStationbyBox(
	struct soap *soap)
{
	_ns1__OutStationbyBox *_p = soap_new__ns1__OutStationbyBox(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutStationbyBox * soap_new_set__ns1__OutStationbyBox(
	struct soap *soap,
	std::string *EmpNo,
	std::string *BoxNo,
	std::string *Station)
{
	_ns1__OutStationbyBox *_p = soap_new__ns1__OutStationbyBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutStationbyBox::EmpNo = EmpNo;
		_p->_ns1__OutStationbyBox::BoxNo = BoxNo;
		_p->_ns1__OutStationbyBox::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__OutStationbyBox(struct soap *soap, _ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBox", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutStationbyBox(struct soap *soap, const char *URL, _ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBox", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutStationbyBox(struct soap *soap, const char *URL, _ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutStationbyBox", p->soap_type() == SOAP_TYPE__ns1__OutStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutStationbyBox * SOAP_FMAC4 soap_get__ns1__OutStationbyBox(struct soap*, _ns1__OutStationbyBox *, const char*, const char*);

inline int soap_read__ns1__OutStationbyBox(struct soap *soap, _ns1__OutStationbyBox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OutStationbyBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutStationbyBox(struct soap *soap, const char *URL, _ns1__OutStationbyBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OutStationbyBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OutStationbyBox(struct soap *soap, _ns1__OutStationbyBox *p)
{
	if (soap_read__ns1__OutStationbyBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InStationbyBoxResponse_DEFINED
#define SOAP_TYPE__ns1__InStationbyBoxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InStationbyBoxResponse(struct soap*, const char*, int, const _ns1__InStationbyBoxResponse *, const char*);
SOAP_FMAC3 _ns1__InStationbyBoxResponse * SOAP_FMAC4 soap_in__ns1__InStationbyBoxResponse(struct soap*, const char*, _ns1__InStationbyBoxResponse *, const char*);
SOAP_FMAC1 _ns1__InStationbyBoxResponse * SOAP_FMAC2 soap_instantiate__ns1__InStationbyBoxResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InStationbyBoxResponse * soap_new__ns1__InStationbyBoxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InStationbyBoxResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InStationbyBoxResponse * soap_new_req__ns1__InStationbyBoxResponse(
	struct soap *soap)
{
	_ns1__InStationbyBoxResponse *_p = soap_new__ns1__InStationbyBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InStationbyBoxResponse * soap_new_set__ns1__InStationbyBoxResponse(
	struct soap *soap,
	std::string *InStationbyBoxResult)
{
	_ns1__InStationbyBoxResponse *_p = soap_new__ns1__InStationbyBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InStationbyBoxResponse::InStationbyBoxResult = InStationbyBoxResult;
	}
	return _p;
}

inline int soap_write__ns1__InStationbyBoxResponse(struct soap *soap, _ns1__InStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__InStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__InStationbyBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InStationbyBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InStationbyBoxResponse * SOAP_FMAC4 soap_get__ns1__InStationbyBoxResponse(struct soap*, _ns1__InStationbyBoxResponse *, const char*, const char*);

inline int soap_read__ns1__InStationbyBoxResponse(struct soap *soap, _ns1__InStationbyBoxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InStationbyBoxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InStationbyBoxResponse(struct soap *soap, const char *URL, _ns1__InStationbyBoxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InStationbyBoxResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InStationbyBoxResponse(struct soap *soap, _ns1__InStationbyBoxResponse *p)
{
	if (soap_read__ns1__InStationbyBoxResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InStationbyBox_DEFINED
#define SOAP_TYPE__ns1__InStationbyBox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InStationbyBox(struct soap*, const char*, int, const _ns1__InStationbyBox *, const char*);
SOAP_FMAC3 _ns1__InStationbyBox * SOAP_FMAC4 soap_in__ns1__InStationbyBox(struct soap*, const char*, _ns1__InStationbyBox *, const char*);
SOAP_FMAC1 _ns1__InStationbyBox * SOAP_FMAC2 soap_instantiate__ns1__InStationbyBox(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InStationbyBox * soap_new__ns1__InStationbyBox(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InStationbyBox(soap, n, NULL, NULL, NULL);
}

inline _ns1__InStationbyBox * soap_new_req__ns1__InStationbyBox(
	struct soap *soap)
{
	_ns1__InStationbyBox *_p = soap_new__ns1__InStationbyBox(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InStationbyBox * soap_new_set__ns1__InStationbyBox(
	struct soap *soap,
	std::string *EmpNo,
	std::string *BoxNo,
	std::string *Station)
{
	_ns1__InStationbyBox *_p = soap_new__ns1__InStationbyBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InStationbyBox::EmpNo = EmpNo;
		_p->_ns1__InStationbyBox::BoxNo = BoxNo;
		_p->_ns1__InStationbyBox::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__InStationbyBox(struct soap *soap, _ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBox", p->soap_type() == SOAP_TYPE__ns1__InStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InStationbyBox(struct soap *soap, const char *URL, _ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBox", p->soap_type() == SOAP_TYPE__ns1__InStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InStationbyBox(struct soap *soap, const char *URL, _ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InStationbyBox", p->soap_type() == SOAP_TYPE__ns1__InStationbyBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InStationbyBox * SOAP_FMAC4 soap_get__ns1__InStationbyBox(struct soap*, _ns1__InStationbyBox *, const char*, const char*);

inline int soap_read__ns1__InStationbyBox(struct soap *soap, _ns1__InStationbyBox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InStationbyBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InStationbyBox(struct soap *soap, const char *URL, _ns1__InStationbyBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InStationbyBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InStationbyBox(struct soap *soap, _ns1__InStationbyBox *p)
{
	if (soap_read__ns1__InStationbyBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EndSNtoBoxResponse_DEFINED
#define SOAP_TYPE__ns1__EndSNtoBoxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndSNtoBoxResponse(struct soap*, const char*, int, const _ns1__EndSNtoBoxResponse *, const char*);
SOAP_FMAC3 _ns1__EndSNtoBoxResponse * SOAP_FMAC4 soap_in__ns1__EndSNtoBoxResponse(struct soap*, const char*, _ns1__EndSNtoBoxResponse *, const char*);
SOAP_FMAC1 _ns1__EndSNtoBoxResponse * SOAP_FMAC2 soap_instantiate__ns1__EndSNtoBoxResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndSNtoBoxResponse * soap_new__ns1__EndSNtoBoxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EndSNtoBoxResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__EndSNtoBoxResponse * soap_new_req__ns1__EndSNtoBoxResponse(
	struct soap *soap)
{
	_ns1__EndSNtoBoxResponse *_p = soap_new__ns1__EndSNtoBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EndSNtoBoxResponse * soap_new_set__ns1__EndSNtoBoxResponse(
	struct soap *soap,
	std::string *EndSNtoBoxResult)
{
	_ns1__EndSNtoBoxResponse *_p = soap_new__ns1__EndSNtoBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndSNtoBoxResponse::EndSNtoBoxResult = EndSNtoBoxResult;
	}
	return _p;
}

inline int soap_write__ns1__EndSNtoBoxResponse(struct soap *soap, _ns1__EndSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EndSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__EndSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EndSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__EndSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EndSNtoBoxResponse * SOAP_FMAC4 soap_get__ns1__EndSNtoBoxResponse(struct soap*, _ns1__EndSNtoBoxResponse *, const char*, const char*);

inline int soap_read__ns1__EndSNtoBoxResponse(struct soap *soap, _ns1__EndSNtoBoxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EndSNtoBoxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EndSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__EndSNtoBoxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__EndSNtoBoxResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__EndSNtoBoxResponse(struct soap *soap, _ns1__EndSNtoBoxResponse *p)
{
	if (soap_read__ns1__EndSNtoBoxResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EndSNtoBox_DEFINED
#define SOAP_TYPE__ns1__EndSNtoBox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndSNtoBox(struct soap*, const char*, int, const _ns1__EndSNtoBox *, const char*);
SOAP_FMAC3 _ns1__EndSNtoBox * SOAP_FMAC4 soap_in__ns1__EndSNtoBox(struct soap*, const char*, _ns1__EndSNtoBox *, const char*);
SOAP_FMAC1 _ns1__EndSNtoBox * SOAP_FMAC2 soap_instantiate__ns1__EndSNtoBox(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndSNtoBox * soap_new__ns1__EndSNtoBox(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EndSNtoBox(soap, n, NULL, NULL, NULL);
}

inline _ns1__EndSNtoBox * soap_new_req__ns1__EndSNtoBox(
	struct soap *soap)
{
	_ns1__EndSNtoBox *_p = soap_new__ns1__EndSNtoBox(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EndSNtoBox * soap_new_set__ns1__EndSNtoBox(
	struct soap *soap,
	std::string *BoxNo)
{
	_ns1__EndSNtoBox *_p = soap_new__ns1__EndSNtoBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndSNtoBox::BoxNo = BoxNo;
	}
	return _p;
}

inline int soap_write__ns1__EndSNtoBox(struct soap *soap, _ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBox", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EndSNtoBox(struct soap *soap, const char *URL, _ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBox", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EndSNtoBox(struct soap *soap, const char *URL, _ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndSNtoBox", p->soap_type() == SOAP_TYPE__ns1__EndSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EndSNtoBox * SOAP_FMAC4 soap_get__ns1__EndSNtoBox(struct soap*, _ns1__EndSNtoBox *, const char*, const char*);

inline int soap_read__ns1__EndSNtoBox(struct soap *soap, _ns1__EndSNtoBox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EndSNtoBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EndSNtoBox(struct soap *soap, const char *URL, _ns1__EndSNtoBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__EndSNtoBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__EndSNtoBox(struct soap *soap, _ns1__EndSNtoBox *p)
{
	if (soap_read__ns1__EndSNtoBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InSNtoBoxResponse_DEFINED
#define SOAP_TYPE__ns1__InSNtoBoxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InSNtoBoxResponse(struct soap*, const char*, int, const _ns1__InSNtoBoxResponse *, const char*);
SOAP_FMAC3 _ns1__InSNtoBoxResponse * SOAP_FMAC4 soap_in__ns1__InSNtoBoxResponse(struct soap*, const char*, _ns1__InSNtoBoxResponse *, const char*);
SOAP_FMAC1 _ns1__InSNtoBoxResponse * SOAP_FMAC2 soap_instantiate__ns1__InSNtoBoxResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InSNtoBoxResponse * soap_new__ns1__InSNtoBoxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InSNtoBoxResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InSNtoBoxResponse * soap_new_req__ns1__InSNtoBoxResponse(
	struct soap *soap)
{
	_ns1__InSNtoBoxResponse *_p = soap_new__ns1__InSNtoBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InSNtoBoxResponse * soap_new_set__ns1__InSNtoBoxResponse(
	struct soap *soap,
	std::string *InSNtoBoxResult)
{
	_ns1__InSNtoBoxResponse *_p = soap_new__ns1__InSNtoBoxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InSNtoBoxResponse::InSNtoBoxResult = InSNtoBoxResult;
	}
	return _p;
}

inline int soap_write__ns1__InSNtoBoxResponse(struct soap *soap, _ns1__InSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__InSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__InSNtoBoxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBoxResponse", p->soap_type() == SOAP_TYPE__ns1__InSNtoBoxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InSNtoBoxResponse * SOAP_FMAC4 soap_get__ns1__InSNtoBoxResponse(struct soap*, _ns1__InSNtoBoxResponse *, const char*, const char*);

inline int soap_read__ns1__InSNtoBoxResponse(struct soap *soap, _ns1__InSNtoBoxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InSNtoBoxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InSNtoBoxResponse(struct soap *soap, const char *URL, _ns1__InSNtoBoxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InSNtoBoxResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InSNtoBoxResponse(struct soap *soap, _ns1__InSNtoBoxResponse *p)
{
	if (soap_read__ns1__InSNtoBoxResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InSNtoBox_DEFINED
#define SOAP_TYPE__ns1__InSNtoBox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InSNtoBox(struct soap*, const char*, int, const _ns1__InSNtoBox *, const char*);
SOAP_FMAC3 _ns1__InSNtoBox * SOAP_FMAC4 soap_in__ns1__InSNtoBox(struct soap*, const char*, _ns1__InSNtoBox *, const char*);
SOAP_FMAC1 _ns1__InSNtoBox * SOAP_FMAC2 soap_instantiate__ns1__InSNtoBox(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InSNtoBox * soap_new__ns1__InSNtoBox(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InSNtoBox(soap, n, NULL, NULL, NULL);
}

inline _ns1__InSNtoBox * soap_new_req__ns1__InSNtoBox(
	struct soap *soap)
{
	_ns1__InSNtoBox *_p = soap_new__ns1__InSNtoBox(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InSNtoBox * soap_new_set__ns1__InSNtoBox(
	struct soap *soap,
	std::string *EmpNo,
	std::string *BoxNo,
	std::string *SN)
{
	_ns1__InSNtoBox *_p = soap_new__ns1__InSNtoBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InSNtoBox::EmpNo = EmpNo;
		_p->_ns1__InSNtoBox::BoxNo = BoxNo;
		_p->_ns1__InSNtoBox::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__InSNtoBox(struct soap *soap, _ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBox", p->soap_type() == SOAP_TYPE__ns1__InSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InSNtoBox(struct soap *soap, const char *URL, _ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBox", p->soap_type() == SOAP_TYPE__ns1__InSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InSNtoBox(struct soap *soap, const char *URL, _ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InSNtoBox", p->soap_type() == SOAP_TYPE__ns1__InSNtoBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InSNtoBox * SOAP_FMAC4 soap_get__ns1__InSNtoBox(struct soap*, _ns1__InSNtoBox *, const char*, const char*);

inline int soap_read__ns1__InSNtoBox(struct soap *soap, _ns1__InSNtoBox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InSNtoBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InSNtoBox(struct soap *soap, const char *URL, _ns1__InSNtoBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InSNtoBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InSNtoBox(struct soap *soap, _ns1__InSNtoBox *p)
{
	if (soap_read__ns1__InSNtoBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkBoxNoResponse_DEFINED
#define SOAP_TYPE__ns1__chkBoxNoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkBoxNoResponse(struct soap*, const char*, int, const _ns1__chkBoxNoResponse *, const char*);
SOAP_FMAC3 _ns1__chkBoxNoResponse * SOAP_FMAC4 soap_in__ns1__chkBoxNoResponse(struct soap*, const char*, _ns1__chkBoxNoResponse *, const char*);
SOAP_FMAC1 _ns1__chkBoxNoResponse * SOAP_FMAC2 soap_instantiate__ns1__chkBoxNoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkBoxNoResponse * soap_new__ns1__chkBoxNoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkBoxNoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkBoxNoResponse * soap_new_req__ns1__chkBoxNoResponse(
	struct soap *soap)
{
	_ns1__chkBoxNoResponse *_p = soap_new__ns1__chkBoxNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkBoxNoResponse * soap_new_set__ns1__chkBoxNoResponse(
	struct soap *soap,
	std::string *chkBoxNoResult)
{
	_ns1__chkBoxNoResponse *_p = soap_new__ns1__chkBoxNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkBoxNoResponse::chkBoxNoResult = chkBoxNoResult;
	}
	return _p;
}

inline int soap_write__ns1__chkBoxNoResponse(struct soap *soap, _ns1__chkBoxNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNoResponse", p->soap_type() == SOAP_TYPE__ns1__chkBoxNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkBoxNoResponse(struct soap *soap, const char *URL, _ns1__chkBoxNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNoResponse", p->soap_type() == SOAP_TYPE__ns1__chkBoxNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkBoxNoResponse(struct soap *soap, const char *URL, _ns1__chkBoxNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNoResponse", p->soap_type() == SOAP_TYPE__ns1__chkBoxNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkBoxNoResponse * SOAP_FMAC4 soap_get__ns1__chkBoxNoResponse(struct soap*, _ns1__chkBoxNoResponse *, const char*, const char*);

inline int soap_read__ns1__chkBoxNoResponse(struct soap *soap, _ns1__chkBoxNoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkBoxNoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkBoxNoResponse(struct soap *soap, const char *URL, _ns1__chkBoxNoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkBoxNoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkBoxNoResponse(struct soap *soap, _ns1__chkBoxNoResponse *p)
{
	if (soap_read__ns1__chkBoxNoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkBoxNo_DEFINED
#define SOAP_TYPE__ns1__chkBoxNo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkBoxNo(struct soap*, const char*, int, const _ns1__chkBoxNo *, const char*);
SOAP_FMAC3 _ns1__chkBoxNo * SOAP_FMAC4 soap_in__ns1__chkBoxNo(struct soap*, const char*, _ns1__chkBoxNo *, const char*);
SOAP_FMAC1 _ns1__chkBoxNo * SOAP_FMAC2 soap_instantiate__ns1__chkBoxNo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkBoxNo * soap_new__ns1__chkBoxNo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkBoxNo(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkBoxNo * soap_new_req__ns1__chkBoxNo(
	struct soap *soap)
{
	_ns1__chkBoxNo *_p = soap_new__ns1__chkBoxNo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkBoxNo * soap_new_set__ns1__chkBoxNo(
	struct soap *soap,
	std::string *BoxNo)
{
	_ns1__chkBoxNo *_p = soap_new__ns1__chkBoxNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkBoxNo::BoxNo = BoxNo;
	}
	return _p;
}

inline int soap_write__ns1__chkBoxNo(struct soap *soap, _ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNo", p->soap_type() == SOAP_TYPE__ns1__chkBoxNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkBoxNo(struct soap *soap, const char *URL, _ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNo", p->soap_type() == SOAP_TYPE__ns1__chkBoxNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkBoxNo(struct soap *soap, const char *URL, _ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkBoxNo", p->soap_type() == SOAP_TYPE__ns1__chkBoxNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkBoxNo * SOAP_FMAC4 soap_get__ns1__chkBoxNo(struct soap*, _ns1__chkBoxNo *, const char*, const char*);

inline int soap_read__ns1__chkBoxNo(struct soap *soap, _ns1__chkBoxNo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkBoxNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkBoxNo(struct soap *soap, const char *URL, _ns1__chkBoxNo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkBoxNo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkBoxNo(struct soap *soap, _ns1__chkBoxNo *p)
{
	if (soap_read__ns1__chkBoxNo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsBoxNOTimeResponse_DEFINED
#define SOAP_TYPE__ns1__InsBoxNOTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsBoxNOTimeResponse(struct soap*, const char*, int, const _ns1__InsBoxNOTimeResponse *, const char*);
SOAP_FMAC3 _ns1__InsBoxNOTimeResponse * SOAP_FMAC4 soap_in__ns1__InsBoxNOTimeResponse(struct soap*, const char*, _ns1__InsBoxNOTimeResponse *, const char*);
SOAP_FMAC1 _ns1__InsBoxNOTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__InsBoxNOTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsBoxNOTimeResponse * soap_new__ns1__InsBoxNOTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsBoxNOTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsBoxNOTimeResponse * soap_new_req__ns1__InsBoxNOTimeResponse(
	struct soap *soap)
{
	_ns1__InsBoxNOTimeResponse *_p = soap_new__ns1__InsBoxNOTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsBoxNOTimeResponse * soap_new_set__ns1__InsBoxNOTimeResponse(
	struct soap *soap,
	std::string *InsBoxNOTimeResult)
{
	_ns1__InsBoxNOTimeResponse *_p = soap_new__ns1__InsBoxNOTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsBoxNOTimeResponse::InsBoxNOTimeResult = InsBoxNOTimeResult;
	}
	return _p;
}

inline int soap_write__ns1__InsBoxNOTimeResponse(struct soap *soap, _ns1__InsBoxNOTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTimeResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsBoxNOTimeResponse(struct soap *soap, const char *URL, _ns1__InsBoxNOTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTimeResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsBoxNOTimeResponse(struct soap *soap, const char *URL, _ns1__InsBoxNOTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTimeResponse", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsBoxNOTimeResponse * SOAP_FMAC4 soap_get__ns1__InsBoxNOTimeResponse(struct soap*, _ns1__InsBoxNOTimeResponse *, const char*, const char*);

inline int soap_read__ns1__InsBoxNOTimeResponse(struct soap *soap, _ns1__InsBoxNOTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsBoxNOTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsBoxNOTimeResponse(struct soap *soap, const char *URL, _ns1__InsBoxNOTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsBoxNOTimeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsBoxNOTimeResponse(struct soap *soap, _ns1__InsBoxNOTimeResponse *p)
{
	if (soap_read__ns1__InsBoxNOTimeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsBoxNOTime_DEFINED
#define SOAP_TYPE__ns1__InsBoxNOTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsBoxNOTime(struct soap*, const char*, int, const _ns1__InsBoxNOTime *, const char*);
SOAP_FMAC3 _ns1__InsBoxNOTime * SOAP_FMAC4 soap_in__ns1__InsBoxNOTime(struct soap*, const char*, _ns1__InsBoxNOTime *, const char*);
SOAP_FMAC1 _ns1__InsBoxNOTime * SOAP_FMAC2 soap_instantiate__ns1__InsBoxNOTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsBoxNOTime * soap_new__ns1__InsBoxNOTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsBoxNOTime(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsBoxNOTime * soap_new_req__ns1__InsBoxNOTime(
	struct soap *soap)
{
	_ns1__InsBoxNOTime *_p = soap_new__ns1__InsBoxNOTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsBoxNOTime * soap_new_set__ns1__InsBoxNOTime(
	struct soap *soap,
	std::string *BoxNo)
{
	_ns1__InsBoxNOTime *_p = soap_new__ns1__InsBoxNOTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsBoxNOTime::BoxNo = BoxNo;
	}
	return _p;
}

inline int soap_write__ns1__InsBoxNOTime(struct soap *soap, _ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTime", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsBoxNOTime(struct soap *soap, const char *URL, _ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTime", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsBoxNOTime(struct soap *soap, const char *URL, _ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsBoxNOTime", p->soap_type() == SOAP_TYPE__ns1__InsBoxNOTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsBoxNOTime * SOAP_FMAC4 soap_get__ns1__InsBoxNOTime(struct soap*, _ns1__InsBoxNOTime *, const char*, const char*);

inline int soap_read__ns1__InsBoxNOTime(struct soap *soap, _ns1__InsBoxNOTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsBoxNOTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsBoxNOTime(struct soap *soap, const char *URL, _ns1__InsBoxNOTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsBoxNOTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsBoxNOTime(struct soap *soap, _ns1__InsBoxNOTime *p)
{
	if (soap_read__ns1__InsBoxNOTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLinkZJCountResponse_DEFINED
#define SOAP_TYPE__ns1__GetLinkZJCountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkZJCountResponse(struct soap*, const char*, int, const _ns1__GetLinkZJCountResponse *, const char*);
SOAP_FMAC3 _ns1__GetLinkZJCountResponse * SOAP_FMAC4 soap_in__ns1__GetLinkZJCountResponse(struct soap*, const char*, _ns1__GetLinkZJCountResponse *, const char*);
SOAP_FMAC1 _ns1__GetLinkZJCountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLinkZJCountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLinkZJCountResponse * soap_new__ns1__GetLinkZJCountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLinkZJCountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLinkZJCountResponse * soap_new_req__ns1__GetLinkZJCountResponse(
	struct soap *soap)
{
	_ns1__GetLinkZJCountResponse *_p = soap_new__ns1__GetLinkZJCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLinkZJCountResponse * soap_new_set__ns1__GetLinkZJCountResponse(
	struct soap *soap,
	std::string *GetLinkZJCountResult)
{
	_ns1__GetLinkZJCountResponse *_p = soap_new__ns1__GetLinkZJCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLinkZJCountResponse::GetLinkZJCountResult = GetLinkZJCountResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLinkZJCountResponse(struct soap *soap, _ns1__GetLinkZJCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLinkZJCountResponse(struct soap *soap, const char *URL, _ns1__GetLinkZJCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLinkZJCountResponse(struct soap *soap, const char *URL, _ns1__GetLinkZJCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLinkZJCountResponse * SOAP_FMAC4 soap_get__ns1__GetLinkZJCountResponse(struct soap*, _ns1__GetLinkZJCountResponse *, const char*, const char*);

inline int soap_read__ns1__GetLinkZJCountResponse(struct soap *soap, _ns1__GetLinkZJCountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLinkZJCountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLinkZJCountResponse(struct soap *soap, const char *URL, _ns1__GetLinkZJCountResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLinkZJCountResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLinkZJCountResponse(struct soap *soap, _ns1__GetLinkZJCountResponse *p)
{
	if (soap_read__ns1__GetLinkZJCountResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLinkZJCount_DEFINED
#define SOAP_TYPE__ns1__GetLinkZJCount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkZJCount(struct soap*, const char*, int, const _ns1__GetLinkZJCount *, const char*);
SOAP_FMAC3 _ns1__GetLinkZJCount * SOAP_FMAC4 soap_in__ns1__GetLinkZJCount(struct soap*, const char*, _ns1__GetLinkZJCount *, const char*);
SOAP_FMAC1 _ns1__GetLinkZJCount * SOAP_FMAC2 soap_instantiate__ns1__GetLinkZJCount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLinkZJCount * soap_new__ns1__GetLinkZJCount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLinkZJCount(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLinkZJCount * soap_new_req__ns1__GetLinkZJCount(
	struct soap *soap)
{
	_ns1__GetLinkZJCount *_p = soap_new__ns1__GetLinkZJCount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLinkZJCount * soap_new_set__ns1__GetLinkZJCount(
	struct soap *soap,
	std::string *ZJSN)
{
	_ns1__GetLinkZJCount *_p = soap_new__ns1__GetLinkZJCount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLinkZJCount::ZJSN = ZJSN;
	}
	return _p;
}

inline int soap_write__ns1__GetLinkZJCount(struct soap *soap, _ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCount", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLinkZJCount(struct soap *soap, const char *URL, _ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCount", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLinkZJCount(struct soap *soap, const char *URL, _ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkZJCount", p->soap_type() == SOAP_TYPE__ns1__GetLinkZJCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLinkZJCount * SOAP_FMAC4 soap_get__ns1__GetLinkZJCount(struct soap*, _ns1__GetLinkZJCount *, const char*, const char*);

inline int soap_read__ns1__GetLinkZJCount(struct soap *soap, _ns1__GetLinkZJCount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLinkZJCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLinkZJCount(struct soap *soap, const char *URL, _ns1__GetLinkZJCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLinkZJCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLinkZJCount(struct soap *soap, _ns1__GetLinkZJCount *p)
{
	if (soap_read__ns1__GetLinkZJCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsLinkSNResponse_DEFINED
#define SOAP_TYPE__ns1__InsLinkSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsLinkSNResponse(struct soap*, const char*, int, const _ns1__InsLinkSNResponse *, const char*);
SOAP_FMAC3 _ns1__InsLinkSNResponse * SOAP_FMAC4 soap_in__ns1__InsLinkSNResponse(struct soap*, const char*, _ns1__InsLinkSNResponse *, const char*);
SOAP_FMAC1 _ns1__InsLinkSNResponse * SOAP_FMAC2 soap_instantiate__ns1__InsLinkSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsLinkSNResponse * soap_new__ns1__InsLinkSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsLinkSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsLinkSNResponse * soap_new_req__ns1__InsLinkSNResponse(
	struct soap *soap)
{
	_ns1__InsLinkSNResponse *_p = soap_new__ns1__InsLinkSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsLinkSNResponse * soap_new_set__ns1__InsLinkSNResponse(
	struct soap *soap,
	std::string *InsLinkSNResult)
{
	_ns1__InsLinkSNResponse *_p = soap_new__ns1__InsLinkSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsLinkSNResponse::InsLinkSNResult = InsLinkSNResult;
	}
	return _p;
}

inline int soap_write__ns1__InsLinkSNResponse(struct soap *soap, _ns1__InsLinkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLinkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsLinkSNResponse(struct soap *soap, const char *URL, _ns1__InsLinkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLinkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsLinkSNResponse(struct soap *soap, const char *URL, _ns1__InsLinkSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSNResponse", p->soap_type() == SOAP_TYPE__ns1__InsLinkSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsLinkSNResponse * SOAP_FMAC4 soap_get__ns1__InsLinkSNResponse(struct soap*, _ns1__InsLinkSNResponse *, const char*, const char*);

inline int soap_read__ns1__InsLinkSNResponse(struct soap *soap, _ns1__InsLinkSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsLinkSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsLinkSNResponse(struct soap *soap, const char *URL, _ns1__InsLinkSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsLinkSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsLinkSNResponse(struct soap *soap, _ns1__InsLinkSNResponse *p)
{
	if (soap_read__ns1__InsLinkSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsLinkSN_DEFINED
#define SOAP_TYPE__ns1__InsLinkSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsLinkSN(struct soap*, const char*, int, const _ns1__InsLinkSN *, const char*);
SOAP_FMAC3 _ns1__InsLinkSN * SOAP_FMAC4 soap_in__ns1__InsLinkSN(struct soap*, const char*, _ns1__InsLinkSN *, const char*);
SOAP_FMAC1 _ns1__InsLinkSN * SOAP_FMAC2 soap_instantiate__ns1__InsLinkSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsLinkSN * soap_new__ns1__InsLinkSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsLinkSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsLinkSN * soap_new_req__ns1__InsLinkSN(
	struct soap *soap)
{
	_ns1__InsLinkSN *_p = soap_new__ns1__InsLinkSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsLinkSN * soap_new_set__ns1__InsLinkSN(
	struct soap *soap,
	std::string *Emp,
	std::string *SN,
	std::string *LnkSN,
	std::string *LnkDesc)
{
	_ns1__InsLinkSN *_p = soap_new__ns1__InsLinkSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsLinkSN::Emp = Emp;
		_p->_ns1__InsLinkSN::SN = SN;
		_p->_ns1__InsLinkSN::LnkSN = LnkSN;
		_p->_ns1__InsLinkSN::LnkDesc = LnkDesc;
	}
	return _p;
}

inline int soap_write__ns1__InsLinkSN(struct soap *soap, _ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSN", p->soap_type() == SOAP_TYPE__ns1__InsLinkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsLinkSN(struct soap *soap, const char *URL, _ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSN", p->soap_type() == SOAP_TYPE__ns1__InsLinkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsLinkSN(struct soap *soap, const char *URL, _ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsLinkSN", p->soap_type() == SOAP_TYPE__ns1__InsLinkSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsLinkSN * SOAP_FMAC4 soap_get__ns1__InsLinkSN(struct soap*, _ns1__InsLinkSN *, const char*, const char*);

inline int soap_read__ns1__InsLinkSN(struct soap *soap, _ns1__InsLinkSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsLinkSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsLinkSN(struct soap *soap, const char *URL, _ns1__InsLinkSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsLinkSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsLinkSN(struct soap *soap, _ns1__InsLinkSN *p)
{
	if (soap_read__ns1__InsLinkSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLinkOutSNResponse_DEFINED
#define SOAP_TYPE__ns1__doLinkOutSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLinkOutSNResponse(struct soap*, const char*, int, const _ns1__doLinkOutSNResponse *, const char*);
SOAP_FMAC3 _ns1__doLinkOutSNResponse * SOAP_FMAC4 soap_in__ns1__doLinkOutSNResponse(struct soap*, const char*, _ns1__doLinkOutSNResponse *, const char*);
SOAP_FMAC1 _ns1__doLinkOutSNResponse * SOAP_FMAC2 soap_instantiate__ns1__doLinkOutSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLinkOutSNResponse * soap_new__ns1__doLinkOutSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLinkOutSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLinkOutSNResponse * soap_new_req__ns1__doLinkOutSNResponse(
	struct soap *soap)
{
	_ns1__doLinkOutSNResponse *_p = soap_new__ns1__doLinkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLinkOutSNResponse * soap_new_set__ns1__doLinkOutSNResponse(
	struct soap *soap,
	std::string *doLinkOutSNResult)
{
	_ns1__doLinkOutSNResponse *_p = soap_new__ns1__doLinkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLinkOutSNResponse::doLinkOutSNResult = doLinkOutSNResult;
	}
	return _p;
}

inline int soap_write__ns1__doLinkOutSNResponse(struct soap *soap, _ns1__doLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__doLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__doLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLinkOutSNResponse * SOAP_FMAC4 soap_get__ns1__doLinkOutSNResponse(struct soap*, _ns1__doLinkOutSNResponse *, const char*, const char*);

inline int soap_read__ns1__doLinkOutSNResponse(struct soap *soap, _ns1__doLinkOutSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLinkOutSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__doLinkOutSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLinkOutSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLinkOutSNResponse(struct soap *soap, _ns1__doLinkOutSNResponse *p)
{
	if (soap_read__ns1__doLinkOutSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLinkOutSN_DEFINED
#define SOAP_TYPE__ns1__doLinkOutSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLinkOutSN(struct soap*, const char*, int, const _ns1__doLinkOutSN *, const char*);
SOAP_FMAC3 _ns1__doLinkOutSN * SOAP_FMAC4 soap_in__ns1__doLinkOutSN(struct soap*, const char*, _ns1__doLinkOutSN *, const char*);
SOAP_FMAC1 _ns1__doLinkOutSN * SOAP_FMAC2 soap_instantiate__ns1__doLinkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLinkOutSN * soap_new__ns1__doLinkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLinkOutSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLinkOutSN * soap_new_req__ns1__doLinkOutSN(
	struct soap *soap)
{
	_ns1__doLinkOutSN *_p = soap_new__ns1__doLinkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLinkOutSN * soap_new_set__ns1__doLinkOutSN(
	struct soap *soap,
	_ns1__doLinkOutSN_assyDt *assyDt,
	std::string *empNO,
	std::string *SN,
	std::string *Station,
	std::string *chkRep)
{
	_ns1__doLinkOutSN *_p = soap_new__ns1__doLinkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLinkOutSN::assyDt = assyDt;
		_p->_ns1__doLinkOutSN::empNO = empNO;
		_p->_ns1__doLinkOutSN::SN = SN;
		_p->_ns1__doLinkOutSN::Station = Station;
		_p->_ns1__doLinkOutSN::chkRep = chkRep;
	}
	return _p;
}

inline int soap_write__ns1__doLinkOutSN(struct soap *soap, _ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLinkOutSN(struct soap *soap, const char *URL, _ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLinkOutSN(struct soap *soap, const char *URL, _ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__doLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLinkOutSN * SOAP_FMAC4 soap_get__ns1__doLinkOutSN(struct soap*, _ns1__doLinkOutSN *, const char*, const char*);

inline int soap_read__ns1__doLinkOutSN(struct soap *soap, _ns1__doLinkOutSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLinkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLinkOutSN(struct soap *soap, const char *URL, _ns1__doLinkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLinkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLinkOutSN(struct soap *soap, _ns1__doLinkOutSN *p)
{
	if (soap_read__ns1__doLinkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkLinkOutSNResponse_DEFINED
#define SOAP_TYPE__ns1__ChkLinkOutSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkLinkOutSNResponse(struct soap*, const char*, int, const _ns1__ChkLinkOutSNResponse *, const char*);
SOAP_FMAC3 _ns1__ChkLinkOutSNResponse * SOAP_FMAC4 soap_in__ns1__ChkLinkOutSNResponse(struct soap*, const char*, _ns1__ChkLinkOutSNResponse *, const char*);
SOAP_FMAC1 _ns1__ChkLinkOutSNResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkLinkOutSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkLinkOutSNResponse * soap_new__ns1__ChkLinkOutSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkLinkOutSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkLinkOutSNResponse * soap_new_req__ns1__ChkLinkOutSNResponse(
	struct soap *soap)
{
	_ns1__ChkLinkOutSNResponse *_p = soap_new__ns1__ChkLinkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkLinkOutSNResponse * soap_new_set__ns1__ChkLinkOutSNResponse(
	struct soap *soap,
	std::string *ChkLinkOutSNResult)
{
	_ns1__ChkLinkOutSNResponse *_p = soap_new__ns1__ChkLinkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkLinkOutSNResponse::ChkLinkOutSNResult = ChkLinkOutSNResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkLinkOutSNResponse(struct soap *soap, _ns1__ChkLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__ChkLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__ChkLinkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkLinkOutSNResponse * SOAP_FMAC4 soap_get__ns1__ChkLinkOutSNResponse(struct soap*, _ns1__ChkLinkOutSNResponse *, const char*, const char*);

inline int soap_read__ns1__ChkLinkOutSNResponse(struct soap *soap, _ns1__ChkLinkOutSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkLinkOutSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkLinkOutSNResponse(struct soap *soap, const char *URL, _ns1__ChkLinkOutSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkLinkOutSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkLinkOutSNResponse(struct soap *soap, _ns1__ChkLinkOutSNResponse *p)
{
	if (soap_read__ns1__ChkLinkOutSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkLinkOutSN_DEFINED
#define SOAP_TYPE__ns1__ChkLinkOutSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkLinkOutSN(struct soap*, const char*, int, const _ns1__ChkLinkOutSN *, const char*);
SOAP_FMAC3 _ns1__ChkLinkOutSN * SOAP_FMAC4 soap_in__ns1__ChkLinkOutSN(struct soap*, const char*, _ns1__ChkLinkOutSN *, const char*);
SOAP_FMAC1 _ns1__ChkLinkOutSN * SOAP_FMAC2 soap_instantiate__ns1__ChkLinkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkLinkOutSN * soap_new__ns1__ChkLinkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkLinkOutSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkLinkOutSN * soap_new_req__ns1__ChkLinkOutSN(
	struct soap *soap)
{
	_ns1__ChkLinkOutSN *_p = soap_new__ns1__ChkLinkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkLinkOutSN * soap_new_set__ns1__ChkLinkOutSN(
	struct soap *soap,
	std::string *SN)
{
	_ns1__ChkLinkOutSN *_p = soap_new__ns1__ChkLinkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkLinkOutSN::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__ChkLinkOutSN(struct soap *soap, _ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkLinkOutSN(struct soap *soap, const char *URL, _ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkLinkOutSN(struct soap *soap, const char *URL, _ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkLinkOutSN", p->soap_type() == SOAP_TYPE__ns1__ChkLinkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkLinkOutSN * SOAP_FMAC4 soap_get__ns1__ChkLinkOutSN(struct soap*, _ns1__ChkLinkOutSN *, const char*, const char*);

inline int soap_read__ns1__ChkLinkOutSN(struct soap *soap, _ns1__ChkLinkOutSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkLinkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkLinkOutSN(struct soap *soap, const char *URL, _ns1__ChkLinkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkLinkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkLinkOutSN(struct soap *soap, _ns1__ChkLinkOutSN *p)
{
	if (soap_read__ns1__ChkLinkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkOutSNResponse_DEFINED
#define SOAP_TYPE__ns1__chkOutSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkOutSNResponse(struct soap*, const char*, int, const _ns1__chkOutSNResponse *, const char*);
SOAP_FMAC3 _ns1__chkOutSNResponse * SOAP_FMAC4 soap_in__ns1__chkOutSNResponse(struct soap*, const char*, _ns1__chkOutSNResponse *, const char*);
SOAP_FMAC1 _ns1__chkOutSNResponse * SOAP_FMAC2 soap_instantiate__ns1__chkOutSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkOutSNResponse * soap_new__ns1__chkOutSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkOutSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkOutSNResponse * soap_new_req__ns1__chkOutSNResponse(
	struct soap *soap)
{
	_ns1__chkOutSNResponse *_p = soap_new__ns1__chkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkOutSNResponse * soap_new_set__ns1__chkOutSNResponse(
	struct soap *soap,
	std::string *chkOutSNResult)
{
	_ns1__chkOutSNResponse *_p = soap_new__ns1__chkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkOutSNResponse::chkOutSNResult = chkOutSNResult;
	}
	return _p;
}

inline int soap_write__ns1__chkOutSNResponse(struct soap *soap, _ns1__chkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkOutSNResponse(struct soap *soap, const char *URL, _ns1__chkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkOutSNResponse(struct soap *soap, const char *URL, _ns1__chkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__chkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkOutSNResponse * SOAP_FMAC4 soap_get__ns1__chkOutSNResponse(struct soap*, _ns1__chkOutSNResponse *, const char*, const char*);

inline int soap_read__ns1__chkOutSNResponse(struct soap *soap, _ns1__chkOutSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkOutSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkOutSNResponse(struct soap *soap, const char *URL, _ns1__chkOutSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkOutSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkOutSNResponse(struct soap *soap, _ns1__chkOutSNResponse *p)
{
	if (soap_read__ns1__chkOutSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkOutSN_DEFINED
#define SOAP_TYPE__ns1__chkOutSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkOutSN(struct soap*, const char*, int, const _ns1__chkOutSN *, const char*);
SOAP_FMAC3 _ns1__chkOutSN * SOAP_FMAC4 soap_in__ns1__chkOutSN(struct soap*, const char*, _ns1__chkOutSN *, const char*);
SOAP_FMAC1 _ns1__chkOutSN * SOAP_FMAC2 soap_instantiate__ns1__chkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkOutSN * soap_new__ns1__chkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkOutSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkOutSN * soap_new_req__ns1__chkOutSN(
	struct soap *soap)
{
	_ns1__chkOutSN *_p = soap_new__ns1__chkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkOutSN * soap_new_set__ns1__chkOutSN(
	struct soap *soap,
	std::string *SN,
	std::string *OutSN)
{
	_ns1__chkOutSN *_p = soap_new__ns1__chkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkOutSN::SN = SN;
		_p->_ns1__chkOutSN::OutSN = OutSN;
	}
	return _p;
}

inline int soap_write__ns1__chkOutSN(struct soap *soap, _ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSN", p->soap_type() == SOAP_TYPE__ns1__chkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkOutSN(struct soap *soap, const char *URL, _ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSN", p->soap_type() == SOAP_TYPE__ns1__chkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkOutSN(struct soap *soap, const char *URL, _ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkOutSN", p->soap_type() == SOAP_TYPE__ns1__chkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkOutSN * SOAP_FMAC4 soap_get__ns1__chkOutSN(struct soap*, _ns1__chkOutSN *, const char*, const char*);

inline int soap_read__ns1__chkOutSN(struct soap *soap, _ns1__chkOutSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkOutSN(struct soap *soap, const char *URL, _ns1__chkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkOutSN(struct soap *soap, _ns1__chkOutSN *p)
{
	if (soap_read__ns1__chkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLintOutQtyResponse_DEFINED
#define SOAP_TYPE__ns1__GetLintOutQtyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLintOutQtyResponse(struct soap*, const char*, int, const _ns1__GetLintOutQtyResponse *, const char*);
SOAP_FMAC3 _ns1__GetLintOutQtyResponse * SOAP_FMAC4 soap_in__ns1__GetLintOutQtyResponse(struct soap*, const char*, _ns1__GetLintOutQtyResponse *, const char*);
SOAP_FMAC1 _ns1__GetLintOutQtyResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLintOutQtyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLintOutQtyResponse * soap_new__ns1__GetLintOutQtyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLintOutQtyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLintOutQtyResponse * soap_new_req__ns1__GetLintOutQtyResponse(
	struct soap *soap)
{
	_ns1__GetLintOutQtyResponse *_p = soap_new__ns1__GetLintOutQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLintOutQtyResponse * soap_new_set__ns1__GetLintOutQtyResponse(
	struct soap *soap,
	std::string *GetLintOutQtyResult)
{
	_ns1__GetLintOutQtyResponse *_p = soap_new__ns1__GetLintOutQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLintOutQtyResponse::GetLintOutQtyResult = GetLintOutQtyResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLintOutQtyResponse(struct soap *soap, _ns1__GetLintOutQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQtyResponse", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLintOutQtyResponse(struct soap *soap, const char *URL, _ns1__GetLintOutQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQtyResponse", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLintOutQtyResponse(struct soap *soap, const char *URL, _ns1__GetLintOutQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQtyResponse", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLintOutQtyResponse * SOAP_FMAC4 soap_get__ns1__GetLintOutQtyResponse(struct soap*, _ns1__GetLintOutQtyResponse *, const char*, const char*);

inline int soap_read__ns1__GetLintOutQtyResponse(struct soap *soap, _ns1__GetLintOutQtyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLintOutQtyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLintOutQtyResponse(struct soap *soap, const char *URL, _ns1__GetLintOutQtyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLintOutQtyResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLintOutQtyResponse(struct soap *soap, _ns1__GetLintOutQtyResponse *p)
{
	if (soap_read__ns1__GetLintOutQtyResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLintOutQty_DEFINED
#define SOAP_TYPE__ns1__GetLintOutQty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLintOutQty(struct soap*, const char*, int, const _ns1__GetLintOutQty *, const char*);
SOAP_FMAC3 _ns1__GetLintOutQty * SOAP_FMAC4 soap_in__ns1__GetLintOutQty(struct soap*, const char*, _ns1__GetLintOutQty *, const char*);
SOAP_FMAC1 _ns1__GetLintOutQty * SOAP_FMAC2 soap_instantiate__ns1__GetLintOutQty(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLintOutQty * soap_new__ns1__GetLintOutQty(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLintOutQty(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLintOutQty * soap_new_req__ns1__GetLintOutQty(
	struct soap *soap)
{
	_ns1__GetLintOutQty *_p = soap_new__ns1__GetLintOutQty(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLintOutQty * soap_new_set__ns1__GetLintOutQty(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetLintOutQty *_p = soap_new__ns1__GetLintOutQty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLintOutQty::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetLintOutQty(struct soap *soap, _ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQty", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLintOutQty(struct soap *soap, const char *URL, _ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQty", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLintOutQty(struct soap *soap, const char *URL, _ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLintOutQty", p->soap_type() == SOAP_TYPE__ns1__GetLintOutQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLintOutQty * SOAP_FMAC4 soap_get__ns1__GetLintOutQty(struct soap*, _ns1__GetLintOutQty *, const char*, const char*);

inline int soap_read__ns1__GetLintOutQty(struct soap *soap, _ns1__GetLintOutQty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLintOutQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLintOutQty(struct soap *soap, const char *URL, _ns1__GetLintOutQty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLintOutQty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLintOutQty(struct soap *soap, _ns1__GetLintOutQty *p)
{
	if (soap_read__ns1__GetLintOutQty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SNLinkZJResponse_DEFINED
#define SOAP_TYPE__ns1__SNLinkZJResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SNLinkZJResponse(struct soap*, const char*, int, const _ns1__SNLinkZJResponse *, const char*);
SOAP_FMAC3 _ns1__SNLinkZJResponse * SOAP_FMAC4 soap_in__ns1__SNLinkZJResponse(struct soap*, const char*, _ns1__SNLinkZJResponse *, const char*);
SOAP_FMAC1 _ns1__SNLinkZJResponse * SOAP_FMAC2 soap_instantiate__ns1__SNLinkZJResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SNLinkZJResponse * soap_new__ns1__SNLinkZJResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SNLinkZJResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SNLinkZJResponse * soap_new_req__ns1__SNLinkZJResponse(
	struct soap *soap)
{
	_ns1__SNLinkZJResponse *_p = soap_new__ns1__SNLinkZJResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SNLinkZJResponse * soap_new_set__ns1__SNLinkZJResponse(
	struct soap *soap,
	std::string *SNLinkZJResult)
{
	_ns1__SNLinkZJResponse *_p = soap_new__ns1__SNLinkZJResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SNLinkZJResponse::SNLinkZJResult = SNLinkZJResult;
	}
	return _p;
}

inline int soap_write__ns1__SNLinkZJResponse(struct soap *soap, _ns1__SNLinkZJResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SNLinkZJResponse(struct soap *soap, const char *URL, _ns1__SNLinkZJResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SNLinkZJResponse(struct soap *soap, const char *URL, _ns1__SNLinkZJResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SNLinkZJResponse * SOAP_FMAC4 soap_get__ns1__SNLinkZJResponse(struct soap*, _ns1__SNLinkZJResponse *, const char*, const char*);

inline int soap_read__ns1__SNLinkZJResponse(struct soap *soap, _ns1__SNLinkZJResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SNLinkZJResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SNLinkZJResponse(struct soap *soap, const char *URL, _ns1__SNLinkZJResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SNLinkZJResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SNLinkZJResponse(struct soap *soap, _ns1__SNLinkZJResponse *p)
{
	if (soap_read__ns1__SNLinkZJResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SNLinkZJ_DEFINED
#define SOAP_TYPE__ns1__SNLinkZJ_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SNLinkZJ(struct soap*, const char*, int, const _ns1__SNLinkZJ *, const char*);
SOAP_FMAC3 _ns1__SNLinkZJ * SOAP_FMAC4 soap_in__ns1__SNLinkZJ(struct soap*, const char*, _ns1__SNLinkZJ *, const char*);
SOAP_FMAC1 _ns1__SNLinkZJ * SOAP_FMAC2 soap_instantiate__ns1__SNLinkZJ(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SNLinkZJ * soap_new__ns1__SNLinkZJ(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SNLinkZJ(soap, n, NULL, NULL, NULL);
}

inline _ns1__SNLinkZJ * soap_new_req__ns1__SNLinkZJ(
	struct soap *soap)
{
	_ns1__SNLinkZJ *_p = soap_new__ns1__SNLinkZJ(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SNLinkZJ * soap_new_set__ns1__SNLinkZJ(
	struct soap *soap,
	std::string *Emp,
	std::string *SN,
	std::string *Station,
	std::string *ZJSN)
{
	_ns1__SNLinkZJ *_p = soap_new__ns1__SNLinkZJ(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SNLinkZJ::Emp = Emp;
		_p->_ns1__SNLinkZJ::SN = SN;
		_p->_ns1__SNLinkZJ::Station = Station;
		_p->_ns1__SNLinkZJ::ZJSN = ZJSN;
	}
	return _p;
}

inline int soap_write__ns1__SNLinkZJ(struct soap *soap, _ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJ", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SNLinkZJ(struct soap *soap, const char *URL, _ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJ", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SNLinkZJ(struct soap *soap, const char *URL, _ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkZJ", p->soap_type() == SOAP_TYPE__ns1__SNLinkZJ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SNLinkZJ * SOAP_FMAC4 soap_get__ns1__SNLinkZJ(struct soap*, _ns1__SNLinkZJ *, const char*, const char*);

inline int soap_read__ns1__SNLinkZJ(struct soap *soap, _ns1__SNLinkZJ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SNLinkZJ(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SNLinkZJ(struct soap *soap, const char *URL, _ns1__SNLinkZJ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SNLinkZJ(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SNLinkZJ(struct soap *soap, _ns1__SNLinkZJ *p)
{
	if (soap_read__ns1__SNLinkZJ(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsZJTestDataResponse_DEFINED
#define SOAP_TYPE__ns1__InsZJTestDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsZJTestDataResponse(struct soap*, const char*, int, const _ns1__InsZJTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__InsZJTestDataResponse * SOAP_FMAC4 soap_in__ns1__InsZJTestDataResponse(struct soap*, const char*, _ns1__InsZJTestDataResponse *, const char*);
SOAP_FMAC1 _ns1__InsZJTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__InsZJTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsZJTestDataResponse * soap_new__ns1__InsZJTestDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsZJTestDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsZJTestDataResponse * soap_new_req__ns1__InsZJTestDataResponse(
	struct soap *soap)
{
	_ns1__InsZJTestDataResponse *_p = soap_new__ns1__InsZJTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsZJTestDataResponse * soap_new_set__ns1__InsZJTestDataResponse(
	struct soap *soap,
	std::string *InsZJTestDataResult)
{
	_ns1__InsZJTestDataResponse *_p = soap_new__ns1__InsZJTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsZJTestDataResponse::InsZJTestDataResult = InsZJTestDataResult;
	}
	return _p;
}

inline int soap_write__ns1__InsZJTestDataResponse(struct soap *soap, _ns1__InsZJTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsZJTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsZJTestDataResponse(struct soap *soap, const char *URL, _ns1__InsZJTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsZJTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsZJTestDataResponse(struct soap *soap, const char *URL, _ns1__InsZJTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__InsZJTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsZJTestDataResponse * SOAP_FMAC4 soap_get__ns1__InsZJTestDataResponse(struct soap*, _ns1__InsZJTestDataResponse *, const char*, const char*);

inline int soap_read__ns1__InsZJTestDataResponse(struct soap *soap, _ns1__InsZJTestDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsZJTestDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsZJTestDataResponse(struct soap *soap, const char *URL, _ns1__InsZJTestDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsZJTestDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsZJTestDataResponse(struct soap *soap, _ns1__InsZJTestDataResponse *p)
{
	if (soap_read__ns1__InsZJTestDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsZJTestData_DEFINED
#define SOAP_TYPE__ns1__InsZJTestData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsZJTestData(struct soap*, const char*, int, const _ns1__InsZJTestData *, const char*);
SOAP_FMAC3 _ns1__InsZJTestData * SOAP_FMAC4 soap_in__ns1__InsZJTestData(struct soap*, const char*, _ns1__InsZJTestData *, const char*);
SOAP_FMAC1 _ns1__InsZJTestData * SOAP_FMAC2 soap_instantiate__ns1__InsZJTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsZJTestData * soap_new__ns1__InsZJTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsZJTestData(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsZJTestData * soap_new_req__ns1__InsZJTestData(
	struct soap *soap)
{
	_ns1__InsZJTestData *_p = soap_new__ns1__InsZJTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsZJTestData * soap_new_set__ns1__InsZJTestData(
	struct soap *soap,
	std::string *Emp,
	std::string *SN,
	std::string *Station,
	std::string *Result)
{
	_ns1__InsZJTestData *_p = soap_new__ns1__InsZJTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsZJTestData::Emp = Emp;
		_p->_ns1__InsZJTestData::SN = SN;
		_p->_ns1__InsZJTestData::Station = Station;
		_p->_ns1__InsZJTestData::Result = Result;
	}
	return _p;
}

inline int soap_write__ns1__InsZJTestData(struct soap *soap, _ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestData", p->soap_type() == SOAP_TYPE__ns1__InsZJTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsZJTestData(struct soap *soap, const char *URL, _ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestData", p->soap_type() == SOAP_TYPE__ns1__InsZJTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsZJTestData(struct soap *soap, const char *URL, _ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZJTestData", p->soap_type() == SOAP_TYPE__ns1__InsZJTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsZJTestData * SOAP_FMAC4 soap_get__ns1__InsZJTestData(struct soap*, _ns1__InsZJTestData *, const char*, const char*);

inline int soap_read__ns1__InsZJTestData(struct soap *soap, _ns1__InsZJTestData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsZJTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsZJTestData(struct soap *soap, const char *URL, _ns1__InsZJTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsZJTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsZJTestData(struct soap *soap, _ns1__InsZJTestData *p)
{
	if (soap_read__ns1__InsZJTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doPmcSNLinkResponse_DEFINED
#define SOAP_TYPE__ns1__doPmcSNLinkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doPmcSNLinkResponse(struct soap*, const char*, int, const _ns1__doPmcSNLinkResponse *, const char*);
SOAP_FMAC3 _ns1__doPmcSNLinkResponse * SOAP_FMAC4 soap_in__ns1__doPmcSNLinkResponse(struct soap*, const char*, _ns1__doPmcSNLinkResponse *, const char*);
SOAP_FMAC1 _ns1__doPmcSNLinkResponse * SOAP_FMAC2 soap_instantiate__ns1__doPmcSNLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doPmcSNLinkResponse * soap_new__ns1__doPmcSNLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doPmcSNLinkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__doPmcSNLinkResponse * soap_new_req__ns1__doPmcSNLinkResponse(
	struct soap *soap)
{
	_ns1__doPmcSNLinkResponse *_p = soap_new__ns1__doPmcSNLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doPmcSNLinkResponse * soap_new_set__ns1__doPmcSNLinkResponse(
	struct soap *soap,
	std::string *doPmcSNLinkResult)
{
	_ns1__doPmcSNLinkResponse *_p = soap_new__ns1__doPmcSNLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doPmcSNLinkResponse::doPmcSNLinkResult = doPmcSNLinkResult;
	}
	return _p;
}

inline int soap_write__ns1__doPmcSNLinkResponse(struct soap *soap, _ns1__doPmcSNLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLinkResponse", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doPmcSNLinkResponse(struct soap *soap, const char *URL, _ns1__doPmcSNLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLinkResponse", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doPmcSNLinkResponse(struct soap *soap, const char *URL, _ns1__doPmcSNLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLinkResponse", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doPmcSNLinkResponse * SOAP_FMAC4 soap_get__ns1__doPmcSNLinkResponse(struct soap*, _ns1__doPmcSNLinkResponse *, const char*, const char*);

inline int soap_read__ns1__doPmcSNLinkResponse(struct soap *soap, _ns1__doPmcSNLinkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doPmcSNLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doPmcSNLinkResponse(struct soap *soap, const char *URL, _ns1__doPmcSNLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doPmcSNLinkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doPmcSNLinkResponse(struct soap *soap, _ns1__doPmcSNLinkResponse *p)
{
	if (soap_read__ns1__doPmcSNLinkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doPmcSNLink_DEFINED
#define SOAP_TYPE__ns1__doPmcSNLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doPmcSNLink(struct soap*, const char*, int, const _ns1__doPmcSNLink *, const char*);
SOAP_FMAC3 _ns1__doPmcSNLink * SOAP_FMAC4 soap_in__ns1__doPmcSNLink(struct soap*, const char*, _ns1__doPmcSNLink *, const char*);
SOAP_FMAC1 _ns1__doPmcSNLink * SOAP_FMAC2 soap_instantiate__ns1__doPmcSNLink(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doPmcSNLink * soap_new__ns1__doPmcSNLink(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doPmcSNLink(soap, n, NULL, NULL, NULL);
}

inline _ns1__doPmcSNLink * soap_new_req__ns1__doPmcSNLink(
	struct soap *soap)
{
	_ns1__doPmcSNLink *_p = soap_new__ns1__doPmcSNLink(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doPmcSNLink * soap_new_set__ns1__doPmcSNLink(
	struct soap *soap,
	_ns1__doPmcSNLink_assyDt *assyDt,
	std::string *empNO,
	std::string *SN,
	std::string *StationNumber)
{
	_ns1__doPmcSNLink *_p = soap_new__ns1__doPmcSNLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doPmcSNLink::assyDt = assyDt;
		_p->_ns1__doPmcSNLink::empNO = empNO;
		_p->_ns1__doPmcSNLink::SN = SN;
		_p->_ns1__doPmcSNLink::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__doPmcSNLink(struct soap *soap, _ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doPmcSNLink(struct soap *soap, const char *URL, _ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doPmcSNLink(struct soap *soap, const char *URL, _ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doPmcSNLink", p->soap_type() == SOAP_TYPE__ns1__doPmcSNLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doPmcSNLink * SOAP_FMAC4 soap_get__ns1__doPmcSNLink(struct soap*, _ns1__doPmcSNLink *, const char*, const char*);

inline int soap_read__ns1__doPmcSNLink(struct soap *soap, _ns1__doPmcSNLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doPmcSNLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doPmcSNLink(struct soap *soap, const char *URL, _ns1__doPmcSNLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doPmcSNLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doPmcSNLink(struct soap *soap, _ns1__doPmcSNLink *p)
{
	if (soap_read__ns1__doPmcSNLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPmcSNPartResponse_DEFINED
#define SOAP_TYPE__ns1__GetPmcSNPartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPmcSNPartResponse(struct soap*, const char*, int, const _ns1__GetPmcSNPartResponse *, const char*);
SOAP_FMAC3 _ns1__GetPmcSNPartResponse * SOAP_FMAC4 soap_in__ns1__GetPmcSNPartResponse(struct soap*, const char*, _ns1__GetPmcSNPartResponse *, const char*);
SOAP_FMAC1 _ns1__GetPmcSNPartResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPmcSNPartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPmcSNPartResponse * soap_new__ns1__GetPmcSNPartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPmcSNPartResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPmcSNPartResponse * soap_new_req__ns1__GetPmcSNPartResponse(
	struct soap *soap)
{
	_ns1__GetPmcSNPartResponse *_p = soap_new__ns1__GetPmcSNPartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPmcSNPartResponse * soap_new_set__ns1__GetPmcSNPartResponse(
	struct soap *soap,
	std::string *GetPmcSNPartResult)
{
	_ns1__GetPmcSNPartResponse *_p = soap_new__ns1__GetPmcSNPartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPmcSNPartResponse::GetPmcSNPartResult = GetPmcSNPartResult;
	}
	return _p;
}

inline int soap_write__ns1__GetPmcSNPartResponse(struct soap *soap, _ns1__GetPmcSNPartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPartResponse", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPmcSNPartResponse(struct soap *soap, const char *URL, _ns1__GetPmcSNPartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPartResponse", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPmcSNPartResponse(struct soap *soap, const char *URL, _ns1__GetPmcSNPartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPartResponse", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPmcSNPartResponse * SOAP_FMAC4 soap_get__ns1__GetPmcSNPartResponse(struct soap*, _ns1__GetPmcSNPartResponse *, const char*, const char*);

inline int soap_read__ns1__GetPmcSNPartResponse(struct soap *soap, _ns1__GetPmcSNPartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPmcSNPartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPmcSNPartResponse(struct soap *soap, const char *URL, _ns1__GetPmcSNPartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPmcSNPartResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPmcSNPartResponse(struct soap *soap, _ns1__GetPmcSNPartResponse *p)
{
	if (soap_read__ns1__GetPmcSNPartResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPmcSNPart_DEFINED
#define SOAP_TYPE__ns1__GetPmcSNPart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPmcSNPart(struct soap*, const char*, int, const _ns1__GetPmcSNPart *, const char*);
SOAP_FMAC3 _ns1__GetPmcSNPart * SOAP_FMAC4 soap_in__ns1__GetPmcSNPart(struct soap*, const char*, _ns1__GetPmcSNPart *, const char*);
SOAP_FMAC1 _ns1__GetPmcSNPart * SOAP_FMAC2 soap_instantiate__ns1__GetPmcSNPart(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPmcSNPart * soap_new__ns1__GetPmcSNPart(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetPmcSNPart(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPmcSNPart * soap_new_req__ns1__GetPmcSNPart(
	struct soap *soap)
{
	_ns1__GetPmcSNPart *_p = soap_new__ns1__GetPmcSNPart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPmcSNPart * soap_new_set__ns1__GetPmcSNPart(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetPmcSNPart *_p = soap_new__ns1__GetPmcSNPart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPmcSNPart::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetPmcSNPart(struct soap *soap, _ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPart", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetPmcSNPart(struct soap *soap, const char *URL, _ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPart", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetPmcSNPart(struct soap *soap, const char *URL, _ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPmcSNPart", p->soap_type() == SOAP_TYPE__ns1__GetPmcSNPart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPmcSNPart * SOAP_FMAC4 soap_get__ns1__GetPmcSNPart(struct soap*, _ns1__GetPmcSNPart *, const char*, const char*);

inline int soap_read__ns1__GetPmcSNPart(struct soap *soap, _ns1__GetPmcSNPart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPmcSNPart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetPmcSNPart(struct soap *soap, const char *URL, _ns1__GetPmcSNPart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetPmcSNPart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetPmcSNPart(struct soap *soap, _ns1__GetPmcSNPart *p)
{
	if (soap_read__ns1__GetPmcSNPart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcPartAssyListResponse_DEFINED
#define SOAP_TYPE__ns1__getPmcPartAssyListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcPartAssyListResponse(struct soap*, const char*, int, const _ns1__getPmcPartAssyListResponse *, const char*);
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse * SOAP_FMAC4 soap_in__ns1__getPmcPartAssyListResponse(struct soap*, const char*, _ns1__getPmcPartAssyListResponse *, const char*);
SOAP_FMAC1 _ns1__getPmcPartAssyListResponse * SOAP_FMAC2 soap_instantiate__ns1__getPmcPartAssyListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcPartAssyListResponse * soap_new__ns1__getPmcPartAssyListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcPartAssyListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcPartAssyListResponse * soap_new_req__ns1__getPmcPartAssyListResponse(
	struct soap *soap)
{
	_ns1__getPmcPartAssyListResponse *_p = soap_new__ns1__getPmcPartAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcPartAssyListResponse * soap_new_set__ns1__getPmcPartAssyListResponse(
	struct soap *soap,
	_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *getPmcPartAssyListResult)
{
	_ns1__getPmcPartAssyListResponse *_p = soap_new__ns1__getPmcPartAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcPartAssyListResponse::getPmcPartAssyListResult = getPmcPartAssyListResult;
	}
	return _p;
}

inline int soap_write__ns1__getPmcPartAssyListResponse(struct soap *soap, _ns1__getPmcPartAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcPartAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcPartAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse * SOAP_FMAC4 soap_get__ns1__getPmcPartAssyListResponse(struct soap*, _ns1__getPmcPartAssyListResponse *, const char*, const char*);

inline int soap_read__ns1__getPmcPartAssyListResponse(struct soap *soap, _ns1__getPmcPartAssyListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcPartAssyListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcPartAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcPartAssyListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcPartAssyListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcPartAssyListResponse(struct soap *soap, _ns1__getPmcPartAssyListResponse *p)
{
	if (soap_read__ns1__getPmcPartAssyListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcPartAssyList_DEFINED
#define SOAP_TYPE__ns1__getPmcPartAssyList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcPartAssyList(struct soap*, const char*, int, const _ns1__getPmcPartAssyList *, const char*);
SOAP_FMAC3 _ns1__getPmcPartAssyList * SOAP_FMAC4 soap_in__ns1__getPmcPartAssyList(struct soap*, const char*, _ns1__getPmcPartAssyList *, const char*);
SOAP_FMAC1 _ns1__getPmcPartAssyList * SOAP_FMAC2 soap_instantiate__ns1__getPmcPartAssyList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcPartAssyList * soap_new__ns1__getPmcPartAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcPartAssyList(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcPartAssyList * soap_new_req__ns1__getPmcPartAssyList(
	struct soap *soap)
{
	_ns1__getPmcPartAssyList *_p = soap_new__ns1__getPmcPartAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcPartAssyList * soap_new_set__ns1__getPmcPartAssyList(
	struct soap *soap,
	std::string *SN,
	std::string *StationNumber)
{
	_ns1__getPmcPartAssyList *_p = soap_new__ns1__getPmcPartAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcPartAssyList::SN = SN;
		_p->_ns1__getPmcPartAssyList::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__getPmcPartAssyList(struct soap *soap, _ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcPartAssyList(struct soap *soap, const char *URL, _ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcPartAssyList(struct soap *soap, const char *URL, _ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcPartAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcPartAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcPartAssyList * SOAP_FMAC4 soap_get__ns1__getPmcPartAssyList(struct soap*, _ns1__getPmcPartAssyList *, const char*, const char*);

inline int soap_read__ns1__getPmcPartAssyList(struct soap *soap, _ns1__getPmcPartAssyList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcPartAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcPartAssyList(struct soap *soap, const char *URL, _ns1__getPmcPartAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcPartAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcPartAssyList(struct soap *soap, _ns1__getPmcPartAssyList *p)
{
	if (soap_read__ns1__getPmcPartAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcAssyListResponse_DEFINED
#define SOAP_TYPE__ns1__getPmcAssyListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcAssyListResponse(struct soap*, const char*, int, const _ns1__getPmcAssyListResponse *, const char*);
SOAP_FMAC3 _ns1__getPmcAssyListResponse * SOAP_FMAC4 soap_in__ns1__getPmcAssyListResponse(struct soap*, const char*, _ns1__getPmcAssyListResponse *, const char*);
SOAP_FMAC1 _ns1__getPmcAssyListResponse * SOAP_FMAC2 soap_instantiate__ns1__getPmcAssyListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcAssyListResponse * soap_new__ns1__getPmcAssyListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcAssyListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcAssyListResponse * soap_new_req__ns1__getPmcAssyListResponse(
	struct soap *soap)
{
	_ns1__getPmcAssyListResponse *_p = soap_new__ns1__getPmcAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcAssyListResponse * soap_new_set__ns1__getPmcAssyListResponse(
	struct soap *soap,
	_ns1__getPmcAssyListResponse_getPmcAssyListResult *getPmcAssyListResult)
{
	_ns1__getPmcAssyListResponse *_p = soap_new__ns1__getPmcAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcAssyListResponse::getPmcAssyListResult = getPmcAssyListResult;
	}
	return _p;
}

inline int soap_write__ns1__getPmcAssyListResponse(struct soap *soap, _ns1__getPmcAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcAssyListResponse * SOAP_FMAC4 soap_get__ns1__getPmcAssyListResponse(struct soap*, _ns1__getPmcAssyListResponse *, const char*, const char*);

inline int soap_read__ns1__getPmcAssyListResponse(struct soap *soap, _ns1__getPmcAssyListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcAssyListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcAssyListResponse(struct soap *soap, const char *URL, _ns1__getPmcAssyListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcAssyListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcAssyListResponse(struct soap *soap, _ns1__getPmcAssyListResponse *p)
{
	if (soap_read__ns1__getPmcAssyListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPmcAssyList_DEFINED
#define SOAP_TYPE__ns1__getPmcAssyList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPmcAssyList(struct soap*, const char*, int, const _ns1__getPmcAssyList *, const char*);
SOAP_FMAC3 _ns1__getPmcAssyList * SOAP_FMAC4 soap_in__ns1__getPmcAssyList(struct soap*, const char*, _ns1__getPmcAssyList *, const char*);
SOAP_FMAC1 _ns1__getPmcAssyList * SOAP_FMAC2 soap_instantiate__ns1__getPmcAssyList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPmcAssyList * soap_new__ns1__getPmcAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPmcAssyList(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPmcAssyList * soap_new_req__ns1__getPmcAssyList(
	struct soap *soap)
{
	_ns1__getPmcAssyList *_p = soap_new__ns1__getPmcAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPmcAssyList * soap_new_set__ns1__getPmcAssyList(
	struct soap *soap,
	std::string *SN,
	std::string *StationNumber)
{
	_ns1__getPmcAssyList *_p = soap_new__ns1__getPmcAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPmcAssyList::SN = SN;
		_p->_ns1__getPmcAssyList::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__getPmcAssyList(struct soap *soap, _ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPmcAssyList(struct soap *soap, const char *URL, _ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPmcAssyList(struct soap *soap, const char *URL, _ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPmcAssyList", p->soap_type() == SOAP_TYPE__ns1__getPmcAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPmcAssyList * SOAP_FMAC4 soap_get__ns1__getPmcAssyList(struct soap*, _ns1__getPmcAssyList *, const char*, const char*);

inline int soap_read__ns1__getPmcAssyList(struct soap *soap, _ns1__getPmcAssyList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPmcAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPmcAssyList(struct soap *soap, const char *URL, _ns1__getPmcAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPmcAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPmcAssyList(struct soap *soap, _ns1__getPmcAssyList *p)
{
	if (soap_read__ns1__getPmcAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doAssyResponse_DEFINED
#define SOAP_TYPE__ns1__doAssyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doAssyResponse(struct soap*, const char*, int, const _ns1__doAssyResponse *, const char*);
SOAP_FMAC3 _ns1__doAssyResponse * SOAP_FMAC4 soap_in__ns1__doAssyResponse(struct soap*, const char*, _ns1__doAssyResponse *, const char*);
SOAP_FMAC1 _ns1__doAssyResponse * SOAP_FMAC2 soap_instantiate__ns1__doAssyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doAssyResponse * soap_new__ns1__doAssyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doAssyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__doAssyResponse * soap_new_req__ns1__doAssyResponse(
	struct soap *soap)
{
	_ns1__doAssyResponse *_p = soap_new__ns1__doAssyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doAssyResponse * soap_new_set__ns1__doAssyResponse(
	struct soap *soap,
	std::string *doAssyResult)
{
	_ns1__doAssyResponse *_p = soap_new__ns1__doAssyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doAssyResponse::doAssyResult = doAssyResult;
	}
	return _p;
}

inline int soap_write__ns1__doAssyResponse(struct soap *soap, _ns1__doAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssyResponse", p->soap_type() == SOAP_TYPE__ns1__doAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doAssyResponse(struct soap *soap, const char *URL, _ns1__doAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssyResponse", p->soap_type() == SOAP_TYPE__ns1__doAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doAssyResponse(struct soap *soap, const char *URL, _ns1__doAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssyResponse", p->soap_type() == SOAP_TYPE__ns1__doAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doAssyResponse * SOAP_FMAC4 soap_get__ns1__doAssyResponse(struct soap*, _ns1__doAssyResponse *, const char*, const char*);

inline int soap_read__ns1__doAssyResponse(struct soap *soap, _ns1__doAssyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doAssyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doAssyResponse(struct soap *soap, const char *URL, _ns1__doAssyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doAssyResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doAssyResponse(struct soap *soap, _ns1__doAssyResponse *p)
{
	if (soap_read__ns1__doAssyResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doAssy_DEFINED
#define SOAP_TYPE__ns1__doAssy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doAssy(struct soap*, const char*, int, const _ns1__doAssy *, const char*);
SOAP_FMAC3 _ns1__doAssy * SOAP_FMAC4 soap_in__ns1__doAssy(struct soap*, const char*, _ns1__doAssy *, const char*);
SOAP_FMAC1 _ns1__doAssy * SOAP_FMAC2 soap_instantiate__ns1__doAssy(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doAssy * soap_new__ns1__doAssy(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doAssy(soap, n, NULL, NULL, NULL);
}

inline _ns1__doAssy * soap_new_req__ns1__doAssy(
	struct soap *soap)
{
	_ns1__doAssy *_p = soap_new__ns1__doAssy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doAssy * soap_new_set__ns1__doAssy(
	struct soap *soap,
	_ns1__doAssy_assyDt *assyDt,
	std::string *empNO,
	std::string *SN,
	std::string *MO,
	std::string *StationNumber)
{
	_ns1__doAssy *_p = soap_new__ns1__doAssy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doAssy::assyDt = assyDt;
		_p->_ns1__doAssy::empNO = empNO;
		_p->_ns1__doAssy::SN = SN;
		_p->_ns1__doAssy::MO = MO;
		_p->_ns1__doAssy::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__doAssy(struct soap *soap, _ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy", p->soap_type() == SOAP_TYPE__ns1__doAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doAssy(struct soap *soap, const char *URL, _ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy", p->soap_type() == SOAP_TYPE__ns1__doAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doAssy(struct soap *soap, const char *URL, _ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doAssy", p->soap_type() == SOAP_TYPE__ns1__doAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doAssy * SOAP_FMAC4 soap_get__ns1__doAssy(struct soap*, _ns1__doAssy *, const char*, const char*);

inline int soap_read__ns1__doAssy(struct soap *soap, _ns1__doAssy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doAssy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doAssy(struct soap *soap, const char *URL, _ns1__doAssy *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doAssy(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doAssy(struct soap *soap, _ns1__doAssy *p)
{
	if (soap_read__ns1__doAssy(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkAssySNResponse_DEFINED
#define SOAP_TYPE__ns1__chkAssySNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkAssySNResponse(struct soap*, const char*, int, const _ns1__chkAssySNResponse *, const char*);
SOAP_FMAC3 _ns1__chkAssySNResponse * SOAP_FMAC4 soap_in__ns1__chkAssySNResponse(struct soap*, const char*, _ns1__chkAssySNResponse *, const char*);
SOAP_FMAC1 _ns1__chkAssySNResponse * SOAP_FMAC2 soap_instantiate__ns1__chkAssySNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkAssySNResponse * soap_new__ns1__chkAssySNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkAssySNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkAssySNResponse * soap_new_req__ns1__chkAssySNResponse(
	struct soap *soap)
{
	_ns1__chkAssySNResponse *_p = soap_new__ns1__chkAssySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkAssySNResponse * soap_new_set__ns1__chkAssySNResponse(
	struct soap *soap,
	std::string *chkAssySNResult)
{
	_ns1__chkAssySNResponse *_p = soap_new__ns1__chkAssySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkAssySNResponse::chkAssySNResult = chkAssySNResult;
	}
	return _p;
}

inline int soap_write__ns1__chkAssySNResponse(struct soap *soap, _ns1__chkAssySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySNResponse", p->soap_type() == SOAP_TYPE__ns1__chkAssySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkAssySNResponse(struct soap *soap, const char *URL, _ns1__chkAssySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySNResponse", p->soap_type() == SOAP_TYPE__ns1__chkAssySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkAssySNResponse(struct soap *soap, const char *URL, _ns1__chkAssySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySNResponse", p->soap_type() == SOAP_TYPE__ns1__chkAssySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkAssySNResponse * SOAP_FMAC4 soap_get__ns1__chkAssySNResponse(struct soap*, _ns1__chkAssySNResponse *, const char*, const char*);

inline int soap_read__ns1__chkAssySNResponse(struct soap *soap, _ns1__chkAssySNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkAssySNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkAssySNResponse(struct soap *soap, const char *URL, _ns1__chkAssySNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkAssySNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkAssySNResponse(struct soap *soap, _ns1__chkAssySNResponse *p)
{
	if (soap_read__ns1__chkAssySNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkAssySN_DEFINED
#define SOAP_TYPE__ns1__chkAssySN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkAssySN(struct soap*, const char*, int, const _ns1__chkAssySN *, const char*);
SOAP_FMAC3 _ns1__chkAssySN * SOAP_FMAC4 soap_in__ns1__chkAssySN(struct soap*, const char*, _ns1__chkAssySN *, const char*);
SOAP_FMAC1 _ns1__chkAssySN * SOAP_FMAC2 soap_instantiate__ns1__chkAssySN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkAssySN * soap_new__ns1__chkAssySN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkAssySN(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkAssySN * soap_new_req__ns1__chkAssySN(
	struct soap *soap)
{
	_ns1__chkAssySN *_p = soap_new__ns1__chkAssySN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkAssySN * soap_new_set__ns1__chkAssySN(
	struct soap *soap,
	std::string *SN,
	std::string *KSN,
	std::string *StationNumber)
{
	_ns1__chkAssySN *_p = soap_new__ns1__chkAssySN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkAssySN::SN = SN;
		_p->_ns1__chkAssySN::KSN = KSN;
		_p->_ns1__chkAssySN::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__chkAssySN(struct soap *soap, _ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySN", p->soap_type() == SOAP_TYPE__ns1__chkAssySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkAssySN(struct soap *soap, const char *URL, _ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySN", p->soap_type() == SOAP_TYPE__ns1__chkAssySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkAssySN(struct soap *soap, const char *URL, _ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkAssySN", p->soap_type() == SOAP_TYPE__ns1__chkAssySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkAssySN * SOAP_FMAC4 soap_get__ns1__chkAssySN(struct soap*, _ns1__chkAssySN *, const char*, const char*);

inline int soap_read__ns1__chkAssySN(struct soap *soap, _ns1__chkAssySN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkAssySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkAssySN(struct soap *soap, const char *URL, _ns1__chkAssySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkAssySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkAssySN(struct soap *soap, _ns1__chkAssySN *p)
{
	if (soap_read__ns1__chkAssySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPNbySNResponse_DEFINED
#define SOAP_TYPE__ns1__getPNbySNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPNbySNResponse(struct soap*, const char*, int, const _ns1__getPNbySNResponse *, const char*);
SOAP_FMAC3 _ns1__getPNbySNResponse * SOAP_FMAC4 soap_in__ns1__getPNbySNResponse(struct soap*, const char*, _ns1__getPNbySNResponse *, const char*);
SOAP_FMAC1 _ns1__getPNbySNResponse * SOAP_FMAC2 soap_instantiate__ns1__getPNbySNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPNbySNResponse * soap_new__ns1__getPNbySNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPNbySNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPNbySNResponse * soap_new_req__ns1__getPNbySNResponse(
	struct soap *soap)
{
	_ns1__getPNbySNResponse *_p = soap_new__ns1__getPNbySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPNbySNResponse * soap_new_set__ns1__getPNbySNResponse(
	struct soap *soap,
	std::string *getPNbySNResult)
{
	_ns1__getPNbySNResponse *_p = soap_new__ns1__getPNbySNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPNbySNResponse::getPNbySNResult = getPNbySNResult;
	}
	return _p;
}

inline int soap_write__ns1__getPNbySNResponse(struct soap *soap, _ns1__getPNbySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySNResponse", p->soap_type() == SOAP_TYPE__ns1__getPNbySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPNbySNResponse(struct soap *soap, const char *URL, _ns1__getPNbySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySNResponse", p->soap_type() == SOAP_TYPE__ns1__getPNbySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPNbySNResponse(struct soap *soap, const char *URL, _ns1__getPNbySNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySNResponse", p->soap_type() == SOAP_TYPE__ns1__getPNbySNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPNbySNResponse * SOAP_FMAC4 soap_get__ns1__getPNbySNResponse(struct soap*, _ns1__getPNbySNResponse *, const char*, const char*);

inline int soap_read__ns1__getPNbySNResponse(struct soap *soap, _ns1__getPNbySNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPNbySNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPNbySNResponse(struct soap *soap, const char *URL, _ns1__getPNbySNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPNbySNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPNbySNResponse(struct soap *soap, _ns1__getPNbySNResponse *p)
{
	if (soap_read__ns1__getPNbySNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPNbySN_DEFINED
#define SOAP_TYPE__ns1__getPNbySN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPNbySN(struct soap*, const char*, int, const _ns1__getPNbySN *, const char*);
SOAP_FMAC3 _ns1__getPNbySN * SOAP_FMAC4 soap_in__ns1__getPNbySN(struct soap*, const char*, _ns1__getPNbySN *, const char*);
SOAP_FMAC1 _ns1__getPNbySN * SOAP_FMAC2 soap_instantiate__ns1__getPNbySN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPNbySN * soap_new__ns1__getPNbySN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPNbySN(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPNbySN * soap_new_req__ns1__getPNbySN(
	struct soap *soap)
{
	_ns1__getPNbySN *_p = soap_new__ns1__getPNbySN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPNbySN * soap_new_set__ns1__getPNbySN(
	struct soap *soap,
	std::string *SN)
{
	_ns1__getPNbySN *_p = soap_new__ns1__getPNbySN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPNbySN::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__getPNbySN(struct soap *soap, _ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySN", p->soap_type() == SOAP_TYPE__ns1__getPNbySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPNbySN(struct soap *soap, const char *URL, _ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySN", p->soap_type() == SOAP_TYPE__ns1__getPNbySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPNbySN(struct soap *soap, const char *URL, _ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPNbySN", p->soap_type() == SOAP_TYPE__ns1__getPNbySN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPNbySN * SOAP_FMAC4 soap_get__ns1__getPNbySN(struct soap*, _ns1__getPNbySN *, const char*, const char*);

inline int soap_read__ns1__getPNbySN(struct soap *soap, _ns1__getPNbySN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPNbySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPNbySN(struct soap *soap, const char *URL, _ns1__getPNbySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPNbySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPNbySN(struct soap *soap, _ns1__getPNbySN *p)
{
	if (soap_read__ns1__getPNbySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoAssyCountResponse_DEFINED
#define SOAP_TYPE__ns1__getMoAssyCountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoAssyCountResponse(struct soap*, const char*, int, const _ns1__getMoAssyCountResponse *, const char*);
SOAP_FMAC3 _ns1__getMoAssyCountResponse * SOAP_FMAC4 soap_in__ns1__getMoAssyCountResponse(struct soap*, const char*, _ns1__getMoAssyCountResponse *, const char*);
SOAP_FMAC1 _ns1__getMoAssyCountResponse * SOAP_FMAC2 soap_instantiate__ns1__getMoAssyCountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoAssyCountResponse * soap_new__ns1__getMoAssyCountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoAssyCountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoAssyCountResponse * soap_new_req__ns1__getMoAssyCountResponse(
	struct soap *soap)
{
	_ns1__getMoAssyCountResponse *_p = soap_new__ns1__getMoAssyCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoAssyCountResponse * soap_new_set__ns1__getMoAssyCountResponse(
	struct soap *soap,
	std::string *getMoAssyCountResult)
{
	_ns1__getMoAssyCountResponse *_p = soap_new__ns1__getMoAssyCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoAssyCountResponse::getMoAssyCountResult = getMoAssyCountResult;
	}
	return _p;
}

inline int soap_write__ns1__getMoAssyCountResponse(struct soap *soap, _ns1__getMoAssyCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCountResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoAssyCountResponse(struct soap *soap, const char *URL, _ns1__getMoAssyCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCountResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoAssyCountResponse(struct soap *soap, const char *URL, _ns1__getMoAssyCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCountResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoAssyCountResponse * SOAP_FMAC4 soap_get__ns1__getMoAssyCountResponse(struct soap*, _ns1__getMoAssyCountResponse *, const char*, const char*);

inline int soap_read__ns1__getMoAssyCountResponse(struct soap *soap, _ns1__getMoAssyCountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoAssyCountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoAssyCountResponse(struct soap *soap, const char *URL, _ns1__getMoAssyCountResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoAssyCountResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoAssyCountResponse(struct soap *soap, _ns1__getMoAssyCountResponse *p)
{
	if (soap_read__ns1__getMoAssyCountResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoAssyCount_DEFINED
#define SOAP_TYPE__ns1__getMoAssyCount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoAssyCount(struct soap*, const char*, int, const _ns1__getMoAssyCount *, const char*);
SOAP_FMAC3 _ns1__getMoAssyCount * SOAP_FMAC4 soap_in__ns1__getMoAssyCount(struct soap*, const char*, _ns1__getMoAssyCount *, const char*);
SOAP_FMAC1 _ns1__getMoAssyCount * SOAP_FMAC2 soap_instantiate__ns1__getMoAssyCount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoAssyCount * soap_new__ns1__getMoAssyCount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoAssyCount(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoAssyCount * soap_new_req__ns1__getMoAssyCount(
	struct soap *soap)
{
	_ns1__getMoAssyCount *_p = soap_new__ns1__getMoAssyCount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoAssyCount * soap_new_set__ns1__getMoAssyCount(
	struct soap *soap,
	std::string *MoNumber,
	std::string *StationNumber,
	std::string *StationType)
{
	_ns1__getMoAssyCount *_p = soap_new__ns1__getMoAssyCount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoAssyCount::MoNumber = MoNumber;
		_p->_ns1__getMoAssyCount::StationNumber = StationNumber;
		_p->_ns1__getMoAssyCount::StationType = StationType;
	}
	return _p;
}

inline int soap_write__ns1__getMoAssyCount(struct soap *soap, _ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCount", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoAssyCount(struct soap *soap, const char *URL, _ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCount", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoAssyCount(struct soap *soap, const char *URL, _ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyCount", p->soap_type() == SOAP_TYPE__ns1__getMoAssyCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoAssyCount * SOAP_FMAC4 soap_get__ns1__getMoAssyCount(struct soap*, _ns1__getMoAssyCount *, const char*, const char*);

inline int soap_read__ns1__getMoAssyCount(struct soap *soap, _ns1__getMoAssyCount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoAssyCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoAssyCount(struct soap *soap, const char *URL, _ns1__getMoAssyCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoAssyCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoAssyCount(struct soap *soap, _ns1__getMoAssyCount *p)
{
	if (soap_read__ns1__getMoAssyCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLinkOutSnResponse_DEFINED
#define SOAP_TYPE__ns1__GetLinkOutSnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkOutSnResponse(struct soap*, const char*, int, const _ns1__GetLinkOutSnResponse *, const char*);
SOAP_FMAC3 _ns1__GetLinkOutSnResponse * SOAP_FMAC4 soap_in__ns1__GetLinkOutSnResponse(struct soap*, const char*, _ns1__GetLinkOutSnResponse *, const char*);
SOAP_FMAC1 _ns1__GetLinkOutSnResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLinkOutSnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLinkOutSnResponse * soap_new__ns1__GetLinkOutSnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLinkOutSnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLinkOutSnResponse * soap_new_req__ns1__GetLinkOutSnResponse(
	struct soap *soap)
{
	_ns1__GetLinkOutSnResponse *_p = soap_new__ns1__GetLinkOutSnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLinkOutSnResponse * soap_new_set__ns1__GetLinkOutSnResponse(
	struct soap *soap,
	_ns1__GetLinkOutSnResponse_GetLinkOutSnResult *GetLinkOutSnResult)
{
	_ns1__GetLinkOutSnResponse *_p = soap_new__ns1__GetLinkOutSnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLinkOutSnResponse::GetLinkOutSnResult = GetLinkOutSnResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLinkOutSnResponse(struct soap *soap, _ns1__GetLinkOutSnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLinkOutSnResponse(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLinkOutSnResponse(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSnResponse", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLinkOutSnResponse * SOAP_FMAC4 soap_get__ns1__GetLinkOutSnResponse(struct soap*, _ns1__GetLinkOutSnResponse *, const char*, const char*);

inline int soap_read__ns1__GetLinkOutSnResponse(struct soap *soap, _ns1__GetLinkOutSnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLinkOutSnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLinkOutSnResponse(struct soap *soap, const char *URL, _ns1__GetLinkOutSnResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLinkOutSnResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLinkOutSnResponse(struct soap *soap, _ns1__GetLinkOutSnResponse *p)
{
	if (soap_read__ns1__GetLinkOutSnResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLinkOutSn_DEFINED
#define SOAP_TYPE__ns1__GetLinkOutSn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkOutSn(struct soap*, const char*, int, const _ns1__GetLinkOutSn *, const char*);
SOAP_FMAC3 _ns1__GetLinkOutSn * SOAP_FMAC4 soap_in__ns1__GetLinkOutSn(struct soap*, const char*, _ns1__GetLinkOutSn *, const char*);
SOAP_FMAC1 _ns1__GetLinkOutSn * SOAP_FMAC2 soap_instantiate__ns1__GetLinkOutSn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLinkOutSn * soap_new__ns1__GetLinkOutSn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLinkOutSn(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLinkOutSn * soap_new_req__ns1__GetLinkOutSn(
	struct soap *soap)
{
	_ns1__GetLinkOutSn *_p = soap_new__ns1__GetLinkOutSn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLinkOutSn * soap_new_set__ns1__GetLinkOutSn(
	struct soap *soap,
	std::string *Mo,
	std::string *Part,
	std::string *OutPart)
{
	_ns1__GetLinkOutSn *_p = soap_new__ns1__GetLinkOutSn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLinkOutSn::Mo = Mo;
		_p->_ns1__GetLinkOutSn::Part = Part;
		_p->_ns1__GetLinkOutSn::OutPart = OutPart;
	}
	return _p;
}

inline int soap_write__ns1__GetLinkOutSn(struct soap *soap, _ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSn", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLinkOutSn(struct soap *soap, const char *URL, _ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSn", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLinkOutSn(struct soap *soap, const char *URL, _ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLinkOutSn", p->soap_type() == SOAP_TYPE__ns1__GetLinkOutSn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLinkOutSn * SOAP_FMAC4 soap_get__ns1__GetLinkOutSn(struct soap*, _ns1__GetLinkOutSn *, const char*, const char*);

inline int soap_read__ns1__GetLinkOutSn(struct soap *soap, _ns1__GetLinkOutSn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLinkOutSn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLinkOutSn(struct soap *soap, const char *URL, _ns1__GetLinkOutSn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLinkOutSn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLinkOutSn(struct soap *soap, _ns1__GetLinkOutSn *p)
{
	if (soap_read__ns1__GetLinkOutSn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsPartAssyResponse_DEFINED
#define SOAP_TYPE__ns1__InsPartAssyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsPartAssyResponse(struct soap*, const char*, int, const _ns1__InsPartAssyResponse *, const char*);
SOAP_FMAC3 _ns1__InsPartAssyResponse * SOAP_FMAC4 soap_in__ns1__InsPartAssyResponse(struct soap*, const char*, _ns1__InsPartAssyResponse *, const char*);
SOAP_FMAC1 _ns1__InsPartAssyResponse * SOAP_FMAC2 soap_instantiate__ns1__InsPartAssyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsPartAssyResponse * soap_new__ns1__InsPartAssyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsPartAssyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsPartAssyResponse * soap_new_req__ns1__InsPartAssyResponse(
	struct soap *soap)
{
	_ns1__InsPartAssyResponse *_p = soap_new__ns1__InsPartAssyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsPartAssyResponse * soap_new_set__ns1__InsPartAssyResponse(
	struct soap *soap,
	std::string *InsPartAssyResult)
{
	_ns1__InsPartAssyResponse *_p = soap_new__ns1__InsPartAssyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsPartAssyResponse::InsPartAssyResult = InsPartAssyResult;
	}
	return _p;
}

inline int soap_write__ns1__InsPartAssyResponse(struct soap *soap, _ns1__InsPartAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssyResponse", p->soap_type() == SOAP_TYPE__ns1__InsPartAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsPartAssyResponse(struct soap *soap, const char *URL, _ns1__InsPartAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssyResponse", p->soap_type() == SOAP_TYPE__ns1__InsPartAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsPartAssyResponse(struct soap *soap, const char *URL, _ns1__InsPartAssyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssyResponse", p->soap_type() == SOAP_TYPE__ns1__InsPartAssyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsPartAssyResponse * SOAP_FMAC4 soap_get__ns1__InsPartAssyResponse(struct soap*, _ns1__InsPartAssyResponse *, const char*, const char*);

inline int soap_read__ns1__InsPartAssyResponse(struct soap *soap, _ns1__InsPartAssyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsPartAssyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsPartAssyResponse(struct soap *soap, const char *URL, _ns1__InsPartAssyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsPartAssyResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsPartAssyResponse(struct soap *soap, _ns1__InsPartAssyResponse *p)
{
	if (soap_read__ns1__InsPartAssyResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsPartAssy_DEFINED
#define SOAP_TYPE__ns1__InsPartAssy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsPartAssy(struct soap*, const char*, int, const _ns1__InsPartAssy *, const char*);
SOAP_FMAC3 _ns1__InsPartAssy * SOAP_FMAC4 soap_in__ns1__InsPartAssy(struct soap*, const char*, _ns1__InsPartAssy *, const char*);
SOAP_FMAC1 _ns1__InsPartAssy * SOAP_FMAC2 soap_instantiate__ns1__InsPartAssy(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsPartAssy * soap_new__ns1__InsPartAssy(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsPartAssy(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsPartAssy * soap_new_req__ns1__InsPartAssy(
	struct soap *soap)
{
	_ns1__InsPartAssy *_p = soap_new__ns1__InsPartAssy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsPartAssy * soap_new_set__ns1__InsPartAssy(
	struct soap *soap,
	std::string *Mo,
	std::string *Part,
	std::string *StationNo,
	std::string *SN,
	ns1__ArrayOfString *SubSn,
	std::string *Desc)
{
	_ns1__InsPartAssy *_p = soap_new__ns1__InsPartAssy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsPartAssy::Mo = Mo;
		_p->_ns1__InsPartAssy::Part = Part;
		_p->_ns1__InsPartAssy::StationNo = StationNo;
		_p->_ns1__InsPartAssy::SN = SN;
		_p->_ns1__InsPartAssy::SubSn = SubSn;
		_p->_ns1__InsPartAssy::Desc = Desc;
	}
	return _p;
}

inline int soap_write__ns1__InsPartAssy(struct soap *soap, _ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssy", p->soap_type() == SOAP_TYPE__ns1__InsPartAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsPartAssy(struct soap *soap, const char *URL, _ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssy", p->soap_type() == SOAP_TYPE__ns1__InsPartAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsPartAssy(struct soap *soap, const char *URL, _ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsPartAssy", p->soap_type() == SOAP_TYPE__ns1__InsPartAssy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsPartAssy * SOAP_FMAC4 soap_get__ns1__InsPartAssy(struct soap*, _ns1__InsPartAssy *, const char*, const char*);

inline int soap_read__ns1__InsPartAssy(struct soap *soap, _ns1__InsPartAssy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsPartAssy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsPartAssy(struct soap *soap, const char *URL, _ns1__InsPartAssy *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsPartAssy(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsPartAssy(struct soap *soap, _ns1__InsPartAssy *p)
{
	if (soap_read__ns1__InsPartAssy(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPartBomExtResponse_DEFINED
#define SOAP_TYPE__ns1__getPartBomExtResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPartBomExtResponse(struct soap*, const char*, int, const _ns1__getPartBomExtResponse *, const char*);
SOAP_FMAC3 _ns1__getPartBomExtResponse * SOAP_FMAC4 soap_in__ns1__getPartBomExtResponse(struct soap*, const char*, _ns1__getPartBomExtResponse *, const char*);
SOAP_FMAC1 _ns1__getPartBomExtResponse * SOAP_FMAC2 soap_instantiate__ns1__getPartBomExtResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPartBomExtResponse * soap_new__ns1__getPartBomExtResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPartBomExtResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPartBomExtResponse * soap_new_req__ns1__getPartBomExtResponse(
	struct soap *soap)
{
	_ns1__getPartBomExtResponse *_p = soap_new__ns1__getPartBomExtResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPartBomExtResponse * soap_new_set__ns1__getPartBomExtResponse(
	struct soap *soap,
	_ns1__getPartBomExtResponse_getPartBomExtResult *getPartBomExtResult)
{
	_ns1__getPartBomExtResponse *_p = soap_new__ns1__getPartBomExtResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPartBomExtResponse::getPartBomExtResult = getPartBomExtResult;
	}
	return _p;
}

inline int soap_write__ns1__getPartBomExtResponse(struct soap *soap, _ns1__getPartBomExtResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPartBomExtResponse(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPartBomExtResponse(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExtResponse", p->soap_type() == SOAP_TYPE__ns1__getPartBomExtResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPartBomExtResponse * SOAP_FMAC4 soap_get__ns1__getPartBomExtResponse(struct soap*, _ns1__getPartBomExtResponse *, const char*, const char*);

inline int soap_read__ns1__getPartBomExtResponse(struct soap *soap, _ns1__getPartBomExtResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPartBomExtResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPartBomExtResponse(struct soap *soap, const char *URL, _ns1__getPartBomExtResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPartBomExtResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPartBomExtResponse(struct soap *soap, _ns1__getPartBomExtResponse *p)
{
	if (soap_read__ns1__getPartBomExtResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getPartBomExt_DEFINED
#define SOAP_TYPE__ns1__getPartBomExt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getPartBomExt(struct soap*, const char*, int, const _ns1__getPartBomExt *, const char*);
SOAP_FMAC3 _ns1__getPartBomExt * SOAP_FMAC4 soap_in__ns1__getPartBomExt(struct soap*, const char*, _ns1__getPartBomExt *, const char*);
SOAP_FMAC1 _ns1__getPartBomExt * SOAP_FMAC2 soap_instantiate__ns1__getPartBomExt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getPartBomExt * soap_new__ns1__getPartBomExt(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getPartBomExt(soap, n, NULL, NULL, NULL);
}

inline _ns1__getPartBomExt * soap_new_req__ns1__getPartBomExt(
	struct soap *soap)
{
	_ns1__getPartBomExt *_p = soap_new__ns1__getPartBomExt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getPartBomExt * soap_new_set__ns1__getPartBomExt(
	struct soap *soap,
	std::string *PartNo,
	std::string *StationNumber)
{
	_ns1__getPartBomExt *_p = soap_new__ns1__getPartBomExt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getPartBomExt::PartNo = PartNo;
		_p->_ns1__getPartBomExt::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__getPartBomExt(struct soap *soap, _ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExt", p->soap_type() == SOAP_TYPE__ns1__getPartBomExt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getPartBomExt(struct soap *soap, const char *URL, _ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExt", p->soap_type() == SOAP_TYPE__ns1__getPartBomExt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getPartBomExt(struct soap *soap, const char *URL, _ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getPartBomExt", p->soap_type() == SOAP_TYPE__ns1__getPartBomExt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getPartBomExt * SOAP_FMAC4 soap_get__ns1__getPartBomExt(struct soap*, _ns1__getPartBomExt *, const char*, const char*);

inline int soap_read__ns1__getPartBomExt(struct soap *soap, _ns1__getPartBomExt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getPartBomExt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getPartBomExt(struct soap *soap, const char *URL, _ns1__getPartBomExt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getPartBomExt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getPartBomExt(struct soap *soap, _ns1__getPartBomExt *p)
{
	if (soap_read__ns1__getPartBomExt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoAssyListResponse_DEFINED
#define SOAP_TYPE__ns1__getMoAssyListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoAssyListResponse(struct soap*, const char*, int, const _ns1__getMoAssyListResponse *, const char*);
SOAP_FMAC3 _ns1__getMoAssyListResponse * SOAP_FMAC4 soap_in__ns1__getMoAssyListResponse(struct soap*, const char*, _ns1__getMoAssyListResponse *, const char*);
SOAP_FMAC1 _ns1__getMoAssyListResponse * SOAP_FMAC2 soap_instantiate__ns1__getMoAssyListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoAssyListResponse * soap_new__ns1__getMoAssyListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoAssyListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoAssyListResponse * soap_new_req__ns1__getMoAssyListResponse(
	struct soap *soap)
{
	_ns1__getMoAssyListResponse *_p = soap_new__ns1__getMoAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoAssyListResponse * soap_new_set__ns1__getMoAssyListResponse(
	struct soap *soap,
	_ns1__getMoAssyListResponse_getMoAssyListResult *getMoAssyListResult)
{
	_ns1__getMoAssyListResponse *_p = soap_new__ns1__getMoAssyListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoAssyListResponse::getMoAssyListResult = getMoAssyListResult;
	}
	return _p;
}

inline int soap_write__ns1__getMoAssyListResponse(struct soap *soap, _ns1__getMoAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoAssyListResponse(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoAssyListResponse(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyListResponse", p->soap_type() == SOAP_TYPE__ns1__getMoAssyListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoAssyListResponse * SOAP_FMAC4 soap_get__ns1__getMoAssyListResponse(struct soap*, _ns1__getMoAssyListResponse *, const char*, const char*);

inline int soap_read__ns1__getMoAssyListResponse(struct soap *soap, _ns1__getMoAssyListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoAssyListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoAssyListResponse(struct soap *soap, const char *URL, _ns1__getMoAssyListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoAssyListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoAssyListResponse(struct soap *soap, _ns1__getMoAssyListResponse *p)
{
	if (soap_read__ns1__getMoAssyListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoAssyList_DEFINED
#define SOAP_TYPE__ns1__getMoAssyList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoAssyList(struct soap*, const char*, int, const _ns1__getMoAssyList *, const char*);
SOAP_FMAC3 _ns1__getMoAssyList * SOAP_FMAC4 soap_in__ns1__getMoAssyList(struct soap*, const char*, _ns1__getMoAssyList *, const char*);
SOAP_FMAC1 _ns1__getMoAssyList * SOAP_FMAC2 soap_instantiate__ns1__getMoAssyList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoAssyList * soap_new__ns1__getMoAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoAssyList(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoAssyList * soap_new_req__ns1__getMoAssyList(
	struct soap *soap)
{
	_ns1__getMoAssyList *_p = soap_new__ns1__getMoAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoAssyList * soap_new_set__ns1__getMoAssyList(
	struct soap *soap,
	std::string *MoNumber,
	std::string *StationNumber,
	std::string *StationType)
{
	_ns1__getMoAssyList *_p = soap_new__ns1__getMoAssyList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoAssyList::MoNumber = MoNumber;
		_p->_ns1__getMoAssyList::StationNumber = StationNumber;
		_p->_ns1__getMoAssyList::StationType = StationType;
	}
	return _p;
}

inline int soap_write__ns1__getMoAssyList(struct soap *soap, _ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyList", p->soap_type() == SOAP_TYPE__ns1__getMoAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoAssyList(struct soap *soap, const char *URL, _ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyList", p->soap_type() == SOAP_TYPE__ns1__getMoAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoAssyList(struct soap *soap, const char *URL, _ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoAssyList", p->soap_type() == SOAP_TYPE__ns1__getMoAssyList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoAssyList * SOAP_FMAC4 soap_get__ns1__getMoAssyList(struct soap*, _ns1__getMoAssyList *, const char*, const char*);

inline int soap_read__ns1__getMoAssyList(struct soap *soap, _ns1__getMoAssyList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoAssyList(struct soap *soap, const char *URL, _ns1__getMoAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoAssyList(struct soap *soap, _ns1__getMoAssyList *p)
{
	if (soap_read__ns1__getMoAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkSnMappingResponse_DEFINED
#define SOAP_TYPE__ns1__chkSnMappingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkSnMappingResponse(struct soap*, const char*, int, const _ns1__chkSnMappingResponse *, const char*);
SOAP_FMAC3 _ns1__chkSnMappingResponse * SOAP_FMAC4 soap_in__ns1__chkSnMappingResponse(struct soap*, const char*, _ns1__chkSnMappingResponse *, const char*);
SOAP_FMAC1 _ns1__chkSnMappingResponse * SOAP_FMAC2 soap_instantiate__ns1__chkSnMappingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkSnMappingResponse * soap_new__ns1__chkSnMappingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkSnMappingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkSnMappingResponse * soap_new_req__ns1__chkSnMappingResponse(
	struct soap *soap)
{
	_ns1__chkSnMappingResponse *_p = soap_new__ns1__chkSnMappingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkSnMappingResponse * soap_new_set__ns1__chkSnMappingResponse(
	struct soap *soap,
	std::string *chkSnMappingResult)
{
	_ns1__chkSnMappingResponse *_p = soap_new__ns1__chkSnMappingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkSnMappingResponse::chkSnMappingResult = chkSnMappingResult;
	}
	return _p;
}

inline int soap_write__ns1__chkSnMappingResponse(struct soap *soap, _ns1__chkSnMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMappingResponse", p->soap_type() == SOAP_TYPE__ns1__chkSnMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkSnMappingResponse(struct soap *soap, const char *URL, _ns1__chkSnMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMappingResponse", p->soap_type() == SOAP_TYPE__ns1__chkSnMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkSnMappingResponse(struct soap *soap, const char *URL, _ns1__chkSnMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMappingResponse", p->soap_type() == SOAP_TYPE__ns1__chkSnMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkSnMappingResponse * SOAP_FMAC4 soap_get__ns1__chkSnMappingResponse(struct soap*, _ns1__chkSnMappingResponse *, const char*, const char*);

inline int soap_read__ns1__chkSnMappingResponse(struct soap *soap, _ns1__chkSnMappingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkSnMappingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkSnMappingResponse(struct soap *soap, const char *URL, _ns1__chkSnMappingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkSnMappingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkSnMappingResponse(struct soap *soap, _ns1__chkSnMappingResponse *p)
{
	if (soap_read__ns1__chkSnMappingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkSnMapping_DEFINED
#define SOAP_TYPE__ns1__chkSnMapping_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkSnMapping(struct soap*, const char*, int, const _ns1__chkSnMapping *, const char*);
SOAP_FMAC3 _ns1__chkSnMapping * SOAP_FMAC4 soap_in__ns1__chkSnMapping(struct soap*, const char*, _ns1__chkSnMapping *, const char*);
SOAP_FMAC1 _ns1__chkSnMapping * SOAP_FMAC2 soap_instantiate__ns1__chkSnMapping(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkSnMapping * soap_new__ns1__chkSnMapping(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkSnMapping(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkSnMapping * soap_new_req__ns1__chkSnMapping(
	struct soap *soap)
{
	_ns1__chkSnMapping *_p = soap_new__ns1__chkSnMapping(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkSnMapping * soap_new_set__ns1__chkSnMapping(
	struct soap *soap,
	std::string *SN,
	std::string *CustSN,
	std::string *MO)
{
	_ns1__chkSnMapping *_p = soap_new__ns1__chkSnMapping(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkSnMapping::SN = SN;
		_p->_ns1__chkSnMapping::CustSN = CustSN;
		_p->_ns1__chkSnMapping::MO = MO;
	}
	return _p;
}

inline int soap_write__ns1__chkSnMapping(struct soap *soap, _ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMapping", p->soap_type() == SOAP_TYPE__ns1__chkSnMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkSnMapping(struct soap *soap, const char *URL, _ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMapping", p->soap_type() == SOAP_TYPE__ns1__chkSnMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkSnMapping(struct soap *soap, const char *URL, _ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkSnMapping", p->soap_type() == SOAP_TYPE__ns1__chkSnMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkSnMapping * SOAP_FMAC4 soap_get__ns1__chkSnMapping(struct soap*, _ns1__chkSnMapping *, const char*, const char*);

inline int soap_read__ns1__chkSnMapping(struct soap *soap, _ns1__chkSnMapping *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkSnMapping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkSnMapping(struct soap *soap, const char *URL, _ns1__chkSnMapping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkSnMapping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkSnMapping(struct soap *soap, _ns1__chkSnMapping *p)
{
	if (soap_read__ns1__chkSnMapping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationTypeDescResponse_DEFINED
#define SOAP_TYPE__ns1__getStationTypeDescResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationTypeDescResponse(struct soap*, const char*, int, const _ns1__getStationTypeDescResponse *, const char*);
SOAP_FMAC3 _ns1__getStationTypeDescResponse * SOAP_FMAC4 soap_in__ns1__getStationTypeDescResponse(struct soap*, const char*, _ns1__getStationTypeDescResponse *, const char*);
SOAP_FMAC1 _ns1__getStationTypeDescResponse * SOAP_FMAC2 soap_instantiate__ns1__getStationTypeDescResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationTypeDescResponse * soap_new__ns1__getStationTypeDescResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationTypeDescResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationTypeDescResponse * soap_new_req__ns1__getStationTypeDescResponse(
	struct soap *soap)
{
	_ns1__getStationTypeDescResponse *_p = soap_new__ns1__getStationTypeDescResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationTypeDescResponse * soap_new_set__ns1__getStationTypeDescResponse(
	struct soap *soap,
	std::string *getStationTypeDescResult)
{
	_ns1__getStationTypeDescResponse *_p = soap_new__ns1__getStationTypeDescResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationTypeDescResponse::getStationTypeDescResult = getStationTypeDescResult;
	}
	return _p;
}

inline int soap_write__ns1__getStationTypeDescResponse(struct soap *soap, _ns1__getStationTypeDescResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDescResponse", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDescResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationTypeDescResponse(struct soap *soap, const char *URL, _ns1__getStationTypeDescResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDescResponse", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDescResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationTypeDescResponse(struct soap *soap, const char *URL, _ns1__getStationTypeDescResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDescResponse", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDescResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationTypeDescResponse * SOAP_FMAC4 soap_get__ns1__getStationTypeDescResponse(struct soap*, _ns1__getStationTypeDescResponse *, const char*, const char*);

inline int soap_read__ns1__getStationTypeDescResponse(struct soap *soap, _ns1__getStationTypeDescResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationTypeDescResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationTypeDescResponse(struct soap *soap, const char *URL, _ns1__getStationTypeDescResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationTypeDescResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationTypeDescResponse(struct soap *soap, _ns1__getStationTypeDescResponse *p)
{
	if (soap_read__ns1__getStationTypeDescResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationTypeDesc_DEFINED
#define SOAP_TYPE__ns1__getStationTypeDesc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationTypeDesc(struct soap*, const char*, int, const _ns1__getStationTypeDesc *, const char*);
SOAP_FMAC3 _ns1__getStationTypeDesc * SOAP_FMAC4 soap_in__ns1__getStationTypeDesc(struct soap*, const char*, _ns1__getStationTypeDesc *, const char*);
SOAP_FMAC1 _ns1__getStationTypeDesc * SOAP_FMAC2 soap_instantiate__ns1__getStationTypeDesc(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationTypeDesc * soap_new__ns1__getStationTypeDesc(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationTypeDesc(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationTypeDesc * soap_new_req__ns1__getStationTypeDesc(
	struct soap *soap)
{
	_ns1__getStationTypeDesc *_p = soap_new__ns1__getStationTypeDesc(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationTypeDesc * soap_new_set__ns1__getStationTypeDesc(
	struct soap *soap,
	std::string *typeID)
{
	_ns1__getStationTypeDesc *_p = soap_new__ns1__getStationTypeDesc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationTypeDesc::typeID = typeID;
	}
	return _p;
}

inline int soap_write__ns1__getStationTypeDesc(struct soap *soap, _ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDesc", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDesc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationTypeDesc(struct soap *soap, const char *URL, _ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDesc", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDesc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationTypeDesc(struct soap *soap, const char *URL, _ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationTypeDesc", p->soap_type() == SOAP_TYPE__ns1__getStationTypeDesc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationTypeDesc * SOAP_FMAC4 soap_get__ns1__getStationTypeDesc(struct soap*, _ns1__getStationTypeDesc *, const char*, const char*);

inline int soap_read__ns1__getStationTypeDesc(struct soap *soap, _ns1__getStationTypeDesc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationTypeDesc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationTypeDesc(struct soap *soap, const char *URL, _ns1__getStationTypeDesc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationTypeDesc(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationTypeDesc(struct soap *soap, _ns1__getStationTypeDesc *p)
{
	if (soap_read__ns1__getStationTypeDesc(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationByMoResponse_DEFINED
#define SOAP_TYPE__ns1__getStationByMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationByMoResponse(struct soap*, const char*, int, const _ns1__getStationByMoResponse *, const char*);
SOAP_FMAC3 _ns1__getStationByMoResponse * SOAP_FMAC4 soap_in__ns1__getStationByMoResponse(struct soap*, const char*, _ns1__getStationByMoResponse *, const char*);
SOAP_FMAC1 _ns1__getStationByMoResponse * SOAP_FMAC2 soap_instantiate__ns1__getStationByMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationByMoResponse * soap_new__ns1__getStationByMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationByMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationByMoResponse * soap_new_req__ns1__getStationByMoResponse(
	struct soap *soap)
{
	_ns1__getStationByMoResponse *_p = soap_new__ns1__getStationByMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationByMoResponse * soap_new_set__ns1__getStationByMoResponse(
	struct soap *soap,
	std::string *getStationByMoResult)
{
	_ns1__getStationByMoResponse *_p = soap_new__ns1__getStationByMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationByMoResponse::getStationByMoResult = getStationByMoResult;
	}
	return _p;
}

inline int soap_write__ns1__getStationByMoResponse(struct soap *soap, _ns1__getStationByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationByMoResponse(struct soap *soap, const char *URL, _ns1__getStationByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationByMoResponse(struct soap *soap, const char *URL, _ns1__getStationByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationByMoResponse * SOAP_FMAC4 soap_get__ns1__getStationByMoResponse(struct soap*, _ns1__getStationByMoResponse *, const char*, const char*);

inline int soap_read__ns1__getStationByMoResponse(struct soap *soap, _ns1__getStationByMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationByMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationByMoResponse(struct soap *soap, const char *URL, _ns1__getStationByMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationByMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationByMoResponse(struct soap *soap, _ns1__getStationByMoResponse *p)
{
	if (soap_read__ns1__getStationByMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationByMo_DEFINED
#define SOAP_TYPE__ns1__getStationByMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationByMo(struct soap*, const char*, int, const _ns1__getStationByMo *, const char*);
SOAP_FMAC3 _ns1__getStationByMo * SOAP_FMAC4 soap_in__ns1__getStationByMo(struct soap*, const char*, _ns1__getStationByMo *, const char*);
SOAP_FMAC1 _ns1__getStationByMo * SOAP_FMAC2 soap_instantiate__ns1__getStationByMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationByMo * soap_new__ns1__getStationByMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationByMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationByMo * soap_new_req__ns1__getStationByMo(
	struct soap *soap)
{
	_ns1__getStationByMo *_p = soap_new__ns1__getStationByMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationByMo * soap_new_set__ns1__getStationByMo(
	struct soap *soap,
	std::string *MoNumber)
{
	_ns1__getStationByMo *_p = soap_new__ns1__getStationByMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationByMo::MoNumber = MoNumber;
	}
	return _p;
}

inline int soap_write__ns1__getStationByMo(struct soap *soap, _ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMo", p->soap_type() == SOAP_TYPE__ns1__getStationByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationByMo(struct soap *soap, const char *URL, _ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMo", p->soap_type() == SOAP_TYPE__ns1__getStationByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationByMo(struct soap *soap, const char *URL, _ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMo", p->soap_type() == SOAP_TYPE__ns1__getStationByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationByMo * SOAP_FMAC4 soap_get__ns1__getStationByMo(struct soap*, _ns1__getStationByMo *, const char*, const char*);

inline int soap_read__ns1__getStationByMo(struct soap *soap, _ns1__getStationByMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationByMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationByMo(struct soap *soap, const char *URL, _ns1__getStationByMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationByMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationByMo(struct soap *soap, _ns1__getStationByMo *p)
{
	if (soap_read__ns1__getStationByMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnDoMappingResponse_DEFINED
#define SOAP_TYPE__ns1__SnDoMappingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnDoMappingResponse(struct soap*, const char*, int, const _ns1__SnDoMappingResponse *, const char*);
SOAP_FMAC3 _ns1__SnDoMappingResponse * SOAP_FMAC4 soap_in__ns1__SnDoMappingResponse(struct soap*, const char*, _ns1__SnDoMappingResponse *, const char*);
SOAP_FMAC1 _ns1__SnDoMappingResponse * SOAP_FMAC2 soap_instantiate__ns1__SnDoMappingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnDoMappingResponse * soap_new__ns1__SnDoMappingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnDoMappingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnDoMappingResponse * soap_new_req__ns1__SnDoMappingResponse(
	struct soap *soap)
{
	_ns1__SnDoMappingResponse *_p = soap_new__ns1__SnDoMappingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SnDoMappingResponse * soap_new_set__ns1__SnDoMappingResponse(
	struct soap *soap,
	std::string *SnDoMappingResult)
{
	_ns1__SnDoMappingResponse *_p = soap_new__ns1__SnDoMappingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnDoMappingResponse::SnDoMappingResult = SnDoMappingResult;
	}
	return _p;
}

inline int soap_write__ns1__SnDoMappingResponse(struct soap *soap, _ns1__SnDoMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMappingResponse", p->soap_type() == SOAP_TYPE__ns1__SnDoMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SnDoMappingResponse(struct soap *soap, const char *URL, _ns1__SnDoMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMappingResponse", p->soap_type() == SOAP_TYPE__ns1__SnDoMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SnDoMappingResponse(struct soap *soap, const char *URL, _ns1__SnDoMappingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMappingResponse", p->soap_type() == SOAP_TYPE__ns1__SnDoMappingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnDoMappingResponse * SOAP_FMAC4 soap_get__ns1__SnDoMappingResponse(struct soap*, _ns1__SnDoMappingResponse *, const char*, const char*);

inline int soap_read__ns1__SnDoMappingResponse(struct soap *soap, _ns1__SnDoMappingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnDoMappingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SnDoMappingResponse(struct soap *soap, const char *URL, _ns1__SnDoMappingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SnDoMappingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SnDoMappingResponse(struct soap *soap, _ns1__SnDoMappingResponse *p)
{
	if (soap_read__ns1__SnDoMappingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnDoMapping_DEFINED
#define SOAP_TYPE__ns1__SnDoMapping_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnDoMapping(struct soap*, const char*, int, const _ns1__SnDoMapping *, const char*);
SOAP_FMAC3 _ns1__SnDoMapping * SOAP_FMAC4 soap_in__ns1__SnDoMapping(struct soap*, const char*, _ns1__SnDoMapping *, const char*);
SOAP_FMAC1 _ns1__SnDoMapping * SOAP_FMAC2 soap_instantiate__ns1__SnDoMapping(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnDoMapping * soap_new__ns1__SnDoMapping(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnDoMapping(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnDoMapping * soap_new_req__ns1__SnDoMapping(
	struct soap *soap)
{
	_ns1__SnDoMapping *_p = soap_new__ns1__SnDoMapping(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SnDoMapping * soap_new_set__ns1__SnDoMapping(
	struct soap *soap,
	std::string *SN,
	std::string *CustSN,
	std::string *Emp_USCORENo,
	std::string *Station_USCORENumber,
	std::string *LnkType)
{
	_ns1__SnDoMapping *_p = soap_new__ns1__SnDoMapping(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnDoMapping::SN = SN;
		_p->_ns1__SnDoMapping::CustSN = CustSN;
		_p->_ns1__SnDoMapping::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__SnDoMapping::Station_USCORENumber = Station_USCORENumber;
		_p->_ns1__SnDoMapping::LnkType = LnkType;
	}
	return _p;
}

inline int soap_write__ns1__SnDoMapping(struct soap *soap, _ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMapping", p->soap_type() == SOAP_TYPE__ns1__SnDoMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SnDoMapping(struct soap *soap, const char *URL, _ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMapping", p->soap_type() == SOAP_TYPE__ns1__SnDoMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SnDoMapping(struct soap *soap, const char *URL, _ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnDoMapping", p->soap_type() == SOAP_TYPE__ns1__SnDoMapping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnDoMapping * SOAP_FMAC4 soap_get__ns1__SnDoMapping(struct soap*, _ns1__SnDoMapping *, const char*, const char*);

inline int soap_read__ns1__SnDoMapping(struct soap *soap, _ns1__SnDoMapping *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnDoMapping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SnDoMapping(struct soap *soap, const char *URL, _ns1__SnDoMapping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SnDoMapping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SnDoMapping(struct soap *soap, _ns1__SnDoMapping *p)
{
	if (soap_read__ns1__SnDoMapping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__eMesNextMoResponse_DEFINED
#define SOAP_TYPE__ns1__eMesNextMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__eMesNextMoResponse(struct soap*, const char*, int, const _ns1__eMesNextMoResponse *, const char*);
SOAP_FMAC3 _ns1__eMesNextMoResponse * SOAP_FMAC4 soap_in__ns1__eMesNextMoResponse(struct soap*, const char*, _ns1__eMesNextMoResponse *, const char*);
SOAP_FMAC1 _ns1__eMesNextMoResponse * SOAP_FMAC2 soap_instantiate__ns1__eMesNextMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__eMesNextMoResponse * soap_new__ns1__eMesNextMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__eMesNextMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__eMesNextMoResponse * soap_new_req__ns1__eMesNextMoResponse(
	struct soap *soap)
{
	_ns1__eMesNextMoResponse *_p = soap_new__ns1__eMesNextMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__eMesNextMoResponse * soap_new_set__ns1__eMesNextMoResponse(
	struct soap *soap,
	std::string *eMesNextMoResult)
{
	_ns1__eMesNextMoResponse *_p = soap_new__ns1__eMesNextMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__eMesNextMoResponse::eMesNextMoResult = eMesNextMoResult;
	}
	return _p;
}

inline int soap_write__ns1__eMesNextMoResponse(struct soap *soap, _ns1__eMesNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__eMesNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__eMesNextMoResponse(struct soap *soap, const char *URL, _ns1__eMesNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__eMesNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__eMesNextMoResponse(struct soap *soap, const char *URL, _ns1__eMesNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__eMesNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__eMesNextMoResponse * SOAP_FMAC4 soap_get__ns1__eMesNextMoResponse(struct soap*, _ns1__eMesNextMoResponse *, const char*, const char*);

inline int soap_read__ns1__eMesNextMoResponse(struct soap *soap, _ns1__eMesNextMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__eMesNextMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__eMesNextMoResponse(struct soap *soap, const char *URL, _ns1__eMesNextMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__eMesNextMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__eMesNextMoResponse(struct soap *soap, _ns1__eMesNextMoResponse *p)
{
	if (soap_read__ns1__eMesNextMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__eMesNextMo_DEFINED
#define SOAP_TYPE__ns1__eMesNextMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__eMesNextMo(struct soap*, const char*, int, const _ns1__eMesNextMo *, const char*);
SOAP_FMAC3 _ns1__eMesNextMo * SOAP_FMAC4 soap_in__ns1__eMesNextMo(struct soap*, const char*, _ns1__eMesNextMo *, const char*);
SOAP_FMAC1 _ns1__eMesNextMo * SOAP_FMAC2 soap_instantiate__ns1__eMesNextMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__eMesNextMo * soap_new__ns1__eMesNextMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__eMesNextMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__eMesNextMo * soap_new_req__ns1__eMesNextMo(
	struct soap *soap)
{
	_ns1__eMesNextMo *_p = soap_new__ns1__eMesNextMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__eMesNextMo * soap_new_set__ns1__eMesNextMo(
	struct soap *soap,
	std::string *SN,
	std::string *STATION_USCORENUMBER,
	std::string *USER_USCORENO,
	std::string *MO)
{
	_ns1__eMesNextMo *_p = soap_new__ns1__eMesNextMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__eMesNextMo::SN = SN;
		_p->_ns1__eMesNextMo::STATION_USCORENUMBER = STATION_USCORENUMBER;
		_p->_ns1__eMesNextMo::USER_USCORENO = USER_USCORENO;
		_p->_ns1__eMesNextMo::MO = MO;
	}
	return _p;
}

inline int soap_write__ns1__eMesNextMo(struct soap *soap, _ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMo", p->soap_type() == SOAP_TYPE__ns1__eMesNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__eMesNextMo(struct soap *soap, const char *URL, _ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMo", p->soap_type() == SOAP_TYPE__ns1__eMesNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__eMesNextMo(struct soap *soap, const char *URL, _ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eMesNextMo", p->soap_type() == SOAP_TYPE__ns1__eMesNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__eMesNextMo * SOAP_FMAC4 soap_get__ns1__eMesNextMo(struct soap*, _ns1__eMesNextMo *, const char*, const char*);

inline int soap_read__ns1__eMesNextMo(struct soap *soap, _ns1__eMesNextMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__eMesNextMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__eMesNextMo(struct soap *soap, const char *URL, _ns1__eMesNextMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__eMesNextMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__eMesNextMo(struct soap *soap, _ns1__eMesNextMo *p)
{
	if (soap_read__ns1__eMesNextMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendResultForStationNumberResponse_DEFINED
#define SOAP_TYPE__ns1__sendResultForStationNumberResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendResultForStationNumberResponse(struct soap*, const char*, int, const _ns1__sendResultForStationNumberResponse *, const char*);
SOAP_FMAC3 _ns1__sendResultForStationNumberResponse * SOAP_FMAC4 soap_in__ns1__sendResultForStationNumberResponse(struct soap*, const char*, _ns1__sendResultForStationNumberResponse *, const char*);
SOAP_FMAC1 _ns1__sendResultForStationNumberResponse * SOAP_FMAC2 soap_instantiate__ns1__sendResultForStationNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendResultForStationNumberResponse * soap_new__ns1__sendResultForStationNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendResultForStationNumberResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendResultForStationNumberResponse * soap_new_req__ns1__sendResultForStationNumberResponse(
	struct soap *soap)
{
	_ns1__sendResultForStationNumberResponse *_p = soap_new__ns1__sendResultForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendResultForStationNumberResponse * soap_new_set__ns1__sendResultForStationNumberResponse(
	struct soap *soap,
	std::string *sendResultForStationNumberResult)
{
	_ns1__sendResultForStationNumberResponse *_p = soap_new__ns1__sendResultForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendResultForStationNumberResponse::sendResultForStationNumberResult = sendResultForStationNumberResult;
	}
	return _p;
}

inline int soap_write__ns1__sendResultForStationNumberResponse(struct soap *soap, _ns1__sendResultForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendResultForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendResultForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendResultForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendResultForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendResultForStationNumberResponse * SOAP_FMAC4 soap_get__ns1__sendResultForStationNumberResponse(struct soap*, _ns1__sendResultForStationNumberResponse *, const char*, const char*);

inline int soap_read__ns1__sendResultForStationNumberResponse(struct soap *soap, _ns1__sendResultForStationNumberResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendResultForStationNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendResultForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendResultForStationNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendResultForStationNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendResultForStationNumberResponse(struct soap *soap, _ns1__sendResultForStationNumberResponse *p)
{
	if (soap_read__ns1__sendResultForStationNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendResultForStationNumber_DEFINED
#define SOAP_TYPE__ns1__sendResultForStationNumber_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendResultForStationNumber(struct soap*, const char*, int, const _ns1__sendResultForStationNumber *, const char*);
SOAP_FMAC3 _ns1__sendResultForStationNumber * SOAP_FMAC4 soap_in__ns1__sendResultForStationNumber(struct soap*, const char*, _ns1__sendResultForStationNumber *, const char*);
SOAP_FMAC1 _ns1__sendResultForStationNumber * SOAP_FMAC2 soap_instantiate__ns1__sendResultForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendResultForStationNumber * soap_new__ns1__sendResultForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendResultForStationNumber(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendResultForStationNumber * soap_new_req__ns1__sendResultForStationNumber(
	struct soap *soap)
{
	_ns1__sendResultForStationNumber *_p = soap_new__ns1__sendResultForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendResultForStationNumber * soap_new_set__ns1__sendResultForStationNumber(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *SN,
	std::string *Station_USCORENumber,
	std::string *TestResult)
{
	_ns1__sendResultForStationNumber *_p = soap_new__ns1__sendResultForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendResultForStationNumber::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__sendResultForStationNumber::SN = SN;
		_p->_ns1__sendResultForStationNumber::Station_USCORENumber = Station_USCORENumber;
		_p->_ns1__sendResultForStationNumber::TestResult = TestResult;
	}
	return _p;
}

inline int soap_write__ns1__sendResultForStationNumber(struct soap *soap, _ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendResultForStationNumber(struct soap *soap, const char *URL, _ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendResultForStationNumber(struct soap *soap, const char *URL, _ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendResultForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendResultForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendResultForStationNumber * SOAP_FMAC4 soap_get__ns1__sendResultForStationNumber(struct soap*, _ns1__sendResultForStationNumber *, const char*, const char*);

inline int soap_read__ns1__sendResultForStationNumber(struct soap *soap, _ns1__sendResultForStationNumber *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendResultForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendResultForStationNumber(struct soap *soap, const char *URL, _ns1__sendResultForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendResultForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendResultForStationNumber(struct soap *soap, _ns1__sendResultForStationNumber *p)
{
	if (soap_read__ns1__sendResultForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendDataForStationNumberResponse_DEFINED
#define SOAP_TYPE__ns1__sendDataForStationNumberResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendDataForStationNumberResponse(struct soap*, const char*, int, const _ns1__sendDataForStationNumberResponse *, const char*);
SOAP_FMAC3 _ns1__sendDataForStationNumberResponse * SOAP_FMAC4 soap_in__ns1__sendDataForStationNumberResponse(struct soap*, const char*, _ns1__sendDataForStationNumberResponse *, const char*);
SOAP_FMAC1 _ns1__sendDataForStationNumberResponse * SOAP_FMAC2 soap_instantiate__ns1__sendDataForStationNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendDataForStationNumberResponse * soap_new__ns1__sendDataForStationNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendDataForStationNumberResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendDataForStationNumberResponse * soap_new_req__ns1__sendDataForStationNumberResponse(
	struct soap *soap)
{
	_ns1__sendDataForStationNumberResponse *_p = soap_new__ns1__sendDataForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendDataForStationNumberResponse * soap_new_set__ns1__sendDataForStationNumberResponse(
	struct soap *soap,
	std::string *sendDataForStationNumberResult)
{
	_ns1__sendDataForStationNumberResponse *_p = soap_new__ns1__sendDataForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendDataForStationNumberResponse::sendDataForStationNumberResult = sendDataForStationNumberResult;
	}
	return _p;
}

inline int soap_write__ns1__sendDataForStationNumberResponse(struct soap *soap, _ns1__sendDataForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendDataForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendDataForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendDataForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendDataForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendDataForStationNumberResponse * SOAP_FMAC4 soap_get__ns1__sendDataForStationNumberResponse(struct soap*, _ns1__sendDataForStationNumberResponse *, const char*, const char*);

inline int soap_read__ns1__sendDataForStationNumberResponse(struct soap *soap, _ns1__sendDataForStationNumberResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendDataForStationNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendDataForStationNumberResponse(struct soap *soap, const char *URL, _ns1__sendDataForStationNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendDataForStationNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendDataForStationNumberResponse(struct soap *soap, _ns1__sendDataForStationNumberResponse *p)
{
	if (soap_read__ns1__sendDataForStationNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendDataForStationNumber_DEFINED
#define SOAP_TYPE__ns1__sendDataForStationNumber_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendDataForStationNumber(struct soap*, const char*, int, const _ns1__sendDataForStationNumber *, const char*);
SOAP_FMAC3 _ns1__sendDataForStationNumber * SOAP_FMAC4 soap_in__ns1__sendDataForStationNumber(struct soap*, const char*, _ns1__sendDataForStationNumber *, const char*);
SOAP_FMAC1 _ns1__sendDataForStationNumber * SOAP_FMAC2 soap_instantiate__ns1__sendDataForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendDataForStationNumber * soap_new__ns1__sendDataForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendDataForStationNumber(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendDataForStationNumber * soap_new_req__ns1__sendDataForStationNumber(
	struct soap *soap)
{
	_ns1__sendDataForStationNumber *_p = soap_new__ns1__sendDataForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendDataForStationNumber * soap_new_set__ns1__sendDataForStationNumber(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *SN,
	std::string *Station_USCORENumber,
	std::string *TestData)
{
	_ns1__sendDataForStationNumber *_p = soap_new__ns1__sendDataForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendDataForStationNumber::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__sendDataForStationNumber::SN = SN;
		_p->_ns1__sendDataForStationNumber::Station_USCORENumber = Station_USCORENumber;
		_p->_ns1__sendDataForStationNumber::TestData = TestData;
	}
	return _p;
}

inline int soap_write__ns1__sendDataForStationNumber(struct soap *soap, _ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendDataForStationNumber(struct soap *soap, const char *URL, _ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendDataForStationNumber(struct soap *soap, const char *URL, _ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendDataForStationNumber", p->soap_type() == SOAP_TYPE__ns1__sendDataForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendDataForStationNumber * SOAP_FMAC4 soap_get__ns1__sendDataForStationNumber(struct soap*, _ns1__sendDataForStationNumber *, const char*, const char*);

inline int soap_read__ns1__sendDataForStationNumber(struct soap *soap, _ns1__sendDataForStationNumber *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendDataForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendDataForStationNumber(struct soap *soap, const char *URL, _ns1__sendDataForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendDataForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendDataForStationNumber(struct soap *soap, _ns1__sendDataForStationNumber *p)
{
	if (soap_read__ns1__sendDataForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkEmpForStationNumberResponse_DEFINED
#define SOAP_TYPE__ns1__checkEmpForStationNumberResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkEmpForStationNumberResponse(struct soap*, const char*, int, const _ns1__checkEmpForStationNumberResponse *, const char*);
SOAP_FMAC3 _ns1__checkEmpForStationNumberResponse * SOAP_FMAC4 soap_in__ns1__checkEmpForStationNumberResponse(struct soap*, const char*, _ns1__checkEmpForStationNumberResponse *, const char*);
SOAP_FMAC1 _ns1__checkEmpForStationNumberResponse * SOAP_FMAC2 soap_instantiate__ns1__checkEmpForStationNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkEmpForStationNumberResponse * soap_new__ns1__checkEmpForStationNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkEmpForStationNumberResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkEmpForStationNumberResponse * soap_new_req__ns1__checkEmpForStationNumberResponse(
	struct soap *soap)
{
	_ns1__checkEmpForStationNumberResponse *_p = soap_new__ns1__checkEmpForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkEmpForStationNumberResponse * soap_new_set__ns1__checkEmpForStationNumberResponse(
	struct soap *soap,
	std::string *checkEmpForStationNumberResult)
{
	_ns1__checkEmpForStationNumberResponse *_p = soap_new__ns1__checkEmpForStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkEmpForStationNumberResponse::checkEmpForStationNumberResult = checkEmpForStationNumberResult;
	}
	return _p;
}

inline int soap_write__ns1__checkEmpForStationNumberResponse(struct soap *soap, _ns1__checkEmpForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkEmpForStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkEmpForStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkEmpForStationNumberResponse * SOAP_FMAC4 soap_get__ns1__checkEmpForStationNumberResponse(struct soap*, _ns1__checkEmpForStationNumberResponse *, const char*, const char*);

inline int soap_read__ns1__checkEmpForStationNumberResponse(struct soap *soap, _ns1__checkEmpForStationNumberResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkEmpForStationNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkEmpForStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkEmpForStationNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkEmpForStationNumberResponse(struct soap *soap, _ns1__checkEmpForStationNumberResponse *p)
{
	if (soap_read__ns1__checkEmpForStationNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkEmpForStationNumber_DEFINED
#define SOAP_TYPE__ns1__checkEmpForStationNumber_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkEmpForStationNumber(struct soap*, const char*, int, const _ns1__checkEmpForStationNumber *, const char*);
SOAP_FMAC3 _ns1__checkEmpForStationNumber * SOAP_FMAC4 soap_in__ns1__checkEmpForStationNumber(struct soap*, const char*, _ns1__checkEmpForStationNumber *, const char*);
SOAP_FMAC1 _ns1__checkEmpForStationNumber * SOAP_FMAC2 soap_instantiate__ns1__checkEmpForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkEmpForStationNumber * soap_new__ns1__checkEmpForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkEmpForStationNumber(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkEmpForStationNumber * soap_new_req__ns1__checkEmpForStationNumber(
	struct soap *soap)
{
	_ns1__checkEmpForStationNumber *_p = soap_new__ns1__checkEmpForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkEmpForStationNumber * soap_new_set__ns1__checkEmpForStationNumber(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *Station_USCORENumber)
{
	_ns1__checkEmpForStationNumber *_p = soap_new__ns1__checkEmpForStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkEmpForStationNumber::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__checkEmpForStationNumber::Station_USCORENumber = Station_USCORENumber;
	}
	return _p;
}

inline int soap_write__ns1__checkEmpForStationNumber(struct soap *soap, _ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumber", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumber", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpForStationNumber", p->soap_type() == SOAP_TYPE__ns1__checkEmpForStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkEmpForStationNumber * SOAP_FMAC4 soap_get__ns1__checkEmpForStationNumber(struct soap*, _ns1__checkEmpForStationNumber *, const char*, const char*);

inline int soap_read__ns1__checkEmpForStationNumber(struct soap *soap, _ns1__checkEmpForStationNumber *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkEmpForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, _ns1__checkEmpForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkEmpForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkEmpForStationNumber(struct soap *soap, _ns1__checkEmpForStationNumber *p)
{
	if (soap_read__ns1__checkEmpForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSN_USCOREStationNumberResponse_DEFINED
#define SOAP_TYPE__ns1__checkSN_USCOREStationNumberResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSN_USCOREStationNumberResponse(struct soap*, const char*, int, const _ns1__checkSN_USCOREStationNumberResponse *, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumberResponse * SOAP_FMAC4 soap_in__ns1__checkSN_USCOREStationNumberResponse(struct soap*, const char*, _ns1__checkSN_USCOREStationNumberResponse *, const char*);
SOAP_FMAC1 _ns1__checkSN_USCOREStationNumberResponse * SOAP_FMAC2 soap_instantiate__ns1__checkSN_USCOREStationNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSN_USCOREStationNumberResponse * soap_new__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSN_USCOREStationNumberResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSN_USCOREStationNumberResponse * soap_new_req__ns1__checkSN_USCOREStationNumberResponse(
	struct soap *soap)
{
	_ns1__checkSN_USCOREStationNumberResponse *_p = soap_new__ns1__checkSN_USCOREStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkSN_USCOREStationNumberResponse * soap_new_set__ns1__checkSN_USCOREStationNumberResponse(
	struct soap *soap,
	std::string *checkSN_USCOREStationNumberResult)
{
	_ns1__checkSN_USCOREStationNumberResponse *_p = soap_new__ns1__checkSN_USCOREStationNumberResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSN_USCOREStationNumberResponse::checkSN_USCOREStationNumberResult = checkSN_USCOREStationNumberResult;
	}
	return _p;
}

inline int soap_write__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, _ns1__checkSN_USCOREStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumberResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumberResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumberResponse * SOAP_FMAC4 soap_get__ns1__checkSN_USCOREStationNumberResponse(struct soap*, _ns1__checkSN_USCOREStationNumberResponse *, const char*, const char*);

inline int soap_read__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, _ns1__checkSN_USCOREStationNumberResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSN_USCOREStationNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkSN_USCOREStationNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkSN_USCOREStationNumberResponse(struct soap *soap, _ns1__checkSN_USCOREStationNumberResponse *p)
{
	if (soap_read__ns1__checkSN_USCOREStationNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSN_USCOREStationNumber_DEFINED
#define SOAP_TYPE__ns1__checkSN_USCOREStationNumber_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSN_USCOREStationNumber(struct soap*, const char*, int, const _ns1__checkSN_USCOREStationNumber *, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumber * SOAP_FMAC4 soap_in__ns1__checkSN_USCOREStationNumber(struct soap*, const char*, _ns1__checkSN_USCOREStationNumber *, const char*);
SOAP_FMAC1 _ns1__checkSN_USCOREStationNumber * SOAP_FMAC2 soap_instantiate__ns1__checkSN_USCOREStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSN_USCOREStationNumber * soap_new__ns1__checkSN_USCOREStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSN_USCOREStationNumber(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSN_USCOREStationNumber * soap_new_req__ns1__checkSN_USCOREStationNumber(
	struct soap *soap)
{
	_ns1__checkSN_USCOREStationNumber *_p = soap_new__ns1__checkSN_USCOREStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkSN_USCOREStationNumber * soap_new_set__ns1__checkSN_USCOREStationNumber(
	struct soap *soap,
	std::string *SN,
	std::string *Station_USCORENumber)
{
	_ns1__checkSN_USCOREStationNumber *_p = soap_new__ns1__checkSN_USCOREStationNumber(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSN_USCOREStationNumber::SN = SN;
		_p->_ns1__checkSN_USCOREStationNumber::Station_USCORENumber = Station_USCORENumber;
	}
	return _p;
}

inline int soap_write__ns1__checkSN_USCOREStationNumber(struct soap *soap, _ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumber", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumber", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationNumber", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationNumber ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumber * SOAP_FMAC4 soap_get__ns1__checkSN_USCOREStationNumber(struct soap*, _ns1__checkSN_USCOREStationNumber *, const char*, const char*);

inline int soap_read__ns1__checkSN_USCOREStationNumber(struct soap *soap, _ns1__checkSN_USCOREStationNumber *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSN_USCOREStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkSN_USCOREStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkSN_USCOREStationNumber(struct soap *soap, _ns1__checkSN_USCOREStationNumber *p)
{
	if (soap_read__ns1__checkSN_USCOREStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnNextMoResponse_DEFINED
#define SOAP_TYPE__ns1__ChkSnNextMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnNextMoResponse(struct soap*, const char*, int, const _ns1__ChkSnNextMoResponse *, const char*);
SOAP_FMAC3 _ns1__ChkSnNextMoResponse * SOAP_FMAC4 soap_in__ns1__ChkSnNextMoResponse(struct soap*, const char*, _ns1__ChkSnNextMoResponse *, const char*);
SOAP_FMAC1 _ns1__ChkSnNextMoResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkSnNextMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnNextMoResponse * soap_new__ns1__ChkSnNextMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnNextMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnNextMoResponse * soap_new_req__ns1__ChkSnNextMoResponse(
	struct soap *soap)
{
	_ns1__ChkSnNextMoResponse *_p = soap_new__ns1__ChkSnNextMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnNextMoResponse * soap_new_set__ns1__ChkSnNextMoResponse(
	struct soap *soap,
	std::string *ChkSnNextMoResult)
{
	_ns1__ChkSnNextMoResponse *_p = soap_new__ns1__ChkSnNextMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnNextMoResponse::ChkSnNextMoResult = ChkSnNextMoResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnNextMoResponse(struct soap *soap, _ns1__ChkSnNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnNextMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnNextMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnNextMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnNextMoResponse * SOAP_FMAC4 soap_get__ns1__ChkSnNextMoResponse(struct soap*, _ns1__ChkSnNextMoResponse *, const char*, const char*);

inline int soap_read__ns1__ChkSnNextMoResponse(struct soap *soap, _ns1__ChkSnNextMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnNextMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnNextMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnNextMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnNextMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnNextMoResponse(struct soap *soap, _ns1__ChkSnNextMoResponse *p)
{
	if (soap_read__ns1__ChkSnNextMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnNextMo_DEFINED
#define SOAP_TYPE__ns1__ChkSnNextMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnNextMo(struct soap*, const char*, int, const _ns1__ChkSnNextMo *, const char*);
SOAP_FMAC3 _ns1__ChkSnNextMo * SOAP_FMAC4 soap_in__ns1__ChkSnNextMo(struct soap*, const char*, _ns1__ChkSnNextMo *, const char*);
SOAP_FMAC1 _ns1__ChkSnNextMo * SOAP_FMAC2 soap_instantiate__ns1__ChkSnNextMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnNextMo * soap_new__ns1__ChkSnNextMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnNextMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnNextMo * soap_new_req__ns1__ChkSnNextMo(
	struct soap *soap)
{
	_ns1__ChkSnNextMo *_p = soap_new__ns1__ChkSnNextMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnNextMo * soap_new_set__ns1__ChkSnNextMo(
	struct soap *soap,
	std::string *SN,
	std::string *MO,
	std::string *STATION_USCORENUMBER)
{
	_ns1__ChkSnNextMo *_p = soap_new__ns1__ChkSnNextMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnNextMo::SN = SN;
		_p->_ns1__ChkSnNextMo::MO = MO;
		_p->_ns1__ChkSnNextMo::STATION_USCORENUMBER = STATION_USCORENUMBER;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnNextMo(struct soap *soap, _ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnNextMo(struct soap *soap, const char *URL, _ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnNextMo(struct soap *soap, const char *URL, _ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnNextMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnNextMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnNextMo * SOAP_FMAC4 soap_get__ns1__ChkSnNextMo(struct soap*, _ns1__ChkSnNextMo *, const char*, const char*);

inline int soap_read__ns1__ChkSnNextMo(struct soap *soap, _ns1__ChkSnNextMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnNextMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnNextMo(struct soap *soap, const char *URL, _ns1__ChkSnNextMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnNextMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnNextMo(struct soap *soap, _ns1__ChkSnNextMo *p)
{
	if (soap_read__ns1__ChkSnNextMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnMoResponse_DEFINED
#define SOAP_TYPE__ns1__ChkSnMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnMoResponse(struct soap*, const char*, int, const _ns1__ChkSnMoResponse *, const char*);
SOAP_FMAC3 _ns1__ChkSnMoResponse * SOAP_FMAC4 soap_in__ns1__ChkSnMoResponse(struct soap*, const char*, _ns1__ChkSnMoResponse *, const char*);
SOAP_FMAC1 _ns1__ChkSnMoResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkSnMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnMoResponse * soap_new__ns1__ChkSnMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnMoResponse * soap_new_req__ns1__ChkSnMoResponse(
	struct soap *soap)
{
	_ns1__ChkSnMoResponse *_p = soap_new__ns1__ChkSnMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnMoResponse * soap_new_set__ns1__ChkSnMoResponse(
	struct soap *soap,
	std::string *ChkSnMoResult)
{
	_ns1__ChkSnMoResponse *_p = soap_new__ns1__ChkSnMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnMoResponse::ChkSnMoResult = ChkSnMoResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnMoResponse(struct soap *soap, _ns1__ChkSnMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMoResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnMoResponse * SOAP_FMAC4 soap_get__ns1__ChkSnMoResponse(struct soap*, _ns1__ChkSnMoResponse *, const char*, const char*);

inline int soap_read__ns1__ChkSnMoResponse(struct soap *soap, _ns1__ChkSnMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnMoResponse(struct soap *soap, const char *URL, _ns1__ChkSnMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnMoResponse(struct soap *soap, _ns1__ChkSnMoResponse *p)
{
	if (soap_read__ns1__ChkSnMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnMo_DEFINED
#define SOAP_TYPE__ns1__ChkSnMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnMo(struct soap*, const char*, int, const _ns1__ChkSnMo *, const char*);
SOAP_FMAC3 _ns1__ChkSnMo * SOAP_FMAC4 soap_in__ns1__ChkSnMo(struct soap*, const char*, _ns1__ChkSnMo *, const char*);
SOAP_FMAC1 _ns1__ChkSnMo * SOAP_FMAC2 soap_instantiate__ns1__ChkSnMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnMo * soap_new__ns1__ChkSnMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnMo * soap_new_req__ns1__ChkSnMo(
	struct soap *soap)
{
	_ns1__ChkSnMo *_p = soap_new__ns1__ChkSnMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnMo * soap_new_set__ns1__ChkSnMo(
	struct soap *soap,
	std::string *SN,
	std::string *MO,
	std::string *STATION_USCORENUMBER)
{
	_ns1__ChkSnMo *_p = soap_new__ns1__ChkSnMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnMo::SN = SN;
		_p->_ns1__ChkSnMo::MO = MO;
		_p->_ns1__ChkSnMo::STATION_USCORENUMBER = STATION_USCORENUMBER;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnMo(struct soap *soap, _ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnMo(struct soap *soap, const char *URL, _ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnMo(struct soap *soap, const char *URL, _ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnMo", p->soap_type() == SOAP_TYPE__ns1__ChkSnMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnMo * SOAP_FMAC4 soap_get__ns1__ChkSnMo(struct soap*, _ns1__ChkSnMo *, const char*, const char*);

inline int soap_read__ns1__ChkSnMo(struct soap *soap, _ns1__ChkSnMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnMo(struct soap *soap, const char *URL, _ns1__ChkSnMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnMo(struct soap *soap, _ns1__ChkSnMo *p)
{
	if (soap_read__ns1__ChkSnMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkMoStationResponse_DEFINED
#define SOAP_TYPE__ns1__chkMoStationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkMoStationResponse(struct soap*, const char*, int, const _ns1__chkMoStationResponse *, const char*);
SOAP_FMAC3 _ns1__chkMoStationResponse * SOAP_FMAC4 soap_in__ns1__chkMoStationResponse(struct soap*, const char*, _ns1__chkMoStationResponse *, const char*);
SOAP_FMAC1 _ns1__chkMoStationResponse * SOAP_FMAC2 soap_instantiate__ns1__chkMoStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkMoStationResponse * soap_new__ns1__chkMoStationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkMoStationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkMoStationResponse * soap_new_req__ns1__chkMoStationResponse(
	struct soap *soap)
{
	_ns1__chkMoStationResponse *_p = soap_new__ns1__chkMoStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkMoStationResponse * soap_new_set__ns1__chkMoStationResponse(
	struct soap *soap,
	std::string *chkMoStationResult)
{
	_ns1__chkMoStationResponse *_p = soap_new__ns1__chkMoStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkMoStationResponse::chkMoStationResult = chkMoStationResult;
	}
	return _p;
}

inline int soap_write__ns1__chkMoStationResponse(struct soap *soap, _ns1__chkMoStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStationResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkMoStationResponse(struct soap *soap, const char *URL, _ns1__chkMoStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStationResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkMoStationResponse(struct soap *soap, const char *URL, _ns1__chkMoStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStationResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkMoStationResponse * SOAP_FMAC4 soap_get__ns1__chkMoStationResponse(struct soap*, _ns1__chkMoStationResponse *, const char*, const char*);

inline int soap_read__ns1__chkMoStationResponse(struct soap *soap, _ns1__chkMoStationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkMoStationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkMoStationResponse(struct soap *soap, const char *URL, _ns1__chkMoStationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkMoStationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkMoStationResponse(struct soap *soap, _ns1__chkMoStationResponse *p)
{
	if (soap_read__ns1__chkMoStationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkMoStation_DEFINED
#define SOAP_TYPE__ns1__chkMoStation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkMoStation(struct soap*, const char*, int, const _ns1__chkMoStation *, const char*);
SOAP_FMAC3 _ns1__chkMoStation * SOAP_FMAC4 soap_in__ns1__chkMoStation(struct soap*, const char*, _ns1__chkMoStation *, const char*);
SOAP_FMAC1 _ns1__chkMoStation * SOAP_FMAC2 soap_instantiate__ns1__chkMoStation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkMoStation * soap_new__ns1__chkMoStation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkMoStation(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkMoStation * soap_new_req__ns1__chkMoStation(
	struct soap *soap)
{
	_ns1__chkMoStation *_p = soap_new__ns1__chkMoStation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkMoStation * soap_new_set__ns1__chkMoStation(
	struct soap *soap,
	std::string *MO,
	std::string *StationNumber)
{
	_ns1__chkMoStation *_p = soap_new__ns1__chkMoStation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkMoStation::MO = MO;
		_p->_ns1__chkMoStation::StationNumber = StationNumber;
	}
	return _p;
}

inline int soap_write__ns1__chkMoStation(struct soap *soap, _ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStation", p->soap_type() == SOAP_TYPE__ns1__chkMoStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkMoStation(struct soap *soap, const char *URL, _ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStation", p->soap_type() == SOAP_TYPE__ns1__chkMoStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkMoStation(struct soap *soap, const char *URL, _ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoStation", p->soap_type() == SOAP_TYPE__ns1__chkMoStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkMoStation * SOAP_FMAC4 soap_get__ns1__chkMoStation(struct soap*, _ns1__chkMoStation *, const char*, const char*);

inline int soap_read__ns1__chkMoStation(struct soap *soap, _ns1__chkMoStation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkMoStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkMoStation(struct soap *soap, const char *URL, _ns1__chkMoStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkMoStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkMoStation(struct soap *soap, _ns1__chkMoStation *p)
{
	if (soap_read__ns1__chkMoStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetEnergyStatResponse_DEFINED
#define SOAP_TYPE__ns1__SetEnergyStatResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEnergyStatResponse(struct soap*, const char*, int, const _ns1__SetEnergyStatResponse *, const char*);
SOAP_FMAC3 _ns1__SetEnergyStatResponse * SOAP_FMAC4 soap_in__ns1__SetEnergyStatResponse(struct soap*, const char*, _ns1__SetEnergyStatResponse *, const char*);
SOAP_FMAC1 _ns1__SetEnergyStatResponse * SOAP_FMAC2 soap_instantiate__ns1__SetEnergyStatResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetEnergyStatResponse * soap_new__ns1__SetEnergyStatResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetEnergyStatResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetEnergyStatResponse * soap_new_req__ns1__SetEnergyStatResponse(
	struct soap *soap)
{
	_ns1__SetEnergyStatResponse *_p = soap_new__ns1__SetEnergyStatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetEnergyStatResponse * soap_new_set__ns1__SetEnergyStatResponse(
	struct soap *soap,
	std::string *SetEnergyStatResult)
{
	_ns1__SetEnergyStatResponse *_p = soap_new__ns1__SetEnergyStatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEnergyStatResponse::SetEnergyStatResult = SetEnergyStatResult;
	}
	return _p;
}

inline int soap_write__ns1__SetEnergyStatResponse(struct soap *soap, _ns1__SetEnergyStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStatResponse", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetEnergyStatResponse(struct soap *soap, const char *URL, _ns1__SetEnergyStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStatResponse", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetEnergyStatResponse(struct soap *soap, const char *URL, _ns1__SetEnergyStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStatResponse", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetEnergyStatResponse * SOAP_FMAC4 soap_get__ns1__SetEnergyStatResponse(struct soap*, _ns1__SetEnergyStatResponse *, const char*, const char*);

inline int soap_read__ns1__SetEnergyStatResponse(struct soap *soap, _ns1__SetEnergyStatResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetEnergyStatResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetEnergyStatResponse(struct soap *soap, const char *URL, _ns1__SetEnergyStatResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetEnergyStatResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetEnergyStatResponse(struct soap *soap, _ns1__SetEnergyStatResponse *p)
{
	if (soap_read__ns1__SetEnergyStatResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetEnergyStat_DEFINED
#define SOAP_TYPE__ns1__SetEnergyStat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEnergyStat(struct soap*, const char*, int, const _ns1__SetEnergyStat *, const char*);
SOAP_FMAC3 _ns1__SetEnergyStat * SOAP_FMAC4 soap_in__ns1__SetEnergyStat(struct soap*, const char*, _ns1__SetEnergyStat *, const char*);
SOAP_FMAC1 _ns1__SetEnergyStat * SOAP_FMAC2 soap_instantiate__ns1__SetEnergyStat(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetEnergyStat * soap_new__ns1__SetEnergyStat(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetEnergyStat(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetEnergyStat * soap_new_req__ns1__SetEnergyStat(
	struct soap *soap)
{
	_ns1__SetEnergyStat *_p = soap_new__ns1__SetEnergyStat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetEnergyStat * soap_new_set__ns1__SetEnergyStat(
	struct soap *soap,
	std::string *DateKey,
	ns1__ArrayOfString *strPower,
	ns1__ArrayOfString *strEnergy)
{
	_ns1__SetEnergyStat *_p = soap_new__ns1__SetEnergyStat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEnergyStat::DateKey = DateKey;
		_p->_ns1__SetEnergyStat::strPower = strPower;
		_p->_ns1__SetEnergyStat::strEnergy = strEnergy;
	}
	return _p;
}

inline int soap_write__ns1__SetEnergyStat(struct soap *soap, _ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStat", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetEnergyStat(struct soap *soap, const char *URL, _ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStat", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetEnergyStat(struct soap *soap, const char *URL, _ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEnergyStat", p->soap_type() == SOAP_TYPE__ns1__SetEnergyStat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetEnergyStat * SOAP_FMAC4 soap_get__ns1__SetEnergyStat(struct soap*, _ns1__SetEnergyStat *, const char*, const char*);

inline int soap_read__ns1__SetEnergyStat(struct soap *soap, _ns1__SetEnergyStat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetEnergyStat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetEnergyStat(struct soap *soap, const char *URL, _ns1__SetEnergyStat *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetEnergyStat(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetEnergyStat(struct soap *soap, _ns1__SetEnergyStat *p)
{
	if (soap_read__ns1__SetEnergyStat(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getInfoByMoResponse_DEFINED
#define SOAP_TYPE__ns1__getInfoByMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getInfoByMoResponse(struct soap*, const char*, int, const _ns1__getInfoByMoResponse *, const char*);
SOAP_FMAC3 _ns1__getInfoByMoResponse * SOAP_FMAC4 soap_in__ns1__getInfoByMoResponse(struct soap*, const char*, _ns1__getInfoByMoResponse *, const char*);
SOAP_FMAC1 _ns1__getInfoByMoResponse * SOAP_FMAC2 soap_instantiate__ns1__getInfoByMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getInfoByMoResponse * soap_new__ns1__getInfoByMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getInfoByMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getInfoByMoResponse * soap_new_req__ns1__getInfoByMoResponse(
	struct soap *soap)
{
	_ns1__getInfoByMoResponse *_p = soap_new__ns1__getInfoByMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getInfoByMoResponse * soap_new_set__ns1__getInfoByMoResponse(
	struct soap *soap,
	_ns1__getInfoByMoResponse_getInfoByMoResult *getInfoByMoResult)
{
	_ns1__getInfoByMoResponse *_p = soap_new__ns1__getInfoByMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getInfoByMoResponse::getInfoByMoResult = getInfoByMoResult;
	}
	return _p;
}

inline int soap_write__ns1__getInfoByMoResponse(struct soap *soap, _ns1__getInfoByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getInfoByMoResponse(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getInfoByMoResponse(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMoResponse", p->soap_type() == SOAP_TYPE__ns1__getInfoByMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getInfoByMoResponse * SOAP_FMAC4 soap_get__ns1__getInfoByMoResponse(struct soap*, _ns1__getInfoByMoResponse *, const char*, const char*);

inline int soap_read__ns1__getInfoByMoResponse(struct soap *soap, _ns1__getInfoByMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getInfoByMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getInfoByMoResponse(struct soap *soap, const char *URL, _ns1__getInfoByMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getInfoByMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getInfoByMoResponse(struct soap *soap, _ns1__getInfoByMoResponse *p)
{
	if (soap_read__ns1__getInfoByMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getInfoByMo_DEFINED
#define SOAP_TYPE__ns1__getInfoByMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getInfoByMo(struct soap*, const char*, int, const _ns1__getInfoByMo *, const char*);
SOAP_FMAC3 _ns1__getInfoByMo * SOAP_FMAC4 soap_in__ns1__getInfoByMo(struct soap*, const char*, _ns1__getInfoByMo *, const char*);
SOAP_FMAC1 _ns1__getInfoByMo * SOAP_FMAC2 soap_instantiate__ns1__getInfoByMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getInfoByMo * soap_new__ns1__getInfoByMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getInfoByMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__getInfoByMo * soap_new_req__ns1__getInfoByMo(
	struct soap *soap)
{
	_ns1__getInfoByMo *_p = soap_new__ns1__getInfoByMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getInfoByMo * soap_new_set__ns1__getInfoByMo(
	struct soap *soap,
	std::string *MoNumber)
{
	_ns1__getInfoByMo *_p = soap_new__ns1__getInfoByMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getInfoByMo::MoNumber = MoNumber;
	}
	return _p;
}

inline int soap_write__ns1__getInfoByMo(struct soap *soap, _ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMo", p->soap_type() == SOAP_TYPE__ns1__getInfoByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getInfoByMo(struct soap *soap, const char *URL, _ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMo", p->soap_type() == SOAP_TYPE__ns1__getInfoByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getInfoByMo(struct soap *soap, const char *URL, _ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getInfoByMo", p->soap_type() == SOAP_TYPE__ns1__getInfoByMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getInfoByMo * SOAP_FMAC4 soap_get__ns1__getInfoByMo(struct soap*, _ns1__getInfoByMo *, const char*, const char*);

inline int soap_read__ns1__getInfoByMo(struct soap *soap, _ns1__getInfoByMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getInfoByMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getInfoByMo(struct soap *soap, const char *URL, _ns1__getInfoByMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getInfoByMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getInfoByMo(struct soap *soap, _ns1__getInfoByMo *p)
{
	if (soap_read__ns1__getInfoByMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsThermalNewResponse_DEFINED
#define SOAP_TYPE__ns1__InsThermalNewResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsThermalNewResponse(struct soap*, const char*, int, const _ns1__InsThermalNewResponse *, const char*);
SOAP_FMAC3 _ns1__InsThermalNewResponse * SOAP_FMAC4 soap_in__ns1__InsThermalNewResponse(struct soap*, const char*, _ns1__InsThermalNewResponse *, const char*);
SOAP_FMAC1 _ns1__InsThermalNewResponse * SOAP_FMAC2 soap_instantiate__ns1__InsThermalNewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsThermalNewResponse * soap_new__ns1__InsThermalNewResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsThermalNewResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsThermalNewResponse * soap_new_req__ns1__InsThermalNewResponse(
	struct soap *soap)
{
	_ns1__InsThermalNewResponse *_p = soap_new__ns1__InsThermalNewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsThermalNewResponse * soap_new_set__ns1__InsThermalNewResponse(
	struct soap *soap,
	std::string *InsThermalNewResult)
{
	_ns1__InsThermalNewResponse *_p = soap_new__ns1__InsThermalNewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsThermalNewResponse::InsThermalNewResult = InsThermalNewResult;
	}
	return _p;
}

inline int soap_write__ns1__InsThermalNewResponse(struct soap *soap, _ns1__InsThermalNewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNewResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalNewResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsThermalNewResponse(struct soap *soap, const char *URL, _ns1__InsThermalNewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNewResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalNewResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsThermalNewResponse(struct soap *soap, const char *URL, _ns1__InsThermalNewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNewResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalNewResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsThermalNewResponse * SOAP_FMAC4 soap_get__ns1__InsThermalNewResponse(struct soap*, _ns1__InsThermalNewResponse *, const char*, const char*);

inline int soap_read__ns1__InsThermalNewResponse(struct soap *soap, _ns1__InsThermalNewResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsThermalNewResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsThermalNewResponse(struct soap *soap, const char *URL, _ns1__InsThermalNewResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsThermalNewResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsThermalNewResponse(struct soap *soap, _ns1__InsThermalNewResponse *p)
{
	if (soap_read__ns1__InsThermalNewResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsThermalNew_DEFINED
#define SOAP_TYPE__ns1__InsThermalNew_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsThermalNew(struct soap*, const char*, int, const _ns1__InsThermalNew *, const char*);
SOAP_FMAC3 _ns1__InsThermalNew * SOAP_FMAC4 soap_in__ns1__InsThermalNew(struct soap*, const char*, _ns1__InsThermalNew *, const char*);
SOAP_FMAC1 _ns1__InsThermalNew * SOAP_FMAC2 soap_instantiate__ns1__InsThermalNew(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsThermalNew * soap_new__ns1__InsThermalNew(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsThermalNew(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsThermalNew * soap_new_req__ns1__InsThermalNew(
	struct soap *soap)
{
	_ns1__InsThermalNew *_p = soap_new__ns1__InsThermalNew(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsThermalNew * soap_new_set__ns1__InsThermalNew(
	struct soap *soap,
	std::string *SN,
	std::string *LinkSN,
	std::string *TestDt,
	std::string *Hole,
	std::string *User,
	std::string *Result,
	ns1__ArrayOfString *strTemp,
	ns1__ArrayOfString *strErature,
	ns1__ArrayOfString *strResult)
{
	_ns1__InsThermalNew *_p = soap_new__ns1__InsThermalNew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsThermalNew::SN = SN;
		_p->_ns1__InsThermalNew::LinkSN = LinkSN;
		_p->_ns1__InsThermalNew::TestDt = TestDt;
		_p->_ns1__InsThermalNew::Hole = Hole;
		_p->_ns1__InsThermalNew::User = User;
		_p->_ns1__InsThermalNew::Result = Result;
		_p->_ns1__InsThermalNew::strTemp = strTemp;
		_p->_ns1__InsThermalNew::strErature = strErature;
		_p->_ns1__InsThermalNew::strResult = strResult;
	}
	return _p;
}

inline int soap_write__ns1__InsThermalNew(struct soap *soap, _ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNew", p->soap_type() == SOAP_TYPE__ns1__InsThermalNew ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsThermalNew(struct soap *soap, const char *URL, _ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNew", p->soap_type() == SOAP_TYPE__ns1__InsThermalNew ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsThermalNew(struct soap *soap, const char *URL, _ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalNew", p->soap_type() == SOAP_TYPE__ns1__InsThermalNew ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsThermalNew * SOAP_FMAC4 soap_get__ns1__InsThermalNew(struct soap*, _ns1__InsThermalNew *, const char*, const char*);

inline int soap_read__ns1__InsThermalNew(struct soap *soap, _ns1__InsThermalNew *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsThermalNew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsThermalNew(struct soap *soap, const char *URL, _ns1__InsThermalNew *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsThermalNew(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsThermalNew(struct soap *soap, _ns1__InsThermalNew *p)
{
	if (soap_read__ns1__InsThermalNew(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnLinkResponse_DEFINED
#define SOAP_TYPE__ns1__ChkSnLinkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnLinkResponse(struct soap*, const char*, int, const _ns1__ChkSnLinkResponse *, const char*);
SOAP_FMAC3 _ns1__ChkSnLinkResponse * SOAP_FMAC4 soap_in__ns1__ChkSnLinkResponse(struct soap*, const char*, _ns1__ChkSnLinkResponse *, const char*);
SOAP_FMAC1 _ns1__ChkSnLinkResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkSnLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnLinkResponse * soap_new__ns1__ChkSnLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnLinkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnLinkResponse * soap_new_req__ns1__ChkSnLinkResponse(
	struct soap *soap)
{
	_ns1__ChkSnLinkResponse *_p = soap_new__ns1__ChkSnLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnLinkResponse * soap_new_set__ns1__ChkSnLinkResponse(
	struct soap *soap,
	std::string *ChkSnLinkResult)
{
	_ns1__ChkSnLinkResponse *_p = soap_new__ns1__ChkSnLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnLinkResponse::ChkSnLinkResult = ChkSnLinkResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnLinkResponse(struct soap *soap, _ns1__ChkSnLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnLinkResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnLinkResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnLinkResponse * SOAP_FMAC4 soap_get__ns1__ChkSnLinkResponse(struct soap*, _ns1__ChkSnLinkResponse *, const char*, const char*);

inline int soap_read__ns1__ChkSnLinkResponse(struct soap *soap, _ns1__ChkSnLinkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnLinkResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnLinkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnLinkResponse(struct soap *soap, _ns1__ChkSnLinkResponse *p)
{
	if (soap_read__ns1__ChkSnLinkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnLink_DEFINED
#define SOAP_TYPE__ns1__ChkSnLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnLink(struct soap*, const char*, int, const _ns1__ChkSnLink *, const char*);
SOAP_FMAC3 _ns1__ChkSnLink * SOAP_FMAC4 soap_in__ns1__ChkSnLink(struct soap*, const char*, _ns1__ChkSnLink *, const char*);
SOAP_FMAC1 _ns1__ChkSnLink * SOAP_FMAC2 soap_instantiate__ns1__ChkSnLink(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnLink * soap_new__ns1__ChkSnLink(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnLink(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnLink * soap_new_req__ns1__ChkSnLink(
	struct soap *soap)
{
	_ns1__ChkSnLink *_p = soap_new__ns1__ChkSnLink(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnLink * soap_new_set__ns1__ChkSnLink(
	struct soap *soap,
	std::string *SN,
	std::string *LinkSN)
{
	_ns1__ChkSnLink *_p = soap_new__ns1__ChkSnLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnLink::SN = SN;
		_p->_ns1__ChkSnLink::LinkSN = LinkSN;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnLink(struct soap *soap, _ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLink", p->soap_type() == SOAP_TYPE__ns1__ChkSnLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnLink(struct soap *soap, const char *URL, _ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLink", p->soap_type() == SOAP_TYPE__ns1__ChkSnLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnLink(struct soap *soap, const char *URL, _ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLink", p->soap_type() == SOAP_TYPE__ns1__ChkSnLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnLink * SOAP_FMAC4 soap_get__ns1__ChkSnLink(struct soap*, _ns1__ChkSnLink *, const char*, const char*);

inline int soap_read__ns1__ChkSnLink(struct soap *soap, _ns1__ChkSnLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnLink(struct soap *soap, const char *URL, _ns1__ChkSnLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnLink(struct soap *soap, _ns1__ChkSnLink *p)
{
	if (soap_read__ns1__ChkSnLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsThermalResponse_DEFINED
#define SOAP_TYPE__ns1__InsThermalResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsThermalResponse(struct soap*, const char*, int, const _ns1__InsThermalResponse *, const char*);
SOAP_FMAC3 _ns1__InsThermalResponse * SOAP_FMAC4 soap_in__ns1__InsThermalResponse(struct soap*, const char*, _ns1__InsThermalResponse *, const char*);
SOAP_FMAC1 _ns1__InsThermalResponse * SOAP_FMAC2 soap_instantiate__ns1__InsThermalResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsThermalResponse * soap_new__ns1__InsThermalResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsThermalResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsThermalResponse * soap_new_req__ns1__InsThermalResponse(
	struct soap *soap)
{
	_ns1__InsThermalResponse *_p = soap_new__ns1__InsThermalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsThermalResponse * soap_new_set__ns1__InsThermalResponse(
	struct soap *soap,
	std::string *InsThermalResult)
{
	_ns1__InsThermalResponse *_p = soap_new__ns1__InsThermalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsThermalResponse::InsThermalResult = InsThermalResult;
	}
	return _p;
}

inline int soap_write__ns1__InsThermalResponse(struct soap *soap, _ns1__InsThermalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsThermalResponse(struct soap *soap, const char *URL, _ns1__InsThermalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsThermalResponse(struct soap *soap, const char *URL, _ns1__InsThermalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermalResponse", p->soap_type() == SOAP_TYPE__ns1__InsThermalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsThermalResponse * SOAP_FMAC4 soap_get__ns1__InsThermalResponse(struct soap*, _ns1__InsThermalResponse *, const char*, const char*);

inline int soap_read__ns1__InsThermalResponse(struct soap *soap, _ns1__InsThermalResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsThermalResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsThermalResponse(struct soap *soap, const char *URL, _ns1__InsThermalResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsThermalResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsThermalResponse(struct soap *soap, _ns1__InsThermalResponse *p)
{
	if (soap_read__ns1__InsThermalResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsThermal_DEFINED
#define SOAP_TYPE__ns1__InsThermal_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsThermal(struct soap*, const char*, int, const _ns1__InsThermal *, const char*);
SOAP_FMAC3 _ns1__InsThermal * SOAP_FMAC4 soap_in__ns1__InsThermal(struct soap*, const char*, _ns1__InsThermal *, const char*);
SOAP_FMAC1 _ns1__InsThermal * SOAP_FMAC2 soap_instantiate__ns1__InsThermal(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsThermal * soap_new__ns1__InsThermal(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsThermal(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsThermal * soap_new_req__ns1__InsThermal(
	struct soap *soap)
{
	_ns1__InsThermal *_p = soap_new__ns1__InsThermal(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsThermal * soap_new_set__ns1__InsThermal(
	struct soap *soap,
	std::string *SN,
	std::string *TestDt,
	std::string *Hole,
	std::string *User,
	std::string *Result,
	ns1__ArrayOfString *strTemp,
	ns1__ArrayOfString *strErature,
	ns1__ArrayOfString *strResult)
{
	_ns1__InsThermal *_p = soap_new__ns1__InsThermal(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsThermal::SN = SN;
		_p->_ns1__InsThermal::TestDt = TestDt;
		_p->_ns1__InsThermal::Hole = Hole;
		_p->_ns1__InsThermal::User = User;
		_p->_ns1__InsThermal::Result = Result;
		_p->_ns1__InsThermal::strTemp = strTemp;
		_p->_ns1__InsThermal::strErature = strErature;
		_p->_ns1__InsThermal::strResult = strResult;
	}
	return _p;
}

inline int soap_write__ns1__InsThermal(struct soap *soap, _ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermal", p->soap_type() == SOAP_TYPE__ns1__InsThermal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsThermal(struct soap *soap, const char *URL, _ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermal", p->soap_type() == SOAP_TYPE__ns1__InsThermal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsThermal(struct soap *soap, const char *URL, _ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsThermal", p->soap_type() == SOAP_TYPE__ns1__InsThermal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsThermal * SOAP_FMAC4 soap_get__ns1__InsThermal(struct soap*, _ns1__InsThermal *, const char*, const char*);

inline int soap_read__ns1__InsThermal(struct soap *soap, _ns1__InsThermal *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsThermal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsThermal(struct soap *soap, const char *URL, _ns1__InsThermal *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsThermal(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsThermal(struct soap *soap, _ns1__InsThermal *p)
{
	if (soap_read__ns1__InsThermal(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsWHDetectionResponse_DEFINED
#define SOAP_TYPE__ns1__InsWHDetectionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsWHDetectionResponse(struct soap*, const char*, int, const _ns1__InsWHDetectionResponse *, const char*);
SOAP_FMAC3 _ns1__InsWHDetectionResponse * SOAP_FMAC4 soap_in__ns1__InsWHDetectionResponse(struct soap*, const char*, _ns1__InsWHDetectionResponse *, const char*);
SOAP_FMAC1 _ns1__InsWHDetectionResponse * SOAP_FMAC2 soap_instantiate__ns1__InsWHDetectionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsWHDetectionResponse * soap_new__ns1__InsWHDetectionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsWHDetectionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsWHDetectionResponse * soap_new_req__ns1__InsWHDetectionResponse(
	struct soap *soap)
{
	_ns1__InsWHDetectionResponse *_p = soap_new__ns1__InsWHDetectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsWHDetectionResponse * soap_new_set__ns1__InsWHDetectionResponse(
	struct soap *soap,
	std::string *InsWHDetectionResult)
{
	_ns1__InsWHDetectionResponse *_p = soap_new__ns1__InsWHDetectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsWHDetectionResponse::InsWHDetectionResult = InsWHDetectionResult;
	}
	return _p;
}

inline int soap_write__ns1__InsWHDetectionResponse(struct soap *soap, _ns1__InsWHDetectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetectionResponse", p->soap_type() == SOAP_TYPE__ns1__InsWHDetectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsWHDetectionResponse(struct soap *soap, const char *URL, _ns1__InsWHDetectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetectionResponse", p->soap_type() == SOAP_TYPE__ns1__InsWHDetectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsWHDetectionResponse(struct soap *soap, const char *URL, _ns1__InsWHDetectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetectionResponse", p->soap_type() == SOAP_TYPE__ns1__InsWHDetectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsWHDetectionResponse * SOAP_FMAC4 soap_get__ns1__InsWHDetectionResponse(struct soap*, _ns1__InsWHDetectionResponse *, const char*, const char*);

inline int soap_read__ns1__InsWHDetectionResponse(struct soap *soap, _ns1__InsWHDetectionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsWHDetectionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsWHDetectionResponse(struct soap *soap, const char *URL, _ns1__InsWHDetectionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsWHDetectionResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsWHDetectionResponse(struct soap *soap, _ns1__InsWHDetectionResponse *p)
{
	if (soap_read__ns1__InsWHDetectionResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsWHDetection_DEFINED
#define SOAP_TYPE__ns1__InsWHDetection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsWHDetection(struct soap*, const char*, int, const _ns1__InsWHDetection *, const char*);
SOAP_FMAC3 _ns1__InsWHDetection * SOAP_FMAC4 soap_in__ns1__InsWHDetection(struct soap*, const char*, _ns1__InsWHDetection *, const char*);
SOAP_FMAC1 _ns1__InsWHDetection * SOAP_FMAC2 soap_instantiate__ns1__InsWHDetection(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsWHDetection * soap_new__ns1__InsWHDetection(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsWHDetection(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsWHDetection * soap_new_req__ns1__InsWHDetection(
	struct soap *soap)
{
	_ns1__InsWHDetection *_p = soap_new__ns1__InsWHDetection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsWHDetection * soap_new_set__ns1__InsWHDetection(
	struct soap *soap,
	std::string *Wh,
	ns1__ArrayOfString *Hole,
	ns1__ArrayOfString *DateTime,
	ns1__ArrayOfString *Temp,
	ns1__ArrayOfString *Humidity)
{
	_ns1__InsWHDetection *_p = soap_new__ns1__InsWHDetection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsWHDetection::Wh = Wh;
		_p->_ns1__InsWHDetection::Hole = Hole;
		_p->_ns1__InsWHDetection::DateTime = DateTime;
		_p->_ns1__InsWHDetection::Temp = Temp;
		_p->_ns1__InsWHDetection::Humidity = Humidity;
	}
	return _p;
}

inline int soap_write__ns1__InsWHDetection(struct soap *soap, _ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetection", p->soap_type() == SOAP_TYPE__ns1__InsWHDetection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsWHDetection(struct soap *soap, const char *URL, _ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetection", p->soap_type() == SOAP_TYPE__ns1__InsWHDetection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsWHDetection(struct soap *soap, const char *URL, _ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsWHDetection", p->soap_type() == SOAP_TYPE__ns1__InsWHDetection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsWHDetection * SOAP_FMAC4 soap_get__ns1__InsWHDetection(struct soap*, _ns1__InsWHDetection *, const char*, const char*);

inline int soap_read__ns1__InsWHDetection(struct soap *soap, _ns1__InsWHDetection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsWHDetection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsWHDetection(struct soap *soap, const char *URL, _ns1__InsWHDetection *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsWHDetection(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsWHDetection(struct soap *soap, _ns1__InsWHDetection *p)
{
	if (soap_read__ns1__InsWHDetection(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNessForCLResponse_DEFINED
#define SOAP_TYPE__ns1__InsFlatNessForCLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNessForCLResponse(struct soap*, const char*, int, const _ns1__InsFlatNessForCLResponse *, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForCLResponse * SOAP_FMAC4 soap_in__ns1__InsFlatNessForCLResponse(struct soap*, const char*, _ns1__InsFlatNessForCLResponse *, const char*);
SOAP_FMAC1 _ns1__InsFlatNessForCLResponse * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNessForCLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNessForCLResponse * soap_new__ns1__InsFlatNessForCLResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNessForCLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNessForCLResponse * soap_new_req__ns1__InsFlatNessForCLResponse(
	struct soap *soap)
{
	_ns1__InsFlatNessForCLResponse *_p = soap_new__ns1__InsFlatNessForCLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNessForCLResponse * soap_new_set__ns1__InsFlatNessForCLResponse(
	struct soap *soap,
	std::string *InsFlatNessForCLResult)
{
	_ns1__InsFlatNessForCLResponse *_p = soap_new__ns1__InsFlatNessForCLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNessForCLResponse::InsFlatNessForCLResult = InsFlatNessForCLResult;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNessForCLResponse(struct soap *soap, _ns1__InsFlatNessForCLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCLResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCLResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNessForCLResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForCLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCLResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCLResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNessForCLResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForCLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCLResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCLResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNessForCLResponse * SOAP_FMAC4 soap_get__ns1__InsFlatNessForCLResponse(struct soap*, _ns1__InsFlatNessForCLResponse *, const char*, const char*);

inline int soap_read__ns1__InsFlatNessForCLResponse(struct soap *soap, _ns1__InsFlatNessForCLResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNessForCLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNessForCLResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForCLResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNessForCLResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNessForCLResponse(struct soap *soap, _ns1__InsFlatNessForCLResponse *p)
{
	if (soap_read__ns1__InsFlatNessForCLResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNessForCL_DEFINED
#define SOAP_TYPE__ns1__InsFlatNessForCL_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNessForCL(struct soap*, const char*, int, const _ns1__InsFlatNessForCL *, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForCL * SOAP_FMAC4 soap_in__ns1__InsFlatNessForCL(struct soap*, const char*, _ns1__InsFlatNessForCL *, const char*);
SOAP_FMAC1 _ns1__InsFlatNessForCL * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNessForCL(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNessForCL * soap_new__ns1__InsFlatNessForCL(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNessForCL(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNessForCL * soap_new_req__ns1__InsFlatNessForCL(
	struct soap *soap)
{
	_ns1__InsFlatNessForCL *_p = soap_new__ns1__InsFlatNessForCL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNessForCL * soap_new_set__ns1__InsFlatNessForCL(
	struct soap *soap,
	ns1__ArrayOfString *strList,
	ns1__ArrayOfString *AxisX,
	ns1__ArrayOfString *AxisY,
	ns1__ArrayOfString *AxisZ,
	ns1__ArrayOfString *Ftype,
	ns1__ArrayOfString *Flat,
	ns1__ArrayOfString *Dsign,
	ns1__ArrayOfString *FlatX,
	ns1__ArrayOfString *FlatY,
	ns1__ArrayOfString *PiontX,
	ns1__ArrayOfString *PiontY)
{
	_ns1__InsFlatNessForCL *_p = soap_new__ns1__InsFlatNessForCL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNessForCL::strList = strList;
		_p->_ns1__InsFlatNessForCL::AxisX = AxisX;
		_p->_ns1__InsFlatNessForCL::AxisY = AxisY;
		_p->_ns1__InsFlatNessForCL::AxisZ = AxisZ;
		_p->_ns1__InsFlatNessForCL::Ftype = Ftype;
		_p->_ns1__InsFlatNessForCL::Flat = Flat;
		_p->_ns1__InsFlatNessForCL::Dsign = Dsign;
		_p->_ns1__InsFlatNessForCL::FlatX = FlatX;
		_p->_ns1__InsFlatNessForCL::FlatY = FlatY;
		_p->_ns1__InsFlatNessForCL::PiontX = PiontX;
		_p->_ns1__InsFlatNessForCL::PiontY = PiontY;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNessForCL(struct soap *soap, _ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCL", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNessForCL(struct soap *soap, const char *URL, _ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCL", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNessForCL(struct soap *soap, const char *URL, _ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForCL", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForCL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNessForCL * SOAP_FMAC4 soap_get__ns1__InsFlatNessForCL(struct soap*, _ns1__InsFlatNessForCL *, const char*, const char*);

inline int soap_read__ns1__InsFlatNessForCL(struct soap *soap, _ns1__InsFlatNessForCL *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNessForCL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNessForCL(struct soap *soap, const char *URL, _ns1__InsFlatNessForCL *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNessForCL(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNessForCL(struct soap *soap, _ns1__InsFlatNessForCL *p)
{
	if (soap_read__ns1__InsFlatNessForCL(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNessForLSDResponse_DEFINED
#define SOAP_TYPE__ns1__InsFlatNessForLSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNessForLSDResponse(struct soap*, const char*, int, const _ns1__InsFlatNessForLSDResponse *, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForLSDResponse * SOAP_FMAC4 soap_in__ns1__InsFlatNessForLSDResponse(struct soap*, const char*, _ns1__InsFlatNessForLSDResponse *, const char*);
SOAP_FMAC1 _ns1__InsFlatNessForLSDResponse * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNessForLSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNessForLSDResponse * soap_new__ns1__InsFlatNessForLSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNessForLSDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNessForLSDResponse * soap_new_req__ns1__InsFlatNessForLSDResponse(
	struct soap *soap)
{
	_ns1__InsFlatNessForLSDResponse *_p = soap_new__ns1__InsFlatNessForLSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNessForLSDResponse * soap_new_set__ns1__InsFlatNessForLSDResponse(
	struct soap *soap,
	std::string *InsFlatNessForLSDResult)
{
	_ns1__InsFlatNessForLSDResponse *_p = soap_new__ns1__InsFlatNessForLSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNessForLSDResponse::InsFlatNessForLSDResult = InsFlatNessForLSDResult;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNessForLSDResponse(struct soap *soap, _ns1__InsFlatNessForLSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSDResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNessForLSDResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSDResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNessForLSDResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSDResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNessForLSDResponse * SOAP_FMAC4 soap_get__ns1__InsFlatNessForLSDResponse(struct soap*, _ns1__InsFlatNessForLSDResponse *, const char*, const char*);

inline int soap_read__ns1__InsFlatNessForLSDResponse(struct soap *soap, _ns1__InsFlatNessForLSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNessForLSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNessForLSDResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNessForLSDResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNessForLSDResponse(struct soap *soap, _ns1__InsFlatNessForLSDResponse *p)
{
	if (soap_read__ns1__InsFlatNessForLSDResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNessForLSD_DEFINED
#define SOAP_TYPE__ns1__InsFlatNessForLSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNessForLSD(struct soap*, const char*, int, const _ns1__InsFlatNessForLSD *, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForLSD * SOAP_FMAC4 soap_in__ns1__InsFlatNessForLSD(struct soap*, const char*, _ns1__InsFlatNessForLSD *, const char*);
SOAP_FMAC1 _ns1__InsFlatNessForLSD * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNessForLSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNessForLSD * soap_new__ns1__InsFlatNessForLSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNessForLSD(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNessForLSD * soap_new_req__ns1__InsFlatNessForLSD(
	struct soap *soap)
{
	_ns1__InsFlatNessForLSD *_p = soap_new__ns1__InsFlatNessForLSD(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNessForLSD * soap_new_set__ns1__InsFlatNessForLSD(
	struct soap *soap,
	ns1__ArrayOfString *strList,
	ns1__ArrayOfString *AxisX,
	ns1__ArrayOfString *AxisY,
	ns1__ArrayOfString *AxisZ,
	ns1__ArrayOfString *Ftype,
	ns1__ArrayOfString *Flat,
	ns1__ArrayOfString *Dsign)
{
	_ns1__InsFlatNessForLSD *_p = soap_new__ns1__InsFlatNessForLSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNessForLSD::strList = strList;
		_p->_ns1__InsFlatNessForLSD::AxisX = AxisX;
		_p->_ns1__InsFlatNessForLSD::AxisY = AxisY;
		_p->_ns1__InsFlatNessForLSD::AxisZ = AxisZ;
		_p->_ns1__InsFlatNessForLSD::Ftype = Ftype;
		_p->_ns1__InsFlatNessForLSD::Flat = Flat;
		_p->_ns1__InsFlatNessForLSD::Dsign = Dsign;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNessForLSD(struct soap *soap, _ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSD", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSD", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessForLSD", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessForLSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNessForLSD * SOAP_FMAC4 soap_get__ns1__InsFlatNessForLSD(struct soap*, _ns1__InsFlatNessForLSD *, const char*, const char*);

inline int soap_read__ns1__InsFlatNessForLSD(struct soap *soap, _ns1__InsFlatNessForLSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNessForLSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, _ns1__InsFlatNessForLSD *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNessForLSD(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNessForLSD(struct soap *soap, _ns1__InsFlatNessForLSD *p)
{
	if (soap_read__ns1__InsFlatNessForLSD(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNessResponse_DEFINED
#define SOAP_TYPE__ns1__InsFlatNessResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNessResponse(struct soap*, const char*, int, const _ns1__InsFlatNessResponse *, const char*);
SOAP_FMAC3 _ns1__InsFlatNessResponse * SOAP_FMAC4 soap_in__ns1__InsFlatNessResponse(struct soap*, const char*, _ns1__InsFlatNessResponse *, const char*);
SOAP_FMAC1 _ns1__InsFlatNessResponse * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNessResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNessResponse * soap_new__ns1__InsFlatNessResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNessResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNessResponse * soap_new_req__ns1__InsFlatNessResponse(
	struct soap *soap)
{
	_ns1__InsFlatNessResponse *_p = soap_new__ns1__InsFlatNessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNessResponse * soap_new_set__ns1__InsFlatNessResponse(
	struct soap *soap,
	std::string *InsFlatNessResult)
{
	_ns1__InsFlatNessResponse *_p = soap_new__ns1__InsFlatNessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNessResponse::InsFlatNessResult = InsFlatNessResult;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNessResponse(struct soap *soap, _ns1__InsFlatNessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNessResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNessResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNessResponse", p->soap_type() == SOAP_TYPE__ns1__InsFlatNessResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNessResponse * SOAP_FMAC4 soap_get__ns1__InsFlatNessResponse(struct soap*, _ns1__InsFlatNessResponse *, const char*, const char*);

inline int soap_read__ns1__InsFlatNessResponse(struct soap *soap, _ns1__InsFlatNessResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNessResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNessResponse(struct soap *soap, const char *URL, _ns1__InsFlatNessResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNessResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNessResponse(struct soap *soap, _ns1__InsFlatNessResponse *p)
{
	if (soap_read__ns1__InsFlatNessResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFlatNess_DEFINED
#define SOAP_TYPE__ns1__InsFlatNess_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFlatNess(struct soap*, const char*, int, const _ns1__InsFlatNess *, const char*);
SOAP_FMAC3 _ns1__InsFlatNess * SOAP_FMAC4 soap_in__ns1__InsFlatNess(struct soap*, const char*, _ns1__InsFlatNess *, const char*);
SOAP_FMAC1 _ns1__InsFlatNess * SOAP_FMAC2 soap_instantiate__ns1__InsFlatNess(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFlatNess * soap_new__ns1__InsFlatNess(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFlatNess(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFlatNess * soap_new_req__ns1__InsFlatNess(
	struct soap *soap)
{
	_ns1__InsFlatNess *_p = soap_new__ns1__InsFlatNess(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFlatNess * soap_new_set__ns1__InsFlatNess(
	struct soap *soap,
	ns1__ArrayOfString *strList,
	ns1__ArrayOfString *AxisX,
	ns1__ArrayOfString *AxisY,
	ns1__ArrayOfString *AxisZ,
	ns1__ArrayOfString *Ftype,
	ns1__ArrayOfString *Flat)
{
	_ns1__InsFlatNess *_p = soap_new__ns1__InsFlatNess(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFlatNess::strList = strList;
		_p->_ns1__InsFlatNess::AxisX = AxisX;
		_p->_ns1__InsFlatNess::AxisY = AxisY;
		_p->_ns1__InsFlatNess::AxisZ = AxisZ;
		_p->_ns1__InsFlatNess::Ftype = Ftype;
		_p->_ns1__InsFlatNess::Flat = Flat;
	}
	return _p;
}

inline int soap_write__ns1__InsFlatNess(struct soap *soap, _ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNess", p->soap_type() == SOAP_TYPE__ns1__InsFlatNess ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFlatNess(struct soap *soap, const char *URL, _ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNess", p->soap_type() == SOAP_TYPE__ns1__InsFlatNess ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFlatNess(struct soap *soap, const char *URL, _ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFlatNess", p->soap_type() == SOAP_TYPE__ns1__InsFlatNess ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFlatNess * SOAP_FMAC4 soap_get__ns1__InsFlatNess(struct soap*, _ns1__InsFlatNess *, const char*, const char*);

inline int soap_read__ns1__InsFlatNess(struct soap *soap, _ns1__InsFlatNess *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFlatNess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFlatNess(struct soap *soap, const char *URL, _ns1__InsFlatNess *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFlatNess(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFlatNess(struct soap *soap, _ns1__InsFlatNess *p)
{
	if (soap_read__ns1__InsFlatNess(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ImpMesAteTestDataResponse_DEFINED
#define SOAP_TYPE__ns1__ImpMesAteTestDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ImpMesAteTestDataResponse(struct soap*, const char*, int, const _ns1__ImpMesAteTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__ImpMesAteTestDataResponse * SOAP_FMAC4 soap_in__ns1__ImpMesAteTestDataResponse(struct soap*, const char*, _ns1__ImpMesAteTestDataResponse *, const char*);
SOAP_FMAC1 _ns1__ImpMesAteTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__ImpMesAteTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ImpMesAteTestDataResponse * soap_new__ns1__ImpMesAteTestDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ImpMesAteTestDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ImpMesAteTestDataResponse * soap_new_req__ns1__ImpMesAteTestDataResponse(
	struct soap *soap)
{
	_ns1__ImpMesAteTestDataResponse *_p = soap_new__ns1__ImpMesAteTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ImpMesAteTestDataResponse * soap_new_set__ns1__ImpMesAteTestDataResponse(
	struct soap *soap,
	std::string *ImpMesAteTestDataResult)
{
	_ns1__ImpMesAteTestDataResponse *_p = soap_new__ns1__ImpMesAteTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ImpMesAteTestDataResponse::ImpMesAteTestDataResult = ImpMesAteTestDataResult;
	}
	return _p;
}

inline int soap_write__ns1__ImpMesAteTestDataResponse(struct soap *soap, _ns1__ImpMesAteTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ImpMesAteTestDataResponse(struct soap *soap, const char *URL, _ns1__ImpMesAteTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ImpMesAteTestDataResponse(struct soap *soap, const char *URL, _ns1__ImpMesAteTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ImpMesAteTestDataResponse * SOAP_FMAC4 soap_get__ns1__ImpMesAteTestDataResponse(struct soap*, _ns1__ImpMesAteTestDataResponse *, const char*, const char*);

inline int soap_read__ns1__ImpMesAteTestDataResponse(struct soap *soap, _ns1__ImpMesAteTestDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ImpMesAteTestDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ImpMesAteTestDataResponse(struct soap *soap, const char *URL, _ns1__ImpMesAteTestDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ImpMesAteTestDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ImpMesAteTestDataResponse(struct soap *soap, _ns1__ImpMesAteTestDataResponse *p)
{
	if (soap_read__ns1__ImpMesAteTestDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ImpMesAteTestData_DEFINED
#define SOAP_TYPE__ns1__ImpMesAteTestData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ImpMesAteTestData(struct soap*, const char*, int, const _ns1__ImpMesAteTestData *, const char*);
SOAP_FMAC3 _ns1__ImpMesAteTestData * SOAP_FMAC4 soap_in__ns1__ImpMesAteTestData(struct soap*, const char*, _ns1__ImpMesAteTestData *, const char*);
SOAP_FMAC1 _ns1__ImpMesAteTestData * SOAP_FMAC2 soap_instantiate__ns1__ImpMesAteTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ImpMesAteTestData * soap_new__ns1__ImpMesAteTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ImpMesAteTestData(soap, n, NULL, NULL, NULL);
}

inline _ns1__ImpMesAteTestData * soap_new_req__ns1__ImpMesAteTestData(
	struct soap *soap)
{
	_ns1__ImpMesAteTestData *_p = soap_new__ns1__ImpMesAteTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ImpMesAteTestData * soap_new_set__ns1__ImpMesAteTestData(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *Station_USCOREName,
	std::string *SN,
	std::string *TestData)
{
	_ns1__ImpMesAteTestData *_p = soap_new__ns1__ImpMesAteTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ImpMesAteTestData::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__ImpMesAteTestData::Station_USCOREName = Station_USCOREName;
		_p->_ns1__ImpMesAteTestData::SN = SN;
		_p->_ns1__ImpMesAteTestData::TestData = TestData;
	}
	return _p;
}

inline int soap_write__ns1__ImpMesAteTestData(struct soap *soap, _ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestData", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ImpMesAteTestData(struct soap *soap, const char *URL, _ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestData", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ImpMesAteTestData(struct soap *soap, const char *URL, _ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ImpMesAteTestData", p->soap_type() == SOAP_TYPE__ns1__ImpMesAteTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ImpMesAteTestData * SOAP_FMAC4 soap_get__ns1__ImpMesAteTestData(struct soap*, _ns1__ImpMesAteTestData *, const char*, const char*);

inline int soap_read__ns1__ImpMesAteTestData(struct soap *soap, _ns1__ImpMesAteTestData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ImpMesAteTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ImpMesAteTestData(struct soap *soap, const char *URL, _ns1__ImpMesAteTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ImpMesAteTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ImpMesAteTestData(struct soap *soap, _ns1__ImpMesAteTestData *p)
{
	if (soap_read__ns1__ImpMesAteTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkStationTimeResponse_DEFINED
#define SOAP_TYPE__ns1__chkStationTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkStationTimeResponse(struct soap*, const char*, int, const _ns1__chkStationTimeResponse *, const char*);
SOAP_FMAC3 _ns1__chkStationTimeResponse * SOAP_FMAC4 soap_in__ns1__chkStationTimeResponse(struct soap*, const char*, _ns1__chkStationTimeResponse *, const char*);
SOAP_FMAC1 _ns1__chkStationTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__chkStationTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkStationTimeResponse * soap_new__ns1__chkStationTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkStationTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkStationTimeResponse * soap_new_req__ns1__chkStationTimeResponse(
	struct soap *soap)
{
	_ns1__chkStationTimeResponse *_p = soap_new__ns1__chkStationTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkStationTimeResponse * soap_new_set__ns1__chkStationTimeResponse(
	struct soap *soap,
	std::string *chkStationTimeResult)
{
	_ns1__chkStationTimeResponse *_p = soap_new__ns1__chkStationTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkStationTimeResponse::chkStationTimeResult = chkStationTimeResult;
	}
	return _p;
}

inline int soap_write__ns1__chkStationTimeResponse(struct soap *soap, _ns1__chkStationTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTimeResponse", p->soap_type() == SOAP_TYPE__ns1__chkStationTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkStationTimeResponse(struct soap *soap, const char *URL, _ns1__chkStationTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTimeResponse", p->soap_type() == SOAP_TYPE__ns1__chkStationTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkStationTimeResponse(struct soap *soap, const char *URL, _ns1__chkStationTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTimeResponse", p->soap_type() == SOAP_TYPE__ns1__chkStationTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkStationTimeResponse * SOAP_FMAC4 soap_get__ns1__chkStationTimeResponse(struct soap*, _ns1__chkStationTimeResponse *, const char*, const char*);

inline int soap_read__ns1__chkStationTimeResponse(struct soap *soap, _ns1__chkStationTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkStationTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkStationTimeResponse(struct soap *soap, const char *URL, _ns1__chkStationTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkStationTimeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkStationTimeResponse(struct soap *soap, _ns1__chkStationTimeResponse *p)
{
	if (soap_read__ns1__chkStationTimeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkStationTime_DEFINED
#define SOAP_TYPE__ns1__chkStationTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkStationTime(struct soap*, const char*, int, const _ns1__chkStationTime *, const char*);
SOAP_FMAC3 _ns1__chkStationTime * SOAP_FMAC4 soap_in__ns1__chkStationTime(struct soap*, const char*, _ns1__chkStationTime *, const char*);
SOAP_FMAC1 _ns1__chkStationTime * SOAP_FMAC2 soap_instantiate__ns1__chkStationTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkStationTime * soap_new__ns1__chkStationTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkStationTime(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkStationTime * soap_new_req__ns1__chkStationTime(
	struct soap *soap)
{
	_ns1__chkStationTime *_p = soap_new__ns1__chkStationTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkStationTime * soap_new_set__ns1__chkStationTime(
	struct soap *soap,
	std::string *SN,
	std::string *Station)
{
	_ns1__chkStationTime *_p = soap_new__ns1__chkStationTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkStationTime::SN = SN;
		_p->_ns1__chkStationTime::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__chkStationTime(struct soap *soap, _ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTime", p->soap_type() == SOAP_TYPE__ns1__chkStationTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkStationTime(struct soap *soap, const char *URL, _ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTime", p->soap_type() == SOAP_TYPE__ns1__chkStationTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkStationTime(struct soap *soap, const char *URL, _ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkStationTime", p->soap_type() == SOAP_TYPE__ns1__chkStationTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkStationTime * SOAP_FMAC4 soap_get__ns1__chkStationTime(struct soap*, _ns1__chkStationTime *, const char*, const char*);

inline int soap_read__ns1__chkStationTime(struct soap *soap, _ns1__chkStationTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkStationTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkStationTime(struct soap *soap, const char *URL, _ns1__chkStationTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkStationTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkStationTime(struct soap *soap, _ns1__chkStationTime *p)
{
	if (soap_read__ns1__chkStationTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InFruitsOrtQtyResponse_DEFINED
#define SOAP_TYPE__ns1__InFruitsOrtQtyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InFruitsOrtQtyResponse(struct soap*, const char*, int, const _ns1__InFruitsOrtQtyResponse *, const char*);
SOAP_FMAC3 _ns1__InFruitsOrtQtyResponse * SOAP_FMAC4 soap_in__ns1__InFruitsOrtQtyResponse(struct soap*, const char*, _ns1__InFruitsOrtQtyResponse *, const char*);
SOAP_FMAC1 _ns1__InFruitsOrtQtyResponse * SOAP_FMAC2 soap_instantiate__ns1__InFruitsOrtQtyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InFruitsOrtQtyResponse * soap_new__ns1__InFruitsOrtQtyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InFruitsOrtQtyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InFruitsOrtQtyResponse * soap_new_req__ns1__InFruitsOrtQtyResponse(
	struct soap *soap)
{
	_ns1__InFruitsOrtQtyResponse *_p = soap_new__ns1__InFruitsOrtQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InFruitsOrtQtyResponse * soap_new_set__ns1__InFruitsOrtQtyResponse(
	struct soap *soap,
	std::string *InFruitsOrtQtyResult)
{
	_ns1__InFruitsOrtQtyResponse *_p = soap_new__ns1__InFruitsOrtQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InFruitsOrtQtyResponse::InFruitsOrtQtyResult = InFruitsOrtQtyResult;
	}
	return _p;
}

inline int soap_write__ns1__InFruitsOrtQtyResponse(struct soap *soap, _ns1__InFruitsOrtQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQtyResponse", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InFruitsOrtQtyResponse(struct soap *soap, const char *URL, _ns1__InFruitsOrtQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQtyResponse", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InFruitsOrtQtyResponse(struct soap *soap, const char *URL, _ns1__InFruitsOrtQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQtyResponse", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InFruitsOrtQtyResponse * SOAP_FMAC4 soap_get__ns1__InFruitsOrtQtyResponse(struct soap*, _ns1__InFruitsOrtQtyResponse *, const char*, const char*);

inline int soap_read__ns1__InFruitsOrtQtyResponse(struct soap *soap, _ns1__InFruitsOrtQtyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InFruitsOrtQtyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InFruitsOrtQtyResponse(struct soap *soap, const char *URL, _ns1__InFruitsOrtQtyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InFruitsOrtQtyResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InFruitsOrtQtyResponse(struct soap *soap, _ns1__InFruitsOrtQtyResponse *p)
{
	if (soap_read__ns1__InFruitsOrtQtyResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InFruitsOrtQty_DEFINED
#define SOAP_TYPE__ns1__InFruitsOrtQty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InFruitsOrtQty(struct soap*, const char*, int, const _ns1__InFruitsOrtQty *, const char*);
SOAP_FMAC3 _ns1__InFruitsOrtQty * SOAP_FMAC4 soap_in__ns1__InFruitsOrtQty(struct soap*, const char*, _ns1__InFruitsOrtQty *, const char*);
SOAP_FMAC1 _ns1__InFruitsOrtQty * SOAP_FMAC2 soap_instantiate__ns1__InFruitsOrtQty(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InFruitsOrtQty * soap_new__ns1__InFruitsOrtQty(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InFruitsOrtQty(soap, n, NULL, NULL, NULL);
}

inline _ns1__InFruitsOrtQty * soap_new_req__ns1__InFruitsOrtQty(
	struct soap *soap)
{
	_ns1__InFruitsOrtQty *_p = soap_new__ns1__InFruitsOrtQty(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InFruitsOrtQty * soap_new_set__ns1__InFruitsOrtQty(
	struct soap *soap,
	std::string *SN,
	std::string *Station)
{
	_ns1__InFruitsOrtQty *_p = soap_new__ns1__InFruitsOrtQty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InFruitsOrtQty::SN = SN;
		_p->_ns1__InFruitsOrtQty::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__InFruitsOrtQty(struct soap *soap, _ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQty", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InFruitsOrtQty(struct soap *soap, const char *URL, _ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQty", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InFruitsOrtQty(struct soap *soap, const char *URL, _ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InFruitsOrtQty", p->soap_type() == SOAP_TYPE__ns1__InFruitsOrtQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InFruitsOrtQty * SOAP_FMAC4 soap_get__ns1__InFruitsOrtQty(struct soap*, _ns1__InFruitsOrtQty *, const char*, const char*);

inline int soap_read__ns1__InFruitsOrtQty(struct soap *soap, _ns1__InFruitsOrtQty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InFruitsOrtQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InFruitsOrtQty(struct soap *soap, const char *URL, _ns1__InFruitsOrtQty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InFruitsOrtQty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InFruitsOrtQty(struct soap *soap, _ns1__InFruitsOrtQty *p)
{
	if (soap_read__ns1__InFruitsOrtQty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendTestResultResponse_DEFINED
#define SOAP_TYPE__ns1__sendTestResultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTestResultResponse(struct soap*, const char*, int, const _ns1__sendTestResultResponse *, const char*);
SOAP_FMAC3 _ns1__sendTestResultResponse * SOAP_FMAC4 soap_in__ns1__sendTestResultResponse(struct soap*, const char*, _ns1__sendTestResultResponse *, const char*);
SOAP_FMAC1 _ns1__sendTestResultResponse * SOAP_FMAC2 soap_instantiate__ns1__sendTestResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTestResultResponse * soap_new__ns1__sendTestResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendTestResultResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendTestResultResponse * soap_new_req__ns1__sendTestResultResponse(
	struct soap *soap)
{
	_ns1__sendTestResultResponse *_p = soap_new__ns1__sendTestResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendTestResultResponse * soap_new_set__ns1__sendTestResultResponse(
	struct soap *soap,
	std::string *sendTestResultResult)
{
	_ns1__sendTestResultResponse *_p = soap_new__ns1__sendTestResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendTestResultResponse::sendTestResultResult = sendTestResultResult;
	}
	return _p;
}

inline int soap_write__ns1__sendTestResultResponse(struct soap *soap, _ns1__sendTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendTestResultResponse(struct soap *soap, const char *URL, _ns1__sendTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendTestResultResponse(struct soap *soap, const char *URL, _ns1__sendTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendTestResultResponse * SOAP_FMAC4 soap_get__ns1__sendTestResultResponse(struct soap*, _ns1__sendTestResultResponse *, const char*, const char*);

inline int soap_read__ns1__sendTestResultResponse(struct soap *soap, _ns1__sendTestResultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendTestResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendTestResultResponse(struct soap *soap, const char *URL, _ns1__sendTestResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendTestResultResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendTestResultResponse(struct soap *soap, _ns1__sendTestResultResponse *p)
{
	if (soap_read__ns1__sendTestResultResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendTestResult_DEFINED
#define SOAP_TYPE__ns1__sendTestResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTestResult(struct soap*, const char*, int, const _ns1__sendTestResult *, const char*);
SOAP_FMAC3 _ns1__sendTestResult * SOAP_FMAC4 soap_in__ns1__sendTestResult(struct soap*, const char*, _ns1__sendTestResult *, const char*);
SOAP_FMAC1 _ns1__sendTestResult * SOAP_FMAC2 soap_instantiate__ns1__sendTestResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTestResult * soap_new__ns1__sendTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendTestResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendTestResult * soap_new_req__ns1__sendTestResult(
	struct soap *soap)
{
	_ns1__sendTestResult *_p = soap_new__ns1__sendTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendTestResult * soap_new_set__ns1__sendTestResult(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *SN,
	std::string *Station,
	std::string *TestResult)
{
	_ns1__sendTestResult *_p = soap_new__ns1__sendTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendTestResult::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__sendTestResult::SN = SN;
		_p->_ns1__sendTestResult::Station = Station;
		_p->_ns1__sendTestResult::TestResult = TestResult;
	}
	return _p;
}

inline int soap_write__ns1__sendTestResult(struct soap *soap, _ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResult", p->soap_type() == SOAP_TYPE__ns1__sendTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendTestResult(struct soap *soap, const char *URL, _ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResult", p->soap_type() == SOAP_TYPE__ns1__sendTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendTestResult(struct soap *soap, const char *URL, _ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestResult", p->soap_type() == SOAP_TYPE__ns1__sendTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendTestResult * SOAP_FMAC4 soap_get__ns1__sendTestResult(struct soap*, _ns1__sendTestResult *, const char*, const char*);

inline int soap_read__ns1__sendTestResult(struct soap *soap, _ns1__sendTestResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendTestResult(struct soap *soap, const char *URL, _ns1__sendTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendTestResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendTestResult(struct soap *soap, _ns1__sendTestResult *p)
{
	if (soap_read__ns1__sendTestResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendTestDataResponse_DEFINED
#define SOAP_TYPE__ns1__sendTestDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTestDataResponse(struct soap*, const char*, int, const _ns1__sendTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__sendTestDataResponse * SOAP_FMAC4 soap_in__ns1__sendTestDataResponse(struct soap*, const char*, _ns1__sendTestDataResponse *, const char*);
SOAP_FMAC1 _ns1__sendTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__sendTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTestDataResponse * soap_new__ns1__sendTestDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendTestDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendTestDataResponse * soap_new_req__ns1__sendTestDataResponse(
	struct soap *soap)
{
	_ns1__sendTestDataResponse *_p = soap_new__ns1__sendTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendTestDataResponse * soap_new_set__ns1__sendTestDataResponse(
	struct soap *soap,
	std::string *sendTestDataResult)
{
	_ns1__sendTestDataResponse *_p = soap_new__ns1__sendTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendTestDataResponse::sendTestDataResult = sendTestDataResult;
	}
	return _p;
}

inline int soap_write__ns1__sendTestDataResponse(struct soap *soap, _ns1__sendTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendTestDataResponse(struct soap *soap, const char *URL, _ns1__sendTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendTestDataResponse(struct soap *soap, const char *URL, _ns1__sendTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__sendTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendTestDataResponse * SOAP_FMAC4 soap_get__ns1__sendTestDataResponse(struct soap*, _ns1__sendTestDataResponse *, const char*, const char*);

inline int soap_read__ns1__sendTestDataResponse(struct soap *soap, _ns1__sendTestDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendTestDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendTestDataResponse(struct soap *soap, const char *URL, _ns1__sendTestDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendTestDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendTestDataResponse(struct soap *soap, _ns1__sendTestDataResponse *p)
{
	if (soap_read__ns1__sendTestDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__sendTestData_DEFINED
#define SOAP_TYPE__ns1__sendTestData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTestData(struct soap*, const char*, int, const _ns1__sendTestData *, const char*);
SOAP_FMAC3 _ns1__sendTestData * SOAP_FMAC4 soap_in__ns1__sendTestData(struct soap*, const char*, _ns1__sendTestData *, const char*);
SOAP_FMAC1 _ns1__sendTestData * SOAP_FMAC2 soap_instantiate__ns1__sendTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTestData * soap_new__ns1__sendTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__sendTestData(soap, n, NULL, NULL, NULL);
}

inline _ns1__sendTestData * soap_new_req__ns1__sendTestData(
	struct soap *soap)
{
	_ns1__sendTestData *_p = soap_new__ns1__sendTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__sendTestData * soap_new_set__ns1__sendTestData(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *SN,
	std::string *Station,
	std::string *TestData)
{
	_ns1__sendTestData *_p = soap_new__ns1__sendTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__sendTestData::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__sendTestData::SN = SN;
		_p->_ns1__sendTestData::Station = Station;
		_p->_ns1__sendTestData::TestData = TestData;
	}
	return _p;
}

inline int soap_write__ns1__sendTestData(struct soap *soap, _ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestData", p->soap_type() == SOAP_TYPE__ns1__sendTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__sendTestData(struct soap *soap, const char *URL, _ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestData", p->soap_type() == SOAP_TYPE__ns1__sendTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__sendTestData(struct soap *soap, const char *URL, _ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendTestData", p->soap_type() == SOAP_TYPE__ns1__sendTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__sendTestData * SOAP_FMAC4 soap_get__ns1__sendTestData(struct soap*, _ns1__sendTestData *, const char*, const char*);

inline int soap_read__ns1__sendTestData(struct soap *soap, _ns1__sendTestData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__sendTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__sendTestData(struct soap *soap, const char *URL, _ns1__sendTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__sendTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__sendTestData(struct soap *soap, _ns1__sendTestData *p)
{
	if (soap_read__ns1__sendTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSN_USCOREStationResponse_DEFINED
#define SOAP_TYPE__ns1__checkSN_USCOREStationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSN_USCOREStationResponse(struct soap*, const char*, int, const _ns1__checkSN_USCOREStationResponse *, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStationResponse * SOAP_FMAC4 soap_in__ns1__checkSN_USCOREStationResponse(struct soap*, const char*, _ns1__checkSN_USCOREStationResponse *, const char*);
SOAP_FMAC1 _ns1__checkSN_USCOREStationResponse * SOAP_FMAC2 soap_instantiate__ns1__checkSN_USCOREStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSN_USCOREStationResponse * soap_new__ns1__checkSN_USCOREStationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSN_USCOREStationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSN_USCOREStationResponse * soap_new_req__ns1__checkSN_USCOREStationResponse(
	struct soap *soap)
{
	_ns1__checkSN_USCOREStationResponse *_p = soap_new__ns1__checkSN_USCOREStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkSN_USCOREStationResponse * soap_new_set__ns1__checkSN_USCOREStationResponse(
	struct soap *soap,
	std::string *checkSN_USCOREStationResult)
{
	_ns1__checkSN_USCOREStationResponse *_p = soap_new__ns1__checkSN_USCOREStationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSN_USCOREStationResponse::checkSN_USCOREStationResult = checkSN_USCOREStationResult;
	}
	return _p;
}

inline int soap_write__ns1__checkSN_USCOREStationResponse(struct soap *soap, _ns1__checkSN_USCOREStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkSN_USCOREStationResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkSN_USCOREStationResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_StationResponse", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSN_USCOREStationResponse * SOAP_FMAC4 soap_get__ns1__checkSN_USCOREStationResponse(struct soap*, _ns1__checkSN_USCOREStationResponse *, const char*, const char*);

inline int soap_read__ns1__checkSN_USCOREStationResponse(struct soap *soap, _ns1__checkSN_USCOREStationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSN_USCOREStationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkSN_USCOREStationResponse(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkSN_USCOREStationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkSN_USCOREStationResponse(struct soap *soap, _ns1__checkSN_USCOREStationResponse *p)
{
	if (soap_read__ns1__checkSN_USCOREStationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSN_USCOREStation_DEFINED
#define SOAP_TYPE__ns1__checkSN_USCOREStation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSN_USCOREStation(struct soap*, const char*, int, const _ns1__checkSN_USCOREStation *, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStation * SOAP_FMAC4 soap_in__ns1__checkSN_USCOREStation(struct soap*, const char*, _ns1__checkSN_USCOREStation *, const char*);
SOAP_FMAC1 _ns1__checkSN_USCOREStation * SOAP_FMAC2 soap_instantiate__ns1__checkSN_USCOREStation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSN_USCOREStation * soap_new__ns1__checkSN_USCOREStation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSN_USCOREStation(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSN_USCOREStation * soap_new_req__ns1__checkSN_USCOREStation(
	struct soap *soap)
{
	_ns1__checkSN_USCOREStation *_p = soap_new__ns1__checkSN_USCOREStation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkSN_USCOREStation * soap_new_set__ns1__checkSN_USCOREStation(
	struct soap *soap,
	std::string *SN,
	std::string *Station_USCOREName)
{
	_ns1__checkSN_USCOREStation *_p = soap_new__ns1__checkSN_USCOREStation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSN_USCOREStation::SN = SN;
		_p->_ns1__checkSN_USCOREStation::Station_USCOREName = Station_USCOREName;
	}
	return _p;
}

inline int soap_write__ns1__checkSN_USCOREStation(struct soap *soap, _ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_Station", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_Station", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSN_Station", p->soap_type() == SOAP_TYPE__ns1__checkSN_USCOREStation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSN_USCOREStation * SOAP_FMAC4 soap_get__ns1__checkSN_USCOREStation(struct soap*, _ns1__checkSN_USCOREStation *, const char*, const char*);

inline int soap_read__ns1__checkSN_USCOREStation(struct soap *soap, _ns1__checkSN_USCOREStation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSN_USCOREStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, _ns1__checkSN_USCOREStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkSN_USCOREStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkSN_USCOREStation(struct soap *soap, _ns1__checkSN_USCOREStation *p)
{
	if (soap_read__ns1__checkSN_USCOREStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkEmpNoResponse_DEFINED
#define SOAP_TYPE__ns1__checkEmpNoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkEmpNoResponse(struct soap*, const char*, int, const _ns1__checkEmpNoResponse *, const char*);
SOAP_FMAC3 _ns1__checkEmpNoResponse * SOAP_FMAC4 soap_in__ns1__checkEmpNoResponse(struct soap*, const char*, _ns1__checkEmpNoResponse *, const char*);
SOAP_FMAC1 _ns1__checkEmpNoResponse * SOAP_FMAC2 soap_instantiate__ns1__checkEmpNoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkEmpNoResponse * soap_new__ns1__checkEmpNoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkEmpNoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkEmpNoResponse * soap_new_req__ns1__checkEmpNoResponse(
	struct soap *soap)
{
	_ns1__checkEmpNoResponse *_p = soap_new__ns1__checkEmpNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkEmpNoResponse * soap_new_set__ns1__checkEmpNoResponse(
	struct soap *soap,
	std::string *checkEmpNoResult)
{
	_ns1__checkEmpNoResponse *_p = soap_new__ns1__checkEmpNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkEmpNoResponse::checkEmpNoResult = checkEmpNoResult;
	}
	return _p;
}

inline int soap_write__ns1__checkEmpNoResponse(struct soap *soap, _ns1__checkEmpNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNoResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkEmpNoResponse(struct soap *soap, const char *URL, _ns1__checkEmpNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNoResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkEmpNoResponse(struct soap *soap, const char *URL, _ns1__checkEmpNoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNoResponse", p->soap_type() == SOAP_TYPE__ns1__checkEmpNoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkEmpNoResponse * SOAP_FMAC4 soap_get__ns1__checkEmpNoResponse(struct soap*, _ns1__checkEmpNoResponse *, const char*, const char*);

inline int soap_read__ns1__checkEmpNoResponse(struct soap *soap, _ns1__checkEmpNoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkEmpNoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkEmpNoResponse(struct soap *soap, const char *URL, _ns1__checkEmpNoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkEmpNoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkEmpNoResponse(struct soap *soap, _ns1__checkEmpNoResponse *p)
{
	if (soap_read__ns1__checkEmpNoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkEmpNo_DEFINED
#define SOAP_TYPE__ns1__checkEmpNo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkEmpNo(struct soap*, const char*, int, const _ns1__checkEmpNo *, const char*);
SOAP_FMAC3 _ns1__checkEmpNo * SOAP_FMAC4 soap_in__ns1__checkEmpNo(struct soap*, const char*, _ns1__checkEmpNo *, const char*);
SOAP_FMAC1 _ns1__checkEmpNo * SOAP_FMAC2 soap_instantiate__ns1__checkEmpNo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkEmpNo * soap_new__ns1__checkEmpNo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkEmpNo(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkEmpNo * soap_new_req__ns1__checkEmpNo(
	struct soap *soap)
{
	_ns1__checkEmpNo *_p = soap_new__ns1__checkEmpNo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkEmpNo * soap_new_set__ns1__checkEmpNo(
	struct soap *soap,
	std::string *Emp_USCORENo,
	std::string *Station_USCOREName)
{
	_ns1__checkEmpNo *_p = soap_new__ns1__checkEmpNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkEmpNo::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__checkEmpNo::Station_USCOREName = Station_USCOREName;
	}
	return _p;
}

inline int soap_write__ns1__checkEmpNo(struct soap *soap, _ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNo", p->soap_type() == SOAP_TYPE__ns1__checkEmpNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkEmpNo(struct soap *soap, const char *URL, _ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNo", p->soap_type() == SOAP_TYPE__ns1__checkEmpNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkEmpNo(struct soap *soap, const char *URL, _ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkEmpNo", p->soap_type() == SOAP_TYPE__ns1__checkEmpNo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkEmpNo * SOAP_FMAC4 soap_get__ns1__checkEmpNo(struct soap*, _ns1__checkEmpNo *, const char*, const char*);

inline int soap_read__ns1__checkEmpNo(struct soap *soap, _ns1__checkEmpNo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkEmpNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkEmpNo(struct soap *soap, const char *URL, _ns1__checkEmpNo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkEmpNo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkEmpNo(struct soap *soap, _ns1__checkEmpNo *p)
{
	if (soap_read__ns1__checkEmpNo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkTestDataResponse_DEFINED
#define SOAP_TYPE__ns1__checkTestDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkTestDataResponse(struct soap*, const char*, int, const _ns1__checkTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__checkTestDataResponse * SOAP_FMAC4 soap_in__ns1__checkTestDataResponse(struct soap*, const char*, _ns1__checkTestDataResponse *, const char*);
SOAP_FMAC1 _ns1__checkTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__checkTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkTestDataResponse * soap_new__ns1__checkTestDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkTestDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkTestDataResponse * soap_new_req__ns1__checkTestDataResponse(
	struct soap *soap)
{
	_ns1__checkTestDataResponse *_p = soap_new__ns1__checkTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkTestDataResponse * soap_new_set__ns1__checkTestDataResponse(
	struct soap *soap,
	std::string *checkTestDataResult)
{
	_ns1__checkTestDataResponse *_p = soap_new__ns1__checkTestDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkTestDataResponse::checkTestDataResult = checkTestDataResult;
	}
	return _p;
}

inline int soap_write__ns1__checkTestDataResponse(struct soap *soap, _ns1__checkTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__checkTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkTestDataResponse(struct soap *soap, const char *URL, _ns1__checkTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__checkTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkTestDataResponse(struct soap *soap, const char *URL, _ns1__checkTestDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestDataResponse", p->soap_type() == SOAP_TYPE__ns1__checkTestDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkTestDataResponse * SOAP_FMAC4 soap_get__ns1__checkTestDataResponse(struct soap*, _ns1__checkTestDataResponse *, const char*, const char*);

inline int soap_read__ns1__checkTestDataResponse(struct soap *soap, _ns1__checkTestDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkTestDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkTestDataResponse(struct soap *soap, const char *URL, _ns1__checkTestDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkTestDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkTestDataResponse(struct soap *soap, _ns1__checkTestDataResponse *p)
{
	if (soap_read__ns1__checkTestDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkTestData_DEFINED
#define SOAP_TYPE__ns1__checkTestData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkTestData(struct soap*, const char*, int, const _ns1__checkTestData *, const char*);
SOAP_FMAC3 _ns1__checkTestData * SOAP_FMAC4 soap_in__ns1__checkTestData(struct soap*, const char*, _ns1__checkTestData *, const char*);
SOAP_FMAC1 _ns1__checkTestData * SOAP_FMAC2 soap_instantiate__ns1__checkTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkTestData * soap_new__ns1__checkTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkTestData(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkTestData * soap_new_req__ns1__checkTestData(
	struct soap *soap)
{
	_ns1__checkTestData *_p = soap_new__ns1__checkTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__checkTestData * soap_new_set__ns1__checkTestData(
	struct soap *soap,
	std::string *SN,
	std::string *TB)
{
	_ns1__checkTestData *_p = soap_new__ns1__checkTestData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkTestData::SN = SN;
		_p->_ns1__checkTestData::TB = TB;
	}
	return _p;
}

inline int soap_write__ns1__checkTestData(struct soap *soap, _ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestData", p->soap_type() == SOAP_TYPE__ns1__checkTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__checkTestData(struct soap *soap, const char *URL, _ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestData", p->soap_type() == SOAP_TYPE__ns1__checkTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__checkTestData(struct soap *soap, const char *URL, _ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkTestData", p->soap_type() == SOAP_TYPE__ns1__checkTestData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkTestData * SOAP_FMAC4 soap_get__ns1__checkTestData(struct soap*, _ns1__checkTestData *, const char*, const char*);

inline int soap_read__ns1__checkTestData(struct soap *soap, _ns1__checkTestData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__checkTestData(struct soap *soap, const char *URL, _ns1__checkTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__checkTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__checkTestData(struct soap *soap, _ns1__checkTestData *p)
{
	if (soap_read__ns1__checkTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsZjListResponse_DEFINED
#define SOAP_TYPE__ns1__InsZjListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsZjListResponse(struct soap*, const char*, int, const _ns1__InsZjListResponse *, const char*);
SOAP_FMAC3 _ns1__InsZjListResponse * SOAP_FMAC4 soap_in__ns1__InsZjListResponse(struct soap*, const char*, _ns1__InsZjListResponse *, const char*);
SOAP_FMAC1 _ns1__InsZjListResponse * SOAP_FMAC2 soap_instantiate__ns1__InsZjListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsZjListResponse * soap_new__ns1__InsZjListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsZjListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsZjListResponse * soap_new_req__ns1__InsZjListResponse(
	struct soap *soap)
{
	_ns1__InsZjListResponse *_p = soap_new__ns1__InsZjListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsZjListResponse * soap_new_set__ns1__InsZjListResponse(
	struct soap *soap,
	std::string *InsZjListResult)
{
	_ns1__InsZjListResponse *_p = soap_new__ns1__InsZjListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsZjListResponse::InsZjListResult = InsZjListResult;
	}
	return _p;
}

inline int soap_write__ns1__InsZjListResponse(struct soap *soap, _ns1__InsZjListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjListResponse", p->soap_type() == SOAP_TYPE__ns1__InsZjListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsZjListResponse(struct soap *soap, const char *URL, _ns1__InsZjListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjListResponse", p->soap_type() == SOAP_TYPE__ns1__InsZjListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsZjListResponse(struct soap *soap, const char *URL, _ns1__InsZjListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjListResponse", p->soap_type() == SOAP_TYPE__ns1__InsZjListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsZjListResponse * SOAP_FMAC4 soap_get__ns1__InsZjListResponse(struct soap*, _ns1__InsZjListResponse *, const char*, const char*);

inline int soap_read__ns1__InsZjListResponse(struct soap *soap, _ns1__InsZjListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsZjListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsZjListResponse(struct soap *soap, const char *URL, _ns1__InsZjListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsZjListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsZjListResponse(struct soap *soap, _ns1__InsZjListResponse *p)
{
	if (soap_read__ns1__InsZjListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsZjList_DEFINED
#define SOAP_TYPE__ns1__InsZjList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsZjList(struct soap*, const char*, int, const _ns1__InsZjList *, const char*);
SOAP_FMAC3 _ns1__InsZjList * SOAP_FMAC4 soap_in__ns1__InsZjList(struct soap*, const char*, _ns1__InsZjList *, const char*);
SOAP_FMAC1 _ns1__InsZjList * SOAP_FMAC2 soap_instantiate__ns1__InsZjList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsZjList * soap_new__ns1__InsZjList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsZjList(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsZjList * soap_new_req__ns1__InsZjList(
	struct soap *soap)
{
	_ns1__InsZjList *_p = soap_new__ns1__InsZjList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsZjList * soap_new_set__ns1__InsZjList(
	struct soap *soap,
	std::string *ZJSN,
	std::string *Qty,
	std::string *ZJQty,
	std::string *ZJDate,
	std::string *Mo,
	std::string *Part,
	std::string *Line)
{
	_ns1__InsZjList *_p = soap_new__ns1__InsZjList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsZjList::ZJSN = ZJSN;
		_p->_ns1__InsZjList::Qty = Qty;
		_p->_ns1__InsZjList::ZJQty = ZJQty;
		_p->_ns1__InsZjList::ZJDate = ZJDate;
		_p->_ns1__InsZjList::Mo = Mo;
		_p->_ns1__InsZjList::Part = Part;
		_p->_ns1__InsZjList::Line = Line;
	}
	return _p;
}

inline int soap_write__ns1__InsZjList(struct soap *soap, _ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjList", p->soap_type() == SOAP_TYPE__ns1__InsZjList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsZjList(struct soap *soap, const char *URL, _ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjList", p->soap_type() == SOAP_TYPE__ns1__InsZjList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsZjList(struct soap *soap, const char *URL, _ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsZjList", p->soap_type() == SOAP_TYPE__ns1__InsZjList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsZjList * SOAP_FMAC4 soap_get__ns1__InsZjList(struct soap*, _ns1__InsZjList *, const char*, const char*);

inline int soap_read__ns1__InsZjList(struct soap *soap, _ns1__InsZjList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsZjList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsZjList(struct soap *soap, const char *URL, _ns1__InsZjList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsZjList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsZjList(struct soap *soap, _ns1__InsZjList *p)
{
	if (soap_read__ns1__InsZjList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFruitMachineChkResponse_DEFINED
#define SOAP_TYPE__ns1__GetFruitMachineChkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFruitMachineChkResponse(struct soap*, const char*, int, const _ns1__GetFruitMachineChkResponse *, const char*);
SOAP_FMAC3 _ns1__GetFruitMachineChkResponse * SOAP_FMAC4 soap_in__ns1__GetFruitMachineChkResponse(struct soap*, const char*, _ns1__GetFruitMachineChkResponse *, const char*);
SOAP_FMAC1 _ns1__GetFruitMachineChkResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFruitMachineChkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFruitMachineChkResponse * soap_new__ns1__GetFruitMachineChkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFruitMachineChkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFruitMachineChkResponse * soap_new_req__ns1__GetFruitMachineChkResponse(
	struct soap *soap)
{
	_ns1__GetFruitMachineChkResponse *_p = soap_new__ns1__GetFruitMachineChkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFruitMachineChkResponse * soap_new_set__ns1__GetFruitMachineChkResponse(
	struct soap *soap,
	std::string *GetFruitMachineChkResult)
{
	_ns1__GetFruitMachineChkResponse *_p = soap_new__ns1__GetFruitMachineChkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFruitMachineChkResponse::GetFruitMachineChkResult = GetFruitMachineChkResult;
	}
	return _p;
}

inline int soap_write__ns1__GetFruitMachineChkResponse(struct soap *soap, _ns1__GetFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__GetFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__GetFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFruitMachineChkResponse * SOAP_FMAC4 soap_get__ns1__GetFruitMachineChkResponse(struct soap*, _ns1__GetFruitMachineChkResponse *, const char*, const char*);

inline int soap_read__ns1__GetFruitMachineChkResponse(struct soap *soap, _ns1__GetFruitMachineChkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFruitMachineChkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__GetFruitMachineChkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFruitMachineChkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFruitMachineChkResponse(struct soap *soap, _ns1__GetFruitMachineChkResponse *p)
{
	if (soap_read__ns1__GetFruitMachineChkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFruitMachineChk_DEFINED
#define SOAP_TYPE__ns1__GetFruitMachineChk_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFruitMachineChk(struct soap*, const char*, int, const _ns1__GetFruitMachineChk *, const char*);
SOAP_FMAC3 _ns1__GetFruitMachineChk * SOAP_FMAC4 soap_in__ns1__GetFruitMachineChk(struct soap*, const char*, _ns1__GetFruitMachineChk *, const char*);
SOAP_FMAC1 _ns1__GetFruitMachineChk * SOAP_FMAC2 soap_instantiate__ns1__GetFruitMachineChk(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFruitMachineChk * soap_new__ns1__GetFruitMachineChk(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFruitMachineChk(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFruitMachineChk * soap_new_req__ns1__GetFruitMachineChk(
	struct soap *soap)
{
	_ns1__GetFruitMachineChk *_p = soap_new__ns1__GetFruitMachineChk(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFruitMachineChk * soap_new_set__ns1__GetFruitMachineChk(
	struct soap *soap,
	std::string *Sn,
	std::string *Machine,
	std::string *TestItem)
{
	_ns1__GetFruitMachineChk *_p = soap_new__ns1__GetFruitMachineChk(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFruitMachineChk::Sn = Sn;
		_p->_ns1__GetFruitMachineChk::Machine = Machine;
		_p->_ns1__GetFruitMachineChk::TestItem = TestItem;
	}
	return _p;
}

inline int soap_write__ns1__GetFruitMachineChk(struct soap *soap, _ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFruitMachineChk(struct soap *soap, const char *URL, _ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFruitMachineChk(struct soap *soap, const char *URL, _ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__GetFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFruitMachineChk * SOAP_FMAC4 soap_get__ns1__GetFruitMachineChk(struct soap*, _ns1__GetFruitMachineChk *, const char*, const char*);

inline int soap_read__ns1__GetFruitMachineChk(struct soap *soap, _ns1__GetFruitMachineChk *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFruitMachineChk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFruitMachineChk(struct soap *soap, const char *URL, _ns1__GetFruitMachineChk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFruitMachineChk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFruitMachineChk(struct soap *soap, _ns1__GetFruitMachineChk *p)
{
	if (soap_read__ns1__GetFruitMachineChk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFruitMachineChkResponse_DEFINED
#define SOAP_TYPE__ns1__InsFruitMachineChkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFruitMachineChkResponse(struct soap*, const char*, int, const _ns1__InsFruitMachineChkResponse *, const char*);
SOAP_FMAC3 _ns1__InsFruitMachineChkResponse * SOAP_FMAC4 soap_in__ns1__InsFruitMachineChkResponse(struct soap*, const char*, _ns1__InsFruitMachineChkResponse *, const char*);
SOAP_FMAC1 _ns1__InsFruitMachineChkResponse * SOAP_FMAC2 soap_instantiate__ns1__InsFruitMachineChkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFruitMachineChkResponse * soap_new__ns1__InsFruitMachineChkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFruitMachineChkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFruitMachineChkResponse * soap_new_req__ns1__InsFruitMachineChkResponse(
	struct soap *soap)
{
	_ns1__InsFruitMachineChkResponse *_p = soap_new__ns1__InsFruitMachineChkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFruitMachineChkResponse * soap_new_set__ns1__InsFruitMachineChkResponse(
	struct soap *soap,
	std::string *InsFruitMachineChkResult)
{
	_ns1__InsFruitMachineChkResponse *_p = soap_new__ns1__InsFruitMachineChkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFruitMachineChkResponse::InsFruitMachineChkResult = InsFruitMachineChkResult;
	}
	return _p;
}

inline int soap_write__ns1__InsFruitMachineChkResponse(struct soap *soap, _ns1__InsFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__InsFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__InsFruitMachineChkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChkResponse", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFruitMachineChkResponse * SOAP_FMAC4 soap_get__ns1__InsFruitMachineChkResponse(struct soap*, _ns1__InsFruitMachineChkResponse *, const char*, const char*);

inline int soap_read__ns1__InsFruitMachineChkResponse(struct soap *soap, _ns1__InsFruitMachineChkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFruitMachineChkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFruitMachineChkResponse(struct soap *soap, const char *URL, _ns1__InsFruitMachineChkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFruitMachineChkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFruitMachineChkResponse(struct soap *soap, _ns1__InsFruitMachineChkResponse *p)
{
	if (soap_read__ns1__InsFruitMachineChkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsFruitMachineChk_DEFINED
#define SOAP_TYPE__ns1__InsFruitMachineChk_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsFruitMachineChk(struct soap*, const char*, int, const _ns1__InsFruitMachineChk *, const char*);
SOAP_FMAC3 _ns1__InsFruitMachineChk * SOAP_FMAC4 soap_in__ns1__InsFruitMachineChk(struct soap*, const char*, _ns1__InsFruitMachineChk *, const char*);
SOAP_FMAC1 _ns1__InsFruitMachineChk * SOAP_FMAC2 soap_instantiate__ns1__InsFruitMachineChk(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsFruitMachineChk * soap_new__ns1__InsFruitMachineChk(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsFruitMachineChk(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsFruitMachineChk * soap_new_req__ns1__InsFruitMachineChk(
	struct soap *soap)
{
	_ns1__InsFruitMachineChk *_p = soap_new__ns1__InsFruitMachineChk(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsFruitMachineChk * soap_new_set__ns1__InsFruitMachineChk(
	struct soap *soap,
	std::string *Sn,
	std::string *Machine,
	std::string *TestItem,
	std::string *TestUpper,
	std::string *TestLower,
	std::string *TestValue,
	std::string *TestResult,
	std::string *TestTime,
	std::string *EndTime)
{
	_ns1__InsFruitMachineChk *_p = soap_new__ns1__InsFruitMachineChk(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsFruitMachineChk::Sn = Sn;
		_p->_ns1__InsFruitMachineChk::Machine = Machine;
		_p->_ns1__InsFruitMachineChk::TestItem = TestItem;
		_p->_ns1__InsFruitMachineChk::TestUpper = TestUpper;
		_p->_ns1__InsFruitMachineChk::TestLower = TestLower;
		_p->_ns1__InsFruitMachineChk::TestValue = TestValue;
		_p->_ns1__InsFruitMachineChk::TestResult = TestResult;
		_p->_ns1__InsFruitMachineChk::TestTime = TestTime;
		_p->_ns1__InsFruitMachineChk::EndTime = EndTime;
	}
	return _p;
}

inline int soap_write__ns1__InsFruitMachineChk(struct soap *soap, _ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsFruitMachineChk(struct soap *soap, const char *URL, _ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsFruitMachineChk(struct soap *soap, const char *URL, _ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsFruitMachineChk", p->soap_type() == SOAP_TYPE__ns1__InsFruitMachineChk ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsFruitMachineChk * SOAP_FMAC4 soap_get__ns1__InsFruitMachineChk(struct soap*, _ns1__InsFruitMachineChk *, const char*, const char*);

inline int soap_read__ns1__InsFruitMachineChk(struct soap *soap, _ns1__InsFruitMachineChk *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsFruitMachineChk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsFruitMachineChk(struct soap *soap, const char *URL, _ns1__InsFruitMachineChk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsFruitMachineChk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsFruitMachineChk(struct soap *soap, _ns1__InsFruitMachineChk *p)
{
	if (soap_read__ns1__InsFruitMachineChk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnLnkOutSNResponse_DEFINED
#define SOAP_TYPE__ns1__SnLnkOutSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnLnkOutSNResponse(struct soap*, const char*, int, const _ns1__SnLnkOutSNResponse *, const char*);
SOAP_FMAC3 _ns1__SnLnkOutSNResponse * SOAP_FMAC4 soap_in__ns1__SnLnkOutSNResponse(struct soap*, const char*, _ns1__SnLnkOutSNResponse *, const char*);
SOAP_FMAC1 _ns1__SnLnkOutSNResponse * SOAP_FMAC2 soap_instantiate__ns1__SnLnkOutSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnLnkOutSNResponse * soap_new__ns1__SnLnkOutSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnLnkOutSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnLnkOutSNResponse * soap_new_req__ns1__SnLnkOutSNResponse(
	struct soap *soap)
{
	_ns1__SnLnkOutSNResponse *_p = soap_new__ns1__SnLnkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SnLnkOutSNResponse * soap_new_set__ns1__SnLnkOutSNResponse(
	struct soap *soap,
	std::string *SnLnkOutSNResult)
{
	_ns1__SnLnkOutSNResponse *_p = soap_new__ns1__SnLnkOutSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnLnkOutSNResponse::SnLnkOutSNResult = SnLnkOutSNResult;
	}
	return _p;
}

inline int soap_write__ns1__SnLnkOutSNResponse(struct soap *soap, _ns1__SnLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SnLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__SnLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SnLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__SnLnkOutSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSNResponse", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnLnkOutSNResponse * SOAP_FMAC4 soap_get__ns1__SnLnkOutSNResponse(struct soap*, _ns1__SnLnkOutSNResponse *, const char*, const char*);

inline int soap_read__ns1__SnLnkOutSNResponse(struct soap *soap, _ns1__SnLnkOutSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnLnkOutSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SnLnkOutSNResponse(struct soap *soap, const char *URL, _ns1__SnLnkOutSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SnLnkOutSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SnLnkOutSNResponse(struct soap *soap, _ns1__SnLnkOutSNResponse *p)
{
	if (soap_read__ns1__SnLnkOutSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnLnkOutSN_DEFINED
#define SOAP_TYPE__ns1__SnLnkOutSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnLnkOutSN(struct soap*, const char*, int, const _ns1__SnLnkOutSN *, const char*);
SOAP_FMAC3 _ns1__SnLnkOutSN * SOAP_FMAC4 soap_in__ns1__SnLnkOutSN(struct soap*, const char*, _ns1__SnLnkOutSN *, const char*);
SOAP_FMAC1 _ns1__SnLnkOutSN * SOAP_FMAC2 soap_instantiate__ns1__SnLnkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnLnkOutSN * soap_new__ns1__SnLnkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnLnkOutSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnLnkOutSN * soap_new_req__ns1__SnLnkOutSN(
	struct soap *soap)
{
	_ns1__SnLnkOutSN *_p = soap_new__ns1__SnLnkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SnLnkOutSN * soap_new_set__ns1__SnLnkOutSN(
	struct soap *soap,
	std::string *SN,
	std::string *LnkSN,
	std::string *Emp_USCORENo,
	std::string *Station_USCORENumber,
	std::string *LnkType)
{
	_ns1__SnLnkOutSN *_p = soap_new__ns1__SnLnkOutSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnLnkOutSN::SN = SN;
		_p->_ns1__SnLnkOutSN::LnkSN = LnkSN;
		_p->_ns1__SnLnkOutSN::Emp_USCORENo = Emp_USCORENo;
		_p->_ns1__SnLnkOutSN::Station_USCORENumber = Station_USCORENumber;
		_p->_ns1__SnLnkOutSN::LnkType = LnkType;
	}
	return _p;
}

inline int soap_write__ns1__SnLnkOutSN(struct soap *soap, _ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SnLnkOutSN(struct soap *soap, const char *URL, _ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SnLnkOutSN(struct soap *soap, const char *URL, _ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnLnkOutSN", p->soap_type() == SOAP_TYPE__ns1__SnLnkOutSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnLnkOutSN * SOAP_FMAC4 soap_get__ns1__SnLnkOutSN(struct soap*, _ns1__SnLnkOutSN *, const char*, const char*);

inline int soap_read__ns1__SnLnkOutSN(struct soap *soap, _ns1__SnLnkOutSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnLnkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SnLnkOutSN(struct soap *soap, const char *URL, _ns1__SnLnkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SnLnkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SnLnkOutSN(struct soap *soap, _ns1__SnLnkOutSN *p)
{
	if (soap_read__ns1__SnLnkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoBaseResponse_DEFINED
#define SOAP_TYPE__ns1__getMoBaseResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoBaseResponse(struct soap*, const char*, int, const _ns1__getMoBaseResponse *, const char*);
SOAP_FMAC3 _ns1__getMoBaseResponse * SOAP_FMAC4 soap_in__ns1__getMoBaseResponse(struct soap*, const char*, _ns1__getMoBaseResponse *, const char*);
SOAP_FMAC1 _ns1__getMoBaseResponse * SOAP_FMAC2 soap_instantiate__ns1__getMoBaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoBaseResponse * soap_new__ns1__getMoBaseResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoBaseResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoBaseResponse * soap_new_req__ns1__getMoBaseResponse(
	struct soap *soap)
{
	_ns1__getMoBaseResponse *_p = soap_new__ns1__getMoBaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoBaseResponse * soap_new_set__ns1__getMoBaseResponse(
	struct soap *soap,
	std::string *getMoBaseResult)
{
	_ns1__getMoBaseResponse *_p = soap_new__ns1__getMoBaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoBaseResponse::getMoBaseResult = getMoBaseResult;
	}
	return _p;
}

inline int soap_write__ns1__getMoBaseResponse(struct soap *soap, _ns1__getMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__getMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoBaseResponse(struct soap *soap, const char *URL, _ns1__getMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__getMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoBaseResponse(struct soap *soap, const char *URL, _ns1__getMoBaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBaseResponse", p->soap_type() == SOAP_TYPE__ns1__getMoBaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoBaseResponse * SOAP_FMAC4 soap_get__ns1__getMoBaseResponse(struct soap*, _ns1__getMoBaseResponse *, const char*, const char*);

inline int soap_read__ns1__getMoBaseResponse(struct soap *soap, _ns1__getMoBaseResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoBaseResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoBaseResponse(struct soap *soap, const char *URL, _ns1__getMoBaseResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoBaseResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoBaseResponse(struct soap *soap, _ns1__getMoBaseResponse *p)
{
	if (soap_read__ns1__getMoBaseResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMoBase_DEFINED
#define SOAP_TYPE__ns1__getMoBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMoBase(struct soap*, const char*, int, const _ns1__getMoBase *, const char*);
SOAP_FMAC3 _ns1__getMoBase * SOAP_FMAC4 soap_in__ns1__getMoBase(struct soap*, const char*, _ns1__getMoBase *, const char*);
SOAP_FMAC1 _ns1__getMoBase * SOAP_FMAC2 soap_instantiate__ns1__getMoBase(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMoBase * soap_new__ns1__getMoBase(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMoBase(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMoBase * soap_new_req__ns1__getMoBase(
	struct soap *soap)
{
	_ns1__getMoBase *_p = soap_new__ns1__getMoBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getMoBase * soap_new_set__ns1__getMoBase(
	struct soap *soap,
	std::string *MoNumber)
{
	_ns1__getMoBase *_p = soap_new__ns1__getMoBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMoBase::MoNumber = MoNumber;
	}
	return _p;
}

inline int soap_write__ns1__getMoBase(struct soap *soap, _ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBase", p->soap_type() == SOAP_TYPE__ns1__getMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getMoBase(struct soap *soap, const char *URL, _ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBase", p->soap_type() == SOAP_TYPE__ns1__getMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getMoBase(struct soap *soap, const char *URL, _ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMoBase", p->soap_type() == SOAP_TYPE__ns1__getMoBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMoBase * SOAP_FMAC4 soap_get__ns1__getMoBase(struct soap*, _ns1__getMoBase *, const char*, const char*);

inline int soap_read__ns1__getMoBase(struct soap *soap, _ns1__getMoBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMoBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getMoBase(struct soap *soap, const char *URL, _ns1__getMoBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getMoBase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getMoBase(struct soap *soap, _ns1__getMoBase *p)
{
	if (soap_read__ns1__getMoBase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetNgCodeResponse_DEFINED
#define SOAP_TYPE__ns1__GetNgCodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNgCodeResponse(struct soap*, const char*, int, const _ns1__GetNgCodeResponse *, const char*);
SOAP_FMAC3 _ns1__GetNgCodeResponse * SOAP_FMAC4 soap_in__ns1__GetNgCodeResponse(struct soap*, const char*, _ns1__GetNgCodeResponse *, const char*);
SOAP_FMAC1 _ns1__GetNgCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetNgCodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetNgCodeResponse * soap_new__ns1__GetNgCodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetNgCodeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetNgCodeResponse * soap_new_req__ns1__GetNgCodeResponse(
	struct soap *soap)
{
	_ns1__GetNgCodeResponse *_p = soap_new__ns1__GetNgCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetNgCodeResponse * soap_new_set__ns1__GetNgCodeResponse(
	struct soap *soap,
	std::string *GetNgCodeResult)
{
	_ns1__GetNgCodeResponse *_p = soap_new__ns1__GetNgCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetNgCodeResponse::GetNgCodeResult = GetNgCodeResult;
	}
	return _p;
}

inline int soap_write__ns1__GetNgCodeResponse(struct soap *soap, _ns1__GetNgCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetNgCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetNgCodeResponse(struct soap *soap, const char *URL, _ns1__GetNgCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetNgCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetNgCodeResponse(struct soap *soap, const char *URL, _ns1__GetNgCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetNgCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetNgCodeResponse * SOAP_FMAC4 soap_get__ns1__GetNgCodeResponse(struct soap*, _ns1__GetNgCodeResponse *, const char*, const char*);

inline int soap_read__ns1__GetNgCodeResponse(struct soap *soap, _ns1__GetNgCodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetNgCodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetNgCodeResponse(struct soap *soap, const char *URL, _ns1__GetNgCodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetNgCodeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetNgCodeResponse(struct soap *soap, _ns1__GetNgCodeResponse *p)
{
	if (soap_read__ns1__GetNgCodeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetNgCode_DEFINED
#define SOAP_TYPE__ns1__GetNgCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNgCode(struct soap*, const char*, int, const _ns1__GetNgCode *, const char*);
SOAP_FMAC3 _ns1__GetNgCode * SOAP_FMAC4 soap_in__ns1__GetNgCode(struct soap*, const char*, _ns1__GetNgCode *, const char*);
SOAP_FMAC1 _ns1__GetNgCode * SOAP_FMAC2 soap_instantiate__ns1__GetNgCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetNgCode * soap_new__ns1__GetNgCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetNgCode(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetNgCode * soap_new_req__ns1__GetNgCode(
	struct soap *soap)
{
	_ns1__GetNgCode *_p = soap_new__ns1__GetNgCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetNgCode * soap_new_set__ns1__GetNgCode(
	struct soap *soap,
	std::string *NgCode)
{
	_ns1__GetNgCode *_p = soap_new__ns1__GetNgCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetNgCode::NgCode = NgCode;
	}
	return _p;
}

inline int soap_write__ns1__GetNgCode(struct soap *soap, _ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCode", p->soap_type() == SOAP_TYPE__ns1__GetNgCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetNgCode(struct soap *soap, const char *URL, _ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCode", p->soap_type() == SOAP_TYPE__ns1__GetNgCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetNgCode(struct soap *soap, const char *URL, _ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetNgCode", p->soap_type() == SOAP_TYPE__ns1__GetNgCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetNgCode * SOAP_FMAC4 soap_get__ns1__GetNgCode(struct soap*, _ns1__GetNgCode *, const char*, const char*);

inline int soap_read__ns1__GetNgCode(struct soap *soap, _ns1__GetNgCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetNgCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetNgCode(struct soap *soap, const char *URL, _ns1__GetNgCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetNgCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetNgCode(struct soap *soap, _ns1__GetNgCode *p)
{
	if (soap_read__ns1__GetNgCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetDiecastSNResponse_DEFINED
#define SOAP_TYPE__ns1__SetDiecastSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetDiecastSNResponse(struct soap*, const char*, int, const _ns1__SetDiecastSNResponse *, const char*);
SOAP_FMAC3 _ns1__SetDiecastSNResponse * SOAP_FMAC4 soap_in__ns1__SetDiecastSNResponse(struct soap*, const char*, _ns1__SetDiecastSNResponse *, const char*);
SOAP_FMAC1 _ns1__SetDiecastSNResponse * SOAP_FMAC2 soap_instantiate__ns1__SetDiecastSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetDiecastSNResponse * soap_new__ns1__SetDiecastSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetDiecastSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetDiecastSNResponse * soap_new_req__ns1__SetDiecastSNResponse(
	struct soap *soap)
{
	_ns1__SetDiecastSNResponse *_p = soap_new__ns1__SetDiecastSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetDiecastSNResponse * soap_new_set__ns1__SetDiecastSNResponse(
	struct soap *soap,
	std::string *SetDiecastSNResult)
{
	_ns1__SetDiecastSNResponse *_p = soap_new__ns1__SetDiecastSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetDiecastSNResponse::SetDiecastSNResult = SetDiecastSNResult;
	}
	return _p;
}

inline int soap_write__ns1__SetDiecastSNResponse(struct soap *soap, _ns1__SetDiecastSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSNResponse", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetDiecastSNResponse(struct soap *soap, const char *URL, _ns1__SetDiecastSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSNResponse", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetDiecastSNResponse(struct soap *soap, const char *URL, _ns1__SetDiecastSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSNResponse", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetDiecastSNResponse * SOAP_FMAC4 soap_get__ns1__SetDiecastSNResponse(struct soap*, _ns1__SetDiecastSNResponse *, const char*, const char*);

inline int soap_read__ns1__SetDiecastSNResponse(struct soap *soap, _ns1__SetDiecastSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetDiecastSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetDiecastSNResponse(struct soap *soap, const char *URL, _ns1__SetDiecastSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetDiecastSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetDiecastSNResponse(struct soap *soap, _ns1__SetDiecastSNResponse *p)
{
	if (soap_read__ns1__SetDiecastSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetDiecastSN_DEFINED
#define SOAP_TYPE__ns1__SetDiecastSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetDiecastSN(struct soap*, const char*, int, const _ns1__SetDiecastSN *, const char*);
SOAP_FMAC3 _ns1__SetDiecastSN * SOAP_FMAC4 soap_in__ns1__SetDiecastSN(struct soap*, const char*, _ns1__SetDiecastSN *, const char*);
SOAP_FMAC1 _ns1__SetDiecastSN * SOAP_FMAC2 soap_instantiate__ns1__SetDiecastSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetDiecastSN * soap_new__ns1__SetDiecastSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetDiecastSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetDiecastSN * soap_new_req__ns1__SetDiecastSN(
	struct soap *soap)
{
	_ns1__SetDiecastSN *_p = soap_new__ns1__SetDiecastSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetDiecastSN * soap_new_set__ns1__SetDiecastSN(
	struct soap *soap,
	std::string *SN,
	std::string *StationNumber,
	std::string *strType)
{
	_ns1__SetDiecastSN *_p = soap_new__ns1__SetDiecastSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetDiecastSN::SN = SN;
		_p->_ns1__SetDiecastSN::StationNumber = StationNumber;
		_p->_ns1__SetDiecastSN::strType = strType;
	}
	return _p;
}

inline int soap_write__ns1__SetDiecastSN(struct soap *soap, _ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSN", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetDiecastSN(struct soap *soap, const char *URL, _ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSN", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetDiecastSN(struct soap *soap, const char *URL, _ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDiecastSN", p->soap_type() == SOAP_TYPE__ns1__SetDiecastSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetDiecastSN * SOAP_FMAC4 soap_get__ns1__SetDiecastSN(struct soap*, _ns1__SetDiecastSN *, const char*, const char*);

inline int soap_read__ns1__SetDiecastSN(struct soap *soap, _ns1__SetDiecastSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetDiecastSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetDiecastSN(struct soap *soap, const char *URL, _ns1__SetDiecastSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetDiecastSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetDiecastSN(struct soap *soap, _ns1__SetDiecastSN *p)
{
	if (soap_read__ns1__SetDiecastSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMachineForGroupResponse_DEFINED
#define SOAP_TYPE__ns1__GetMachineForGroupResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMachineForGroupResponse(struct soap*, const char*, int, const _ns1__GetMachineForGroupResponse *, const char*);
SOAP_FMAC3 _ns1__GetMachineForGroupResponse * SOAP_FMAC4 soap_in__ns1__GetMachineForGroupResponse(struct soap*, const char*, _ns1__GetMachineForGroupResponse *, const char*);
SOAP_FMAC1 _ns1__GetMachineForGroupResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMachineForGroupResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMachineForGroupResponse * soap_new__ns1__GetMachineForGroupResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMachineForGroupResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMachineForGroupResponse * soap_new_req__ns1__GetMachineForGroupResponse(
	struct soap *soap)
{
	_ns1__GetMachineForGroupResponse *_p = soap_new__ns1__GetMachineForGroupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMachineForGroupResponse * soap_new_set__ns1__GetMachineForGroupResponse(
	struct soap *soap,
	_ns1__GetMachineForGroupResponse_GetMachineForGroupResult *GetMachineForGroupResult)
{
	_ns1__GetMachineForGroupResponse *_p = soap_new__ns1__GetMachineForGroupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMachineForGroupResponse::GetMachineForGroupResult = GetMachineForGroupResult;
	}
	return _p;
}

inline int soap_write__ns1__GetMachineForGroupResponse(struct soap *soap, _ns1__GetMachineForGroupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMachineForGroupResponse(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMachineForGroupResponse(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroupResponse", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroupResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMachineForGroupResponse * SOAP_FMAC4 soap_get__ns1__GetMachineForGroupResponse(struct soap*, _ns1__GetMachineForGroupResponse *, const char*, const char*);

inline int soap_read__ns1__GetMachineForGroupResponse(struct soap *soap, _ns1__GetMachineForGroupResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMachineForGroupResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMachineForGroupResponse(struct soap *soap, const char *URL, _ns1__GetMachineForGroupResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMachineForGroupResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMachineForGroupResponse(struct soap *soap, _ns1__GetMachineForGroupResponse *p)
{
	if (soap_read__ns1__GetMachineForGroupResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMachineForGroup_DEFINED
#define SOAP_TYPE__ns1__GetMachineForGroup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMachineForGroup(struct soap*, const char*, int, const _ns1__GetMachineForGroup *, const char*);
SOAP_FMAC3 _ns1__GetMachineForGroup * SOAP_FMAC4 soap_in__ns1__GetMachineForGroup(struct soap*, const char*, _ns1__GetMachineForGroup *, const char*);
SOAP_FMAC1 _ns1__GetMachineForGroup * SOAP_FMAC2 soap_instantiate__ns1__GetMachineForGroup(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMachineForGroup * soap_new__ns1__GetMachineForGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMachineForGroup(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMachineForGroup * soap_new_req__ns1__GetMachineForGroup(
	struct soap *soap)
{
	_ns1__GetMachineForGroup *_p = soap_new__ns1__GetMachineForGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMachineForGroup * soap_new_set__ns1__GetMachineForGroup(
	struct soap *soap,
	std::string *StationNumber,
	std::string *PmcNo)
{
	_ns1__GetMachineForGroup *_p = soap_new__ns1__GetMachineForGroup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMachineForGroup::StationNumber = StationNumber;
		_p->_ns1__GetMachineForGroup::PmcNo = PmcNo;
	}
	return _p;
}

inline int soap_write__ns1__GetMachineForGroup(struct soap *soap, _ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroup", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMachineForGroup(struct soap *soap, const char *URL, _ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroup", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMachineForGroup(struct soap *soap, const char *URL, _ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMachineForGroup", p->soap_type() == SOAP_TYPE__ns1__GetMachineForGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMachineForGroup * SOAP_FMAC4 soap_get__ns1__GetMachineForGroup(struct soap*, _ns1__GetMachineForGroup *, const char*, const char*);

inline int soap_read__ns1__GetMachineForGroup(struct soap *soap, _ns1__GetMachineForGroup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMachineForGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMachineForGroup(struct soap *soap, const char *URL, _ns1__GetMachineForGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMachineForGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMachineForGroup(struct soap *soap, _ns1__GetMachineForGroup *p)
{
	if (soap_read__ns1__GetMachineForGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadForHPResponse_DEFINED
#define SOAP_TYPE__ns1__UploadForHPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadForHPResponse(struct soap*, const char*, int, const _ns1__UploadForHPResponse *, const char*);
SOAP_FMAC3 _ns1__UploadForHPResponse * SOAP_FMAC4 soap_in__ns1__UploadForHPResponse(struct soap*, const char*, _ns1__UploadForHPResponse *, const char*);
SOAP_FMAC1 _ns1__UploadForHPResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadForHPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadForHPResponse * soap_new__ns1__UploadForHPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadForHPResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadForHPResponse * soap_new_req__ns1__UploadForHPResponse(
	struct soap *soap)
{
	_ns1__UploadForHPResponse *_p = soap_new__ns1__UploadForHPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadForHPResponse * soap_new_set__ns1__UploadForHPResponse(
	struct soap *soap,
	std::string *UploadForHPResult)
{
	_ns1__UploadForHPResponse *_p = soap_new__ns1__UploadForHPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadForHPResponse::UploadForHPResult = UploadForHPResult;
	}
	return _p;
}

inline int soap_write__ns1__UploadForHPResponse(struct soap *soap, _ns1__UploadForHPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHPResponse", p->soap_type() == SOAP_TYPE__ns1__UploadForHPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadForHPResponse(struct soap *soap, const char *URL, _ns1__UploadForHPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHPResponse", p->soap_type() == SOAP_TYPE__ns1__UploadForHPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadForHPResponse(struct soap *soap, const char *URL, _ns1__UploadForHPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHPResponse", p->soap_type() == SOAP_TYPE__ns1__UploadForHPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadForHPResponse * SOAP_FMAC4 soap_get__ns1__UploadForHPResponse(struct soap*, _ns1__UploadForHPResponse *, const char*, const char*);

inline int soap_read__ns1__UploadForHPResponse(struct soap *soap, _ns1__UploadForHPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UploadForHPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadForHPResponse(struct soap *soap, const char *URL, _ns1__UploadForHPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UploadForHPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadForHPResponse(struct soap *soap, _ns1__UploadForHPResponse *p)
{
	if (soap_read__ns1__UploadForHPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadForHP_DEFINED
#define SOAP_TYPE__ns1__UploadForHP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadForHP(struct soap*, const char*, int, const _ns1__UploadForHP *, const char*);
SOAP_FMAC3 _ns1__UploadForHP * SOAP_FMAC4 soap_in__ns1__UploadForHP(struct soap*, const char*, _ns1__UploadForHP *, const char*);
SOAP_FMAC1 _ns1__UploadForHP * SOAP_FMAC2 soap_instantiate__ns1__UploadForHP(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadForHP * soap_new__ns1__UploadForHP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadForHP(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadForHP * soap_new_req__ns1__UploadForHP(
	struct soap *soap)
{
	_ns1__UploadForHP *_p = soap_new__ns1__UploadForHP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadForHP * soap_new_set__ns1__UploadForHP(
	struct soap *soap,
	std::string *DT,
	std::string *ItemNo,
	std::string *PartNo,
	std::string *Qty,
	std::string *NgQty,
	std::string *StopDT,
	std::string *NgDesc)
{
	_ns1__UploadForHP *_p = soap_new__ns1__UploadForHP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadForHP::DT = DT;
		_p->_ns1__UploadForHP::ItemNo = ItemNo;
		_p->_ns1__UploadForHP::PartNo = PartNo;
		_p->_ns1__UploadForHP::Qty = Qty;
		_p->_ns1__UploadForHP::NgQty = NgQty;
		_p->_ns1__UploadForHP::StopDT = StopDT;
		_p->_ns1__UploadForHP::NgDesc = NgDesc;
	}
	return _p;
}

inline int soap_write__ns1__UploadForHP(struct soap *soap, _ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHP", p->soap_type() == SOAP_TYPE__ns1__UploadForHP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadForHP(struct soap *soap, const char *URL, _ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHP", p->soap_type() == SOAP_TYPE__ns1__UploadForHP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadForHP(struct soap *soap, const char *URL, _ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadForHP", p->soap_type() == SOAP_TYPE__ns1__UploadForHP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadForHP * SOAP_FMAC4 soap_get__ns1__UploadForHP(struct soap*, _ns1__UploadForHP *, const char*, const char*);

inline int soap_read__ns1__UploadForHP(struct soap *soap, _ns1__UploadForHP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UploadForHP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadForHP(struct soap *soap, const char *URL, _ns1__UploadForHP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UploadForHP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadForHP(struct soap *soap, _ns1__UploadForHP *p)
{
	if (soap_read__ns1__UploadForHP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelShelfLinkResponse_DEFINED
#define SOAP_TYPE__ns1__SelShelfLinkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelShelfLinkResponse(struct soap*, const char*, int, const _ns1__SelShelfLinkResponse *, const char*);
SOAP_FMAC3 _ns1__SelShelfLinkResponse * SOAP_FMAC4 soap_in__ns1__SelShelfLinkResponse(struct soap*, const char*, _ns1__SelShelfLinkResponse *, const char*);
SOAP_FMAC1 _ns1__SelShelfLinkResponse * SOAP_FMAC2 soap_instantiate__ns1__SelShelfLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelShelfLinkResponse * soap_new__ns1__SelShelfLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelShelfLinkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelShelfLinkResponse * soap_new_req__ns1__SelShelfLinkResponse(
	struct soap *soap)
{
	_ns1__SelShelfLinkResponse *_p = soap_new__ns1__SelShelfLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelShelfLinkResponse * soap_new_set__ns1__SelShelfLinkResponse(
	struct soap *soap,
	std::string *SelShelfLinkResult)
{
	_ns1__SelShelfLinkResponse *_p = soap_new__ns1__SelShelfLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelShelfLinkResponse::SelShelfLinkResult = SelShelfLinkResult;
	}
	return _p;
}

inline int soap_write__ns1__SelShelfLinkResponse(struct soap *soap, _ns1__SelShelfLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLinkResponse", p->soap_type() == SOAP_TYPE__ns1__SelShelfLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelShelfLinkResponse(struct soap *soap, const char *URL, _ns1__SelShelfLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLinkResponse", p->soap_type() == SOAP_TYPE__ns1__SelShelfLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelShelfLinkResponse(struct soap *soap, const char *URL, _ns1__SelShelfLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLinkResponse", p->soap_type() == SOAP_TYPE__ns1__SelShelfLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelShelfLinkResponse * SOAP_FMAC4 soap_get__ns1__SelShelfLinkResponse(struct soap*, _ns1__SelShelfLinkResponse *, const char*, const char*);

inline int soap_read__ns1__SelShelfLinkResponse(struct soap *soap, _ns1__SelShelfLinkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelShelfLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelShelfLinkResponse(struct soap *soap, const char *URL, _ns1__SelShelfLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelShelfLinkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelShelfLinkResponse(struct soap *soap, _ns1__SelShelfLinkResponse *p)
{
	if (soap_read__ns1__SelShelfLinkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelShelfLink_DEFINED
#define SOAP_TYPE__ns1__SelShelfLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelShelfLink(struct soap*, const char*, int, const _ns1__SelShelfLink *, const char*);
SOAP_FMAC3 _ns1__SelShelfLink * SOAP_FMAC4 soap_in__ns1__SelShelfLink(struct soap*, const char*, _ns1__SelShelfLink *, const char*);
SOAP_FMAC1 _ns1__SelShelfLink * SOAP_FMAC2 soap_instantiate__ns1__SelShelfLink(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelShelfLink * soap_new__ns1__SelShelfLink(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelShelfLink(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelShelfLink * soap_new_req__ns1__SelShelfLink(
	struct soap *soap)
{
	_ns1__SelShelfLink *_p = soap_new__ns1__SelShelfLink(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelShelfLink * soap_new_set__ns1__SelShelfLink(
	struct soap *soap,
	std::string *ShelfSN)
{
	_ns1__SelShelfLink *_p = soap_new__ns1__SelShelfLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelShelfLink::ShelfSN = ShelfSN;
	}
	return _p;
}

inline int soap_write__ns1__SelShelfLink(struct soap *soap, _ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLink", p->soap_type() == SOAP_TYPE__ns1__SelShelfLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelShelfLink(struct soap *soap, const char *URL, _ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLink", p->soap_type() == SOAP_TYPE__ns1__SelShelfLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelShelfLink(struct soap *soap, const char *URL, _ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelShelfLink", p->soap_type() == SOAP_TYPE__ns1__SelShelfLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelShelfLink * SOAP_FMAC4 soap_get__ns1__SelShelfLink(struct soap*, _ns1__SelShelfLink *, const char*, const char*);

inline int soap_read__ns1__SelShelfLink(struct soap *soap, _ns1__SelShelfLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelShelfLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelShelfLink(struct soap *soap, const char *URL, _ns1__SelShelfLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelShelfLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelShelfLink(struct soap *soap, _ns1__SelShelfLink *p)
{
	if (soap_read__ns1__SelShelfLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SNLinkShelfResponse_DEFINED
#define SOAP_TYPE__ns1__SNLinkShelfResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SNLinkShelfResponse(struct soap*, const char*, int, const _ns1__SNLinkShelfResponse *, const char*);
SOAP_FMAC3 _ns1__SNLinkShelfResponse * SOAP_FMAC4 soap_in__ns1__SNLinkShelfResponse(struct soap*, const char*, _ns1__SNLinkShelfResponse *, const char*);
SOAP_FMAC1 _ns1__SNLinkShelfResponse * SOAP_FMAC2 soap_instantiate__ns1__SNLinkShelfResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SNLinkShelfResponse * soap_new__ns1__SNLinkShelfResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SNLinkShelfResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SNLinkShelfResponse * soap_new_req__ns1__SNLinkShelfResponse(
	struct soap *soap)
{
	_ns1__SNLinkShelfResponse *_p = soap_new__ns1__SNLinkShelfResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SNLinkShelfResponse * soap_new_set__ns1__SNLinkShelfResponse(
	struct soap *soap,
	std::string *SNLinkShelfResult)
{
	_ns1__SNLinkShelfResponse *_p = soap_new__ns1__SNLinkShelfResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SNLinkShelfResponse::SNLinkShelfResult = SNLinkShelfResult;
	}
	return _p;
}

inline int soap_write__ns1__SNLinkShelfResponse(struct soap *soap, _ns1__SNLinkShelfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelfResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelfResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SNLinkShelfResponse(struct soap *soap, const char *URL, _ns1__SNLinkShelfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelfResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelfResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SNLinkShelfResponse(struct soap *soap, const char *URL, _ns1__SNLinkShelfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelfResponse", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelfResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SNLinkShelfResponse * SOAP_FMAC4 soap_get__ns1__SNLinkShelfResponse(struct soap*, _ns1__SNLinkShelfResponse *, const char*, const char*);

inline int soap_read__ns1__SNLinkShelfResponse(struct soap *soap, _ns1__SNLinkShelfResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SNLinkShelfResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SNLinkShelfResponse(struct soap *soap, const char *URL, _ns1__SNLinkShelfResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SNLinkShelfResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SNLinkShelfResponse(struct soap *soap, _ns1__SNLinkShelfResponse *p)
{
	if (soap_read__ns1__SNLinkShelfResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SNLinkShelf_DEFINED
#define SOAP_TYPE__ns1__SNLinkShelf_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SNLinkShelf(struct soap*, const char*, int, const _ns1__SNLinkShelf *, const char*);
SOAP_FMAC3 _ns1__SNLinkShelf * SOAP_FMAC4 soap_in__ns1__SNLinkShelf(struct soap*, const char*, _ns1__SNLinkShelf *, const char*);
SOAP_FMAC1 _ns1__SNLinkShelf * SOAP_FMAC2 soap_instantiate__ns1__SNLinkShelf(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SNLinkShelf * soap_new__ns1__SNLinkShelf(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SNLinkShelf(soap, n, NULL, NULL, NULL);
}

inline _ns1__SNLinkShelf * soap_new_req__ns1__SNLinkShelf(
	struct soap *soap)
{
	_ns1__SNLinkShelf *_p = soap_new__ns1__SNLinkShelf(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SNLinkShelf * soap_new_set__ns1__SNLinkShelf(
	struct soap *soap,
	std::string *SN,
	std::string *ShelfSN,
	std::string *strUser)
{
	_ns1__SNLinkShelf *_p = soap_new__ns1__SNLinkShelf(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SNLinkShelf::SN = SN;
		_p->_ns1__SNLinkShelf::ShelfSN = ShelfSN;
		_p->_ns1__SNLinkShelf::strUser = strUser;
	}
	return _p;
}

inline int soap_write__ns1__SNLinkShelf(struct soap *soap, _ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelf", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelf ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SNLinkShelf(struct soap *soap, const char *URL, _ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelf", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelf ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SNLinkShelf(struct soap *soap, const char *URL, _ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SNLinkShelf", p->soap_type() == SOAP_TYPE__ns1__SNLinkShelf ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SNLinkShelf * SOAP_FMAC4 soap_get__ns1__SNLinkShelf(struct soap*, _ns1__SNLinkShelf *, const char*, const char*);

inline int soap_read__ns1__SNLinkShelf(struct soap *soap, _ns1__SNLinkShelf *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SNLinkShelf(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SNLinkShelf(struct soap *soap, const char *URL, _ns1__SNLinkShelf *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SNLinkShelf(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SNLinkShelf(struct soap *soap, _ns1__SNLinkShelf *p)
{
	if (soap_read__ns1__SNLinkShelf(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelSNTestForFruitResponse_DEFINED
#define SOAP_TYPE__ns1__SelSNTestForFruitResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelSNTestForFruitResponse(struct soap*, const char*, int, const _ns1__SelSNTestForFruitResponse *, const char*);
SOAP_FMAC3 _ns1__SelSNTestForFruitResponse * SOAP_FMAC4 soap_in__ns1__SelSNTestForFruitResponse(struct soap*, const char*, _ns1__SelSNTestForFruitResponse *, const char*);
SOAP_FMAC1 _ns1__SelSNTestForFruitResponse * SOAP_FMAC2 soap_instantiate__ns1__SelSNTestForFruitResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelSNTestForFruitResponse * soap_new__ns1__SelSNTestForFruitResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelSNTestForFruitResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelSNTestForFruitResponse * soap_new_req__ns1__SelSNTestForFruitResponse(
	struct soap *soap)
{
	_ns1__SelSNTestForFruitResponse *_p = soap_new__ns1__SelSNTestForFruitResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelSNTestForFruitResponse * soap_new_set__ns1__SelSNTestForFruitResponse(
	struct soap *soap,
	std::string *SelSNTestForFruitResult)
{
	_ns1__SelSNTestForFruitResponse *_p = soap_new__ns1__SelSNTestForFruitResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelSNTestForFruitResponse::SelSNTestForFruitResult = SelSNTestForFruitResult;
	}
	return _p;
}

inline int soap_write__ns1__SelSNTestForFruitResponse(struct soap *soap, _ns1__SelSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__SelSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__SelSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelSNTestForFruitResponse * SOAP_FMAC4 soap_get__ns1__SelSNTestForFruitResponse(struct soap*, _ns1__SelSNTestForFruitResponse *, const char*, const char*);

inline int soap_read__ns1__SelSNTestForFruitResponse(struct soap *soap, _ns1__SelSNTestForFruitResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelSNTestForFruitResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__SelSNTestForFruitResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelSNTestForFruitResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelSNTestForFruitResponse(struct soap *soap, _ns1__SelSNTestForFruitResponse *p)
{
	if (soap_read__ns1__SelSNTestForFruitResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelSNTestForFruit_DEFINED
#define SOAP_TYPE__ns1__SelSNTestForFruit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelSNTestForFruit(struct soap*, const char*, int, const _ns1__SelSNTestForFruit *, const char*);
SOAP_FMAC3 _ns1__SelSNTestForFruit * SOAP_FMAC4 soap_in__ns1__SelSNTestForFruit(struct soap*, const char*, _ns1__SelSNTestForFruit *, const char*);
SOAP_FMAC1 _ns1__SelSNTestForFruit * SOAP_FMAC2 soap_instantiate__ns1__SelSNTestForFruit(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelSNTestForFruit * soap_new__ns1__SelSNTestForFruit(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelSNTestForFruit(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelSNTestForFruit * soap_new_req__ns1__SelSNTestForFruit(
	struct soap *soap)
{
	_ns1__SelSNTestForFruit *_p = soap_new__ns1__SelSNTestForFruit(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelSNTestForFruit * soap_new_set__ns1__SelSNTestForFruit(
	struct soap *soap,
	std::string *SN)
{
	_ns1__SelSNTestForFruit *_p = soap_new__ns1__SelSNTestForFruit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelSNTestForFruit::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__SelSNTestForFruit(struct soap *soap, _ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelSNTestForFruit(struct soap *soap, const char *URL, _ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelSNTestForFruit(struct soap *soap, const char *URL, _ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__SelSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelSNTestForFruit * SOAP_FMAC4 soap_get__ns1__SelSNTestForFruit(struct soap*, _ns1__SelSNTestForFruit *, const char*, const char*);

inline int soap_read__ns1__SelSNTestForFruit(struct soap *soap, _ns1__SelSNTestForFruit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelSNTestForFruit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelSNTestForFruit(struct soap *soap, const char *URL, _ns1__SelSNTestForFruit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelSNTestForFruit(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelSNTestForFruit(struct soap *soap, _ns1__SelSNTestForFruit *p)
{
	if (soap_read__ns1__SelSNTestForFruit(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNTestForFruitResponse_DEFINED
#define SOAP_TYPE__ns1__InsSNTestForFruitResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNTestForFruitResponse(struct soap*, const char*, int, const _ns1__InsSNTestForFruitResponse *, const char*);
SOAP_FMAC3 _ns1__InsSNTestForFruitResponse * SOAP_FMAC4 soap_in__ns1__InsSNTestForFruitResponse(struct soap*, const char*, _ns1__InsSNTestForFruitResponse *, const char*);
SOAP_FMAC1 _ns1__InsSNTestForFruitResponse * SOAP_FMAC2 soap_instantiate__ns1__InsSNTestForFruitResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNTestForFruitResponse * soap_new__ns1__InsSNTestForFruitResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNTestForFruitResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNTestForFruitResponse * soap_new_req__ns1__InsSNTestForFruitResponse(
	struct soap *soap)
{
	_ns1__InsSNTestForFruitResponse *_p = soap_new__ns1__InsSNTestForFruitResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNTestForFruitResponse * soap_new_set__ns1__InsSNTestForFruitResponse(
	struct soap *soap,
	std::string *InsSNTestForFruitResult)
{
	_ns1__InsSNTestForFruitResponse *_p = soap_new__ns1__InsSNTestForFruitResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNTestForFruitResponse::InsSNTestForFruitResult = InsSNTestForFruitResult;
	}
	return _p;
}

inline int soap_write__ns1__InsSNTestForFruitResponse(struct soap *soap, _ns1__InsSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__InsSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__InsSNTestForFruitResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruitResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruitResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNTestForFruitResponse * SOAP_FMAC4 soap_get__ns1__InsSNTestForFruitResponse(struct soap*, _ns1__InsSNTestForFruitResponse *, const char*, const char*);

inline int soap_read__ns1__InsSNTestForFruitResponse(struct soap *soap, _ns1__InsSNTestForFruitResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNTestForFruitResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNTestForFruitResponse(struct soap *soap, const char *URL, _ns1__InsSNTestForFruitResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNTestForFruitResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNTestForFruitResponse(struct soap *soap, _ns1__InsSNTestForFruitResponse *p)
{
	if (soap_read__ns1__InsSNTestForFruitResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNTestForFruit_DEFINED
#define SOAP_TYPE__ns1__InsSNTestForFruit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNTestForFruit(struct soap*, const char*, int, const _ns1__InsSNTestForFruit *, const char*);
SOAP_FMAC3 _ns1__InsSNTestForFruit * SOAP_FMAC4 soap_in__ns1__InsSNTestForFruit(struct soap*, const char*, _ns1__InsSNTestForFruit *, const char*);
SOAP_FMAC1 _ns1__InsSNTestForFruit * SOAP_FMAC2 soap_instantiate__ns1__InsSNTestForFruit(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNTestForFruit * soap_new__ns1__InsSNTestForFruit(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNTestForFruit(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNTestForFruit * soap_new_req__ns1__InsSNTestForFruit(
	struct soap *soap)
{
	_ns1__InsSNTestForFruit *_p = soap_new__ns1__InsSNTestForFruit(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNTestForFruit * soap_new_set__ns1__InsSNTestForFruit(
	struct soap *soap,
	std::string *SN,
	std::string *Machine,
	std::string *SiteId,
	std::string *TestResult)
{
	_ns1__InsSNTestForFruit *_p = soap_new__ns1__InsSNTestForFruit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNTestForFruit::SN = SN;
		_p->_ns1__InsSNTestForFruit::Machine = Machine;
		_p->_ns1__InsSNTestForFruit::SiteId = SiteId;
		_p->_ns1__InsSNTestForFruit::TestResult = TestResult;
	}
	return _p;
}

inline int soap_write__ns1__InsSNTestForFruit(struct soap *soap, _ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNTestForFruit(struct soap *soap, const char *URL, _ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNTestForFruit(struct soap *soap, const char *URL, _ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestForFruit", p->soap_type() == SOAP_TYPE__ns1__InsSNTestForFruit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNTestForFruit * SOAP_FMAC4 soap_get__ns1__InsSNTestForFruit(struct soap*, _ns1__InsSNTestForFruit *, const char*, const char*);

inline int soap_read__ns1__InsSNTestForFruit(struct soap *soap, _ns1__InsSNTestForFruit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNTestForFruit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNTestForFruit(struct soap *soap, const char *URL, _ns1__InsSNTestForFruit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNTestForFruit(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNTestForFruit(struct soap *soap, _ns1__InsSNTestForFruit *p)
{
	if (soap_read__ns1__InsSNTestForFruit(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetStationNumberForSNResponse_DEFINED
#define SOAP_TYPE__ns1__GetStationNumberForSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStationNumberForSNResponse(struct soap*, const char*, int, const _ns1__GetStationNumberForSNResponse *, const char*);
SOAP_FMAC3 _ns1__GetStationNumberForSNResponse * SOAP_FMAC4 soap_in__ns1__GetStationNumberForSNResponse(struct soap*, const char*, _ns1__GetStationNumberForSNResponse *, const char*);
SOAP_FMAC1 _ns1__GetStationNumberForSNResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStationNumberForSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStationNumberForSNResponse * soap_new__ns1__GetStationNumberForSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetStationNumberForSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetStationNumberForSNResponse * soap_new_req__ns1__GetStationNumberForSNResponse(
	struct soap *soap)
{
	_ns1__GetStationNumberForSNResponse *_p = soap_new__ns1__GetStationNumberForSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetStationNumberForSNResponse * soap_new_set__ns1__GetStationNumberForSNResponse(
	struct soap *soap,
	std::string *GetStationNumberForSNResult)
{
	_ns1__GetStationNumberForSNResponse *_p = soap_new__ns1__GetStationNumberForSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetStationNumberForSNResponse::GetStationNumberForSNResult = GetStationNumberForSNResult;
	}
	return _p;
}

inline int soap_write__ns1__GetStationNumberForSNResponse(struct soap *soap, _ns1__GetStationNumberForSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSNResponse", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetStationNumberForSNResponse(struct soap *soap, const char *URL, _ns1__GetStationNumberForSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSNResponse", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetStationNumberForSNResponse(struct soap *soap, const char *URL, _ns1__GetStationNumberForSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSNResponse", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetStationNumberForSNResponse * SOAP_FMAC4 soap_get__ns1__GetStationNumberForSNResponse(struct soap*, _ns1__GetStationNumberForSNResponse *, const char*, const char*);

inline int soap_read__ns1__GetStationNumberForSNResponse(struct soap *soap, _ns1__GetStationNumberForSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetStationNumberForSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetStationNumberForSNResponse(struct soap *soap, const char *URL, _ns1__GetStationNumberForSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetStationNumberForSNResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetStationNumberForSNResponse(struct soap *soap, _ns1__GetStationNumberForSNResponse *p)
{
	if (soap_read__ns1__GetStationNumberForSNResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetStationNumberForSN_DEFINED
#define SOAP_TYPE__ns1__GetStationNumberForSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStationNumberForSN(struct soap*, const char*, int, const _ns1__GetStationNumberForSN *, const char*);
SOAP_FMAC3 _ns1__GetStationNumberForSN * SOAP_FMAC4 soap_in__ns1__GetStationNumberForSN(struct soap*, const char*, _ns1__GetStationNumberForSN *, const char*);
SOAP_FMAC1 _ns1__GetStationNumberForSN * SOAP_FMAC2 soap_instantiate__ns1__GetStationNumberForSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStationNumberForSN * soap_new__ns1__GetStationNumberForSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetStationNumberForSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetStationNumberForSN * soap_new_req__ns1__GetStationNumberForSN(
	struct soap *soap)
{
	_ns1__GetStationNumberForSN *_p = soap_new__ns1__GetStationNumberForSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetStationNumberForSN * soap_new_set__ns1__GetStationNumberForSN(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetStationNumberForSN *_p = soap_new__ns1__GetStationNumberForSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetStationNumberForSN::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetStationNumberForSN(struct soap *soap, _ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSN", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetStationNumberForSN(struct soap *soap, const char *URL, _ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSN", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetStationNumberForSN(struct soap *soap, const char *URL, _ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStationNumberForSN", p->soap_type() == SOAP_TYPE__ns1__GetStationNumberForSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetStationNumberForSN * SOAP_FMAC4 soap_get__ns1__GetStationNumberForSN(struct soap*, _ns1__GetStationNumberForSN *, const char*, const char*);

inline int soap_read__ns1__GetStationNumberForSN(struct soap *soap, _ns1__GetStationNumberForSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetStationNumberForSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetStationNumberForSN(struct soap *soap, const char *URL, _ns1__GetStationNumberForSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetStationNumberForSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetStationNumberForSN(struct soap *soap, _ns1__GetStationNumberForSN *p)
{
	if (soap_read__ns1__GetStationNumberForSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTestValueResultResponse_DEFINED
#define SOAP_TYPE__ns1__GetTestValueResultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTestValueResultResponse(struct soap*, const char*, int, const _ns1__GetTestValueResultResponse *, const char*);
SOAP_FMAC3 _ns1__GetTestValueResultResponse * SOAP_FMAC4 soap_in__ns1__GetTestValueResultResponse(struct soap*, const char*, _ns1__GetTestValueResultResponse *, const char*);
SOAP_FMAC1 _ns1__GetTestValueResultResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTestValueResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTestValueResultResponse * soap_new__ns1__GetTestValueResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTestValueResultResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTestValueResultResponse * soap_new_req__ns1__GetTestValueResultResponse(
	struct soap *soap)
{
	_ns1__GetTestValueResultResponse *_p = soap_new__ns1__GetTestValueResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTestValueResultResponse * soap_new_set__ns1__GetTestValueResultResponse(
	struct soap *soap,
	std::string *GetTestValueResultResult)
{
	_ns1__GetTestValueResultResponse *_p = soap_new__ns1__GetTestValueResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTestValueResultResponse::GetTestValueResultResult = GetTestValueResultResult;
	}
	return _p;
}

inline int soap_write__ns1__GetTestValueResultResponse(struct soap *soap, _ns1__GetTestValueResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResultResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTestValueResultResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResultResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTestValueResultResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResultResponse", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTestValueResultResponse * SOAP_FMAC4 soap_get__ns1__GetTestValueResultResponse(struct soap*, _ns1__GetTestValueResultResponse *, const char*, const char*);

inline int soap_read__ns1__GetTestValueResultResponse(struct soap *soap, _ns1__GetTestValueResultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTestValueResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTestValueResultResponse(struct soap *soap, const char *URL, _ns1__GetTestValueResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTestValueResultResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTestValueResultResponse(struct soap *soap, _ns1__GetTestValueResultResponse *p)
{
	if (soap_read__ns1__GetTestValueResultResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTestValueResult_DEFINED
#define SOAP_TYPE__ns1__GetTestValueResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTestValueResult(struct soap*, const char*, int, const _ns1__GetTestValueResult *, const char*);
SOAP_FMAC3 _ns1__GetTestValueResult * SOAP_FMAC4 soap_in__ns1__GetTestValueResult(struct soap*, const char*, _ns1__GetTestValueResult *, const char*);
SOAP_FMAC1 _ns1__GetTestValueResult * SOAP_FMAC2 soap_instantiate__ns1__GetTestValueResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTestValueResult * soap_new__ns1__GetTestValueResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTestValueResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTestValueResult * soap_new_req__ns1__GetTestValueResult(
	struct soap *soap)
{
	_ns1__GetTestValueResult *_p = soap_new__ns1__GetTestValueResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTestValueResult * soap_new_set__ns1__GetTestValueResult(
	struct soap *soap,
	std::string *SPC,
	std::string *SN)
{
	_ns1__GetTestValueResult *_p = soap_new__ns1__GetTestValueResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTestValueResult::SPC = SPC;
		_p->_ns1__GetTestValueResult::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetTestValueResult(struct soap *soap, _ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResult", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTestValueResult(struct soap *soap, const char *URL, _ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResult", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTestValueResult(struct soap *soap, const char *URL, _ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTestValueResult", p->soap_type() == SOAP_TYPE__ns1__GetTestValueResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTestValueResult * SOAP_FMAC4 soap_get__ns1__GetTestValueResult(struct soap*, _ns1__GetTestValueResult *, const char*, const char*);

inline int soap_read__ns1__GetTestValueResult(struct soap *soap, _ns1__GetTestValueResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTestValueResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTestValueResult(struct soap *soap, const char *URL, _ns1__GetTestValueResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTestValueResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTestValueResult(struct soap *soap, _ns1__GetTestValueResult *p)
{
	if (soap_read__ns1__GetTestValueResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsCLScadaResponse_DEFINED
#define SOAP_TYPE__ns1__InsCLScadaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsCLScadaResponse(struct soap*, const char*, int, const _ns1__InsCLScadaResponse *, const char*);
SOAP_FMAC3 _ns1__InsCLScadaResponse * SOAP_FMAC4 soap_in__ns1__InsCLScadaResponse(struct soap*, const char*, _ns1__InsCLScadaResponse *, const char*);
SOAP_FMAC1 _ns1__InsCLScadaResponse * SOAP_FMAC2 soap_instantiate__ns1__InsCLScadaResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsCLScadaResponse * soap_new__ns1__InsCLScadaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsCLScadaResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsCLScadaResponse * soap_new_req__ns1__InsCLScadaResponse(
	struct soap *soap)
{
	_ns1__InsCLScadaResponse *_p = soap_new__ns1__InsCLScadaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsCLScadaResponse * soap_new_set__ns1__InsCLScadaResponse(
	struct soap *soap,
	std::string *InsCLScadaResult)
{
	_ns1__InsCLScadaResponse *_p = soap_new__ns1__InsCLScadaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsCLScadaResponse::InsCLScadaResult = InsCLScadaResult;
	}
	return _p;
}

inline int soap_write__ns1__InsCLScadaResponse(struct soap *soap, _ns1__InsCLScadaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScadaResponse", p->soap_type() == SOAP_TYPE__ns1__InsCLScadaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsCLScadaResponse(struct soap *soap, const char *URL, _ns1__InsCLScadaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScadaResponse", p->soap_type() == SOAP_TYPE__ns1__InsCLScadaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsCLScadaResponse(struct soap *soap, const char *URL, _ns1__InsCLScadaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScadaResponse", p->soap_type() == SOAP_TYPE__ns1__InsCLScadaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsCLScadaResponse * SOAP_FMAC4 soap_get__ns1__InsCLScadaResponse(struct soap*, _ns1__InsCLScadaResponse *, const char*, const char*);

inline int soap_read__ns1__InsCLScadaResponse(struct soap *soap, _ns1__InsCLScadaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsCLScadaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsCLScadaResponse(struct soap *soap, const char *URL, _ns1__InsCLScadaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsCLScadaResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsCLScadaResponse(struct soap *soap, _ns1__InsCLScadaResponse *p)
{
	if (soap_read__ns1__InsCLScadaResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsCLScada_DEFINED
#define SOAP_TYPE__ns1__InsCLScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsCLScada(struct soap*, const char*, int, const _ns1__InsCLScada *, const char*);
SOAP_FMAC3 _ns1__InsCLScada * SOAP_FMAC4 soap_in__ns1__InsCLScada(struct soap*, const char*, _ns1__InsCLScada *, const char*);
SOAP_FMAC1 _ns1__InsCLScada * SOAP_FMAC2 soap_instantiate__ns1__InsCLScada(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsCLScada * soap_new__ns1__InsCLScada(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsCLScada(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsCLScada * soap_new_req__ns1__InsCLScada(
	struct soap *soap)
{
	_ns1__InsCLScada *_p = soap_new__ns1__InsCLScada(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsCLScada * soap_new_set__ns1__InsCLScada(
	struct soap *soap,
	std::string *MachineNo,
	std::string *MachineStatus,
	std::string *MachineErr,
	std::string *VacuumBound,
	std::string *VacuumValue,
	std::string *TempBound,
	std::string *TempValue,
	std::string *PartSN,
	std::string *ShelfNo,
	std::string *ShelfSN,
	std::string *StartTime,
	std::string *EndTime,
	std::string *AgeTime,
	std::string *WaveBound,
	std::string *WaveValue,
	std::string *VoltBound,
	std::string *VoltValue,
	std::string *Ch1Value,
	std::string *Ch2Value,
	std::string *Ch3Value,
	std::string *Ch4Value)
{
	_ns1__InsCLScada *_p = soap_new__ns1__InsCLScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsCLScada::MachineNo = MachineNo;
		_p->_ns1__InsCLScada::MachineStatus = MachineStatus;
		_p->_ns1__InsCLScada::MachineErr = MachineErr;
		_p->_ns1__InsCLScada::VacuumBound = VacuumBound;
		_p->_ns1__InsCLScada::VacuumValue = VacuumValue;
		_p->_ns1__InsCLScada::TempBound = TempBound;
		_p->_ns1__InsCLScada::TempValue = TempValue;
		_p->_ns1__InsCLScada::PartSN = PartSN;
		_p->_ns1__InsCLScada::ShelfNo = ShelfNo;
		_p->_ns1__InsCLScada::ShelfSN = ShelfSN;
		_p->_ns1__InsCLScada::StartTime = StartTime;
		_p->_ns1__InsCLScada::EndTime = EndTime;
		_p->_ns1__InsCLScada::AgeTime = AgeTime;
		_p->_ns1__InsCLScada::WaveBound = WaveBound;
		_p->_ns1__InsCLScada::WaveValue = WaveValue;
		_p->_ns1__InsCLScada::VoltBound = VoltBound;
		_p->_ns1__InsCLScada::VoltValue = VoltValue;
		_p->_ns1__InsCLScada::Ch1Value = Ch1Value;
		_p->_ns1__InsCLScada::Ch2Value = Ch2Value;
		_p->_ns1__InsCLScada::Ch3Value = Ch3Value;
		_p->_ns1__InsCLScada::Ch4Value = Ch4Value;
	}
	return _p;
}

inline int soap_write__ns1__InsCLScada(struct soap *soap, _ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScada", p->soap_type() == SOAP_TYPE__ns1__InsCLScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsCLScada(struct soap *soap, const char *URL, _ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScada", p->soap_type() == SOAP_TYPE__ns1__InsCLScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsCLScada(struct soap *soap, const char *URL, _ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsCLScada", p->soap_type() == SOAP_TYPE__ns1__InsCLScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsCLScada * SOAP_FMAC4 soap_get__ns1__InsCLScada(struct soap*, _ns1__InsCLScada *, const char*, const char*);

inline int soap_read__ns1__InsCLScada(struct soap *soap, _ns1__InsCLScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsCLScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsCLScada(struct soap *soap, const char *URL, _ns1__InsCLScada *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsCLScada(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsCLScada(struct soap *soap, _ns1__InsCLScada *p)
{
	if (soap_read__ns1__InsCLScada(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsAoiMoResponse_DEFINED
#define SOAP_TYPE__ns1__InsAoiMoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsAoiMoResponse(struct soap*, const char*, int, const _ns1__InsAoiMoResponse *, const char*);
SOAP_FMAC3 _ns1__InsAoiMoResponse * SOAP_FMAC4 soap_in__ns1__InsAoiMoResponse(struct soap*, const char*, _ns1__InsAoiMoResponse *, const char*);
SOAP_FMAC1 _ns1__InsAoiMoResponse * SOAP_FMAC2 soap_instantiate__ns1__InsAoiMoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsAoiMoResponse * soap_new__ns1__InsAoiMoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsAoiMoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsAoiMoResponse * soap_new_req__ns1__InsAoiMoResponse(
	struct soap *soap)
{
	_ns1__InsAoiMoResponse *_p = soap_new__ns1__InsAoiMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsAoiMoResponse * soap_new_set__ns1__InsAoiMoResponse(
	struct soap *soap,
	std::string *InsAoiMoResult)
{
	_ns1__InsAoiMoResponse *_p = soap_new__ns1__InsAoiMoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsAoiMoResponse::InsAoiMoResult = InsAoiMoResult;
	}
	return _p;
}

inline int soap_write__ns1__InsAoiMoResponse(struct soap *soap, _ns1__InsAoiMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMoResponse", p->soap_type() == SOAP_TYPE__ns1__InsAoiMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsAoiMoResponse(struct soap *soap, const char *URL, _ns1__InsAoiMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMoResponse", p->soap_type() == SOAP_TYPE__ns1__InsAoiMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsAoiMoResponse(struct soap *soap, const char *URL, _ns1__InsAoiMoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMoResponse", p->soap_type() == SOAP_TYPE__ns1__InsAoiMoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsAoiMoResponse * SOAP_FMAC4 soap_get__ns1__InsAoiMoResponse(struct soap*, _ns1__InsAoiMoResponse *, const char*, const char*);

inline int soap_read__ns1__InsAoiMoResponse(struct soap *soap, _ns1__InsAoiMoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsAoiMoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsAoiMoResponse(struct soap *soap, const char *URL, _ns1__InsAoiMoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsAoiMoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsAoiMoResponse(struct soap *soap, _ns1__InsAoiMoResponse *p)
{
	if (soap_read__ns1__InsAoiMoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsAoiMo_DEFINED
#define SOAP_TYPE__ns1__InsAoiMo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsAoiMo(struct soap*, const char*, int, const _ns1__InsAoiMo *, const char*);
SOAP_FMAC3 _ns1__InsAoiMo * SOAP_FMAC4 soap_in__ns1__InsAoiMo(struct soap*, const char*, _ns1__InsAoiMo *, const char*);
SOAP_FMAC1 _ns1__InsAoiMo * SOAP_FMAC2 soap_instantiate__ns1__InsAoiMo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsAoiMo * soap_new__ns1__InsAoiMo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsAoiMo(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsAoiMo * soap_new_req__ns1__InsAoiMo(
	struct soap *soap)
{
	_ns1__InsAoiMo *_p = soap_new__ns1__InsAoiMo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsAoiMo * soap_new_set__ns1__InsAoiMo(
	struct soap *soap,
	std::string *MoNumber,
	std::string *SN,
	std::string *Station)
{
	_ns1__InsAoiMo *_p = soap_new__ns1__InsAoiMo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsAoiMo::MoNumber = MoNumber;
		_p->_ns1__InsAoiMo::SN = SN;
		_p->_ns1__InsAoiMo::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__InsAoiMo(struct soap *soap, _ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMo", p->soap_type() == SOAP_TYPE__ns1__InsAoiMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsAoiMo(struct soap *soap, const char *URL, _ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMo", p->soap_type() == SOAP_TYPE__ns1__InsAoiMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsAoiMo(struct soap *soap, const char *URL, _ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsAoiMo", p->soap_type() == SOAP_TYPE__ns1__InsAoiMo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsAoiMo * SOAP_FMAC4 soap_get__ns1__InsAoiMo(struct soap*, _ns1__InsAoiMo *, const char*, const char*);

inline int soap_read__ns1__InsAoiMo(struct soap *soap, _ns1__InsAoiMo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsAoiMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsAoiMo(struct soap *soap, const char *URL, _ns1__InsAoiMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsAoiMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsAoiMo(struct soap *soap, _ns1__InsAoiMo *p)
{
	if (soap_read__ns1__InsAoiMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkMoSNForAOIResponse_DEFINED
#define SOAP_TYPE__ns1__chkMoSNForAOIResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkMoSNForAOIResponse(struct soap*, const char*, int, const _ns1__chkMoSNForAOIResponse *, const char*);
SOAP_FMAC3 _ns1__chkMoSNForAOIResponse * SOAP_FMAC4 soap_in__ns1__chkMoSNForAOIResponse(struct soap*, const char*, _ns1__chkMoSNForAOIResponse *, const char*);
SOAP_FMAC1 _ns1__chkMoSNForAOIResponse * SOAP_FMAC2 soap_instantiate__ns1__chkMoSNForAOIResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkMoSNForAOIResponse * soap_new__ns1__chkMoSNForAOIResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkMoSNForAOIResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkMoSNForAOIResponse * soap_new_req__ns1__chkMoSNForAOIResponse(
	struct soap *soap)
{
	_ns1__chkMoSNForAOIResponse *_p = soap_new__ns1__chkMoSNForAOIResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkMoSNForAOIResponse * soap_new_set__ns1__chkMoSNForAOIResponse(
	struct soap *soap,
	std::string *chkMoSNForAOIResult)
{
	_ns1__chkMoSNForAOIResponse *_p = soap_new__ns1__chkMoSNForAOIResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkMoSNForAOIResponse::chkMoSNForAOIResult = chkMoSNForAOIResult;
	}
	return _p;
}

inline int soap_write__ns1__chkMoSNForAOIResponse(struct soap *soap, _ns1__chkMoSNForAOIResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOIResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOIResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkMoSNForAOIResponse(struct soap *soap, const char *URL, _ns1__chkMoSNForAOIResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOIResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOIResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkMoSNForAOIResponse(struct soap *soap, const char *URL, _ns1__chkMoSNForAOIResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOIResponse", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOIResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkMoSNForAOIResponse * SOAP_FMAC4 soap_get__ns1__chkMoSNForAOIResponse(struct soap*, _ns1__chkMoSNForAOIResponse *, const char*, const char*);

inline int soap_read__ns1__chkMoSNForAOIResponse(struct soap *soap, _ns1__chkMoSNForAOIResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkMoSNForAOIResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkMoSNForAOIResponse(struct soap *soap, const char *URL, _ns1__chkMoSNForAOIResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkMoSNForAOIResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkMoSNForAOIResponse(struct soap *soap, _ns1__chkMoSNForAOIResponse *p)
{
	if (soap_read__ns1__chkMoSNForAOIResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__chkMoSNForAOI_DEFINED
#define SOAP_TYPE__ns1__chkMoSNForAOI_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__chkMoSNForAOI(struct soap*, const char*, int, const _ns1__chkMoSNForAOI *, const char*);
SOAP_FMAC3 _ns1__chkMoSNForAOI * SOAP_FMAC4 soap_in__ns1__chkMoSNForAOI(struct soap*, const char*, _ns1__chkMoSNForAOI *, const char*);
SOAP_FMAC1 _ns1__chkMoSNForAOI * SOAP_FMAC2 soap_instantiate__ns1__chkMoSNForAOI(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__chkMoSNForAOI * soap_new__ns1__chkMoSNForAOI(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__chkMoSNForAOI(soap, n, NULL, NULL, NULL);
}

inline _ns1__chkMoSNForAOI * soap_new_req__ns1__chkMoSNForAOI(
	struct soap *soap)
{
	_ns1__chkMoSNForAOI *_p = soap_new__ns1__chkMoSNForAOI(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__chkMoSNForAOI * soap_new_set__ns1__chkMoSNForAOI(
	struct soap *soap,
	std::string *MoNumber,
	std::string *SN)
{
	_ns1__chkMoSNForAOI *_p = soap_new__ns1__chkMoSNForAOI(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__chkMoSNForAOI::MoNumber = MoNumber;
		_p->_ns1__chkMoSNForAOI::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__chkMoSNForAOI(struct soap *soap, _ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOI", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOI ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__chkMoSNForAOI(struct soap *soap, const char *URL, _ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOI", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOI ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__chkMoSNForAOI(struct soap *soap, const char *URL, _ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:chkMoSNForAOI", p->soap_type() == SOAP_TYPE__ns1__chkMoSNForAOI ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__chkMoSNForAOI * SOAP_FMAC4 soap_get__ns1__chkMoSNForAOI(struct soap*, _ns1__chkMoSNForAOI *, const char*, const char*);

inline int soap_read__ns1__chkMoSNForAOI(struct soap *soap, _ns1__chkMoSNForAOI *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__chkMoSNForAOI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__chkMoSNForAOI(struct soap *soap, const char *URL, _ns1__chkMoSNForAOI *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__chkMoSNForAOI(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__chkMoSNForAOI(struct soap *soap, _ns1__chkMoSNForAOI *p)
{
	if (soap_read__ns1__chkMoSNForAOI(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PunchOutResponse_DEFINED
#define SOAP_TYPE__ns1__PunchOutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PunchOutResponse(struct soap*, const char*, int, const _ns1__PunchOutResponse *, const char*);
SOAP_FMAC3 _ns1__PunchOutResponse * SOAP_FMAC4 soap_in__ns1__PunchOutResponse(struct soap*, const char*, _ns1__PunchOutResponse *, const char*);
SOAP_FMAC1 _ns1__PunchOutResponse * SOAP_FMAC2 soap_instantiate__ns1__PunchOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PunchOutResponse * soap_new__ns1__PunchOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PunchOutResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PunchOutResponse * soap_new_req__ns1__PunchOutResponse(
	struct soap *soap)
{
	_ns1__PunchOutResponse *_p = soap_new__ns1__PunchOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PunchOutResponse * soap_new_set__ns1__PunchOutResponse(
	struct soap *soap,
	std::string *PunchOutResult)
{
	_ns1__PunchOutResponse *_p = soap_new__ns1__PunchOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PunchOutResponse::PunchOutResult = PunchOutResult;
	}
	return _p;
}

inline int soap_write__ns1__PunchOutResponse(struct soap *soap, _ns1__PunchOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOutResponse", p->soap_type() == SOAP_TYPE__ns1__PunchOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PunchOutResponse(struct soap *soap, const char *URL, _ns1__PunchOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOutResponse", p->soap_type() == SOAP_TYPE__ns1__PunchOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PunchOutResponse(struct soap *soap, const char *URL, _ns1__PunchOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOutResponse", p->soap_type() == SOAP_TYPE__ns1__PunchOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PunchOutResponse * SOAP_FMAC4 soap_get__ns1__PunchOutResponse(struct soap*, _ns1__PunchOutResponse *, const char*, const char*);

inline int soap_read__ns1__PunchOutResponse(struct soap *soap, _ns1__PunchOutResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PunchOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PunchOutResponse(struct soap *soap, const char *URL, _ns1__PunchOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__PunchOutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__PunchOutResponse(struct soap *soap, _ns1__PunchOutResponse *p)
{
	if (soap_read__ns1__PunchOutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PunchOut_DEFINED
#define SOAP_TYPE__ns1__PunchOut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PunchOut(struct soap*, const char*, int, const _ns1__PunchOut *, const char*);
SOAP_FMAC3 _ns1__PunchOut * SOAP_FMAC4 soap_in__ns1__PunchOut(struct soap*, const char*, _ns1__PunchOut *, const char*);
SOAP_FMAC1 _ns1__PunchOut * SOAP_FMAC2 soap_instantiate__ns1__PunchOut(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PunchOut * soap_new__ns1__PunchOut(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PunchOut(soap, n, NULL, NULL, NULL);
}

inline _ns1__PunchOut * soap_new_req__ns1__PunchOut(
	struct soap *soap)
{
	_ns1__PunchOut *_p = soap_new__ns1__PunchOut(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PunchOut * soap_new_set__ns1__PunchOut(
	struct soap *soap,
	std::string *BasketSN,
	std::string *strUser)
{
	_ns1__PunchOut *_p = soap_new__ns1__PunchOut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PunchOut::BasketSN = BasketSN;
		_p->_ns1__PunchOut::strUser = strUser;
	}
	return _p;
}

inline int soap_write__ns1__PunchOut(struct soap *soap, _ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOut", p->soap_type() == SOAP_TYPE__ns1__PunchOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PunchOut(struct soap *soap, const char *URL, _ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOut", p->soap_type() == SOAP_TYPE__ns1__PunchOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PunchOut(struct soap *soap, const char *URL, _ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PunchOut", p->soap_type() == SOAP_TYPE__ns1__PunchOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PunchOut * SOAP_FMAC4 soap_get__ns1__PunchOut(struct soap*, _ns1__PunchOut *, const char*, const char*);

inline int soap_read__ns1__PunchOut(struct soap *soap, _ns1__PunchOut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PunchOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PunchOut(struct soap *soap, const char *URL, _ns1__PunchOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__PunchOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__PunchOut(struct soap *soap, _ns1__PunchOut *p)
{
	if (soap_read__ns1__PunchOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BasketLinkPunchResponse_DEFINED
#define SOAP_TYPE__ns1__BasketLinkPunchResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BasketLinkPunchResponse(struct soap*, const char*, int, const _ns1__BasketLinkPunchResponse *, const char*);
SOAP_FMAC3 _ns1__BasketLinkPunchResponse * SOAP_FMAC4 soap_in__ns1__BasketLinkPunchResponse(struct soap*, const char*, _ns1__BasketLinkPunchResponse *, const char*);
SOAP_FMAC1 _ns1__BasketLinkPunchResponse * SOAP_FMAC2 soap_instantiate__ns1__BasketLinkPunchResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BasketLinkPunchResponse * soap_new__ns1__BasketLinkPunchResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BasketLinkPunchResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BasketLinkPunchResponse * soap_new_req__ns1__BasketLinkPunchResponse(
	struct soap *soap)
{
	_ns1__BasketLinkPunchResponse *_p = soap_new__ns1__BasketLinkPunchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BasketLinkPunchResponse * soap_new_set__ns1__BasketLinkPunchResponse(
	struct soap *soap,
	std::string *BasketLinkPunchResult)
{
	_ns1__BasketLinkPunchResponse *_p = soap_new__ns1__BasketLinkPunchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BasketLinkPunchResponse::BasketLinkPunchResult = BasketLinkPunchResult;
	}
	return _p;
}

inline int soap_write__ns1__BasketLinkPunchResponse(struct soap *soap, _ns1__BasketLinkPunchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunchResponse", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BasketLinkPunchResponse(struct soap *soap, const char *URL, _ns1__BasketLinkPunchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunchResponse", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BasketLinkPunchResponse(struct soap *soap, const char *URL, _ns1__BasketLinkPunchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunchResponse", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BasketLinkPunchResponse * SOAP_FMAC4 soap_get__ns1__BasketLinkPunchResponse(struct soap*, _ns1__BasketLinkPunchResponse *, const char*, const char*);

inline int soap_read__ns1__BasketLinkPunchResponse(struct soap *soap, _ns1__BasketLinkPunchResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BasketLinkPunchResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BasketLinkPunchResponse(struct soap *soap, const char *URL, _ns1__BasketLinkPunchResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BasketLinkPunchResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BasketLinkPunchResponse(struct soap *soap, _ns1__BasketLinkPunchResponse *p)
{
	if (soap_read__ns1__BasketLinkPunchResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BasketLinkPunch_DEFINED
#define SOAP_TYPE__ns1__BasketLinkPunch_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BasketLinkPunch(struct soap*, const char*, int, const _ns1__BasketLinkPunch *, const char*);
SOAP_FMAC3 _ns1__BasketLinkPunch * SOAP_FMAC4 soap_in__ns1__BasketLinkPunch(struct soap*, const char*, _ns1__BasketLinkPunch *, const char*);
SOAP_FMAC1 _ns1__BasketLinkPunch * SOAP_FMAC2 soap_instantiate__ns1__BasketLinkPunch(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BasketLinkPunch * soap_new__ns1__BasketLinkPunch(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BasketLinkPunch(soap, n, NULL, NULL, NULL);
}

inline _ns1__BasketLinkPunch * soap_new_req__ns1__BasketLinkPunch(
	struct soap *soap)
{
	_ns1__BasketLinkPunch *_p = soap_new__ns1__BasketLinkPunch(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BasketLinkPunch * soap_new_set__ns1__BasketLinkPunch(
	struct soap *soap,
	std::string *BasketSN,
	std::string *PunchSN,
	std::string *Batch,
	std::string *strUser)
{
	_ns1__BasketLinkPunch *_p = soap_new__ns1__BasketLinkPunch(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BasketLinkPunch::BasketSN = BasketSN;
		_p->_ns1__BasketLinkPunch::PunchSN = PunchSN;
		_p->_ns1__BasketLinkPunch::Batch = Batch;
		_p->_ns1__BasketLinkPunch::strUser = strUser;
	}
	return _p;
}

inline int soap_write__ns1__BasketLinkPunch(struct soap *soap, _ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunch", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunch ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BasketLinkPunch(struct soap *soap, const char *URL, _ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunch", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunch ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BasketLinkPunch(struct soap *soap, const char *URL, _ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BasketLinkPunch", p->soap_type() == SOAP_TYPE__ns1__BasketLinkPunch ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BasketLinkPunch * SOAP_FMAC4 soap_get__ns1__BasketLinkPunch(struct soap*, _ns1__BasketLinkPunch *, const char*, const char*);

inline int soap_read__ns1__BasketLinkPunch(struct soap *soap, _ns1__BasketLinkPunch *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BasketLinkPunch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BasketLinkPunch(struct soap *soap, const char *URL, _ns1__BasketLinkPunch *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BasketLinkPunch(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BasketLinkPunch(struct soap *soap, _ns1__BasketLinkPunch *p)
{
	if (soap_read__ns1__BasketLinkPunch(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__HPSNLinkBasketResponse_DEFINED
#define SOAP_TYPE__ns1__HPSNLinkBasketResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HPSNLinkBasketResponse(struct soap*, const char*, int, const _ns1__HPSNLinkBasketResponse *, const char*);
SOAP_FMAC3 _ns1__HPSNLinkBasketResponse * SOAP_FMAC4 soap_in__ns1__HPSNLinkBasketResponse(struct soap*, const char*, _ns1__HPSNLinkBasketResponse *, const char*);
SOAP_FMAC1 _ns1__HPSNLinkBasketResponse * SOAP_FMAC2 soap_instantiate__ns1__HPSNLinkBasketResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HPSNLinkBasketResponse * soap_new__ns1__HPSNLinkBasketResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__HPSNLinkBasketResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__HPSNLinkBasketResponse * soap_new_req__ns1__HPSNLinkBasketResponse(
	struct soap *soap)
{
	_ns1__HPSNLinkBasketResponse *_p = soap_new__ns1__HPSNLinkBasketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__HPSNLinkBasketResponse * soap_new_set__ns1__HPSNLinkBasketResponse(
	struct soap *soap,
	std::string *HPSNLinkBasketResult)
{
	_ns1__HPSNLinkBasketResponse *_p = soap_new__ns1__HPSNLinkBasketResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__HPSNLinkBasketResponse::HPSNLinkBasketResult = HPSNLinkBasketResult;
	}
	return _p;
}

inline int soap_write__ns1__HPSNLinkBasketResponse(struct soap *soap, _ns1__HPSNLinkBasketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasketResponse", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__HPSNLinkBasketResponse(struct soap *soap, const char *URL, _ns1__HPSNLinkBasketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasketResponse", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__HPSNLinkBasketResponse(struct soap *soap, const char *URL, _ns1__HPSNLinkBasketResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasketResponse", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasketResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__HPSNLinkBasketResponse * SOAP_FMAC4 soap_get__ns1__HPSNLinkBasketResponse(struct soap*, _ns1__HPSNLinkBasketResponse *, const char*, const char*);

inline int soap_read__ns1__HPSNLinkBasketResponse(struct soap *soap, _ns1__HPSNLinkBasketResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__HPSNLinkBasketResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__HPSNLinkBasketResponse(struct soap *soap, const char *URL, _ns1__HPSNLinkBasketResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__HPSNLinkBasketResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__HPSNLinkBasketResponse(struct soap *soap, _ns1__HPSNLinkBasketResponse *p)
{
	if (soap_read__ns1__HPSNLinkBasketResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__HPSNLinkBasket_DEFINED
#define SOAP_TYPE__ns1__HPSNLinkBasket_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HPSNLinkBasket(struct soap*, const char*, int, const _ns1__HPSNLinkBasket *, const char*);
SOAP_FMAC3 _ns1__HPSNLinkBasket * SOAP_FMAC4 soap_in__ns1__HPSNLinkBasket(struct soap*, const char*, _ns1__HPSNLinkBasket *, const char*);
SOAP_FMAC1 _ns1__HPSNLinkBasket * SOAP_FMAC2 soap_instantiate__ns1__HPSNLinkBasket(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HPSNLinkBasket * soap_new__ns1__HPSNLinkBasket(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__HPSNLinkBasket(soap, n, NULL, NULL, NULL);
}

inline _ns1__HPSNLinkBasket * soap_new_req__ns1__HPSNLinkBasket(
	struct soap *soap)
{
	_ns1__HPSNLinkBasket *_p = soap_new__ns1__HPSNLinkBasket(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__HPSNLinkBasket * soap_new_set__ns1__HPSNLinkBasket(
	struct soap *soap,
	std::string *HPSN,
	std::string *BasketSN,
	std::string *strUser)
{
	_ns1__HPSNLinkBasket *_p = soap_new__ns1__HPSNLinkBasket(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__HPSNLinkBasket::HPSN = HPSN;
		_p->_ns1__HPSNLinkBasket::BasketSN = BasketSN;
		_p->_ns1__HPSNLinkBasket::strUser = strUser;
	}
	return _p;
}

inline int soap_write__ns1__HPSNLinkBasket(struct soap *soap, _ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasket", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__HPSNLinkBasket(struct soap *soap, const char *URL, _ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasket", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__HPSNLinkBasket(struct soap *soap, const char *URL, _ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HPSNLinkBasket", p->soap_type() == SOAP_TYPE__ns1__HPSNLinkBasket ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__HPSNLinkBasket * SOAP_FMAC4 soap_get__ns1__HPSNLinkBasket(struct soap*, _ns1__HPSNLinkBasket *, const char*, const char*);

inline int soap_read__ns1__HPSNLinkBasket(struct soap *soap, _ns1__HPSNLinkBasket *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__HPSNLinkBasket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__HPSNLinkBasket(struct soap *soap, const char *URL, _ns1__HPSNLinkBasket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__HPSNLinkBasket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__HPSNLinkBasket(struct soap *soap, _ns1__HPSNLinkBasket *p)
{
	if (soap_read__ns1__HPSNLinkBasket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAutoLineRecResponse_DEFINED
#define SOAP_TYPE__ns1__SetAutoLineRecResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAutoLineRecResponse(struct soap*, const char*, int, const _ns1__SetAutoLineRecResponse *, const char*);
SOAP_FMAC3 _ns1__SetAutoLineRecResponse * SOAP_FMAC4 soap_in__ns1__SetAutoLineRecResponse(struct soap*, const char*, _ns1__SetAutoLineRecResponse *, const char*);
SOAP_FMAC1 _ns1__SetAutoLineRecResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAutoLineRecResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAutoLineRecResponse * soap_new__ns1__SetAutoLineRecResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAutoLineRecResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAutoLineRecResponse * soap_new_req__ns1__SetAutoLineRecResponse(
	struct soap *soap)
{
	_ns1__SetAutoLineRecResponse *_p = soap_new__ns1__SetAutoLineRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetAutoLineRecResponse * soap_new_set__ns1__SetAutoLineRecResponse(
	struct soap *soap,
	std::string *SetAutoLineRecResult)
{
	_ns1__SetAutoLineRecResponse *_p = soap_new__ns1__SetAutoLineRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAutoLineRecResponse::SetAutoLineRecResult = SetAutoLineRecResult;
	}
	return _p;
}

inline int soap_write__ns1__SetAutoLineRecResponse(struct soap *soap, _ns1__SetAutoLineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetAutoLineRecResponse(struct soap *soap, const char *URL, _ns1__SetAutoLineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetAutoLineRecResponse(struct soap *soap, const char *URL, _ns1__SetAutoLineRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAutoLineRecResponse * SOAP_FMAC4 soap_get__ns1__SetAutoLineRecResponse(struct soap*, _ns1__SetAutoLineRecResponse *, const char*, const char*);

inline int soap_read__ns1__SetAutoLineRecResponse(struct soap *soap, _ns1__SetAutoLineRecResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAutoLineRecResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetAutoLineRecResponse(struct soap *soap, const char *URL, _ns1__SetAutoLineRecResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetAutoLineRecResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetAutoLineRecResponse(struct soap *soap, _ns1__SetAutoLineRecResponse *p)
{
	if (soap_read__ns1__SetAutoLineRecResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAutoLineRec_DEFINED
#define SOAP_TYPE__ns1__SetAutoLineRec_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAutoLineRec(struct soap*, const char*, int, const _ns1__SetAutoLineRec *, const char*);
SOAP_FMAC3 _ns1__SetAutoLineRec * SOAP_FMAC4 soap_in__ns1__SetAutoLineRec(struct soap*, const char*, _ns1__SetAutoLineRec *, const char*);
SOAP_FMAC1 _ns1__SetAutoLineRec * SOAP_FMAC2 soap_instantiate__ns1__SetAutoLineRec(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAutoLineRec * soap_new__ns1__SetAutoLineRec(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAutoLineRec(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAutoLineRec * soap_new_req__ns1__SetAutoLineRec(
	struct soap *soap)
{
	_ns1__SetAutoLineRec *_p = soap_new__ns1__SetAutoLineRec(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetAutoLineRec * soap_new_set__ns1__SetAutoLineRec(
	struct soap *soap,
	std::string *strUser,
	std::string *InData)
{
	_ns1__SetAutoLineRec *_p = soap_new__ns1__SetAutoLineRec(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAutoLineRec::strUser = strUser;
		_p->_ns1__SetAutoLineRec::InData = InData;
	}
	return _p;
}

inline int soap_write__ns1__SetAutoLineRec(struct soap *soap, _ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRec", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetAutoLineRec(struct soap *soap, const char *URL, _ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRec", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetAutoLineRec(struct soap *soap, const char *URL, _ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAutoLineRec", p->soap_type() == SOAP_TYPE__ns1__SetAutoLineRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAutoLineRec * SOAP_FMAC4 soap_get__ns1__SetAutoLineRec(struct soap*, _ns1__SetAutoLineRec *, const char*, const char*);

inline int soap_read__ns1__SetAutoLineRec(struct soap *soap, _ns1__SetAutoLineRec *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAutoLineRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetAutoLineRec(struct soap *soap, const char *URL, _ns1__SetAutoLineRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetAutoLineRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetAutoLineRec(struct soap *soap, _ns1__SetAutoLineRec *p)
{
	if (soap_read__ns1__SetAutoLineRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSNForLinkResponse_DEFINED
#define SOAP_TYPE__ns1__GetSNForLinkResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSNForLinkResponse(struct soap*, const char*, int, const _ns1__GetSNForLinkResponse *, const char*);
SOAP_FMAC3 _ns1__GetSNForLinkResponse * SOAP_FMAC4 soap_in__ns1__GetSNForLinkResponse(struct soap*, const char*, _ns1__GetSNForLinkResponse *, const char*);
SOAP_FMAC1 _ns1__GetSNForLinkResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSNForLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSNForLinkResponse * soap_new__ns1__GetSNForLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSNForLinkResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSNForLinkResponse * soap_new_req__ns1__GetSNForLinkResponse(
	struct soap *soap)
{
	_ns1__GetSNForLinkResponse *_p = soap_new__ns1__GetSNForLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSNForLinkResponse * soap_new_set__ns1__GetSNForLinkResponse(
	struct soap *soap,
	std::string *GetSNForLinkResult)
{
	_ns1__GetSNForLinkResponse *_p = soap_new__ns1__GetSNForLinkResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSNForLinkResponse::GetSNForLinkResult = GetSNForLinkResult;
	}
	return _p;
}

inline int soap_write__ns1__GetSNForLinkResponse(struct soap *soap, _ns1__GetSNForLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLinkResponse", p->soap_type() == SOAP_TYPE__ns1__GetSNForLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSNForLinkResponse(struct soap *soap, const char *URL, _ns1__GetSNForLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLinkResponse", p->soap_type() == SOAP_TYPE__ns1__GetSNForLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSNForLinkResponse(struct soap *soap, const char *URL, _ns1__GetSNForLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLinkResponse", p->soap_type() == SOAP_TYPE__ns1__GetSNForLinkResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSNForLinkResponse * SOAP_FMAC4 soap_get__ns1__GetSNForLinkResponse(struct soap*, _ns1__GetSNForLinkResponse *, const char*, const char*);

inline int soap_read__ns1__GetSNForLinkResponse(struct soap *soap, _ns1__GetSNForLinkResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSNForLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSNForLinkResponse(struct soap *soap, const char *URL, _ns1__GetSNForLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSNForLinkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSNForLinkResponse(struct soap *soap, _ns1__GetSNForLinkResponse *p)
{
	if (soap_read__ns1__GetSNForLinkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSNForLink_DEFINED
#define SOAP_TYPE__ns1__GetSNForLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSNForLink(struct soap*, const char*, int, const _ns1__GetSNForLink *, const char*);
SOAP_FMAC3 _ns1__GetSNForLink * SOAP_FMAC4 soap_in__ns1__GetSNForLink(struct soap*, const char*, _ns1__GetSNForLink *, const char*);
SOAP_FMAC1 _ns1__GetSNForLink * SOAP_FMAC2 soap_instantiate__ns1__GetSNForLink(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSNForLink * soap_new__ns1__GetSNForLink(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSNForLink(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSNForLink * soap_new_req__ns1__GetSNForLink(
	struct soap *soap)
{
	_ns1__GetSNForLink *_p = soap_new__ns1__GetSNForLink(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSNForLink * soap_new_set__ns1__GetSNForLink(
	struct soap *soap,
	std::string *LinkSN)
{
	_ns1__GetSNForLink *_p = soap_new__ns1__GetSNForLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSNForLink::LinkSN = LinkSN;
	}
	return _p;
}

inline int soap_write__ns1__GetSNForLink(struct soap *soap, _ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLink", p->soap_type() == SOAP_TYPE__ns1__GetSNForLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSNForLink(struct soap *soap, const char *URL, _ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLink", p->soap_type() == SOAP_TYPE__ns1__GetSNForLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSNForLink(struct soap *soap, const char *URL, _ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSNForLink", p->soap_type() == SOAP_TYPE__ns1__GetSNForLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSNForLink * SOAP_FMAC4 soap_get__ns1__GetSNForLink(struct soap*, _ns1__GetSNForLink *, const char*, const char*);

inline int soap_read__ns1__GetSNForLink(struct soap *soap, _ns1__GetSNForLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSNForLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSNForLink(struct soap *soap, const char *URL, _ns1__GetSNForLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSNForLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSNForLink(struct soap *soap, _ns1__GetSNForLink *p)
{
	if (soap_read__ns1__GetSNForLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetFlatnessFruitRecResponse_DEFINED
#define SOAP_TYPE__ns1__SetFlatnessFruitRecResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetFlatnessFruitRecResponse(struct soap*, const char*, int, const _ns1__SetFlatnessFruitRecResponse *, const char*);
SOAP_FMAC3 _ns1__SetFlatnessFruitRecResponse * SOAP_FMAC4 soap_in__ns1__SetFlatnessFruitRecResponse(struct soap*, const char*, _ns1__SetFlatnessFruitRecResponse *, const char*);
SOAP_FMAC1 _ns1__SetFlatnessFruitRecResponse * SOAP_FMAC2 soap_instantiate__ns1__SetFlatnessFruitRecResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetFlatnessFruitRecResponse * soap_new__ns1__SetFlatnessFruitRecResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetFlatnessFruitRecResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetFlatnessFruitRecResponse * soap_new_req__ns1__SetFlatnessFruitRecResponse(
	struct soap *soap)
{
	_ns1__SetFlatnessFruitRecResponse *_p = soap_new__ns1__SetFlatnessFruitRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetFlatnessFruitRecResponse * soap_new_set__ns1__SetFlatnessFruitRecResponse(
	struct soap *soap,
	std::string *SetFlatnessFruitRecResult)
{
	_ns1__SetFlatnessFruitRecResponse *_p = soap_new__ns1__SetFlatnessFruitRecResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetFlatnessFruitRecResponse::SetFlatnessFruitRecResult = SetFlatnessFruitRecResult;
	}
	return _p;
}

inline int soap_write__ns1__SetFlatnessFruitRecResponse(struct soap *soap, _ns1__SetFlatnessFruitRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetFlatnessFruitRecResponse(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetFlatnessFruitRecResponse(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRecResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRecResponse", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRecResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetFlatnessFruitRecResponse * SOAP_FMAC4 soap_get__ns1__SetFlatnessFruitRecResponse(struct soap*, _ns1__SetFlatnessFruitRecResponse *, const char*, const char*);

inline int soap_read__ns1__SetFlatnessFruitRecResponse(struct soap *soap, _ns1__SetFlatnessFruitRecResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetFlatnessFruitRecResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetFlatnessFruitRecResponse(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRecResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetFlatnessFruitRecResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetFlatnessFruitRecResponse(struct soap *soap, _ns1__SetFlatnessFruitRecResponse *p)
{
	if (soap_read__ns1__SetFlatnessFruitRecResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetFlatnessFruitRec_DEFINED
#define SOAP_TYPE__ns1__SetFlatnessFruitRec_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetFlatnessFruitRec(struct soap*, const char*, int, const _ns1__SetFlatnessFruitRec *, const char*);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec * SOAP_FMAC4 soap_in__ns1__SetFlatnessFruitRec(struct soap*, const char*, _ns1__SetFlatnessFruitRec *, const char*);
SOAP_FMAC1 _ns1__SetFlatnessFruitRec * SOAP_FMAC2 soap_instantiate__ns1__SetFlatnessFruitRec(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetFlatnessFruitRec * soap_new__ns1__SetFlatnessFruitRec(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetFlatnessFruitRec(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetFlatnessFruitRec * soap_new_req__ns1__SetFlatnessFruitRec(
	struct soap *soap)
{
	_ns1__SetFlatnessFruitRec *_p = soap_new__ns1__SetFlatnessFruitRec(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetFlatnessFruitRec * soap_new_set__ns1__SetFlatnessFruitRec(
	struct soap *soap,
	std::string *Sn,
	std::string *strUser,
	_ns1__SetFlatnessFruitRec_dt *dt)
{
	_ns1__SetFlatnessFruitRec *_p = soap_new__ns1__SetFlatnessFruitRec(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetFlatnessFruitRec::Sn = Sn;
		_p->_ns1__SetFlatnessFruitRec::strUser = strUser;
		_p->_ns1__SetFlatnessFruitRec::dt = dt;
	}
	return _p;
}

inline int soap_write__ns1__SetFlatnessFruitRec(struct soap *soap, _ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetFlatnessFruitRec", p->soap_type() == SOAP_TYPE__ns1__SetFlatnessFruitRec ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetFlatnessFruitRec * SOAP_FMAC4 soap_get__ns1__SetFlatnessFruitRec(struct soap*, _ns1__SetFlatnessFruitRec *, const char*, const char*);

inline int soap_read__ns1__SetFlatnessFruitRec(struct soap *soap, _ns1__SetFlatnessFruitRec *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetFlatnessFruitRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, _ns1__SetFlatnessFruitRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SetFlatnessFruitRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetFlatnessFruitRec(struct soap *soap, _ns1__SetFlatnessFruitRec *p)
{
	if (soap_read__ns1__SetFlatnessFruitRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationByMoForTestPadResponse_DEFINED
#define SOAP_TYPE__ns1__getStationByMoForTestPadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationByMoForTestPadResponse(struct soap*, const char*, int, const _ns1__getStationByMoForTestPadResponse *, const char*);
SOAP_FMAC3 _ns1__getStationByMoForTestPadResponse * SOAP_FMAC4 soap_in__ns1__getStationByMoForTestPadResponse(struct soap*, const char*, _ns1__getStationByMoForTestPadResponse *, const char*);
SOAP_FMAC1 _ns1__getStationByMoForTestPadResponse * SOAP_FMAC2 soap_instantiate__ns1__getStationByMoForTestPadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationByMoForTestPadResponse * soap_new__ns1__getStationByMoForTestPadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationByMoForTestPadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationByMoForTestPadResponse * soap_new_req__ns1__getStationByMoForTestPadResponse(
	struct soap *soap)
{
	_ns1__getStationByMoForTestPadResponse *_p = soap_new__ns1__getStationByMoForTestPadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationByMoForTestPadResponse * soap_new_set__ns1__getStationByMoForTestPadResponse(
	struct soap *soap,
	std::string *getStationByMoForTestPadResult)
{
	_ns1__getStationByMoForTestPadResponse *_p = soap_new__ns1__getStationByMoForTestPadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationByMoForTestPadResponse::getStationByMoForTestPadResult = getStationByMoForTestPadResult;
	}
	return _p;
}

inline int soap_write__ns1__getStationByMoForTestPadResponse(struct soap *soap, _ns1__getStationByMoForTestPadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPadResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationByMoForTestPadResponse(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPadResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationByMoForTestPadResponse(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPadResponse", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationByMoForTestPadResponse * SOAP_FMAC4 soap_get__ns1__getStationByMoForTestPadResponse(struct soap*, _ns1__getStationByMoForTestPadResponse *, const char*, const char*);

inline int soap_read__ns1__getStationByMoForTestPadResponse(struct soap *soap, _ns1__getStationByMoForTestPadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationByMoForTestPadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationByMoForTestPadResponse(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationByMoForTestPadResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationByMoForTestPadResponse(struct soap *soap, _ns1__getStationByMoForTestPadResponse *p)
{
	if (soap_read__ns1__getStationByMoForTestPadResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getStationByMoForTestPad_DEFINED
#define SOAP_TYPE__ns1__getStationByMoForTestPad_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getStationByMoForTestPad(struct soap*, const char*, int, const _ns1__getStationByMoForTestPad *, const char*);
SOAP_FMAC3 _ns1__getStationByMoForTestPad * SOAP_FMAC4 soap_in__ns1__getStationByMoForTestPad(struct soap*, const char*, _ns1__getStationByMoForTestPad *, const char*);
SOAP_FMAC1 _ns1__getStationByMoForTestPad * SOAP_FMAC2 soap_instantiate__ns1__getStationByMoForTestPad(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getStationByMoForTestPad * soap_new__ns1__getStationByMoForTestPad(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getStationByMoForTestPad(soap, n, NULL, NULL, NULL);
}

inline _ns1__getStationByMoForTestPad * soap_new_req__ns1__getStationByMoForTestPad(
	struct soap *soap)
{
	_ns1__getStationByMoForTestPad *_p = soap_new__ns1__getStationByMoForTestPad(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getStationByMoForTestPad * soap_new_set__ns1__getStationByMoForTestPad(
	struct soap *soap,
	std::string *MoNumber,
	std::string *strTest)
{
	_ns1__getStationByMoForTestPad *_p = soap_new__ns1__getStationByMoForTestPad(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getStationByMoForTestPad::MoNumber = MoNumber;
		_p->_ns1__getStationByMoForTestPad::strTest = strTest;
	}
	return _p;
}

inline int soap_write__ns1__getStationByMoForTestPad(struct soap *soap, _ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPad", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPad ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPad", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPad ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStationByMoForTestPad", p->soap_type() == SOAP_TYPE__ns1__getStationByMoForTestPad ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getStationByMoForTestPad * SOAP_FMAC4 soap_get__ns1__getStationByMoForTestPad(struct soap*, _ns1__getStationByMoForTestPad *, const char*, const char*);

inline int soap_read__ns1__getStationByMoForTestPad(struct soap *soap, _ns1__getStationByMoForTestPad *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getStationByMoForTestPad(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, _ns1__getStationByMoForTestPad *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getStationByMoForTestPad(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getStationByMoForTestPad(struct soap *soap, _ns1__getStationByMoForTestPad *p)
{
	if (soap_read__ns1__getStationByMoForTestPad(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingWeightResponse_DEFINED
#define SOAP_TYPE__ns1__GetShippingWeightResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingWeightResponse(struct soap*, const char*, int, const _ns1__GetShippingWeightResponse *, const char*);
SOAP_FMAC3 _ns1__GetShippingWeightResponse * SOAP_FMAC4 soap_in__ns1__GetShippingWeightResponse(struct soap*, const char*, _ns1__GetShippingWeightResponse *, const char*);
SOAP_FMAC1 _ns1__GetShippingWeightResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShippingWeightResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingWeightResponse * soap_new__ns1__GetShippingWeightResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingWeightResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingWeightResponse * soap_new_req__ns1__GetShippingWeightResponse(
	struct soap *soap)
{
	_ns1__GetShippingWeightResponse *_p = soap_new__ns1__GetShippingWeightResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingWeightResponse * soap_new_set__ns1__GetShippingWeightResponse(
	struct soap *soap,
	_ns1__GetShippingWeightResponse_GetShippingWeightResult *GetShippingWeightResult)
{
	_ns1__GetShippingWeightResponse *_p = soap_new__ns1__GetShippingWeightResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingWeightResponse::GetShippingWeightResult = GetShippingWeightResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingWeightResponse(struct soap *soap, _ns1__GetShippingWeightResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingWeightResponse(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingWeightResponse(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeightResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeightResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingWeightResponse * SOAP_FMAC4 soap_get__ns1__GetShippingWeightResponse(struct soap*, _ns1__GetShippingWeightResponse *, const char*, const char*);

inline int soap_read__ns1__GetShippingWeightResponse(struct soap *soap, _ns1__GetShippingWeightResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingWeightResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingWeightResponse(struct soap *soap, const char *URL, _ns1__GetShippingWeightResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingWeightResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingWeightResponse(struct soap *soap, _ns1__GetShippingWeightResponse *p)
{
	if (soap_read__ns1__GetShippingWeightResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingWeight_DEFINED
#define SOAP_TYPE__ns1__GetShippingWeight_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingWeight(struct soap*, const char*, int, const _ns1__GetShippingWeight *, const char*);
SOAP_FMAC3 _ns1__GetShippingWeight * SOAP_FMAC4 soap_in__ns1__GetShippingWeight(struct soap*, const char*, _ns1__GetShippingWeight *, const char*);
SOAP_FMAC1 _ns1__GetShippingWeight * SOAP_FMAC2 soap_instantiate__ns1__GetShippingWeight(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingWeight * soap_new__ns1__GetShippingWeight(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingWeight(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingWeight * soap_new_req__ns1__GetShippingWeight(
	struct soap *soap)
{
	_ns1__GetShippingWeight *_p = soap_new__ns1__GetShippingWeight(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingWeight * soap_new_set__ns1__GetShippingWeight(
	struct soap *soap,
	std::string *ListNo,
	std::string *CarNo)
{
	_ns1__GetShippingWeight *_p = soap_new__ns1__GetShippingWeight(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingWeight::ListNo = ListNo;
		_p->_ns1__GetShippingWeight::CarNo = CarNo;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingWeight(struct soap *soap, _ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeight", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeight ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingWeight(struct soap *soap, const char *URL, _ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeight", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeight ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingWeight(struct soap *soap, const char *URL, _ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingWeight", p->soap_type() == SOAP_TYPE__ns1__GetShippingWeight ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingWeight * SOAP_FMAC4 soap_get__ns1__GetShippingWeight(struct soap*, _ns1__GetShippingWeight *, const char*, const char*);

inline int soap_read__ns1__GetShippingWeight(struct soap *soap, _ns1__GetShippingWeight *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingWeight(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingWeight(struct soap *soap, const char *URL, _ns1__GetShippingWeight *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingWeight(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingWeight(struct soap *soap, _ns1__GetShippingWeight *p)
{
	if (soap_read__ns1__GetShippingWeight(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingForBerthResponse_DEFINED
#define SOAP_TYPE__ns1__GetShippingForBerthResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingForBerthResponse(struct soap*, const char*, int, const _ns1__GetShippingForBerthResponse *, const char*);
SOAP_FMAC3 _ns1__GetShippingForBerthResponse * SOAP_FMAC4 soap_in__ns1__GetShippingForBerthResponse(struct soap*, const char*, _ns1__GetShippingForBerthResponse *, const char*);
SOAP_FMAC1 _ns1__GetShippingForBerthResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShippingForBerthResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingForBerthResponse * soap_new__ns1__GetShippingForBerthResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingForBerthResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingForBerthResponse * soap_new_req__ns1__GetShippingForBerthResponse(
	struct soap *soap)
{
	_ns1__GetShippingForBerthResponse *_p = soap_new__ns1__GetShippingForBerthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingForBerthResponse * soap_new_set__ns1__GetShippingForBerthResponse(
	struct soap *soap,
	_ns1__GetShippingForBerthResponse_GetShippingForBerthResult *GetShippingForBerthResult)
{
	_ns1__GetShippingForBerthResponse *_p = soap_new__ns1__GetShippingForBerthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingForBerthResponse::GetShippingForBerthResult = GetShippingForBerthResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingForBerthResponse(struct soap *soap, _ns1__GetShippingForBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingForBerthResponse(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingForBerthResponse(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerthResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingForBerthResponse * SOAP_FMAC4 soap_get__ns1__GetShippingForBerthResponse(struct soap*, _ns1__GetShippingForBerthResponse *, const char*, const char*);

inline int soap_read__ns1__GetShippingForBerthResponse(struct soap *soap, _ns1__GetShippingForBerthResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingForBerthResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingForBerthResponse(struct soap *soap, const char *URL, _ns1__GetShippingForBerthResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingForBerthResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingForBerthResponse(struct soap *soap, _ns1__GetShippingForBerthResponse *p)
{
	if (soap_read__ns1__GetShippingForBerthResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingForBerth_DEFINED
#define SOAP_TYPE__ns1__GetShippingForBerth_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingForBerth(struct soap*, const char*, int, const _ns1__GetShippingForBerth *, const char*);
SOAP_FMAC3 _ns1__GetShippingForBerth * SOAP_FMAC4 soap_in__ns1__GetShippingForBerth(struct soap*, const char*, _ns1__GetShippingForBerth *, const char*);
SOAP_FMAC1 _ns1__GetShippingForBerth * SOAP_FMAC2 soap_instantiate__ns1__GetShippingForBerth(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingForBerth * soap_new__ns1__GetShippingForBerth(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingForBerth(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingForBerth * soap_new_req__ns1__GetShippingForBerth(
	struct soap *soap)
{
	_ns1__GetShippingForBerth *_p = soap_new__ns1__GetShippingForBerth(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingForBerth * soap_new_set__ns1__GetShippingForBerth(
	struct soap *soap,
	std::string *Berth,
	std::string *CarNo)
{
	_ns1__GetShippingForBerth *_p = soap_new__ns1__GetShippingForBerth(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingForBerth::Berth = Berth;
		_p->_ns1__GetShippingForBerth::CarNo = CarNo;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingForBerth(struct soap *soap, _ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerth", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingForBerth(struct soap *soap, const char *URL, _ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerth", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingForBerth(struct soap *soap, const char *URL, _ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingForBerth", p->soap_type() == SOAP_TYPE__ns1__GetShippingForBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingForBerth * SOAP_FMAC4 soap_get__ns1__GetShippingForBerth(struct soap*, _ns1__GetShippingForBerth *, const char*, const char*);

inline int soap_read__ns1__GetShippingForBerth(struct soap *soap, _ns1__GetShippingForBerth *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingForBerth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingForBerth(struct soap *soap, const char *URL, _ns1__GetShippingForBerth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingForBerth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingForBerth(struct soap *soap, _ns1__GetShippingForBerth *p)
{
	if (soap_read__ns1__GetShippingForBerth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsShippingBerthResponse_DEFINED
#define SOAP_TYPE__ns1__InsShippingBerthResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsShippingBerthResponse(struct soap*, const char*, int, const _ns1__InsShippingBerthResponse *, const char*);
SOAP_FMAC3 _ns1__InsShippingBerthResponse * SOAP_FMAC4 soap_in__ns1__InsShippingBerthResponse(struct soap*, const char*, _ns1__InsShippingBerthResponse *, const char*);
SOAP_FMAC1 _ns1__InsShippingBerthResponse * SOAP_FMAC2 soap_instantiate__ns1__InsShippingBerthResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsShippingBerthResponse * soap_new__ns1__InsShippingBerthResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsShippingBerthResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsShippingBerthResponse * soap_new_req__ns1__InsShippingBerthResponse(
	struct soap *soap)
{
	_ns1__InsShippingBerthResponse *_p = soap_new__ns1__InsShippingBerthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsShippingBerthResponse * soap_new_set__ns1__InsShippingBerthResponse(
	struct soap *soap,
	std::string *InsShippingBerthResult)
{
	_ns1__InsShippingBerthResponse *_p = soap_new__ns1__InsShippingBerthResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsShippingBerthResponse::InsShippingBerthResult = InsShippingBerthResult;
	}
	return _p;
}

inline int soap_write__ns1__InsShippingBerthResponse(struct soap *soap, _ns1__InsShippingBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerthResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsShippingBerthResponse(struct soap *soap, const char *URL, _ns1__InsShippingBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerthResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsShippingBerthResponse(struct soap *soap, const char *URL, _ns1__InsShippingBerthResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerthResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerthResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsShippingBerthResponse * SOAP_FMAC4 soap_get__ns1__InsShippingBerthResponse(struct soap*, _ns1__InsShippingBerthResponse *, const char*, const char*);

inline int soap_read__ns1__InsShippingBerthResponse(struct soap *soap, _ns1__InsShippingBerthResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsShippingBerthResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsShippingBerthResponse(struct soap *soap, const char *URL, _ns1__InsShippingBerthResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsShippingBerthResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsShippingBerthResponse(struct soap *soap, _ns1__InsShippingBerthResponse *p)
{
	if (soap_read__ns1__InsShippingBerthResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsShippingBerth_DEFINED
#define SOAP_TYPE__ns1__InsShippingBerth_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsShippingBerth(struct soap*, const char*, int, const _ns1__InsShippingBerth *, const char*);
SOAP_FMAC3 _ns1__InsShippingBerth * SOAP_FMAC4 soap_in__ns1__InsShippingBerth(struct soap*, const char*, _ns1__InsShippingBerth *, const char*);
SOAP_FMAC1 _ns1__InsShippingBerth * SOAP_FMAC2 soap_instantiate__ns1__InsShippingBerth(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsShippingBerth * soap_new__ns1__InsShippingBerth(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsShippingBerth(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsShippingBerth * soap_new_req__ns1__InsShippingBerth(
	struct soap *soap)
{
	_ns1__InsShippingBerth *_p = soap_new__ns1__InsShippingBerth(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsShippingBerth * soap_new_set__ns1__InsShippingBerth(
	struct soap *soap,
	std::string *ListNo,
	std::string *Berth,
	std::string *strTime)
{
	_ns1__InsShippingBerth *_p = soap_new__ns1__InsShippingBerth(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsShippingBerth::ListNo = ListNo;
		_p->_ns1__InsShippingBerth::Berth = Berth;
		_p->_ns1__InsShippingBerth::strTime = strTime;
	}
	return _p;
}

inline int soap_write__ns1__InsShippingBerth(struct soap *soap, _ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerth", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsShippingBerth(struct soap *soap, const char *URL, _ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerth", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsShippingBerth(struct soap *soap, const char *URL, _ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingBerth", p->soap_type() == SOAP_TYPE__ns1__InsShippingBerth ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsShippingBerth * SOAP_FMAC4 soap_get__ns1__InsShippingBerth(struct soap*, _ns1__InsShippingBerth *, const char*, const char*);

inline int soap_read__ns1__InsShippingBerth(struct soap *soap, _ns1__InsShippingBerth *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsShippingBerth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsShippingBerth(struct soap *soap, const char *URL, _ns1__InsShippingBerth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsShippingBerth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsShippingBerth(struct soap *soap, _ns1__InsShippingBerth *p)
{
	if (soap_read__ns1__InsShippingBerth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsShippingPalleResponse_DEFINED
#define SOAP_TYPE__ns1__InsShippingPalleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsShippingPalleResponse(struct soap*, const char*, int, const _ns1__InsShippingPalleResponse *, const char*);
SOAP_FMAC3 _ns1__InsShippingPalleResponse * SOAP_FMAC4 soap_in__ns1__InsShippingPalleResponse(struct soap*, const char*, _ns1__InsShippingPalleResponse *, const char*);
SOAP_FMAC1 _ns1__InsShippingPalleResponse * SOAP_FMAC2 soap_instantiate__ns1__InsShippingPalleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsShippingPalleResponse * soap_new__ns1__InsShippingPalleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsShippingPalleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsShippingPalleResponse * soap_new_req__ns1__InsShippingPalleResponse(
	struct soap *soap)
{
	_ns1__InsShippingPalleResponse *_p = soap_new__ns1__InsShippingPalleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsShippingPalleResponse * soap_new_set__ns1__InsShippingPalleResponse(
	struct soap *soap,
	std::string *InsShippingPalleResult)
{
	_ns1__InsShippingPalleResponse *_p = soap_new__ns1__InsShippingPalleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsShippingPalleResponse::InsShippingPalleResult = InsShippingPalleResult;
	}
	return _p;
}

inline int soap_write__ns1__InsShippingPalleResponse(struct soap *soap, _ns1__InsShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsShippingPalleResponse(struct soap *soap, const char *URL, _ns1__InsShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsShippingPalleResponse(struct soap *soap, const char *URL, _ns1__InsShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsShippingPalleResponse * SOAP_FMAC4 soap_get__ns1__InsShippingPalleResponse(struct soap*, _ns1__InsShippingPalleResponse *, const char*, const char*);

inline int soap_read__ns1__InsShippingPalleResponse(struct soap *soap, _ns1__InsShippingPalleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsShippingPalleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsShippingPalleResponse(struct soap *soap, const char *URL, _ns1__InsShippingPalleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsShippingPalleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsShippingPalleResponse(struct soap *soap, _ns1__InsShippingPalleResponse *p)
{
	if (soap_read__ns1__InsShippingPalleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsShippingPalle_DEFINED
#define SOAP_TYPE__ns1__InsShippingPalle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsShippingPalle(struct soap*, const char*, int, const _ns1__InsShippingPalle *, const char*);
SOAP_FMAC3 _ns1__InsShippingPalle * SOAP_FMAC4 soap_in__ns1__InsShippingPalle(struct soap*, const char*, _ns1__InsShippingPalle *, const char*);
SOAP_FMAC1 _ns1__InsShippingPalle * SOAP_FMAC2 soap_instantiate__ns1__InsShippingPalle(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsShippingPalle * soap_new__ns1__InsShippingPalle(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsShippingPalle(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsShippingPalle * soap_new_req__ns1__InsShippingPalle(
	struct soap *soap)
{
	_ns1__InsShippingPalle *_p = soap_new__ns1__InsShippingPalle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsShippingPalle * soap_new_set__ns1__InsShippingPalle(
	struct soap *soap,
	std::string *ListNo,
	std::string *CarNo,
	std::string *PalQty,
	std::string *strUser)
{
	_ns1__InsShippingPalle *_p = soap_new__ns1__InsShippingPalle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsShippingPalle::ListNo = ListNo;
		_p->_ns1__InsShippingPalle::CarNo = CarNo;
		_p->_ns1__InsShippingPalle::PalQty = PalQty;
		_p->_ns1__InsShippingPalle::strUser = strUser;
	}
	return _p;
}

inline int soap_write__ns1__InsShippingPalle(struct soap *soap, _ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalle", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsShippingPalle(struct soap *soap, const char *URL, _ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalle", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsShippingPalle(struct soap *soap, const char *URL, _ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsShippingPalle", p->soap_type() == SOAP_TYPE__ns1__InsShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsShippingPalle * SOAP_FMAC4 soap_get__ns1__InsShippingPalle(struct soap*, _ns1__InsShippingPalle *, const char*, const char*);

inline int soap_read__ns1__InsShippingPalle(struct soap *soap, _ns1__InsShippingPalle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsShippingPalle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsShippingPalle(struct soap *soap, const char *URL, _ns1__InsShippingPalle *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsShippingPalle(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsShippingPalle(struct soap *soap, _ns1__InsShippingPalle *p)
{
	if (soap_read__ns1__InsShippingPalle(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingPalleResponse_DEFINED
#define SOAP_TYPE__ns1__GetShippingPalleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingPalleResponse(struct soap*, const char*, int, const _ns1__GetShippingPalleResponse *, const char*);
SOAP_FMAC3 _ns1__GetShippingPalleResponse * SOAP_FMAC4 soap_in__ns1__GetShippingPalleResponse(struct soap*, const char*, _ns1__GetShippingPalleResponse *, const char*);
SOAP_FMAC1 _ns1__GetShippingPalleResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShippingPalleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingPalleResponse * soap_new__ns1__GetShippingPalleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingPalleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingPalleResponse * soap_new_req__ns1__GetShippingPalleResponse(
	struct soap *soap)
{
	_ns1__GetShippingPalleResponse *_p = soap_new__ns1__GetShippingPalleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingPalleResponse * soap_new_set__ns1__GetShippingPalleResponse(
	struct soap *soap,
	std::string *GetShippingPalleResult)
{
	_ns1__GetShippingPalleResponse *_p = soap_new__ns1__GetShippingPalleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingPalleResponse::GetShippingPalleResult = GetShippingPalleResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingPalleResponse(struct soap *soap, _ns1__GetShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingPalleResponse(struct soap *soap, const char *URL, _ns1__GetShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingPalleResponse(struct soap *soap, const char *URL, _ns1__GetShippingPalleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalleResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingPalleResponse * SOAP_FMAC4 soap_get__ns1__GetShippingPalleResponse(struct soap*, _ns1__GetShippingPalleResponse *, const char*, const char*);

inline int soap_read__ns1__GetShippingPalleResponse(struct soap *soap, _ns1__GetShippingPalleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingPalleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingPalleResponse(struct soap *soap, const char *URL, _ns1__GetShippingPalleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingPalleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingPalleResponse(struct soap *soap, _ns1__GetShippingPalleResponse *p)
{
	if (soap_read__ns1__GetShippingPalleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingPalle_DEFINED
#define SOAP_TYPE__ns1__GetShippingPalle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingPalle(struct soap*, const char*, int, const _ns1__GetShippingPalle *, const char*);
SOAP_FMAC3 _ns1__GetShippingPalle * SOAP_FMAC4 soap_in__ns1__GetShippingPalle(struct soap*, const char*, _ns1__GetShippingPalle *, const char*);
SOAP_FMAC1 _ns1__GetShippingPalle * SOAP_FMAC2 soap_instantiate__ns1__GetShippingPalle(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingPalle * soap_new__ns1__GetShippingPalle(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingPalle(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingPalle * soap_new_req__ns1__GetShippingPalle(
	struct soap *soap)
{
	_ns1__GetShippingPalle *_p = soap_new__ns1__GetShippingPalle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingPalle * soap_new_set__ns1__GetShippingPalle(
	struct soap *soap,
	std::string *ListNo,
	std::string *CarNo)
{
	_ns1__GetShippingPalle *_p = soap_new__ns1__GetShippingPalle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingPalle::ListNo = ListNo;
		_p->_ns1__GetShippingPalle::CarNo = CarNo;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingPalle(struct soap *soap, _ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalle", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingPalle(struct soap *soap, const char *URL, _ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalle", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingPalle(struct soap *soap, const char *URL, _ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingPalle", p->soap_type() == SOAP_TYPE__ns1__GetShippingPalle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingPalle * SOAP_FMAC4 soap_get__ns1__GetShippingPalle(struct soap*, _ns1__GetShippingPalle *, const char*, const char*);

inline int soap_read__ns1__GetShippingPalle(struct soap *soap, _ns1__GetShippingPalle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingPalle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingPalle(struct soap *soap, const char *URL, _ns1__GetShippingPalle *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingPalle(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingPalle(struct soap *soap, _ns1__GetShippingPalle *p)
{
	if (soap_read__ns1__GetShippingPalle(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdShippingResponse_DEFINED
#define SOAP_TYPE__ns1__UpdShippingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdShippingResponse(struct soap*, const char*, int, const _ns1__UpdShippingResponse *, const char*);
SOAP_FMAC3 _ns1__UpdShippingResponse * SOAP_FMAC4 soap_in__ns1__UpdShippingResponse(struct soap*, const char*, _ns1__UpdShippingResponse *, const char*);
SOAP_FMAC1 _ns1__UpdShippingResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdShippingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdShippingResponse * soap_new__ns1__UpdShippingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdShippingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdShippingResponse * soap_new_req__ns1__UpdShippingResponse(
	struct soap *soap)
{
	_ns1__UpdShippingResponse *_p = soap_new__ns1__UpdShippingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdShippingResponse * soap_new_set__ns1__UpdShippingResponse(
	struct soap *soap,
	std::string *UpdShippingResult)
{
	_ns1__UpdShippingResponse *_p = soap_new__ns1__UpdShippingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdShippingResponse::UpdShippingResult = UpdShippingResult;
	}
	return _p;
}

inline int soap_write__ns1__UpdShippingResponse(struct soap *soap, _ns1__UpdShippingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShippingResponse", p->soap_type() == SOAP_TYPE__ns1__UpdShippingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdShippingResponse(struct soap *soap, const char *URL, _ns1__UpdShippingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShippingResponse", p->soap_type() == SOAP_TYPE__ns1__UpdShippingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdShippingResponse(struct soap *soap, const char *URL, _ns1__UpdShippingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShippingResponse", p->soap_type() == SOAP_TYPE__ns1__UpdShippingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdShippingResponse * SOAP_FMAC4 soap_get__ns1__UpdShippingResponse(struct soap*, _ns1__UpdShippingResponse *, const char*, const char*);

inline int soap_read__ns1__UpdShippingResponse(struct soap *soap, _ns1__UpdShippingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdShippingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdShippingResponse(struct soap *soap, const char *URL, _ns1__UpdShippingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdShippingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdShippingResponse(struct soap *soap, _ns1__UpdShippingResponse *p)
{
	if (soap_read__ns1__UpdShippingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdShipping_DEFINED
#define SOAP_TYPE__ns1__UpdShipping_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdShipping(struct soap*, const char*, int, const _ns1__UpdShipping *, const char*);
SOAP_FMAC3 _ns1__UpdShipping * SOAP_FMAC4 soap_in__ns1__UpdShipping(struct soap*, const char*, _ns1__UpdShipping *, const char*);
SOAP_FMAC1 _ns1__UpdShipping * SOAP_FMAC2 soap_instantiate__ns1__UpdShipping(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdShipping * soap_new__ns1__UpdShipping(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdShipping(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdShipping * soap_new_req__ns1__UpdShipping(
	struct soap *soap)
{
	_ns1__UpdShipping *_p = soap_new__ns1__UpdShipping(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdShipping * soap_new_set__ns1__UpdShipping(
	struct soap *soap,
	std::string *ListNo,
	std::string *CarNo,
	std::string *RealTime)
{
	_ns1__UpdShipping *_p = soap_new__ns1__UpdShipping(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdShipping::ListNo = ListNo;
		_p->_ns1__UpdShipping::CarNo = CarNo;
		_p->_ns1__UpdShipping::RealTime = RealTime;
	}
	return _p;
}

inline int soap_write__ns1__UpdShipping(struct soap *soap, _ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShipping", p->soap_type() == SOAP_TYPE__ns1__UpdShipping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdShipping(struct soap *soap, const char *URL, _ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShipping", p->soap_type() == SOAP_TYPE__ns1__UpdShipping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdShipping(struct soap *soap, const char *URL, _ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdShipping", p->soap_type() == SOAP_TYPE__ns1__UpdShipping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdShipping * SOAP_FMAC4 soap_get__ns1__UpdShipping(struct soap*, _ns1__UpdShipping *, const char*, const char*);

inline int soap_read__ns1__UpdShipping(struct soap *soap, _ns1__UpdShipping *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdShipping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdShipping(struct soap *soap, const char *URL, _ns1__UpdShipping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdShipping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdShipping(struct soap *soap, _ns1__UpdShipping *p)
{
	if (soap_read__ns1__UpdShipping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingBerthListResponse_DEFINED
#define SOAP_TYPE__ns1__GetShippingBerthListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingBerthListResponse(struct soap*, const char*, int, const _ns1__GetShippingBerthListResponse *, const char*);
SOAP_FMAC3 _ns1__GetShippingBerthListResponse * SOAP_FMAC4 soap_in__ns1__GetShippingBerthListResponse(struct soap*, const char*, _ns1__GetShippingBerthListResponse *, const char*);
SOAP_FMAC1 _ns1__GetShippingBerthListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShippingBerthListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingBerthListResponse * soap_new__ns1__GetShippingBerthListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingBerthListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingBerthListResponse * soap_new_req__ns1__GetShippingBerthListResponse(
	struct soap *soap)
{
	_ns1__GetShippingBerthListResponse *_p = soap_new__ns1__GetShippingBerthListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingBerthListResponse * soap_new_set__ns1__GetShippingBerthListResponse(
	struct soap *soap,
	_ns1__GetShippingBerthListResponse_GetShippingBerthListResult *GetShippingBerthListResult)
{
	_ns1__GetShippingBerthListResponse *_p = soap_new__ns1__GetShippingBerthListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingBerthListResponse::GetShippingBerthListResult = GetShippingBerthListResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingBerthListResponse(struct soap *soap, _ns1__GetShippingBerthListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingBerthListResponse(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingBerthListResponse(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingBerthListResponse * SOAP_FMAC4 soap_get__ns1__GetShippingBerthListResponse(struct soap*, _ns1__GetShippingBerthListResponse *, const char*, const char*);

inline int soap_read__ns1__GetShippingBerthListResponse(struct soap *soap, _ns1__GetShippingBerthListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingBerthListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingBerthListResponse(struct soap *soap, const char *URL, _ns1__GetShippingBerthListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingBerthListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingBerthListResponse(struct soap *soap, _ns1__GetShippingBerthListResponse *p)
{
	if (soap_read__ns1__GetShippingBerthListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingBerthList_DEFINED
#define SOAP_TYPE__ns1__GetShippingBerthList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingBerthList(struct soap*, const char*, int, const _ns1__GetShippingBerthList *, const char*);
SOAP_FMAC3 _ns1__GetShippingBerthList * SOAP_FMAC4 soap_in__ns1__GetShippingBerthList(struct soap*, const char*, _ns1__GetShippingBerthList *, const char*);
SOAP_FMAC1 _ns1__GetShippingBerthList * SOAP_FMAC2 soap_instantiate__ns1__GetShippingBerthList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingBerthList * soap_new__ns1__GetShippingBerthList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingBerthList(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingBerthList * soap_new_req__ns1__GetShippingBerthList(
	struct soap *soap)
{
	_ns1__GetShippingBerthList *_p = soap_new__ns1__GetShippingBerthList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingBerthList * soap_new_set__ns1__GetShippingBerthList(
	struct soap *soap,
	std::string *strBerth,
	std::string *strCar)
{
	_ns1__GetShippingBerthList *_p = soap_new__ns1__GetShippingBerthList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingBerthList::strBerth = strBerth;
		_p->_ns1__GetShippingBerthList::strCar = strCar;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingBerthList(struct soap *soap, _ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthList", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingBerthList(struct soap *soap, const char *URL, _ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthList", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingBerthList(struct soap *soap, const char *URL, _ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingBerthList", p->soap_type() == SOAP_TYPE__ns1__GetShippingBerthList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingBerthList * SOAP_FMAC4 soap_get__ns1__GetShippingBerthList(struct soap*, _ns1__GetShippingBerthList *, const char*, const char*);

inline int soap_read__ns1__GetShippingBerthList(struct soap *soap, _ns1__GetShippingBerthList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingBerthList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingBerthList(struct soap *soap, const char *URL, _ns1__GetShippingBerthList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingBerthList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingBerthList(struct soap *soap, _ns1__GetShippingBerthList *p)
{
	if (soap_read__ns1__GetShippingBerthList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingListResponse_DEFINED
#define SOAP_TYPE__ns1__GetShippingListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingListResponse(struct soap*, const char*, int, const _ns1__GetShippingListResponse *, const char*);
SOAP_FMAC3 _ns1__GetShippingListResponse * SOAP_FMAC4 soap_in__ns1__GetShippingListResponse(struct soap*, const char*, _ns1__GetShippingListResponse *, const char*);
SOAP_FMAC1 _ns1__GetShippingListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShippingListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingListResponse * soap_new__ns1__GetShippingListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingListResponse * soap_new_req__ns1__GetShippingListResponse(
	struct soap *soap)
{
	_ns1__GetShippingListResponse *_p = soap_new__ns1__GetShippingListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingListResponse * soap_new_set__ns1__GetShippingListResponse(
	struct soap *soap,
	_ns1__GetShippingListResponse_GetShippingListResult *GetShippingListResult)
{
	_ns1__GetShippingListResponse *_p = soap_new__ns1__GetShippingListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingListResponse::GetShippingListResult = GetShippingListResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingListResponse(struct soap *soap, _ns1__GetShippingListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingListResponse(struct soap *soap, const char *URL, _ns1__GetShippingListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingListResponse(struct soap *soap, const char *URL, _ns1__GetShippingListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingListResponse", p->soap_type() == SOAP_TYPE__ns1__GetShippingListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingListResponse * SOAP_FMAC4 soap_get__ns1__GetShippingListResponse(struct soap*, _ns1__GetShippingListResponse *, const char*, const char*);

inline int soap_read__ns1__GetShippingListResponse(struct soap *soap, _ns1__GetShippingListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingListResponse(struct soap *soap, const char *URL, _ns1__GetShippingListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingListResponse(struct soap *soap, _ns1__GetShippingListResponse *p)
{
	if (soap_read__ns1__GetShippingListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShippingList_DEFINED
#define SOAP_TYPE__ns1__GetShippingList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShippingList(struct soap*, const char*, int, const _ns1__GetShippingList *, const char*);
SOAP_FMAC3 _ns1__GetShippingList * SOAP_FMAC4 soap_in__ns1__GetShippingList(struct soap*, const char*, _ns1__GetShippingList *, const char*);
SOAP_FMAC1 _ns1__GetShippingList * SOAP_FMAC2 soap_instantiate__ns1__GetShippingList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShippingList * soap_new__ns1__GetShippingList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShippingList(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShippingList * soap_new_req__ns1__GetShippingList(
	struct soap *soap)
{
	_ns1__GetShippingList *_p = soap_new__ns1__GetShippingList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShippingList * soap_new_set__ns1__GetShippingList(
	struct soap *soap,
	std::string *strDate)
{
	_ns1__GetShippingList *_p = soap_new__ns1__GetShippingList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShippingList::strDate = strDate;
	}
	return _p;
}

inline int soap_write__ns1__GetShippingList(struct soap *soap, _ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingList", p->soap_type() == SOAP_TYPE__ns1__GetShippingList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShippingList(struct soap *soap, const char *URL, _ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingList", p->soap_type() == SOAP_TYPE__ns1__GetShippingList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShippingList(struct soap *soap, const char *URL, _ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShippingList", p->soap_type() == SOAP_TYPE__ns1__GetShippingList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShippingList * SOAP_FMAC4 soap_get__ns1__GetShippingList(struct soap*, _ns1__GetShippingList *, const char*, const char*);

inline int soap_read__ns1__GetShippingList(struct soap *soap, _ns1__GetShippingList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShippingList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShippingList(struct soap *soap, const char *URL, _ns1__GetShippingList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShippingList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShippingList(struct soap *soap, _ns1__GetShippingList *p)
{
	if (soap_read__ns1__GetShippingList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLotLinkForAppleResponse_DEFINED
#define SOAP_TYPE__ns1__doLotLinkForAppleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLotLinkForAppleResponse(struct soap*, const char*, int, const _ns1__doLotLinkForAppleResponse *, const char*);
SOAP_FMAC3 _ns1__doLotLinkForAppleResponse * SOAP_FMAC4 soap_in__ns1__doLotLinkForAppleResponse(struct soap*, const char*, _ns1__doLotLinkForAppleResponse *, const char*);
SOAP_FMAC1 _ns1__doLotLinkForAppleResponse * SOAP_FMAC2 soap_instantiate__ns1__doLotLinkForAppleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLotLinkForAppleResponse * soap_new__ns1__doLotLinkForAppleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLotLinkForAppleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLotLinkForAppleResponse * soap_new_req__ns1__doLotLinkForAppleResponse(
	struct soap *soap)
{
	_ns1__doLotLinkForAppleResponse *_p = soap_new__ns1__doLotLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLotLinkForAppleResponse * soap_new_set__ns1__doLotLinkForAppleResponse(
	struct soap *soap,
	std::string *doLotLinkForAppleResult)
{
	_ns1__doLotLinkForAppleResponse *_p = soap_new__ns1__doLotLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLotLinkForAppleResponse::doLotLinkForAppleResult = doLotLinkForAppleResult;
	}
	return _p;
}

inline int soap_write__ns1__doLotLinkForAppleResponse(struct soap *soap, _ns1__doLotLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLotLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doLotLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLotLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doLotLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLotLinkForAppleResponse * SOAP_FMAC4 soap_get__ns1__doLotLinkForAppleResponse(struct soap*, _ns1__doLotLinkForAppleResponse *, const char*, const char*);

inline int soap_read__ns1__doLotLinkForAppleResponse(struct soap *soap, _ns1__doLotLinkForAppleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLotLinkForAppleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLotLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doLotLinkForAppleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLotLinkForAppleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLotLinkForAppleResponse(struct soap *soap, _ns1__doLotLinkForAppleResponse *p)
{
	if (soap_read__ns1__doLotLinkForAppleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doLotLinkForApple_DEFINED
#define SOAP_TYPE__ns1__doLotLinkForApple_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doLotLinkForApple(struct soap*, const char*, int, const _ns1__doLotLinkForApple *, const char*);
SOAP_FMAC3 _ns1__doLotLinkForApple * SOAP_FMAC4 soap_in__ns1__doLotLinkForApple(struct soap*, const char*, _ns1__doLotLinkForApple *, const char*);
SOAP_FMAC1 _ns1__doLotLinkForApple * SOAP_FMAC2 soap_instantiate__ns1__doLotLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doLotLinkForApple * soap_new__ns1__doLotLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doLotLinkForApple(soap, n, NULL, NULL, NULL);
}

inline _ns1__doLotLinkForApple * soap_new_req__ns1__doLotLinkForApple(
	struct soap *soap)
{
	_ns1__doLotLinkForApple *_p = soap_new__ns1__doLotLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doLotLinkForApple * soap_new_set__ns1__doLotLinkForApple(
	struct soap *soap,
	_ns1__doLotLinkForApple_assyDt *assyDt,
	std::string *empNO,
	std::string *SN,
	std::string *Station)
{
	_ns1__doLotLinkForApple *_p = soap_new__ns1__doLotLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doLotLinkForApple::assyDt = assyDt;
		_p->_ns1__doLotLinkForApple::empNO = empNO;
		_p->_ns1__doLotLinkForApple::SN = SN;
		_p->_ns1__doLotLinkForApple::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__doLotLinkForApple(struct soap *soap, _ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doLotLinkForApple(struct soap *soap, const char *URL, _ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doLotLinkForApple(struct soap *soap, const char *URL, _ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doLotLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doLotLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doLotLinkForApple * SOAP_FMAC4 soap_get__ns1__doLotLinkForApple(struct soap*, _ns1__doLotLinkForApple *, const char*, const char*);

inline int soap_read__ns1__doLotLinkForApple(struct soap *soap, _ns1__doLotLinkForApple *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doLotLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doLotLinkForApple(struct soap *soap, const char *URL, _ns1__doLotLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doLotLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doLotLinkForApple(struct soap *soap, _ns1__doLotLinkForApple *p)
{
	if (soap_read__ns1__doLotLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLotLinkCountResponse_DEFINED
#define SOAP_TYPE__ns1__GetLotLinkCountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLotLinkCountResponse(struct soap*, const char*, int, const _ns1__GetLotLinkCountResponse *, const char*);
SOAP_FMAC3 _ns1__GetLotLinkCountResponse * SOAP_FMAC4 soap_in__ns1__GetLotLinkCountResponse(struct soap*, const char*, _ns1__GetLotLinkCountResponse *, const char*);
SOAP_FMAC1 _ns1__GetLotLinkCountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLotLinkCountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLotLinkCountResponse * soap_new__ns1__GetLotLinkCountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLotLinkCountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLotLinkCountResponse * soap_new_req__ns1__GetLotLinkCountResponse(
	struct soap *soap,
	int GetLotLinkCountResult)
{
	_ns1__GetLotLinkCountResponse *_p = soap_new__ns1__GetLotLinkCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLotLinkCountResponse::GetLotLinkCountResult = GetLotLinkCountResult;
	}
	return _p;
}

inline _ns1__GetLotLinkCountResponse * soap_new_set__ns1__GetLotLinkCountResponse(
	struct soap *soap,
	int GetLotLinkCountResult)
{
	_ns1__GetLotLinkCountResponse *_p = soap_new__ns1__GetLotLinkCountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLotLinkCountResponse::GetLotLinkCountResult = GetLotLinkCountResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLotLinkCountResponse(struct soap *soap, _ns1__GetLotLinkCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLotLinkCountResponse(struct soap *soap, const char *URL, _ns1__GetLotLinkCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLotLinkCountResponse(struct soap *soap, const char *URL, _ns1__GetLotLinkCountResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCountResponse", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCountResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLotLinkCountResponse * SOAP_FMAC4 soap_get__ns1__GetLotLinkCountResponse(struct soap*, _ns1__GetLotLinkCountResponse *, const char*, const char*);

inline int soap_read__ns1__GetLotLinkCountResponse(struct soap *soap, _ns1__GetLotLinkCountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLotLinkCountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLotLinkCountResponse(struct soap *soap, const char *URL, _ns1__GetLotLinkCountResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLotLinkCountResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLotLinkCountResponse(struct soap *soap, _ns1__GetLotLinkCountResponse *p)
{
	if (soap_read__ns1__GetLotLinkCountResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLotLinkCount_DEFINED
#define SOAP_TYPE__ns1__GetLotLinkCount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLotLinkCount(struct soap*, const char*, int, const _ns1__GetLotLinkCount *, const char*);
SOAP_FMAC3 _ns1__GetLotLinkCount * SOAP_FMAC4 soap_in__ns1__GetLotLinkCount(struct soap*, const char*, _ns1__GetLotLinkCount *, const char*);
SOAP_FMAC1 _ns1__GetLotLinkCount * SOAP_FMAC2 soap_instantiate__ns1__GetLotLinkCount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLotLinkCount * soap_new__ns1__GetLotLinkCount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetLotLinkCount(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLotLinkCount * soap_new_req__ns1__GetLotLinkCount(
	struct soap *soap)
{
	_ns1__GetLotLinkCount *_p = soap_new__ns1__GetLotLinkCount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetLotLinkCount * soap_new_set__ns1__GetLotLinkCount(
	struct soap *soap,
	std::string *OUT_USCOREPN_USCORESN)
{
	_ns1__GetLotLinkCount *_p = soap_new__ns1__GetLotLinkCount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLotLinkCount::OUT_USCOREPN_USCORESN = OUT_USCOREPN_USCORESN;
	}
	return _p;
}

inline int soap_write__ns1__GetLotLinkCount(struct soap *soap, _ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCount", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLotLinkCount(struct soap *soap, const char *URL, _ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCount", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLotLinkCount(struct soap *soap, const char *URL, _ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLotLinkCount", p->soap_type() == SOAP_TYPE__ns1__GetLotLinkCount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLotLinkCount * SOAP_FMAC4 soap_get__ns1__GetLotLinkCount(struct soap*, _ns1__GetLotLinkCount *, const char*, const char*);

inline int soap_read__ns1__GetLotLinkCount(struct soap *soap, _ns1__GetLotLinkCount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLotLinkCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLotLinkCount(struct soap *soap, const char *URL, _ns1__GetLotLinkCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetLotLinkCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetLotLinkCount(struct soap *soap, _ns1__GetLotLinkCount *p)
{
	if (soap_read__ns1__GetLotLinkCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFruitSNCheckResponse_DEFINED
#define SOAP_TYPE__ns1__GetFruitSNCheckResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFruitSNCheckResponse(struct soap*, const char*, int, const _ns1__GetFruitSNCheckResponse *, const char*);
SOAP_FMAC3 _ns1__GetFruitSNCheckResponse * SOAP_FMAC4 soap_in__ns1__GetFruitSNCheckResponse(struct soap*, const char*, _ns1__GetFruitSNCheckResponse *, const char*);
SOAP_FMAC1 _ns1__GetFruitSNCheckResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFruitSNCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFruitSNCheckResponse * soap_new__ns1__GetFruitSNCheckResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFruitSNCheckResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFruitSNCheckResponse * soap_new_req__ns1__GetFruitSNCheckResponse(
	struct soap *soap)
{
	_ns1__GetFruitSNCheckResponse *_p = soap_new__ns1__GetFruitSNCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFruitSNCheckResponse * soap_new_set__ns1__GetFruitSNCheckResponse(
	struct soap *soap,
	std::string *GetFruitSNCheckResult)
{
	_ns1__GetFruitSNCheckResponse *_p = soap_new__ns1__GetFruitSNCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFruitSNCheckResponse::GetFruitSNCheckResult = GetFruitSNCheckResult;
	}
	return _p;
}

inline int soap_write__ns1__GetFruitSNCheckResponse(struct soap *soap, _ns1__GetFruitSNCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheckResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFruitSNCheckResponse(struct soap *soap, const char *URL, _ns1__GetFruitSNCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheckResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFruitSNCheckResponse(struct soap *soap, const char *URL, _ns1__GetFruitSNCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheckResponse", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFruitSNCheckResponse * SOAP_FMAC4 soap_get__ns1__GetFruitSNCheckResponse(struct soap*, _ns1__GetFruitSNCheckResponse *, const char*, const char*);

inline int soap_read__ns1__GetFruitSNCheckResponse(struct soap *soap, _ns1__GetFruitSNCheckResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFruitSNCheckResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFruitSNCheckResponse(struct soap *soap, const char *URL, _ns1__GetFruitSNCheckResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFruitSNCheckResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFruitSNCheckResponse(struct soap *soap, _ns1__GetFruitSNCheckResponse *p)
{
	if (soap_read__ns1__GetFruitSNCheckResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFruitSNCheck_DEFINED
#define SOAP_TYPE__ns1__GetFruitSNCheck_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFruitSNCheck(struct soap*, const char*, int, const _ns1__GetFruitSNCheck *, const char*);
SOAP_FMAC3 _ns1__GetFruitSNCheck * SOAP_FMAC4 soap_in__ns1__GetFruitSNCheck(struct soap*, const char*, _ns1__GetFruitSNCheck *, const char*);
SOAP_FMAC1 _ns1__GetFruitSNCheck * SOAP_FMAC2 soap_instantiate__ns1__GetFruitSNCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFruitSNCheck * soap_new__ns1__GetFruitSNCheck(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFruitSNCheck(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFruitSNCheck * soap_new_req__ns1__GetFruitSNCheck(
	struct soap *soap)
{
	_ns1__GetFruitSNCheck *_p = soap_new__ns1__GetFruitSNCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFruitSNCheck * soap_new_set__ns1__GetFruitSNCheck(
	struct soap *soap,
	std::string *SN,
	std::string *Station)
{
	_ns1__GetFruitSNCheck *_p = soap_new__ns1__GetFruitSNCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFruitSNCheck::SN = SN;
		_p->_ns1__GetFruitSNCheck::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__GetFruitSNCheck(struct soap *soap, _ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheck", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFruitSNCheck(struct soap *soap, const char *URL, _ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheck", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFruitSNCheck(struct soap *soap, const char *URL, _ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFruitSNCheck", p->soap_type() == SOAP_TYPE__ns1__GetFruitSNCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFruitSNCheck * SOAP_FMAC4 soap_get__ns1__GetFruitSNCheck(struct soap*, _ns1__GetFruitSNCheck *, const char*, const char*);

inline int soap_read__ns1__GetFruitSNCheck(struct soap *soap, _ns1__GetFruitSNCheck *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFruitSNCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFruitSNCheck(struct soap *soap, const char *URL, _ns1__GetFruitSNCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFruitSNCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFruitSNCheck(struct soap *soap, _ns1__GetFruitSNCheck *p)
{
	if (soap_read__ns1__GetFruitSNCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetObeNWResponse_DEFINED
#define SOAP_TYPE__ns1__GetObeNWResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetObeNWResponse(struct soap*, const char*, int, const _ns1__GetObeNWResponse *, const char*);
SOAP_FMAC3 _ns1__GetObeNWResponse * SOAP_FMAC4 soap_in__ns1__GetObeNWResponse(struct soap*, const char*, _ns1__GetObeNWResponse *, const char*);
SOAP_FMAC1 _ns1__GetObeNWResponse * SOAP_FMAC2 soap_instantiate__ns1__GetObeNWResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetObeNWResponse * soap_new__ns1__GetObeNWResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetObeNWResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetObeNWResponse * soap_new_req__ns1__GetObeNWResponse(
	struct soap *soap)
{
	_ns1__GetObeNWResponse *_p = soap_new__ns1__GetObeNWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetObeNWResponse * soap_new_set__ns1__GetObeNWResponse(
	struct soap *soap,
	std::string *GetObeNWResult)
{
	_ns1__GetObeNWResponse *_p = soap_new__ns1__GetObeNWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetObeNWResponse::GetObeNWResult = GetObeNWResult;
	}
	return _p;
}

inline int soap_write__ns1__GetObeNWResponse(struct soap *soap, _ns1__GetObeNWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNWResponse", p->soap_type() == SOAP_TYPE__ns1__GetObeNWResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetObeNWResponse(struct soap *soap, const char *URL, _ns1__GetObeNWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNWResponse", p->soap_type() == SOAP_TYPE__ns1__GetObeNWResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetObeNWResponse(struct soap *soap, const char *URL, _ns1__GetObeNWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNWResponse", p->soap_type() == SOAP_TYPE__ns1__GetObeNWResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetObeNWResponse * SOAP_FMAC4 soap_get__ns1__GetObeNWResponse(struct soap*, _ns1__GetObeNWResponse *, const char*, const char*);

inline int soap_read__ns1__GetObeNWResponse(struct soap *soap, _ns1__GetObeNWResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetObeNWResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetObeNWResponse(struct soap *soap, const char *URL, _ns1__GetObeNWResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetObeNWResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetObeNWResponse(struct soap *soap, _ns1__GetObeNWResponse *p)
{
	if (soap_read__ns1__GetObeNWResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetObeNW_DEFINED
#define SOAP_TYPE__ns1__GetObeNW_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetObeNW(struct soap*, const char*, int, const _ns1__GetObeNW *, const char*);
SOAP_FMAC3 _ns1__GetObeNW * SOAP_FMAC4 soap_in__ns1__GetObeNW(struct soap*, const char*, _ns1__GetObeNW *, const char*);
SOAP_FMAC1 _ns1__GetObeNW * SOAP_FMAC2 soap_instantiate__ns1__GetObeNW(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetObeNW * soap_new__ns1__GetObeNW(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetObeNW(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetObeNW * soap_new_req__ns1__GetObeNW(
	struct soap *soap)
{
	_ns1__GetObeNW *_p = soap_new__ns1__GetObeNW(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetObeNW * soap_new_set__ns1__GetObeNW(
	struct soap *soap,
	std::string *SN)
{
	_ns1__GetObeNW *_p = soap_new__ns1__GetObeNW(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetObeNW::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetObeNW(struct soap *soap, _ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNW", p->soap_type() == SOAP_TYPE__ns1__GetObeNW ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetObeNW(struct soap *soap, const char *URL, _ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNW", p->soap_type() == SOAP_TYPE__ns1__GetObeNW ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetObeNW(struct soap *soap, const char *URL, _ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetObeNW", p->soap_type() == SOAP_TYPE__ns1__GetObeNW ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetObeNW * SOAP_FMAC4 soap_get__ns1__GetObeNW(struct soap*, _ns1__GetObeNW *, const char*, const char*);

inline int soap_read__ns1__GetObeNW(struct soap *soap, _ns1__GetObeNW *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetObeNW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetObeNW(struct soap *soap, const char *URL, _ns1__GetObeNW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetObeNW(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetObeNW(struct soap *soap, _ns1__GetObeNW *p)
{
	if (soap_read__ns1__GetObeNW(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doSnLinkForAppleResponse_DEFINED
#define SOAP_TYPE__ns1__doSnLinkForAppleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doSnLinkForAppleResponse(struct soap*, const char*, int, const _ns1__doSnLinkForAppleResponse *, const char*);
SOAP_FMAC3 _ns1__doSnLinkForAppleResponse * SOAP_FMAC4 soap_in__ns1__doSnLinkForAppleResponse(struct soap*, const char*, _ns1__doSnLinkForAppleResponse *, const char*);
SOAP_FMAC1 _ns1__doSnLinkForAppleResponse * SOAP_FMAC2 soap_instantiate__ns1__doSnLinkForAppleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doSnLinkForAppleResponse * soap_new__ns1__doSnLinkForAppleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doSnLinkForAppleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__doSnLinkForAppleResponse * soap_new_req__ns1__doSnLinkForAppleResponse(
	struct soap *soap)
{
	_ns1__doSnLinkForAppleResponse *_p = soap_new__ns1__doSnLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doSnLinkForAppleResponse * soap_new_set__ns1__doSnLinkForAppleResponse(
	struct soap *soap,
	std::string *doSnLinkForAppleResult)
{
	_ns1__doSnLinkForAppleResponse *_p = soap_new__ns1__doSnLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doSnLinkForAppleResponse::doSnLinkForAppleResult = doSnLinkForAppleResult;
	}
	return _p;
}

inline int soap_write__ns1__doSnLinkForAppleResponse(struct soap *soap, _ns1__doSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doSnLinkForAppleResponse * SOAP_FMAC4 soap_get__ns1__doSnLinkForAppleResponse(struct soap*, _ns1__doSnLinkForAppleResponse *, const char*, const char*);

inline int soap_read__ns1__doSnLinkForAppleResponse(struct soap *soap, _ns1__doSnLinkForAppleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doSnLinkForAppleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__doSnLinkForAppleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doSnLinkForAppleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doSnLinkForAppleResponse(struct soap *soap, _ns1__doSnLinkForAppleResponse *p)
{
	if (soap_read__ns1__doSnLinkForAppleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__doSnLinkForApple_DEFINED
#define SOAP_TYPE__ns1__doSnLinkForApple_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__doSnLinkForApple(struct soap*, const char*, int, const _ns1__doSnLinkForApple *, const char*);
SOAP_FMAC3 _ns1__doSnLinkForApple * SOAP_FMAC4 soap_in__ns1__doSnLinkForApple(struct soap*, const char*, _ns1__doSnLinkForApple *, const char*);
SOAP_FMAC1 _ns1__doSnLinkForApple * SOAP_FMAC2 soap_instantiate__ns1__doSnLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__doSnLinkForApple * soap_new__ns1__doSnLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__doSnLinkForApple(soap, n, NULL, NULL, NULL);
}

inline _ns1__doSnLinkForApple * soap_new_req__ns1__doSnLinkForApple(
	struct soap *soap)
{
	_ns1__doSnLinkForApple *_p = soap_new__ns1__doSnLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__doSnLinkForApple * soap_new_set__ns1__doSnLinkForApple(
	struct soap *soap,
	_ns1__doSnLinkForApple_assyDt *assyDt,
	std::string *empNO,
	std::string *SN,
	std::string *Station)
{
	_ns1__doSnLinkForApple *_p = soap_new__ns1__doSnLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__doSnLinkForApple::assyDt = assyDt;
		_p->_ns1__doSnLinkForApple::empNO = empNO;
		_p->_ns1__doSnLinkForApple::SN = SN;
		_p->_ns1__doSnLinkForApple::Station = Station;
	}
	return _p;
}

inline int soap_write__ns1__doSnLinkForApple(struct soap *soap, _ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__doSnLinkForApple(struct soap *soap, const char *URL, _ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__doSnLinkForApple(struct soap *soap, const char *URL, _ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:doSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__doSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__doSnLinkForApple * SOAP_FMAC4 soap_get__ns1__doSnLinkForApple(struct soap*, _ns1__doSnLinkForApple *, const char*, const char*);

inline int soap_read__ns1__doSnLinkForApple(struct soap *soap, _ns1__doSnLinkForApple *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__doSnLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__doSnLinkForApple(struct soap *soap, const char *URL, _ns1__doSnLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__doSnLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__doSnLinkForApple(struct soap *soap, _ns1__doSnLinkForApple *p)
{
	if (soap_read__ns1__doSnLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnLinkForAppleResponse_DEFINED
#define SOAP_TYPE__ns1__ChkSnLinkForAppleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnLinkForAppleResponse(struct soap*, const char*, int, const _ns1__ChkSnLinkForAppleResponse *, const char*);
SOAP_FMAC3 _ns1__ChkSnLinkForAppleResponse * SOAP_FMAC4 soap_in__ns1__ChkSnLinkForAppleResponse(struct soap*, const char*, _ns1__ChkSnLinkForAppleResponse *, const char*);
SOAP_FMAC1 _ns1__ChkSnLinkForAppleResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkSnLinkForAppleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnLinkForAppleResponse * soap_new__ns1__ChkSnLinkForAppleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnLinkForAppleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnLinkForAppleResponse * soap_new_req__ns1__ChkSnLinkForAppleResponse(
	struct soap *soap)
{
	_ns1__ChkSnLinkForAppleResponse *_p = soap_new__ns1__ChkSnLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnLinkForAppleResponse * soap_new_set__ns1__ChkSnLinkForAppleResponse(
	struct soap *soap,
	std::string *ChkSnLinkForAppleResult)
{
	_ns1__ChkSnLinkForAppleResponse *_p = soap_new__ns1__ChkSnLinkForAppleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnLinkForAppleResponse::ChkSnLinkForAppleResult = ChkSnLinkForAppleResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnLinkForAppleResponse(struct soap *soap, _ns1__ChkSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkForAppleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForAppleResponse", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForAppleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnLinkForAppleResponse * SOAP_FMAC4 soap_get__ns1__ChkSnLinkForAppleResponse(struct soap*, _ns1__ChkSnLinkForAppleResponse *, const char*, const char*);

inline int soap_read__ns1__ChkSnLinkForAppleResponse(struct soap *soap, _ns1__ChkSnLinkForAppleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnLinkForAppleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnLinkForAppleResponse(struct soap *soap, const char *URL, _ns1__ChkSnLinkForAppleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnLinkForAppleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnLinkForAppleResponse(struct soap *soap, _ns1__ChkSnLinkForAppleResponse *p)
{
	if (soap_read__ns1__ChkSnLinkForAppleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkSnLinkForApple_DEFINED
#define SOAP_TYPE__ns1__ChkSnLinkForApple_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkSnLinkForApple(struct soap*, const char*, int, const _ns1__ChkSnLinkForApple *, const char*);
SOAP_FMAC3 _ns1__ChkSnLinkForApple * SOAP_FMAC4 soap_in__ns1__ChkSnLinkForApple(struct soap*, const char*, _ns1__ChkSnLinkForApple *, const char*);
SOAP_FMAC1 _ns1__ChkSnLinkForApple * SOAP_FMAC2 soap_instantiate__ns1__ChkSnLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkSnLinkForApple * soap_new__ns1__ChkSnLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkSnLinkForApple(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkSnLinkForApple * soap_new_req__ns1__ChkSnLinkForApple(
	struct soap *soap)
{
	_ns1__ChkSnLinkForApple *_p = soap_new__ns1__ChkSnLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkSnLinkForApple * soap_new_set__ns1__ChkSnLinkForApple(
	struct soap *soap,
	std::string *SN)
{
	_ns1__ChkSnLinkForApple *_p = soap_new__ns1__ChkSnLinkForApple(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkSnLinkForApple::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__ChkSnLinkForApple(struct soap *soap, _ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, _ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, _ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkSnLinkForApple", p->soap_type() == SOAP_TYPE__ns1__ChkSnLinkForApple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkSnLinkForApple * SOAP_FMAC4 soap_get__ns1__ChkSnLinkForApple(struct soap*, _ns1__ChkSnLinkForApple *, const char*, const char*);

inline int soap_read__ns1__ChkSnLinkForApple(struct soap *soap, _ns1__ChkSnLinkForApple *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkSnLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, _ns1__ChkSnLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkSnLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkSnLinkForApple(struct soap *soap, _ns1__ChkSnLinkForApple *p)
{
	if (soap_read__ns1__ChkSnLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DelSNTestResponse_DEFINED
#define SOAP_TYPE__ns1__DelSNTestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DelSNTestResponse(struct soap*, const char*, int, const _ns1__DelSNTestResponse *, const char*);
SOAP_FMAC3 _ns1__DelSNTestResponse * SOAP_FMAC4 soap_in__ns1__DelSNTestResponse(struct soap*, const char*, _ns1__DelSNTestResponse *, const char*);
SOAP_FMAC1 _ns1__DelSNTestResponse * SOAP_FMAC2 soap_instantiate__ns1__DelSNTestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DelSNTestResponse * soap_new__ns1__DelSNTestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DelSNTestResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DelSNTestResponse * soap_new_req__ns1__DelSNTestResponse(
	struct soap *soap)
{
	_ns1__DelSNTestResponse *_p = soap_new__ns1__DelSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DelSNTestResponse * soap_new_set__ns1__DelSNTestResponse(
	struct soap *soap,
	std::string *DelSNTestResult)
{
	_ns1__DelSNTestResponse *_p = soap_new__ns1__DelSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DelSNTestResponse::DelSNTestResult = DelSNTestResult;
	}
	return _p;
}

inline int soap_write__ns1__DelSNTestResponse(struct soap *soap, _ns1__DelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__DelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DelSNTestResponse(struct soap *soap, const char *URL, _ns1__DelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__DelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DelSNTestResponse(struct soap *soap, const char *URL, _ns1__DelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__DelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DelSNTestResponse * SOAP_FMAC4 soap_get__ns1__DelSNTestResponse(struct soap*, _ns1__DelSNTestResponse *, const char*, const char*);

inline int soap_read__ns1__DelSNTestResponse(struct soap *soap, _ns1__DelSNTestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DelSNTestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DelSNTestResponse(struct soap *soap, const char *URL, _ns1__DelSNTestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DelSNTestResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DelSNTestResponse(struct soap *soap, _ns1__DelSNTestResponse *p)
{
	if (soap_read__ns1__DelSNTestResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DelSNTest_DEFINED
#define SOAP_TYPE__ns1__DelSNTest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DelSNTest(struct soap*, const char*, int, const _ns1__DelSNTest *, const char*);
SOAP_FMAC3 _ns1__DelSNTest * SOAP_FMAC4 soap_in__ns1__DelSNTest(struct soap*, const char*, _ns1__DelSNTest *, const char*);
SOAP_FMAC1 _ns1__DelSNTest * SOAP_FMAC2 soap_instantiate__ns1__DelSNTest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DelSNTest * soap_new__ns1__DelSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DelSNTest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DelSNTest * soap_new_req__ns1__DelSNTest(
	struct soap *soap)
{
	_ns1__DelSNTest *_p = soap_new__ns1__DelSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DelSNTest * soap_new_set__ns1__DelSNTest(
	struct soap *soap,
	std::string *SN)
{
	_ns1__DelSNTest *_p = soap_new__ns1__DelSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DelSNTest::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__DelSNTest(struct soap *soap, _ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTest", p->soap_type() == SOAP_TYPE__ns1__DelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DelSNTest(struct soap *soap, const char *URL, _ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTest", p->soap_type() == SOAP_TYPE__ns1__DelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DelSNTest(struct soap *soap, const char *URL, _ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DelSNTest", p->soap_type() == SOAP_TYPE__ns1__DelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DelSNTest * SOAP_FMAC4 soap_get__ns1__DelSNTest(struct soap*, _ns1__DelSNTest *, const char*, const char*);

inline int soap_read__ns1__DelSNTest(struct soap *soap, _ns1__DelSNTest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DelSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DelSNTest(struct soap *soap, const char *URL, _ns1__DelSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DelSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DelSNTest(struct soap *soap, _ns1__DelSNTest *p)
{
	if (soap_read__ns1__DelSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelSNTestResponse_DEFINED
#define SOAP_TYPE__ns1__SelSNTestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelSNTestResponse(struct soap*, const char*, int, const _ns1__SelSNTestResponse *, const char*);
SOAP_FMAC3 _ns1__SelSNTestResponse * SOAP_FMAC4 soap_in__ns1__SelSNTestResponse(struct soap*, const char*, _ns1__SelSNTestResponse *, const char*);
SOAP_FMAC1 _ns1__SelSNTestResponse * SOAP_FMAC2 soap_instantiate__ns1__SelSNTestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelSNTestResponse * soap_new__ns1__SelSNTestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelSNTestResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelSNTestResponse * soap_new_req__ns1__SelSNTestResponse(
	struct soap *soap)
{
	_ns1__SelSNTestResponse *_p = soap_new__ns1__SelSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelSNTestResponse * soap_new_set__ns1__SelSNTestResponse(
	struct soap *soap,
	std::string *SelSNTestResult)
{
	_ns1__SelSNTestResponse *_p = soap_new__ns1__SelSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelSNTestResponse::SelSNTestResult = SelSNTestResult;
	}
	return _p;
}

inline int soap_write__ns1__SelSNTestResponse(struct soap *soap, _ns1__SelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelSNTestResponse(struct soap *soap, const char *URL, _ns1__SelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelSNTestResponse(struct soap *soap, const char *URL, _ns1__SelSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__SelSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelSNTestResponse * SOAP_FMAC4 soap_get__ns1__SelSNTestResponse(struct soap*, _ns1__SelSNTestResponse *, const char*, const char*);

inline int soap_read__ns1__SelSNTestResponse(struct soap *soap, _ns1__SelSNTestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelSNTestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelSNTestResponse(struct soap *soap, const char *URL, _ns1__SelSNTestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelSNTestResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelSNTestResponse(struct soap *soap, _ns1__SelSNTestResponse *p)
{
	if (soap_read__ns1__SelSNTestResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelSNTest_DEFINED
#define SOAP_TYPE__ns1__SelSNTest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelSNTest(struct soap*, const char*, int, const _ns1__SelSNTest *, const char*);
SOAP_FMAC3 _ns1__SelSNTest * SOAP_FMAC4 soap_in__ns1__SelSNTest(struct soap*, const char*, _ns1__SelSNTest *, const char*);
SOAP_FMAC1 _ns1__SelSNTest * SOAP_FMAC2 soap_instantiate__ns1__SelSNTest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelSNTest * soap_new__ns1__SelSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelSNTest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelSNTest * soap_new_req__ns1__SelSNTest(
	struct soap *soap)
{
	_ns1__SelSNTest *_p = soap_new__ns1__SelSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelSNTest * soap_new_set__ns1__SelSNTest(
	struct soap *soap,
	std::string *SN)
{
	_ns1__SelSNTest *_p = soap_new__ns1__SelSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelSNTest::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__SelSNTest(struct soap *soap, _ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTest", p->soap_type() == SOAP_TYPE__ns1__SelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SelSNTest(struct soap *soap, const char *URL, _ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTest", p->soap_type() == SOAP_TYPE__ns1__SelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SelSNTest(struct soap *soap, const char *URL, _ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelSNTest", p->soap_type() == SOAP_TYPE__ns1__SelSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelSNTest * SOAP_FMAC4 soap_get__ns1__SelSNTest(struct soap*, _ns1__SelSNTest *, const char*, const char*);

inline int soap_read__ns1__SelSNTest(struct soap *soap, _ns1__SelSNTest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SelSNTest(struct soap *soap, const char *URL, _ns1__SelSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SelSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SelSNTest(struct soap *soap, _ns1__SelSNTest *p)
{
	if (soap_read__ns1__SelSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNTestResponse_DEFINED
#define SOAP_TYPE__ns1__InsSNTestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNTestResponse(struct soap*, const char*, int, const _ns1__InsSNTestResponse *, const char*);
SOAP_FMAC3 _ns1__InsSNTestResponse * SOAP_FMAC4 soap_in__ns1__InsSNTestResponse(struct soap*, const char*, _ns1__InsSNTestResponse *, const char*);
SOAP_FMAC1 _ns1__InsSNTestResponse * SOAP_FMAC2 soap_instantiate__ns1__InsSNTestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNTestResponse * soap_new__ns1__InsSNTestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNTestResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNTestResponse * soap_new_req__ns1__InsSNTestResponse(
	struct soap *soap)
{
	_ns1__InsSNTestResponse *_p = soap_new__ns1__InsSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNTestResponse * soap_new_set__ns1__InsSNTestResponse(
	struct soap *soap,
	std::string *InsSNTestResult)
{
	_ns1__InsSNTestResponse *_p = soap_new__ns1__InsSNTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNTestResponse::InsSNTestResult = InsSNTestResult;
	}
	return _p;
}

inline int soap_write__ns1__InsSNTestResponse(struct soap *soap, _ns1__InsSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNTestResponse(struct soap *soap, const char *URL, _ns1__InsSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNTestResponse(struct soap *soap, const char *URL, _ns1__InsSNTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTestResponse", p->soap_type() == SOAP_TYPE__ns1__InsSNTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNTestResponse * SOAP_FMAC4 soap_get__ns1__InsSNTestResponse(struct soap*, _ns1__InsSNTestResponse *, const char*, const char*);

inline int soap_read__ns1__InsSNTestResponse(struct soap *soap, _ns1__InsSNTestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNTestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNTestResponse(struct soap *soap, const char *URL, _ns1__InsSNTestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNTestResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNTestResponse(struct soap *soap, _ns1__InsSNTestResponse *p)
{
	if (soap_read__ns1__InsSNTestResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsSNTest_DEFINED
#define SOAP_TYPE__ns1__InsSNTest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsSNTest(struct soap*, const char*, int, const _ns1__InsSNTest *, const char*);
SOAP_FMAC3 _ns1__InsSNTest * SOAP_FMAC4 soap_in__ns1__InsSNTest(struct soap*, const char*, _ns1__InsSNTest *, const char*);
SOAP_FMAC1 _ns1__InsSNTest * SOAP_FMAC2 soap_instantiate__ns1__InsSNTest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsSNTest * soap_new__ns1__InsSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsSNTest(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsSNTest * soap_new_req__ns1__InsSNTest(
	struct soap *soap)
{
	_ns1__InsSNTest *_p = soap_new__ns1__InsSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InsSNTest * soap_new_set__ns1__InsSNTest(
	struct soap *soap,
	std::string *SN,
	std::string *TestResult)
{
	_ns1__InsSNTest *_p = soap_new__ns1__InsSNTest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsSNTest::SN = SN;
		_p->_ns1__InsSNTest::TestResult = TestResult;
	}
	return _p;
}

inline int soap_write__ns1__InsSNTest(struct soap *soap, _ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTest", p->soap_type() == SOAP_TYPE__ns1__InsSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InsSNTest(struct soap *soap, const char *URL, _ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTest", p->soap_type() == SOAP_TYPE__ns1__InsSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InsSNTest(struct soap *soap, const char *URL, _ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsSNTest", p->soap_type() == SOAP_TYPE__ns1__InsSNTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsSNTest * SOAP_FMAC4 soap_get__ns1__InsSNTest(struct soap*, _ns1__InsSNTest *, const char*, const char*);

inline int soap_read__ns1__InsSNTest(struct soap *soap, _ns1__InsSNTest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InsSNTest(struct soap *soap, const char *URL, _ns1__InsSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InsSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InsSNTest(struct soap *soap, _ns1__InsSNTest *p)
{
	if (soap_read__ns1__InsSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkWeightTimeResponse_DEFINED
#define SOAP_TYPE__ns1__ChkWeightTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkWeightTimeResponse(struct soap*, const char*, int, const _ns1__ChkWeightTimeResponse *, const char*);
SOAP_FMAC3 _ns1__ChkWeightTimeResponse * SOAP_FMAC4 soap_in__ns1__ChkWeightTimeResponse(struct soap*, const char*, _ns1__ChkWeightTimeResponse *, const char*);
SOAP_FMAC1 _ns1__ChkWeightTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__ChkWeightTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkWeightTimeResponse * soap_new__ns1__ChkWeightTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkWeightTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkWeightTimeResponse * soap_new_req__ns1__ChkWeightTimeResponse(
	struct soap *soap)
{
	_ns1__ChkWeightTimeResponse *_p = soap_new__ns1__ChkWeightTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkWeightTimeResponse * soap_new_set__ns1__ChkWeightTimeResponse(
	struct soap *soap,
	std::string *ChkWeightTimeResult)
{
	_ns1__ChkWeightTimeResponse *_p = soap_new__ns1__ChkWeightTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkWeightTimeResponse::ChkWeightTimeResult = ChkWeightTimeResult;
	}
	return _p;
}

inline int soap_write__ns1__ChkWeightTimeResponse(struct soap *soap, _ns1__ChkWeightTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTimeResponse", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkWeightTimeResponse(struct soap *soap, const char *URL, _ns1__ChkWeightTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTimeResponse", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkWeightTimeResponse(struct soap *soap, const char *URL, _ns1__ChkWeightTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTimeResponse", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkWeightTimeResponse * SOAP_FMAC4 soap_get__ns1__ChkWeightTimeResponse(struct soap*, _ns1__ChkWeightTimeResponse *, const char*, const char*);

inline int soap_read__ns1__ChkWeightTimeResponse(struct soap *soap, _ns1__ChkWeightTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkWeightTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkWeightTimeResponse(struct soap *soap, const char *URL, _ns1__ChkWeightTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkWeightTimeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkWeightTimeResponse(struct soap *soap, _ns1__ChkWeightTimeResponse *p)
{
	if (soap_read__ns1__ChkWeightTimeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChkWeightTime_DEFINED
#define SOAP_TYPE__ns1__ChkWeightTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChkWeightTime(struct soap*, const char*, int, const _ns1__ChkWeightTime *, const char*);
SOAP_FMAC3 _ns1__ChkWeightTime * SOAP_FMAC4 soap_in__ns1__ChkWeightTime(struct soap*, const char*, _ns1__ChkWeightTime *, const char*);
SOAP_FMAC1 _ns1__ChkWeightTime * SOAP_FMAC2 soap_instantiate__ns1__ChkWeightTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChkWeightTime * soap_new__ns1__ChkWeightTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChkWeightTime(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChkWeightTime * soap_new_req__ns1__ChkWeightTime(
	struct soap *soap)
{
	_ns1__ChkWeightTime *_p = soap_new__ns1__ChkWeightTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ChkWeightTime * soap_new_set__ns1__ChkWeightTime(
	struct soap *soap,
	std::string *SN,
	std::string *strType)
{
	_ns1__ChkWeightTime *_p = soap_new__ns1__ChkWeightTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChkWeightTime::SN = SN;
		_p->_ns1__ChkWeightTime::strType = strType;
	}
	return _p;
}

inline int soap_write__ns1__ChkWeightTime(struct soap *soap, _ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTime", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChkWeightTime(struct soap *soap, const char *URL, _ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTime", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChkWeightTime(struct soap *soap, const char *URL, _ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChkWeightTime", p->soap_type() == SOAP_TYPE__ns1__ChkWeightTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChkWeightTime * SOAP_FMAC4 soap_get__ns1__ChkWeightTime(struct soap*, _ns1__ChkWeightTime *, const char*, const char*);

inline int soap_read__ns1__ChkWeightTime(struct soap *soap, _ns1__ChkWeightTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChkWeightTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChkWeightTime(struct soap *soap, const char *URL, _ns1__ChkWeightTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChkWeightTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChkWeightTime(struct soap *soap, _ns1__ChkWeightTime *p)
{
	if (soap_read__ns1__ChkWeightTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdAhsBarcodeResponse_DEFINED
#define SOAP_TYPE__ns1__UpdAhsBarcodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdAhsBarcodeResponse(struct soap*, const char*, int, const _ns1__UpdAhsBarcodeResponse *, const char*);
SOAP_FMAC3 _ns1__UpdAhsBarcodeResponse * SOAP_FMAC4 soap_in__ns1__UpdAhsBarcodeResponse(struct soap*, const char*, _ns1__UpdAhsBarcodeResponse *, const char*);
SOAP_FMAC1 _ns1__UpdAhsBarcodeResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdAhsBarcodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdAhsBarcodeResponse * soap_new__ns1__UpdAhsBarcodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdAhsBarcodeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdAhsBarcodeResponse * soap_new_req__ns1__UpdAhsBarcodeResponse(
	struct soap *soap)
{
	_ns1__UpdAhsBarcodeResponse *_p = soap_new__ns1__UpdAhsBarcodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdAhsBarcodeResponse * soap_new_set__ns1__UpdAhsBarcodeResponse(
	struct soap *soap,
	std::string *UpdAhsBarcodeResult)
{
	_ns1__UpdAhsBarcodeResponse *_p = soap_new__ns1__UpdAhsBarcodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdAhsBarcodeResponse::UpdAhsBarcodeResult = UpdAhsBarcodeResult;
	}
	return _p;
}

inline int soap_write__ns1__UpdAhsBarcodeResponse(struct soap *soap, _ns1__UpdAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__UpdAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__UpdAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdAhsBarcodeResponse * SOAP_FMAC4 soap_get__ns1__UpdAhsBarcodeResponse(struct soap*, _ns1__UpdAhsBarcodeResponse *, const char*, const char*);

inline int soap_read__ns1__UpdAhsBarcodeResponse(struct soap *soap, _ns1__UpdAhsBarcodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdAhsBarcodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__UpdAhsBarcodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdAhsBarcodeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdAhsBarcodeResponse(struct soap *soap, _ns1__UpdAhsBarcodeResponse *p)
{
	if (soap_read__ns1__UpdAhsBarcodeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdAhsBarcode_DEFINED
#define SOAP_TYPE__ns1__UpdAhsBarcode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdAhsBarcode(struct soap*, const char*, int, const _ns1__UpdAhsBarcode *, const char*);
SOAP_FMAC3 _ns1__UpdAhsBarcode * SOAP_FMAC4 soap_in__ns1__UpdAhsBarcode(struct soap*, const char*, _ns1__UpdAhsBarcode *, const char*);
SOAP_FMAC1 _ns1__UpdAhsBarcode * SOAP_FMAC2 soap_instantiate__ns1__UpdAhsBarcode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdAhsBarcode * soap_new__ns1__UpdAhsBarcode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdAhsBarcode(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdAhsBarcode * soap_new_req__ns1__UpdAhsBarcode(
	struct soap *soap)
{
	_ns1__UpdAhsBarcode *_p = soap_new__ns1__UpdAhsBarcode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdAhsBarcode * soap_new_set__ns1__UpdAhsBarcode(
	struct soap *soap,
	std::string *Ikey,
	std::string *BarcodeKey)
{
	_ns1__UpdAhsBarcode *_p = soap_new__ns1__UpdAhsBarcode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdAhsBarcode::Ikey = Ikey;
		_p->_ns1__UpdAhsBarcode::BarcodeKey = BarcodeKey;
	}
	return _p;
}

inline int soap_write__ns1__UpdAhsBarcode(struct soap *soap, _ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UpdAhsBarcode(struct soap *soap, const char *URL, _ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UpdAhsBarcode(struct soap *soap, const char *URL, _ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__UpdAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdAhsBarcode * SOAP_FMAC4 soap_get__ns1__UpdAhsBarcode(struct soap*, _ns1__UpdAhsBarcode *, const char*, const char*);

inline int soap_read__ns1__UpdAhsBarcode(struct soap *soap, _ns1__UpdAhsBarcode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdAhsBarcode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UpdAhsBarcode(struct soap *soap, const char *URL, _ns1__UpdAhsBarcode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UpdAhsBarcode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UpdAhsBarcode(struct soap *soap, _ns1__UpdAhsBarcode *p)
{
	if (soap_read__ns1__UpdAhsBarcode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsBarcodeResponse_DEFINED
#define SOAP_TYPE__ns1__GetAhsBarcodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsBarcodeResponse(struct soap*, const char*, int, const _ns1__GetAhsBarcodeResponse *, const char*);
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse * SOAP_FMAC4 soap_in__ns1__GetAhsBarcodeResponse(struct soap*, const char*, _ns1__GetAhsBarcodeResponse *, const char*);
SOAP_FMAC1 _ns1__GetAhsBarcodeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAhsBarcodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsBarcodeResponse * soap_new__ns1__GetAhsBarcodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsBarcodeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsBarcodeResponse * soap_new_req__ns1__GetAhsBarcodeResponse(
	struct soap *soap)
{
	_ns1__GetAhsBarcodeResponse *_p = soap_new__ns1__GetAhsBarcodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAhsBarcodeResponse * soap_new_set__ns1__GetAhsBarcodeResponse(
	struct soap *soap,
	_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *GetAhsBarcodeResult)
{
	_ns1__GetAhsBarcodeResponse *_p = soap_new__ns1__GetAhsBarcodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsBarcodeResponse::GetAhsBarcodeResult = GetAhsBarcodeResult;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsBarcodeResponse(struct soap *soap, _ns1__GetAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcodeResponse", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse * SOAP_FMAC4 soap_get__ns1__GetAhsBarcodeResponse(struct soap*, _ns1__GetAhsBarcodeResponse *, const char*, const char*);

inline int soap_read__ns1__GetAhsBarcodeResponse(struct soap *soap, _ns1__GetAhsBarcodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsBarcodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsBarcodeResponse(struct soap *soap, const char *URL, _ns1__GetAhsBarcodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsBarcodeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsBarcodeResponse(struct soap *soap, _ns1__GetAhsBarcodeResponse *p)
{
	if (soap_read__ns1__GetAhsBarcodeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAhsBarcode_DEFINED
#define SOAP_TYPE__ns1__GetAhsBarcode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAhsBarcode(struct soap*, const char*, int, const _ns1__GetAhsBarcode *, const char*);
SOAP_FMAC3 _ns1__GetAhsBarcode * SOAP_FMAC4 soap_in__ns1__GetAhsBarcode(struct soap*, const char*, _ns1__GetAhsBarcode *, const char*);
SOAP_FMAC1 _ns1__GetAhsBarcode * SOAP_FMAC2 soap_instantiate__ns1__GetAhsBarcode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAhsBarcode * soap_new__ns1__GetAhsBarcode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAhsBarcode(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAhsBarcode * soap_new_req__ns1__GetAhsBarcode(
	struct soap *soap)
{
	_ns1__GetAhsBarcode *_p = soap_new__ns1__GetAhsBarcode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAhsBarcode * soap_new_set__ns1__GetAhsBarcode(
	struct soap *soap,
	std::string *Ikey,
	std::string *VerIkey,
	std::string *PrintType)
{
	_ns1__GetAhsBarcode *_p = soap_new__ns1__GetAhsBarcode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAhsBarcode::Ikey = Ikey;
		_p->_ns1__GetAhsBarcode::VerIkey = VerIkey;
		_p->_ns1__GetAhsBarcode::PrintType = PrintType;
	}
	return _p;
}

inline int soap_write__ns1__GetAhsBarcode(struct soap *soap, _ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAhsBarcode(struct soap *soap, const char *URL, _ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAhsBarcode(struct soap *soap, const char *URL, _ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAhsBarcode", p->soap_type() == SOAP_TYPE__ns1__GetAhsBarcode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAhsBarcode * SOAP_FMAC4 soap_get__ns1__GetAhsBarcode(struct soap*, _ns1__GetAhsBarcode *, const char*, const char*);

inline int soap_read__ns1__GetAhsBarcode(struct soap *soap, _ns1__GetAhsBarcode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAhsBarcode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAhsBarcode(struct soap *soap, const char *URL, _ns1__GetAhsBarcode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAhsBarcode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAhsBarcode(struct soap *soap, _ns1__GetAhsBarcode *p)
{
	if (soap_read__ns1__GetAhsBarcode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString_DEFINED
#define SOAP_TYPE_ns1__ArrayOfString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap*, const char*, int, const ns1__ArrayOfString *, const char*);
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString *, const char*);
SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfString * soap_new_ns1__ArrayOfString(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfString * soap_new_req_ns1__ArrayOfString(
	struct soap *soap)
{
	ns1__ArrayOfString *_p = soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfString * soap_new_set_ns1__ArrayOfString(
	struct soap *soap,
	const std::vector<std::string> & string)
{
	ns1__ArrayOfString *_p = soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfString::string = string;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap*, ns1__ArrayOfString *, const char*, const char*);

inline int soap_read_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ArrayOfString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ArrayOfString(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (soap_read_ns1__ArrayOfString(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__GetAhsMo__DEFINED
#define SOAP_TYPE___ns1__GetAhsMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAhsMo_(struct soap*, struct __ns1__GetAhsMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAhsMo_(struct soap*, const struct __ns1__GetAhsMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAhsMo_(struct soap*, const char*, int, const struct __ns1__GetAhsMo_ *, const char*);
SOAP_FMAC3 struct __ns1__GetAhsMo_ * SOAP_FMAC4 soap_in___ns1__GetAhsMo_(struct soap*, const char*, struct __ns1__GetAhsMo_ *, const char*);
SOAP_FMAC1 struct __ns1__GetAhsMo_ * SOAP_FMAC2 soap_instantiate___ns1__GetAhsMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAhsMo_ * soap_new___ns1__GetAhsMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAhsMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAhsMo_ * soap_new_req___ns1__GetAhsMo_(
	struct soap *soap)
{
	struct __ns1__GetAhsMo_ *_p = soap_new___ns1__GetAhsMo_(soap);
	if (_p)
	{	soap_default___ns1__GetAhsMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAhsMo_ * soap_new_set___ns1__GetAhsMo_(
	struct soap *soap,
	_ns1__GetAhsMo *ns1__GetAhsMo)
{
	struct __ns1__GetAhsMo_ *_p = soap_new___ns1__GetAhsMo_(soap);
	if (_p)
	{	soap_default___ns1__GetAhsMo_(soap, _p);
		_p->ns1__GetAhsMo = ns1__GetAhsMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAhsMo_(struct soap*, const struct __ns1__GetAhsMo_ *, const char*, const char*);

inline int soap_write___ns1__GetAhsMo_(struct soap *soap, struct __ns1__GetAhsMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAhsMo_(soap, p), 0) || soap_put___ns1__GetAhsMo_(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAhsMo_(struct soap *soap, const char *URL, struct __ns1__GetAhsMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsMo_(soap, p), 0) || soap_put___ns1__GetAhsMo_(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAhsMo_(struct soap *soap, const char *URL, struct __ns1__GetAhsMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsMo_(soap, p), 0) || soap_put___ns1__GetAhsMo_(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAhsMo_ * SOAP_FMAC4 soap_get___ns1__GetAhsMo_(struct soap*, struct __ns1__GetAhsMo_ *, const char*, const char*);

inline int soap_read___ns1__GetAhsMo_(struct soap *soap, struct __ns1__GetAhsMo_ *p)
{
	if (p)
	{	soap_default___ns1__GetAhsMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAhsMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAhsMo_(struct soap *soap, const char *URL, struct __ns1__GetAhsMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAhsMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAhsMo_(struct soap *soap, struct __ns1__GetAhsMo_ *p)
{
	if (soap_read___ns1__GetAhsMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackWeigth__DEFINED
#define SOAP_TYPE___ns1__GetPackWeigth__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackWeigth_(struct soap*, struct __ns1__GetPackWeigth_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackWeigth_(struct soap*, const struct __ns1__GetPackWeigth_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackWeigth_(struct soap*, const char*, int, const struct __ns1__GetPackWeigth_ *, const char*);
SOAP_FMAC3 struct __ns1__GetPackWeigth_ * SOAP_FMAC4 soap_in___ns1__GetPackWeigth_(struct soap*, const char*, struct __ns1__GetPackWeigth_ *, const char*);
SOAP_FMAC1 struct __ns1__GetPackWeigth_ * SOAP_FMAC2 soap_instantiate___ns1__GetPackWeigth_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackWeigth_ * soap_new___ns1__GetPackWeigth_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackWeigth_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackWeigth_ * soap_new_req___ns1__GetPackWeigth_(
	struct soap *soap)
{
	struct __ns1__GetPackWeigth_ *_p = soap_new___ns1__GetPackWeigth_(soap);
	if (_p)
	{	soap_default___ns1__GetPackWeigth_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackWeigth_ * soap_new_set___ns1__GetPackWeigth_(
	struct soap *soap,
	_ns1__GetPackWeigth *ns1__GetPackWeigth)
{
	struct __ns1__GetPackWeigth_ *_p = soap_new___ns1__GetPackWeigth_(soap);
	if (_p)
	{	soap_default___ns1__GetPackWeigth_(soap, _p);
		_p->ns1__GetPackWeigth = ns1__GetPackWeigth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackWeigth_(struct soap*, const struct __ns1__GetPackWeigth_ *, const char*, const char*);

inline int soap_write___ns1__GetPackWeigth_(struct soap *soap, struct __ns1__GetPackWeigth_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackWeigth_(soap, p), 0) || soap_put___ns1__GetPackWeigth_(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackWeigth_(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackWeigth_(soap, p), 0) || soap_put___ns1__GetPackWeigth_(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackWeigth_(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackWeigth_(soap, p), 0) || soap_put___ns1__GetPackWeigth_(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackWeigth_ * SOAP_FMAC4 soap_get___ns1__GetPackWeigth_(struct soap*, struct __ns1__GetPackWeigth_ *, const char*, const char*);

inline int soap_read___ns1__GetPackWeigth_(struct soap *soap, struct __ns1__GetPackWeigth_ *p)
{
	if (p)
	{	soap_default___ns1__GetPackWeigth_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackWeigth_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackWeigth_(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackWeigth_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackWeigth_(struct soap *soap, struct __ns1__GetPackWeigth_ *p)
{
	if (soap_read___ns1__GetPackWeigth_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackStation__DEFINED
#define SOAP_TYPE___ns1__GetPackStation__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackStation_(struct soap*, struct __ns1__GetPackStation_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackStation_(struct soap*, const struct __ns1__GetPackStation_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackStation_(struct soap*, const char*, int, const struct __ns1__GetPackStation_ *, const char*);
SOAP_FMAC3 struct __ns1__GetPackStation_ * SOAP_FMAC4 soap_in___ns1__GetPackStation_(struct soap*, const char*, struct __ns1__GetPackStation_ *, const char*);
SOAP_FMAC1 struct __ns1__GetPackStation_ * SOAP_FMAC2 soap_instantiate___ns1__GetPackStation_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackStation_ * soap_new___ns1__GetPackStation_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackStation_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackStation_ * soap_new_req___ns1__GetPackStation_(
	struct soap *soap)
{
	struct __ns1__GetPackStation_ *_p = soap_new___ns1__GetPackStation_(soap);
	if (_p)
	{	soap_default___ns1__GetPackStation_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackStation_ * soap_new_set___ns1__GetPackStation_(
	struct soap *soap,
	_ns1__GetPackStation *ns1__GetPackStation)
{
	struct __ns1__GetPackStation_ *_p = soap_new___ns1__GetPackStation_(soap);
	if (_p)
	{	soap_default___ns1__GetPackStation_(soap, _p);
		_p->ns1__GetPackStation = ns1__GetPackStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackStation_(struct soap*, const struct __ns1__GetPackStation_ *, const char*, const char*);

inline int soap_write___ns1__GetPackStation_(struct soap *soap, struct __ns1__GetPackStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackStation_(soap, p), 0) || soap_put___ns1__GetPackStation_(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackStation_(struct soap *soap, const char *URL, struct __ns1__GetPackStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackStation_(soap, p), 0) || soap_put___ns1__GetPackStation_(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackStation_(struct soap *soap, const char *URL, struct __ns1__GetPackStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackStation_(soap, p), 0) || soap_put___ns1__GetPackStation_(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackStation_ * SOAP_FMAC4 soap_get___ns1__GetPackStation_(struct soap*, struct __ns1__GetPackStation_ *, const char*, const char*);

inline int soap_read___ns1__GetPackStation_(struct soap *soap, struct __ns1__GetPackStation_ *p)
{
	if (p)
	{	soap_default___ns1__GetPackStation_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackStation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackStation_(struct soap *soap, const char *URL, struct __ns1__GetPackStation_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackStation_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackStation_(struct soap *soap, struct __ns1__GetPackStation_ *p)
{
	if (soap_read___ns1__GetPackStation_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetPallentForWMS__DEFINED
#define SOAP_TYPE___ns1__SetPallentForWMS__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetPallentForWMS_(struct soap*, struct __ns1__SetPallentForWMS_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetPallentForWMS_(struct soap*, const struct __ns1__SetPallentForWMS_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetPallentForWMS_(struct soap*, const char*, int, const struct __ns1__SetPallentForWMS_ *, const char*);
SOAP_FMAC3 struct __ns1__SetPallentForWMS_ * SOAP_FMAC4 soap_in___ns1__SetPallentForWMS_(struct soap*, const char*, struct __ns1__SetPallentForWMS_ *, const char*);
SOAP_FMAC1 struct __ns1__SetPallentForWMS_ * SOAP_FMAC2 soap_instantiate___ns1__SetPallentForWMS_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetPallentForWMS_ * soap_new___ns1__SetPallentForWMS_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetPallentForWMS_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetPallentForWMS_ * soap_new_req___ns1__SetPallentForWMS_(
	struct soap *soap)
{
	struct __ns1__SetPallentForWMS_ *_p = soap_new___ns1__SetPallentForWMS_(soap);
	if (_p)
	{	soap_default___ns1__SetPallentForWMS_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetPallentForWMS_ * soap_new_set___ns1__SetPallentForWMS_(
	struct soap *soap,
	_ns1__SetPallentForWMS *ns1__SetPallentForWMS)
{
	struct __ns1__SetPallentForWMS_ *_p = soap_new___ns1__SetPallentForWMS_(soap);
	if (_p)
	{	soap_default___ns1__SetPallentForWMS_(soap, _p);
		_p->ns1__SetPallentForWMS = ns1__SetPallentForWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetPallentForWMS_(struct soap*, const struct __ns1__SetPallentForWMS_ *, const char*, const char*);

inline int soap_write___ns1__SetPallentForWMS_(struct soap *soap, struct __ns1__SetPallentForWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetPallentForWMS_(soap, p), 0) || soap_put___ns1__SetPallentForWMS_(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetPallentForWMS_(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetPallentForWMS_(soap, p), 0) || soap_put___ns1__SetPallentForWMS_(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetPallentForWMS_(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetPallentForWMS_(soap, p), 0) || soap_put___ns1__SetPallentForWMS_(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetPallentForWMS_ * SOAP_FMAC4 soap_get___ns1__SetPallentForWMS_(struct soap*, struct __ns1__SetPallentForWMS_ *, const char*, const char*);

inline int soap_read___ns1__SetPallentForWMS_(struct soap *soap, struct __ns1__SetPallentForWMS_ *p)
{
	if (p)
	{	soap_default___ns1__SetPallentForWMS_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetPallentForWMS_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetPallentForWMS_(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetPallentForWMS_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetPallentForWMS_(struct soap *soap, struct __ns1__SetPallentForWMS_ *p)
{
	if (soap_read___ns1__SetPallentForWMS_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPallentToWMS__DEFINED
#define SOAP_TYPE___ns1__GetPallentToWMS__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPallentToWMS_(struct soap*, struct __ns1__GetPallentToWMS_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPallentToWMS_(struct soap*, const struct __ns1__GetPallentToWMS_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPallentToWMS_(struct soap*, const char*, int, const struct __ns1__GetPallentToWMS_ *, const char*);
SOAP_FMAC3 struct __ns1__GetPallentToWMS_ * SOAP_FMAC4 soap_in___ns1__GetPallentToWMS_(struct soap*, const char*, struct __ns1__GetPallentToWMS_ *, const char*);
SOAP_FMAC1 struct __ns1__GetPallentToWMS_ * SOAP_FMAC2 soap_instantiate___ns1__GetPallentToWMS_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPallentToWMS_ * soap_new___ns1__GetPallentToWMS_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPallentToWMS_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPallentToWMS_ * soap_new_req___ns1__GetPallentToWMS_(
	struct soap *soap)
{
	struct __ns1__GetPallentToWMS_ *_p = soap_new___ns1__GetPallentToWMS_(soap);
	if (_p)
	{	soap_default___ns1__GetPallentToWMS_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPallentToWMS_ * soap_new_set___ns1__GetPallentToWMS_(
	struct soap *soap,
	_ns1__GetPallentToWMS *ns1__GetPallentToWMS)
{
	struct __ns1__GetPallentToWMS_ *_p = soap_new___ns1__GetPallentToWMS_(soap);
	if (_p)
	{	soap_default___ns1__GetPallentToWMS_(soap, _p);
		_p->ns1__GetPallentToWMS = ns1__GetPallentToWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPallentToWMS_(struct soap*, const struct __ns1__GetPallentToWMS_ *, const char*, const char*);

inline int soap_write___ns1__GetPallentToWMS_(struct soap *soap, struct __ns1__GetPallentToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPallentToWMS_(soap, p), 0) || soap_put___ns1__GetPallentToWMS_(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPallentToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPallentToWMS_(soap, p), 0) || soap_put___ns1__GetPallentToWMS_(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPallentToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPallentToWMS_(soap, p), 0) || soap_put___ns1__GetPallentToWMS_(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPallentToWMS_ * SOAP_FMAC4 soap_get___ns1__GetPallentToWMS_(struct soap*, struct __ns1__GetPallentToWMS_ *, const char*, const char*);

inline int soap_read___ns1__GetPallentToWMS_(struct soap *soap, struct __ns1__GetPallentToWMS_ *p)
{
	if (p)
	{	soap_default___ns1__GetPallentToWMS_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPallentToWMS_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPallentToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPallentToWMS_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPallentToWMS_(struct soap *soap, struct __ns1__GetPallentToWMS_ *p)
{
	if (soap_read___ns1__GetPallentToWMS_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackToWMS__DEFINED
#define SOAP_TYPE___ns1__GetPackToWMS__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackToWMS_(struct soap*, struct __ns1__GetPackToWMS_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackToWMS_(struct soap*, const struct __ns1__GetPackToWMS_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackToWMS_(struct soap*, const char*, int, const struct __ns1__GetPackToWMS_ *, const char*);
SOAP_FMAC3 struct __ns1__GetPackToWMS_ * SOAP_FMAC4 soap_in___ns1__GetPackToWMS_(struct soap*, const char*, struct __ns1__GetPackToWMS_ *, const char*);
SOAP_FMAC1 struct __ns1__GetPackToWMS_ * SOAP_FMAC2 soap_instantiate___ns1__GetPackToWMS_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackToWMS_ * soap_new___ns1__GetPackToWMS_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackToWMS_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackToWMS_ * soap_new_req___ns1__GetPackToWMS_(
	struct soap *soap)
{
	struct __ns1__GetPackToWMS_ *_p = soap_new___ns1__GetPackToWMS_(soap);
	if (_p)
	{	soap_default___ns1__GetPackToWMS_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackToWMS_ * soap_new_set___ns1__GetPackToWMS_(
	struct soap *soap,
	_ns1__GetPackToWMS *ns1__GetPackToWMS)
{
	struct __ns1__GetPackToWMS_ *_p = soap_new___ns1__GetPackToWMS_(soap);
	if (_p)
	{	soap_default___ns1__GetPackToWMS_(soap, _p);
		_p->ns1__GetPackToWMS = ns1__GetPackToWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackToWMS_(struct soap*, const struct __ns1__GetPackToWMS_ *, const char*, const char*);

inline int soap_write___ns1__GetPackToWMS_(struct soap *soap, struct __ns1__GetPackToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackToWMS_(soap, p), 0) || soap_put___ns1__GetPackToWMS_(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackToWMS_(soap, p), 0) || soap_put___ns1__GetPackToWMS_(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackToWMS_(soap, p), 0) || soap_put___ns1__GetPackToWMS_(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackToWMS_ * SOAP_FMAC4 soap_get___ns1__GetPackToWMS_(struct soap*, struct __ns1__GetPackToWMS_ *, const char*, const char*);

inline int soap_read___ns1__GetPackToWMS_(struct soap *soap, struct __ns1__GetPackToWMS_ *p)
{
	if (p)
	{	soap_default___ns1__GetPackToWMS_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackToWMS_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackToWMS_(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackToWMS_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackToWMS_(struct soap *soap, struct __ns1__GetPackToWMS_ *p)
{
	if (soap_read___ns1__GetPackToWMS_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetWeightSet__DEFINED
#define SOAP_TYPE___ns1__GetWeightSet__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWeightSet_(struct soap*, struct __ns1__GetWeightSet_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWeightSet_(struct soap*, const struct __ns1__GetWeightSet_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWeightSet_(struct soap*, const char*, int, const struct __ns1__GetWeightSet_ *, const char*);
SOAP_FMAC3 struct __ns1__GetWeightSet_ * SOAP_FMAC4 soap_in___ns1__GetWeightSet_(struct soap*, const char*, struct __ns1__GetWeightSet_ *, const char*);
SOAP_FMAC1 struct __ns1__GetWeightSet_ * SOAP_FMAC2 soap_instantiate___ns1__GetWeightSet_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWeightSet_ * soap_new___ns1__GetWeightSet_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWeightSet_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWeightSet_ * soap_new_req___ns1__GetWeightSet_(
	struct soap *soap)
{
	struct __ns1__GetWeightSet_ *_p = soap_new___ns1__GetWeightSet_(soap);
	if (_p)
	{	soap_default___ns1__GetWeightSet_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWeightSet_ * soap_new_set___ns1__GetWeightSet_(
	struct soap *soap,
	_ns1__GetWeightSet *ns1__GetWeightSet)
{
	struct __ns1__GetWeightSet_ *_p = soap_new___ns1__GetWeightSet_(soap);
	if (_p)
	{	soap_default___ns1__GetWeightSet_(soap, _p);
		_p->ns1__GetWeightSet = ns1__GetWeightSet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWeightSet_(struct soap*, const struct __ns1__GetWeightSet_ *, const char*, const char*);

inline int soap_write___ns1__GetWeightSet_(struct soap *soap, struct __ns1__GetWeightSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetWeightSet_(soap, p), 0) || soap_put___ns1__GetWeightSet_(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWeightSet_(struct soap *soap, const char *URL, struct __ns1__GetWeightSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetWeightSet_(soap, p), 0) || soap_put___ns1__GetWeightSet_(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWeightSet_(struct soap *soap, const char *URL, struct __ns1__GetWeightSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetWeightSet_(soap, p), 0) || soap_put___ns1__GetWeightSet_(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWeightSet_ * SOAP_FMAC4 soap_get___ns1__GetWeightSet_(struct soap*, struct __ns1__GetWeightSet_ *, const char*, const char*);

inline int soap_read___ns1__GetWeightSet_(struct soap *soap, struct __ns1__GetWeightSet_ *p)
{
	if (p)
	{	soap_default___ns1__GetWeightSet_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetWeightSet_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWeightSet_(struct soap *soap, const char *URL, struct __ns1__GetWeightSet_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetWeightSet_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetWeightSet_(struct soap *soap, struct __ns1__GetWeightSet_ *p)
{
	if (soap_read___ns1__GetWeightSet_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelLnkSN__DEFINED
#define SOAP_TYPE___ns1__CancelLnkSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelLnkSN_(struct soap*, struct __ns1__CancelLnkSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelLnkSN_(struct soap*, const struct __ns1__CancelLnkSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelLnkSN_(struct soap*, const char*, int, const struct __ns1__CancelLnkSN_ *, const char*);
SOAP_FMAC3 struct __ns1__CancelLnkSN_ * SOAP_FMAC4 soap_in___ns1__CancelLnkSN_(struct soap*, const char*, struct __ns1__CancelLnkSN_ *, const char*);
SOAP_FMAC1 struct __ns1__CancelLnkSN_ * SOAP_FMAC2 soap_instantiate___ns1__CancelLnkSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelLnkSN_ * soap_new___ns1__CancelLnkSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelLnkSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelLnkSN_ * soap_new_req___ns1__CancelLnkSN_(
	struct soap *soap)
{
	struct __ns1__CancelLnkSN_ *_p = soap_new___ns1__CancelLnkSN_(soap);
	if (_p)
	{	soap_default___ns1__CancelLnkSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelLnkSN_ * soap_new_set___ns1__CancelLnkSN_(
	struct soap *soap,
	_ns1__CancelLnkSN *ns1__CancelLnkSN)
{
	struct __ns1__CancelLnkSN_ *_p = soap_new___ns1__CancelLnkSN_(soap);
	if (_p)
	{	soap_default___ns1__CancelLnkSN_(soap, _p);
		_p->ns1__CancelLnkSN = ns1__CancelLnkSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelLnkSN_(struct soap*, const struct __ns1__CancelLnkSN_ *, const char*, const char*);

inline int soap_write___ns1__CancelLnkSN_(struct soap *soap, struct __ns1__CancelLnkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelLnkSN_(soap, p), 0) || soap_put___ns1__CancelLnkSN_(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelLnkSN_(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelLnkSN_(soap, p), 0) || soap_put___ns1__CancelLnkSN_(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelLnkSN_(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelLnkSN_(soap, p), 0) || soap_put___ns1__CancelLnkSN_(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelLnkSN_ * SOAP_FMAC4 soap_get___ns1__CancelLnkSN_(struct soap*, struct __ns1__CancelLnkSN_ *, const char*, const char*);

inline int soap_read___ns1__CancelLnkSN_(struct soap *soap, struct __ns1__CancelLnkSN_ *p)
{
	if (p)
	{	soap_default___ns1__CancelLnkSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelLnkSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelLnkSN_(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelLnkSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelLnkSN_(struct soap *soap, struct __ns1__CancelLnkSN_ *p)
{
	if (soap_read___ns1__CancelLnkSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelGrillSN__DEFINED
#define SOAP_TYPE___ns1__CancelGrillSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelGrillSN_(struct soap*, struct __ns1__CancelGrillSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelGrillSN_(struct soap*, const struct __ns1__CancelGrillSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelGrillSN_(struct soap*, const char*, int, const struct __ns1__CancelGrillSN_ *, const char*);
SOAP_FMAC3 struct __ns1__CancelGrillSN_ * SOAP_FMAC4 soap_in___ns1__CancelGrillSN_(struct soap*, const char*, struct __ns1__CancelGrillSN_ *, const char*);
SOAP_FMAC1 struct __ns1__CancelGrillSN_ * SOAP_FMAC2 soap_instantiate___ns1__CancelGrillSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelGrillSN_ * soap_new___ns1__CancelGrillSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelGrillSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelGrillSN_ * soap_new_req___ns1__CancelGrillSN_(
	struct soap *soap)
{
	struct __ns1__CancelGrillSN_ *_p = soap_new___ns1__CancelGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__CancelGrillSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelGrillSN_ * soap_new_set___ns1__CancelGrillSN_(
	struct soap *soap,
	_ns1__CancelGrillSN *ns1__CancelGrillSN)
{
	struct __ns1__CancelGrillSN_ *_p = soap_new___ns1__CancelGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__CancelGrillSN_(soap, _p);
		_p->ns1__CancelGrillSN = ns1__CancelGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelGrillSN_(struct soap*, const struct __ns1__CancelGrillSN_ *, const char*, const char*);

inline int soap_write___ns1__CancelGrillSN_(struct soap *soap, struct __ns1__CancelGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelGrillSN_(soap, p), 0) || soap_put___ns1__CancelGrillSN_(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelGrillSN_(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelGrillSN_(soap, p), 0) || soap_put___ns1__CancelGrillSN_(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelGrillSN_(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelGrillSN_(soap, p), 0) || soap_put___ns1__CancelGrillSN_(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelGrillSN_ * SOAP_FMAC4 soap_get___ns1__CancelGrillSN_(struct soap*, struct __ns1__CancelGrillSN_ *, const char*, const char*);

inline int soap_read___ns1__CancelGrillSN_(struct soap *soap, struct __ns1__CancelGrillSN_ *p)
{
	if (p)
	{	soap_default___ns1__CancelGrillSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelGrillSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelGrillSN_(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelGrillSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelGrillSN_(struct soap *soap, struct __ns1__CancelGrillSN_ *p)
{
	if (soap_read___ns1__CancelGrillSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OutGrillBySN__DEFINED
#define SOAP_TYPE___ns1__OutGrillBySN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutGrillBySN_(struct soap*, struct __ns1__OutGrillBySN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutGrillBySN_(struct soap*, const struct __ns1__OutGrillBySN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutGrillBySN_(struct soap*, const char*, int, const struct __ns1__OutGrillBySN_ *, const char*);
SOAP_FMAC3 struct __ns1__OutGrillBySN_ * SOAP_FMAC4 soap_in___ns1__OutGrillBySN_(struct soap*, const char*, struct __ns1__OutGrillBySN_ *, const char*);
SOAP_FMAC1 struct __ns1__OutGrillBySN_ * SOAP_FMAC2 soap_instantiate___ns1__OutGrillBySN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutGrillBySN_ * soap_new___ns1__OutGrillBySN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutGrillBySN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutGrillBySN_ * soap_new_req___ns1__OutGrillBySN_(
	struct soap *soap)
{
	struct __ns1__OutGrillBySN_ *_p = soap_new___ns1__OutGrillBySN_(soap);
	if (_p)
	{	soap_default___ns1__OutGrillBySN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutGrillBySN_ * soap_new_set___ns1__OutGrillBySN_(
	struct soap *soap,
	_ns1__OutGrillBySN *ns1__OutGrillBySN)
{
	struct __ns1__OutGrillBySN_ *_p = soap_new___ns1__OutGrillBySN_(soap);
	if (_p)
	{	soap_default___ns1__OutGrillBySN_(soap, _p);
		_p->ns1__OutGrillBySN = ns1__OutGrillBySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutGrillBySN_(struct soap*, const struct __ns1__OutGrillBySN_ *, const char*, const char*);

inline int soap_write___ns1__OutGrillBySN_(struct soap *soap, struct __ns1__OutGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OutGrillBySN_(soap, p), 0) || soap_put___ns1__OutGrillBySN_(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutGrillBySN_(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutGrillBySN_(soap, p), 0) || soap_put___ns1__OutGrillBySN_(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutGrillBySN_(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutGrillBySN_(soap, p), 0) || soap_put___ns1__OutGrillBySN_(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutGrillBySN_ * SOAP_FMAC4 soap_get___ns1__OutGrillBySN_(struct soap*, struct __ns1__OutGrillBySN_ *, const char*, const char*);

inline int soap_read___ns1__OutGrillBySN_(struct soap *soap, struct __ns1__OutGrillBySN_ *p)
{
	if (p)
	{	soap_default___ns1__OutGrillBySN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OutGrillBySN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutGrillBySN_(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OutGrillBySN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OutGrillBySN_(struct soap *soap, struct __ns1__OutGrillBySN_ *p)
{
	if (soap_read___ns1__OutGrillBySN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetGrillTime__DEFINED
#define SOAP_TYPE___ns1__GetGrillTime__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGrillTime_(struct soap*, struct __ns1__GetGrillTime_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGrillTime_(struct soap*, const struct __ns1__GetGrillTime_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGrillTime_(struct soap*, const char*, int, const struct __ns1__GetGrillTime_ *, const char*);
SOAP_FMAC3 struct __ns1__GetGrillTime_ * SOAP_FMAC4 soap_in___ns1__GetGrillTime_(struct soap*, const char*, struct __ns1__GetGrillTime_ *, const char*);
SOAP_FMAC1 struct __ns1__GetGrillTime_ * SOAP_FMAC2 soap_instantiate___ns1__GetGrillTime_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetGrillTime_ * soap_new___ns1__GetGrillTime_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetGrillTime_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetGrillTime_ * soap_new_req___ns1__GetGrillTime_(
	struct soap *soap)
{
	struct __ns1__GetGrillTime_ *_p = soap_new___ns1__GetGrillTime_(soap);
	if (_p)
	{	soap_default___ns1__GetGrillTime_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetGrillTime_ * soap_new_set___ns1__GetGrillTime_(
	struct soap *soap,
	_ns1__GetGrillTime *ns1__GetGrillTime)
{
	struct __ns1__GetGrillTime_ *_p = soap_new___ns1__GetGrillTime_(soap);
	if (_p)
	{	soap_default___ns1__GetGrillTime_(soap, _p);
		_p->ns1__GetGrillTime = ns1__GetGrillTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGrillTime_(struct soap*, const struct __ns1__GetGrillTime_ *, const char*, const char*);

inline int soap_write___ns1__GetGrillTime_(struct soap *soap, struct __ns1__GetGrillTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetGrillTime_(soap, p), 0) || soap_put___ns1__GetGrillTime_(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetGrillTime_(struct soap *soap, const char *URL, struct __ns1__GetGrillTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetGrillTime_(soap, p), 0) || soap_put___ns1__GetGrillTime_(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetGrillTime_(struct soap *soap, const char *URL, struct __ns1__GetGrillTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetGrillTime_(soap, p), 0) || soap_put___ns1__GetGrillTime_(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetGrillTime_ * SOAP_FMAC4 soap_get___ns1__GetGrillTime_(struct soap*, struct __ns1__GetGrillTime_ *, const char*, const char*);

inline int soap_read___ns1__GetGrillTime_(struct soap *soap, struct __ns1__GetGrillTime_ *p)
{
	if (p)
	{	soap_default___ns1__GetGrillTime_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetGrillTime_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetGrillTime_(struct soap *soap, const char *URL, struct __ns1__GetGrillTime_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetGrillTime_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetGrillTime_(struct soap *soap, struct __ns1__GetGrillTime_ *p)
{
	if (soap_read___ns1__GetGrillTime_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsGrillBySN__DEFINED
#define SOAP_TYPE___ns1__InsGrillBySN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsGrillBySN_(struct soap*, struct __ns1__InsGrillBySN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsGrillBySN_(struct soap*, const struct __ns1__InsGrillBySN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsGrillBySN_(struct soap*, const char*, int, const struct __ns1__InsGrillBySN_ *, const char*);
SOAP_FMAC3 struct __ns1__InsGrillBySN_ * SOAP_FMAC4 soap_in___ns1__InsGrillBySN_(struct soap*, const char*, struct __ns1__InsGrillBySN_ *, const char*);
SOAP_FMAC1 struct __ns1__InsGrillBySN_ * SOAP_FMAC2 soap_instantiate___ns1__InsGrillBySN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsGrillBySN_ * soap_new___ns1__InsGrillBySN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsGrillBySN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsGrillBySN_ * soap_new_req___ns1__InsGrillBySN_(
	struct soap *soap)
{
	struct __ns1__InsGrillBySN_ *_p = soap_new___ns1__InsGrillBySN_(soap);
	if (_p)
	{	soap_default___ns1__InsGrillBySN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsGrillBySN_ * soap_new_set___ns1__InsGrillBySN_(
	struct soap *soap,
	_ns1__InsGrillBySN *ns1__InsGrillBySN)
{
	struct __ns1__InsGrillBySN_ *_p = soap_new___ns1__InsGrillBySN_(soap);
	if (_p)
	{	soap_default___ns1__InsGrillBySN_(soap, _p);
		_p->ns1__InsGrillBySN = ns1__InsGrillBySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsGrillBySN_(struct soap*, const struct __ns1__InsGrillBySN_ *, const char*, const char*);

inline int soap_write___ns1__InsGrillBySN_(struct soap *soap, struct __ns1__InsGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsGrillBySN_(soap, p), 0) || soap_put___ns1__InsGrillBySN_(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsGrillBySN_(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsGrillBySN_(soap, p), 0) || soap_put___ns1__InsGrillBySN_(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsGrillBySN_(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsGrillBySN_(soap, p), 0) || soap_put___ns1__InsGrillBySN_(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsGrillBySN_ * SOAP_FMAC4 soap_get___ns1__InsGrillBySN_(struct soap*, struct __ns1__InsGrillBySN_ *, const char*, const char*);

inline int soap_read___ns1__InsGrillBySN_(struct soap *soap, struct __ns1__InsGrillBySN_ *p)
{
	if (p)
	{	soap_default___ns1__InsGrillBySN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsGrillBySN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsGrillBySN_(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsGrillBySN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsGrillBySN_(struct soap *soap, struct __ns1__InsGrillBySN_ *p)
{
	if (soap_read___ns1__InsGrillBySN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseGrillSN__DEFINED
#define SOAP_TYPE___ns1__CloseGrillSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseGrillSN_(struct soap*, struct __ns1__CloseGrillSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseGrillSN_(struct soap*, const struct __ns1__CloseGrillSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseGrillSN_(struct soap*, const char*, int, const struct __ns1__CloseGrillSN_ *, const char*);
SOAP_FMAC3 struct __ns1__CloseGrillSN_ * SOAP_FMAC4 soap_in___ns1__CloseGrillSN_(struct soap*, const char*, struct __ns1__CloseGrillSN_ *, const char*);
SOAP_FMAC1 struct __ns1__CloseGrillSN_ * SOAP_FMAC2 soap_instantiate___ns1__CloseGrillSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseGrillSN_ * soap_new___ns1__CloseGrillSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseGrillSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseGrillSN_ * soap_new_req___ns1__CloseGrillSN_(
	struct soap *soap)
{
	struct __ns1__CloseGrillSN_ *_p = soap_new___ns1__CloseGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__CloseGrillSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseGrillSN_ * soap_new_set___ns1__CloseGrillSN_(
	struct soap *soap,
	_ns1__CloseGrillSN *ns1__CloseGrillSN)
{
	struct __ns1__CloseGrillSN_ *_p = soap_new___ns1__CloseGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__CloseGrillSN_(soap, _p);
		_p->ns1__CloseGrillSN = ns1__CloseGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseGrillSN_(struct soap*, const struct __ns1__CloseGrillSN_ *, const char*, const char*);

inline int soap_write___ns1__CloseGrillSN_(struct soap *soap, struct __ns1__CloseGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseGrillSN_(soap, p), 0) || soap_put___ns1__CloseGrillSN_(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseGrillSN_(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CloseGrillSN_(soap, p), 0) || soap_put___ns1__CloseGrillSN_(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseGrillSN_(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CloseGrillSN_(soap, p), 0) || soap_put___ns1__CloseGrillSN_(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseGrillSN_ * SOAP_FMAC4 soap_get___ns1__CloseGrillSN_(struct soap*, struct __ns1__CloseGrillSN_ *, const char*, const char*);

inline int soap_read___ns1__CloseGrillSN_(struct soap *soap, struct __ns1__CloseGrillSN_ *p)
{
	if (p)
	{	soap_default___ns1__CloseGrillSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseGrillSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseGrillSN_(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseGrillSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseGrillSN_(struct soap *soap, struct __ns1__CloseGrillSN_ *p)
{
	if (soap_read___ns1__CloseGrillSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkGrillSN__DEFINED
#define SOAP_TYPE___ns1__LnkGrillSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkGrillSN_(struct soap*, struct __ns1__LnkGrillSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkGrillSN_(struct soap*, const struct __ns1__LnkGrillSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkGrillSN_(struct soap*, const char*, int, const struct __ns1__LnkGrillSN_ *, const char*);
SOAP_FMAC3 struct __ns1__LnkGrillSN_ * SOAP_FMAC4 soap_in___ns1__LnkGrillSN_(struct soap*, const char*, struct __ns1__LnkGrillSN_ *, const char*);
SOAP_FMAC1 struct __ns1__LnkGrillSN_ * SOAP_FMAC2 soap_instantiate___ns1__LnkGrillSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkGrillSN_ * soap_new___ns1__LnkGrillSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkGrillSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkGrillSN_ * soap_new_req___ns1__LnkGrillSN_(
	struct soap *soap)
{
	struct __ns1__LnkGrillSN_ *_p = soap_new___ns1__LnkGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkGrillSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkGrillSN_ * soap_new_set___ns1__LnkGrillSN_(
	struct soap *soap,
	_ns1__LnkGrillSN *ns1__LnkGrillSN)
{
	struct __ns1__LnkGrillSN_ *_p = soap_new___ns1__LnkGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkGrillSN_(soap, _p);
		_p->ns1__LnkGrillSN = ns1__LnkGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkGrillSN_(struct soap*, const struct __ns1__LnkGrillSN_ *, const char*, const char*);

inline int soap_write___ns1__LnkGrillSN_(struct soap *soap, struct __ns1__LnkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkGrillSN_(soap, p), 0) || soap_put___ns1__LnkGrillSN_(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkGrillSN_(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkGrillSN_(soap, p), 0) || soap_put___ns1__LnkGrillSN_(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkGrillSN_(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkGrillSN_(soap, p), 0) || soap_put___ns1__LnkGrillSN_(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkGrillSN_ * SOAP_FMAC4 soap_get___ns1__LnkGrillSN_(struct soap*, struct __ns1__LnkGrillSN_ *, const char*, const char*);

inline int soap_read___ns1__LnkGrillSN_(struct soap *soap, struct __ns1__LnkGrillSN_ *p)
{
	if (p)
	{	soap_default___ns1__LnkGrillSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkGrillSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkGrillSN_(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkGrillSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkGrillSN_(struct soap *soap, struct __ns1__LnkGrillSN_ *p)
{
	if (soap_read___ns1__LnkGrillSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkGrillSN__DEFINED
#define SOAP_TYPE___ns1__chkGrillSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkGrillSN_(struct soap*, struct __ns1__chkGrillSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkGrillSN_(struct soap*, const struct __ns1__chkGrillSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkGrillSN_(struct soap*, const char*, int, const struct __ns1__chkGrillSN_ *, const char*);
SOAP_FMAC3 struct __ns1__chkGrillSN_ * SOAP_FMAC4 soap_in___ns1__chkGrillSN_(struct soap*, const char*, struct __ns1__chkGrillSN_ *, const char*);
SOAP_FMAC1 struct __ns1__chkGrillSN_ * SOAP_FMAC2 soap_instantiate___ns1__chkGrillSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkGrillSN_ * soap_new___ns1__chkGrillSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkGrillSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkGrillSN_ * soap_new_req___ns1__chkGrillSN_(
	struct soap *soap)
{
	struct __ns1__chkGrillSN_ *_p = soap_new___ns1__chkGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__chkGrillSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkGrillSN_ * soap_new_set___ns1__chkGrillSN_(
	struct soap *soap,
	_ns1__chkGrillSN *ns1__chkGrillSN)
{
	struct __ns1__chkGrillSN_ *_p = soap_new___ns1__chkGrillSN_(soap);
	if (_p)
	{	soap_default___ns1__chkGrillSN_(soap, _p);
		_p->ns1__chkGrillSN = ns1__chkGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkGrillSN_(struct soap*, const struct __ns1__chkGrillSN_ *, const char*, const char*);

inline int soap_write___ns1__chkGrillSN_(struct soap *soap, struct __ns1__chkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkGrillSN_(soap, p), 0) || soap_put___ns1__chkGrillSN_(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkGrillSN_(struct soap *soap, const char *URL, struct __ns1__chkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkGrillSN_(soap, p), 0) || soap_put___ns1__chkGrillSN_(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkGrillSN_(struct soap *soap, const char *URL, struct __ns1__chkGrillSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkGrillSN_(soap, p), 0) || soap_put___ns1__chkGrillSN_(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkGrillSN_ * SOAP_FMAC4 soap_get___ns1__chkGrillSN_(struct soap*, struct __ns1__chkGrillSN_ *, const char*, const char*);

inline int soap_read___ns1__chkGrillSN_(struct soap *soap, struct __ns1__chkGrillSN_ *p)
{
	if (p)
	{	soap_default___ns1__chkGrillSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkGrillSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkGrillSN_(struct soap *soap, const char *URL, struct __ns1__chkGrillSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkGrillSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkGrillSN_(struct soap *soap, struct __ns1__chkGrillSN_ *p)
{
	if (soap_read___ns1__chkGrillSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkSideSN__DEFINED
#define SOAP_TYPE___ns1__LnkSideSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkSideSN_(struct soap*, struct __ns1__LnkSideSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkSideSN_(struct soap*, const struct __ns1__LnkSideSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkSideSN_(struct soap*, const char*, int, const struct __ns1__LnkSideSN_ *, const char*);
SOAP_FMAC3 struct __ns1__LnkSideSN_ * SOAP_FMAC4 soap_in___ns1__LnkSideSN_(struct soap*, const char*, struct __ns1__LnkSideSN_ *, const char*);
SOAP_FMAC1 struct __ns1__LnkSideSN_ * SOAP_FMAC2 soap_instantiate___ns1__LnkSideSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkSideSN_ * soap_new___ns1__LnkSideSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkSideSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkSideSN_ * soap_new_req___ns1__LnkSideSN_(
	struct soap *soap)
{
	struct __ns1__LnkSideSN_ *_p = soap_new___ns1__LnkSideSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkSideSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkSideSN_ * soap_new_set___ns1__LnkSideSN_(
	struct soap *soap,
	_ns1__LnkSideSN *ns1__LnkSideSN)
{
	struct __ns1__LnkSideSN_ *_p = soap_new___ns1__LnkSideSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkSideSN_(soap, _p);
		_p->ns1__LnkSideSN = ns1__LnkSideSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkSideSN_(struct soap*, const struct __ns1__LnkSideSN_ *, const char*, const char*);

inline int soap_write___ns1__LnkSideSN_(struct soap *soap, struct __ns1__LnkSideSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkSideSN_(soap, p), 0) || soap_put___ns1__LnkSideSN_(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkSideSN_(struct soap *soap, const char *URL, struct __ns1__LnkSideSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkSideSN_(soap, p), 0) || soap_put___ns1__LnkSideSN_(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkSideSN_(struct soap *soap, const char *URL, struct __ns1__LnkSideSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkSideSN_(soap, p), 0) || soap_put___ns1__LnkSideSN_(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkSideSN_ * SOAP_FMAC4 soap_get___ns1__LnkSideSN_(struct soap*, struct __ns1__LnkSideSN_ *, const char*, const char*);

inline int soap_read___ns1__LnkSideSN_(struct soap *soap, struct __ns1__LnkSideSN_ *p)
{
	if (p)
	{	soap_default___ns1__LnkSideSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkSideSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkSideSN_(struct soap *soap, const char *URL, struct __ns1__LnkSideSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkSideSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkSideSN_(struct soap *soap, struct __ns1__LnkSideSN_ *p)
{
	if (soap_read___ns1__LnkSideSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkZJSN__DEFINED
#define SOAP_TYPE___ns1__LnkZJSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkZJSN_(struct soap*, struct __ns1__LnkZJSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkZJSN_(struct soap*, const struct __ns1__LnkZJSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkZJSN_(struct soap*, const char*, int, const struct __ns1__LnkZJSN_ *, const char*);
SOAP_FMAC3 struct __ns1__LnkZJSN_ * SOAP_FMAC4 soap_in___ns1__LnkZJSN_(struct soap*, const char*, struct __ns1__LnkZJSN_ *, const char*);
SOAP_FMAC1 struct __ns1__LnkZJSN_ * SOAP_FMAC2 soap_instantiate___ns1__LnkZJSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkZJSN_ * soap_new___ns1__LnkZJSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkZJSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkZJSN_ * soap_new_req___ns1__LnkZJSN_(
	struct soap *soap)
{
	struct __ns1__LnkZJSN_ *_p = soap_new___ns1__LnkZJSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkZJSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkZJSN_ * soap_new_set___ns1__LnkZJSN_(
	struct soap *soap,
	_ns1__LnkZJSN *ns1__LnkZJSN)
{
	struct __ns1__LnkZJSN_ *_p = soap_new___ns1__LnkZJSN_(soap);
	if (_p)
	{	soap_default___ns1__LnkZJSN_(soap, _p);
		_p->ns1__LnkZJSN = ns1__LnkZJSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkZJSN_(struct soap*, const struct __ns1__LnkZJSN_ *, const char*, const char*);

inline int soap_write___ns1__LnkZJSN_(struct soap *soap, struct __ns1__LnkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkZJSN_(soap, p), 0) || soap_put___ns1__LnkZJSN_(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkZJSN_(struct soap *soap, const char *URL, struct __ns1__LnkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkZJSN_(soap, p), 0) || soap_put___ns1__LnkZJSN_(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkZJSN_(struct soap *soap, const char *URL, struct __ns1__LnkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkZJSN_(soap, p), 0) || soap_put___ns1__LnkZJSN_(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkZJSN_ * SOAP_FMAC4 soap_get___ns1__LnkZJSN_(struct soap*, struct __ns1__LnkZJSN_ *, const char*, const char*);

inline int soap_read___ns1__LnkZJSN_(struct soap *soap, struct __ns1__LnkZJSN_ *p)
{
	if (p)
	{	soap_default___ns1__LnkZJSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkZJSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkZJSN_(struct soap *soap, const char *URL, struct __ns1__LnkZJSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkZJSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkZJSN_(struct soap *soap, struct __ns1__LnkZJSN_ *p)
{
	if (soap_read___ns1__LnkZJSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkZJSN__DEFINED
#define SOAP_TYPE___ns1__chkZJSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkZJSN_(struct soap*, struct __ns1__chkZJSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkZJSN_(struct soap*, const struct __ns1__chkZJSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkZJSN_(struct soap*, const char*, int, const struct __ns1__chkZJSN_ *, const char*);
SOAP_FMAC3 struct __ns1__chkZJSN_ * SOAP_FMAC4 soap_in___ns1__chkZJSN_(struct soap*, const char*, struct __ns1__chkZJSN_ *, const char*);
SOAP_FMAC1 struct __ns1__chkZJSN_ * SOAP_FMAC2 soap_instantiate___ns1__chkZJSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkZJSN_ * soap_new___ns1__chkZJSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkZJSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkZJSN_ * soap_new_req___ns1__chkZJSN_(
	struct soap *soap)
{
	struct __ns1__chkZJSN_ *_p = soap_new___ns1__chkZJSN_(soap);
	if (_p)
	{	soap_default___ns1__chkZJSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkZJSN_ * soap_new_set___ns1__chkZJSN_(
	struct soap *soap,
	_ns1__chkZJSN *ns1__chkZJSN)
{
	struct __ns1__chkZJSN_ *_p = soap_new___ns1__chkZJSN_(soap);
	if (_p)
	{	soap_default___ns1__chkZJSN_(soap, _p);
		_p->ns1__chkZJSN = ns1__chkZJSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkZJSN_(struct soap*, const struct __ns1__chkZJSN_ *, const char*, const char*);

inline int soap_write___ns1__chkZJSN_(struct soap *soap, struct __ns1__chkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkZJSN_(soap, p), 0) || soap_put___ns1__chkZJSN_(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkZJSN_(struct soap *soap, const char *URL, struct __ns1__chkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkZJSN_(soap, p), 0) || soap_put___ns1__chkZJSN_(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkZJSN_(struct soap *soap, const char *URL, struct __ns1__chkZJSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkZJSN_(soap, p), 0) || soap_put___ns1__chkZJSN_(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkZJSN_ * SOAP_FMAC4 soap_get___ns1__chkZJSN_(struct soap*, struct __ns1__chkZJSN_ *, const char*, const char*);

inline int soap_read___ns1__chkZJSN_(struct soap *soap, struct __ns1__chkZJSN_ *p)
{
	if (p)
	{	soap_default___ns1__chkZJSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkZJSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkZJSN_(struct soap *soap, const char *URL, struct __ns1__chkZJSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkZJSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkZJSN_(struct soap *soap, struct __ns1__chkZJSN_ *p)
{
	if (soap_read___ns1__chkZJSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkDispensing__DEFINED
#define SOAP_TYPE___ns1__chkDispensing__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkDispensing_(struct soap*, struct __ns1__chkDispensing_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkDispensing_(struct soap*, const struct __ns1__chkDispensing_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkDispensing_(struct soap*, const char*, int, const struct __ns1__chkDispensing_ *, const char*);
SOAP_FMAC3 struct __ns1__chkDispensing_ * SOAP_FMAC4 soap_in___ns1__chkDispensing_(struct soap*, const char*, struct __ns1__chkDispensing_ *, const char*);
SOAP_FMAC1 struct __ns1__chkDispensing_ * SOAP_FMAC2 soap_instantiate___ns1__chkDispensing_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkDispensing_ * soap_new___ns1__chkDispensing_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkDispensing_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkDispensing_ * soap_new_req___ns1__chkDispensing_(
	struct soap *soap)
{
	struct __ns1__chkDispensing_ *_p = soap_new___ns1__chkDispensing_(soap);
	if (_p)
	{	soap_default___ns1__chkDispensing_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkDispensing_ * soap_new_set___ns1__chkDispensing_(
	struct soap *soap,
	_ns1__chkDispensing *ns1__chkDispensing)
{
	struct __ns1__chkDispensing_ *_p = soap_new___ns1__chkDispensing_(soap);
	if (_p)
	{	soap_default___ns1__chkDispensing_(soap, _p);
		_p->ns1__chkDispensing = ns1__chkDispensing;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkDispensing_(struct soap*, const struct __ns1__chkDispensing_ *, const char*, const char*);

inline int soap_write___ns1__chkDispensing_(struct soap *soap, struct __ns1__chkDispensing_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkDispensing_(soap, p), 0) || soap_put___ns1__chkDispensing_(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkDispensing_(struct soap *soap, const char *URL, struct __ns1__chkDispensing_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkDispensing_(soap, p), 0) || soap_put___ns1__chkDispensing_(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkDispensing_(struct soap *soap, const char *URL, struct __ns1__chkDispensing_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkDispensing_(soap, p), 0) || soap_put___ns1__chkDispensing_(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkDispensing_ * SOAP_FMAC4 soap_get___ns1__chkDispensing_(struct soap*, struct __ns1__chkDispensing_ *, const char*, const char*);

inline int soap_read___ns1__chkDispensing_(struct soap *soap, struct __ns1__chkDispensing_ *p)
{
	if (p)
	{	soap_default___ns1__chkDispensing_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkDispensing_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkDispensing_(struct soap *soap, const char *URL, struct __ns1__chkDispensing_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkDispensing_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkDispensing_(struct soap *soap, struct __ns1__chkDispensing_ *p)
{
	if (soap_read___ns1__chkDispensing_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsIotTestData__DEFINED
#define SOAP_TYPE___ns1__InsIotTestData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsIotTestData_(struct soap*, struct __ns1__InsIotTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsIotTestData_(struct soap*, const struct __ns1__InsIotTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsIotTestData_(struct soap*, const char*, int, const struct __ns1__InsIotTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__InsIotTestData_ * SOAP_FMAC4 soap_in___ns1__InsIotTestData_(struct soap*, const char*, struct __ns1__InsIotTestData_ *, const char*);
SOAP_FMAC1 struct __ns1__InsIotTestData_ * SOAP_FMAC2 soap_instantiate___ns1__InsIotTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsIotTestData_ * soap_new___ns1__InsIotTestData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsIotTestData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsIotTestData_ * soap_new_req___ns1__InsIotTestData_(
	struct soap *soap)
{
	struct __ns1__InsIotTestData_ *_p = soap_new___ns1__InsIotTestData_(soap);
	if (_p)
	{	soap_default___ns1__InsIotTestData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsIotTestData_ * soap_new_set___ns1__InsIotTestData_(
	struct soap *soap,
	_ns1__InsIotTestData *ns1__InsIotTestData)
{
	struct __ns1__InsIotTestData_ *_p = soap_new___ns1__InsIotTestData_(soap);
	if (_p)
	{	soap_default___ns1__InsIotTestData_(soap, _p);
		_p->ns1__InsIotTestData = ns1__InsIotTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsIotTestData_(struct soap*, const struct __ns1__InsIotTestData_ *, const char*, const char*);

inline int soap_write___ns1__InsIotTestData_(struct soap *soap, struct __ns1__InsIotTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsIotTestData_(soap, p), 0) || soap_put___ns1__InsIotTestData_(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsIotTestData_(struct soap *soap, const char *URL, struct __ns1__InsIotTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotTestData_(soap, p), 0) || soap_put___ns1__InsIotTestData_(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsIotTestData_(struct soap *soap, const char *URL, struct __ns1__InsIotTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotTestData_(soap, p), 0) || soap_put___ns1__InsIotTestData_(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsIotTestData_ * SOAP_FMAC4 soap_get___ns1__InsIotTestData_(struct soap*, struct __ns1__InsIotTestData_ *, const char*, const char*);

inline int soap_read___ns1__InsIotTestData_(struct soap *soap, struct __ns1__InsIotTestData_ *p)
{
	if (p)
	{	soap_default___ns1__InsIotTestData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsIotTestData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsIotTestData_(struct soap *soap, const char *URL, struct __ns1__InsIotTestData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsIotTestData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsIotTestData_(struct soap *soap, struct __ns1__InsIotTestData_ *p)
{
	if (soap_read___ns1__InsIotTestData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsIotMachineRec__DEFINED
#define SOAP_TYPE___ns1__InsIotMachineRec__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsIotMachineRec_(struct soap*, struct __ns1__InsIotMachineRec_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsIotMachineRec_(struct soap*, const struct __ns1__InsIotMachineRec_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsIotMachineRec_(struct soap*, const char*, int, const struct __ns1__InsIotMachineRec_ *, const char*);
SOAP_FMAC3 struct __ns1__InsIotMachineRec_ * SOAP_FMAC4 soap_in___ns1__InsIotMachineRec_(struct soap*, const char*, struct __ns1__InsIotMachineRec_ *, const char*);
SOAP_FMAC1 struct __ns1__InsIotMachineRec_ * SOAP_FMAC2 soap_instantiate___ns1__InsIotMachineRec_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsIotMachineRec_ * soap_new___ns1__InsIotMachineRec_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsIotMachineRec_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsIotMachineRec_ * soap_new_req___ns1__InsIotMachineRec_(
	struct soap *soap)
{
	struct __ns1__InsIotMachineRec_ *_p = soap_new___ns1__InsIotMachineRec_(soap);
	if (_p)
	{	soap_default___ns1__InsIotMachineRec_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsIotMachineRec_ * soap_new_set___ns1__InsIotMachineRec_(
	struct soap *soap,
	_ns1__InsIotMachineRec *ns1__InsIotMachineRec)
{
	struct __ns1__InsIotMachineRec_ *_p = soap_new___ns1__InsIotMachineRec_(soap);
	if (_p)
	{	soap_default___ns1__InsIotMachineRec_(soap, _p);
		_p->ns1__InsIotMachineRec = ns1__InsIotMachineRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsIotMachineRec_(struct soap*, const struct __ns1__InsIotMachineRec_ *, const char*, const char*);

inline int soap_write___ns1__InsIotMachineRec_(struct soap *soap, struct __ns1__InsIotMachineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsIotMachineRec_(soap, p), 0) || soap_put___ns1__InsIotMachineRec_(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsIotMachineRec_(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotMachineRec_(soap, p), 0) || soap_put___ns1__InsIotMachineRec_(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsIotMachineRec_(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotMachineRec_(soap, p), 0) || soap_put___ns1__InsIotMachineRec_(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsIotMachineRec_ * SOAP_FMAC4 soap_get___ns1__InsIotMachineRec_(struct soap*, struct __ns1__InsIotMachineRec_ *, const char*, const char*);

inline int soap_read___ns1__InsIotMachineRec_(struct soap *soap, struct __ns1__InsIotMachineRec_ *p)
{
	if (p)
	{	soap_default___ns1__InsIotMachineRec_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsIotMachineRec_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsIotMachineRec_(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsIotMachineRec_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsIotMachineRec_(struct soap *soap, struct __ns1__InsIotMachineRec_ *p)
{
	if (soap_read___ns1__InsIotMachineRec_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLnkData__DEFINED
#define SOAP_TYPE___ns1__GetLnkData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLnkData_(struct soap*, struct __ns1__GetLnkData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLnkData_(struct soap*, const struct __ns1__GetLnkData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLnkData_(struct soap*, const char*, int, const struct __ns1__GetLnkData_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLnkData_ * SOAP_FMAC4 soap_in___ns1__GetLnkData_(struct soap*, const char*, struct __ns1__GetLnkData_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLnkData_ * SOAP_FMAC2 soap_instantiate___ns1__GetLnkData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLnkData_ * soap_new___ns1__GetLnkData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLnkData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLnkData_ * soap_new_req___ns1__GetLnkData_(
	struct soap *soap)
{
	struct __ns1__GetLnkData_ *_p = soap_new___ns1__GetLnkData_(soap);
	if (_p)
	{	soap_default___ns1__GetLnkData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLnkData_ * soap_new_set___ns1__GetLnkData_(
	struct soap *soap,
	_ns1__GetLnkData *ns1__GetLnkData)
{
	struct __ns1__GetLnkData_ *_p = soap_new___ns1__GetLnkData_(soap);
	if (_p)
	{	soap_default___ns1__GetLnkData_(soap, _p);
		_p->ns1__GetLnkData = ns1__GetLnkData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLnkData_(struct soap*, const struct __ns1__GetLnkData_ *, const char*, const char*);

inline int soap_write___ns1__GetLnkData_(struct soap *soap, struct __ns1__GetLnkData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLnkData_(soap, p), 0) || soap_put___ns1__GetLnkData_(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLnkData_(struct soap *soap, const char *URL, struct __ns1__GetLnkData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLnkData_(soap, p), 0) || soap_put___ns1__GetLnkData_(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLnkData_(struct soap *soap, const char *URL, struct __ns1__GetLnkData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLnkData_(soap, p), 0) || soap_put___ns1__GetLnkData_(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLnkData_ * SOAP_FMAC4 soap_get___ns1__GetLnkData_(struct soap*, struct __ns1__GetLnkData_ *, const char*, const char*);

inline int soap_read___ns1__GetLnkData_(struct soap *soap, struct __ns1__GetLnkData_ *p)
{
	if (p)
	{	soap_default___ns1__GetLnkData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLnkData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLnkData_(struct soap *soap, const char *URL, struct __ns1__GetLnkData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLnkData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLnkData_(struct soap *soap, struct __ns1__GetLnkData_ *p)
{
	if (soap_read___ns1__GetLnkData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTestValue__DEFINED
#define SOAP_TYPE___ns1__GetTestValue__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTestValue_(struct soap*, struct __ns1__GetTestValue_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTestValue_(struct soap*, const struct __ns1__GetTestValue_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTestValue_(struct soap*, const char*, int, const struct __ns1__GetTestValue_ *, const char*);
SOAP_FMAC3 struct __ns1__GetTestValue_ * SOAP_FMAC4 soap_in___ns1__GetTestValue_(struct soap*, const char*, struct __ns1__GetTestValue_ *, const char*);
SOAP_FMAC1 struct __ns1__GetTestValue_ * SOAP_FMAC2 soap_instantiate___ns1__GetTestValue_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTestValue_ * soap_new___ns1__GetTestValue_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTestValue_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTestValue_ * soap_new_req___ns1__GetTestValue_(
	struct soap *soap)
{
	struct __ns1__GetTestValue_ *_p = soap_new___ns1__GetTestValue_(soap);
	if (_p)
	{	soap_default___ns1__GetTestValue_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTestValue_ * soap_new_set___ns1__GetTestValue_(
	struct soap *soap,
	_ns1__GetTestValue *ns1__GetTestValue)
{
	struct __ns1__GetTestValue_ *_p = soap_new___ns1__GetTestValue_(soap);
	if (_p)
	{	soap_default___ns1__GetTestValue_(soap, _p);
		_p->ns1__GetTestValue = ns1__GetTestValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTestValue_(struct soap*, const struct __ns1__GetTestValue_ *, const char*, const char*);

inline int soap_write___ns1__GetTestValue_(struct soap *soap, struct __ns1__GetTestValue_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTestValue_(soap, p), 0) || soap_put___ns1__GetTestValue_(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTestValue_(struct soap *soap, const char *URL, struct __ns1__GetTestValue_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValue_(soap, p), 0) || soap_put___ns1__GetTestValue_(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTestValue_(struct soap *soap, const char *URL, struct __ns1__GetTestValue_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValue_(soap, p), 0) || soap_put___ns1__GetTestValue_(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTestValue_ * SOAP_FMAC4 soap_get___ns1__GetTestValue_(struct soap*, struct __ns1__GetTestValue_ *, const char*, const char*);

inline int soap_read___ns1__GetTestValue_(struct soap *soap, struct __ns1__GetTestValue_ *p)
{
	if (p)
	{	soap_default___ns1__GetTestValue_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTestValue_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTestValue_(struct soap *soap, const char *URL, struct __ns1__GetTestValue_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTestValue_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTestValue_(struct soap *soap, struct __ns1__GetTestValue_ *p)
{
	if (soap_read___ns1__GetTestValue_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMoBase__DEFINED
#define SOAP_TYPE___ns1__GetMoBase__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMoBase_(struct soap*, struct __ns1__GetMoBase_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMoBase_(struct soap*, const struct __ns1__GetMoBase_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMoBase_(struct soap*, const char*, int, const struct __ns1__GetMoBase_ *, const char*);
SOAP_FMAC3 struct __ns1__GetMoBase_ * SOAP_FMAC4 soap_in___ns1__GetMoBase_(struct soap*, const char*, struct __ns1__GetMoBase_ *, const char*);
SOAP_FMAC1 struct __ns1__GetMoBase_ * SOAP_FMAC2 soap_instantiate___ns1__GetMoBase_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMoBase_ * soap_new___ns1__GetMoBase_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMoBase_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMoBase_ * soap_new_req___ns1__GetMoBase_(
	struct soap *soap)
{
	struct __ns1__GetMoBase_ *_p = soap_new___ns1__GetMoBase_(soap);
	if (_p)
	{	soap_default___ns1__GetMoBase_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMoBase_ * soap_new_set___ns1__GetMoBase_(
	struct soap *soap,
	_ns1__GetMoBase *ns1__GetMoBase)
{
	struct __ns1__GetMoBase_ *_p = soap_new___ns1__GetMoBase_(soap);
	if (_p)
	{	soap_default___ns1__GetMoBase_(soap, _p);
		_p->ns1__GetMoBase = ns1__GetMoBase;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMoBase_(struct soap*, const struct __ns1__GetMoBase_ *, const char*, const char*);

inline int soap_write___ns1__GetMoBase_(struct soap *soap, struct __ns1__GetMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMoBase_(soap, p), 0) || soap_put___ns1__GetMoBase_(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMoBase_(struct soap *soap, const char *URL, struct __ns1__GetMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMoBase_(soap, p), 0) || soap_put___ns1__GetMoBase_(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMoBase_(struct soap *soap, const char *URL, struct __ns1__GetMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMoBase_(soap, p), 0) || soap_put___ns1__GetMoBase_(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMoBase_ * SOAP_FMAC4 soap_get___ns1__GetMoBase_(struct soap*, struct __ns1__GetMoBase_ *, const char*, const char*);

inline int soap_read___ns1__GetMoBase_(struct soap *soap, struct __ns1__GetMoBase_ *p)
{
	if (p)
	{	soap_default___ns1__GetMoBase_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMoBase_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMoBase_(struct soap *soap, const char *URL, struct __ns1__GetMoBase_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMoBase_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMoBase_(struct soap *soap, struct __ns1__GetMoBase_ *p)
{
	if (soap_read___ns1__GetMoBase_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdSnRecInfo__DEFINED
#define SOAP_TYPE___ns1__UpdSnRecInfo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdSnRecInfo_(struct soap*, struct __ns1__UpdSnRecInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdSnRecInfo_(struct soap*, const struct __ns1__UpdSnRecInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdSnRecInfo_(struct soap*, const char*, int, const struct __ns1__UpdSnRecInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__UpdSnRecInfo_ * SOAP_FMAC4 soap_in___ns1__UpdSnRecInfo_(struct soap*, const char*, struct __ns1__UpdSnRecInfo_ *, const char*);
SOAP_FMAC1 struct __ns1__UpdSnRecInfo_ * SOAP_FMAC2 soap_instantiate___ns1__UpdSnRecInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdSnRecInfo_ * soap_new___ns1__UpdSnRecInfo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdSnRecInfo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdSnRecInfo_ * soap_new_req___ns1__UpdSnRecInfo_(
	struct soap *soap)
{
	struct __ns1__UpdSnRecInfo_ *_p = soap_new___ns1__UpdSnRecInfo_(soap);
	if (_p)
	{	soap_default___ns1__UpdSnRecInfo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdSnRecInfo_ * soap_new_set___ns1__UpdSnRecInfo_(
	struct soap *soap,
	_ns1__UpdSnRecInfo *ns1__UpdSnRecInfo)
{
	struct __ns1__UpdSnRecInfo_ *_p = soap_new___ns1__UpdSnRecInfo_(soap);
	if (_p)
	{	soap_default___ns1__UpdSnRecInfo_(soap, _p);
		_p->ns1__UpdSnRecInfo = ns1__UpdSnRecInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdSnRecInfo_(struct soap*, const struct __ns1__UpdSnRecInfo_ *, const char*, const char*);

inline int soap_write___ns1__UpdSnRecInfo_(struct soap *soap, struct __ns1__UpdSnRecInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdSnRecInfo_(soap, p), 0) || soap_put___ns1__UpdSnRecInfo_(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdSnRecInfo_(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdSnRecInfo_(soap, p), 0) || soap_put___ns1__UpdSnRecInfo_(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdSnRecInfo_(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdSnRecInfo_(soap, p), 0) || soap_put___ns1__UpdSnRecInfo_(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdSnRecInfo_ * SOAP_FMAC4 soap_get___ns1__UpdSnRecInfo_(struct soap*, struct __ns1__UpdSnRecInfo_ *, const char*, const char*);

inline int soap_read___ns1__UpdSnRecInfo_(struct soap *soap, struct __ns1__UpdSnRecInfo_ *p)
{
	if (p)
	{	soap_default___ns1__UpdSnRecInfo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdSnRecInfo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdSnRecInfo_(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdSnRecInfo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdSnRecInfo_(struct soap *soap, struct __ns1__UpdSnRecInfo_ *p)
{
	if (soap_read___ns1__UpdSnRecInfo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsBoxInfo__DEFINED
#define SOAP_TYPE___ns1__InsBoxInfo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsBoxInfo_(struct soap*, struct __ns1__InsBoxInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsBoxInfo_(struct soap*, const struct __ns1__InsBoxInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsBoxInfo_(struct soap*, const char*, int, const struct __ns1__InsBoxInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__InsBoxInfo_ * SOAP_FMAC4 soap_in___ns1__InsBoxInfo_(struct soap*, const char*, struct __ns1__InsBoxInfo_ *, const char*);
SOAP_FMAC1 struct __ns1__InsBoxInfo_ * SOAP_FMAC2 soap_instantiate___ns1__InsBoxInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsBoxInfo_ * soap_new___ns1__InsBoxInfo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsBoxInfo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsBoxInfo_ * soap_new_req___ns1__InsBoxInfo_(
	struct soap *soap)
{
	struct __ns1__InsBoxInfo_ *_p = soap_new___ns1__InsBoxInfo_(soap);
	if (_p)
	{	soap_default___ns1__InsBoxInfo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsBoxInfo_ * soap_new_set___ns1__InsBoxInfo_(
	struct soap *soap,
	_ns1__InsBoxInfo *ns1__InsBoxInfo)
{
	struct __ns1__InsBoxInfo_ *_p = soap_new___ns1__InsBoxInfo_(soap);
	if (_p)
	{	soap_default___ns1__InsBoxInfo_(soap, _p);
		_p->ns1__InsBoxInfo = ns1__InsBoxInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsBoxInfo_(struct soap*, const struct __ns1__InsBoxInfo_ *, const char*, const char*);

inline int soap_write___ns1__InsBoxInfo_(struct soap *soap, struct __ns1__InsBoxInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsBoxInfo_(soap, p), 0) || soap_put___ns1__InsBoxInfo_(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsBoxInfo_(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxInfo_(soap, p), 0) || soap_put___ns1__InsBoxInfo_(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsBoxInfo_(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxInfo_(soap, p), 0) || soap_put___ns1__InsBoxInfo_(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsBoxInfo_ * SOAP_FMAC4 soap_get___ns1__InsBoxInfo_(struct soap*, struct __ns1__InsBoxInfo_ *, const char*, const char*);

inline int soap_read___ns1__InsBoxInfo_(struct soap *soap, struct __ns1__InsBoxInfo_ *p)
{
	if (p)
	{	soap_default___ns1__InsBoxInfo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsBoxInfo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsBoxInfo_(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsBoxInfo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsBoxInfo_(struct soap *soap, struct __ns1__InsBoxInfo_ *p)
{
	if (soap_read___ns1__InsBoxInfo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsLnkOutSN__DEFINED
#define SOAP_TYPE___ns1__InsLnkOutSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsLnkOutSN_(struct soap*, struct __ns1__InsLnkOutSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsLnkOutSN_(struct soap*, const struct __ns1__InsLnkOutSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsLnkOutSN_(struct soap*, const char*, int, const struct __ns1__InsLnkOutSN_ *, const char*);
SOAP_FMAC3 struct __ns1__InsLnkOutSN_ * SOAP_FMAC4 soap_in___ns1__InsLnkOutSN_(struct soap*, const char*, struct __ns1__InsLnkOutSN_ *, const char*);
SOAP_FMAC1 struct __ns1__InsLnkOutSN_ * SOAP_FMAC2 soap_instantiate___ns1__InsLnkOutSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsLnkOutSN_ * soap_new___ns1__InsLnkOutSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsLnkOutSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsLnkOutSN_ * soap_new_req___ns1__InsLnkOutSN_(
	struct soap *soap)
{
	struct __ns1__InsLnkOutSN_ *_p = soap_new___ns1__InsLnkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__InsLnkOutSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsLnkOutSN_ * soap_new_set___ns1__InsLnkOutSN_(
	struct soap *soap,
	_ns1__InsLnkOutSN *ns1__InsLnkOutSN)
{
	struct __ns1__InsLnkOutSN_ *_p = soap_new___ns1__InsLnkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__InsLnkOutSN_(soap, _p);
		_p->ns1__InsLnkOutSN = ns1__InsLnkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsLnkOutSN_(struct soap*, const struct __ns1__InsLnkOutSN_ *, const char*, const char*);

inline int soap_write___ns1__InsLnkOutSN_(struct soap *soap, struct __ns1__InsLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsLnkOutSN_(soap, p), 0) || soap_put___ns1__InsLnkOutSN_(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLnkOutSN_(soap, p), 0) || soap_put___ns1__InsLnkOutSN_(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLnkOutSN_(soap, p), 0) || soap_put___ns1__InsLnkOutSN_(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsLnkOutSN_ * SOAP_FMAC4 soap_get___ns1__InsLnkOutSN_(struct soap*, struct __ns1__InsLnkOutSN_ *, const char*, const char*);

inline int soap_read___ns1__InsLnkOutSN_(struct soap *soap, struct __ns1__InsLnkOutSN_ *p)
{
	if (p)
	{	soap_default___ns1__InsLnkOutSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsLnkOutSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsLnkOutSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsLnkOutSN_(struct soap *soap, struct __ns1__InsLnkOutSN_ *p)
{
	if (soap_read___ns1__InsLnkOutSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNStationEmp__DEFINED
#define SOAP_TYPE___ns1__InsSNStationEmp__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNStationEmp_(struct soap*, struct __ns1__InsSNStationEmp_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNStationEmp_(struct soap*, const struct __ns1__InsSNStationEmp_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNStationEmp_(struct soap*, const char*, int, const struct __ns1__InsSNStationEmp_ *, const char*);
SOAP_FMAC3 struct __ns1__InsSNStationEmp_ * SOAP_FMAC4 soap_in___ns1__InsSNStationEmp_(struct soap*, const char*, struct __ns1__InsSNStationEmp_ *, const char*);
SOAP_FMAC1 struct __ns1__InsSNStationEmp_ * SOAP_FMAC2 soap_instantiate___ns1__InsSNStationEmp_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNStationEmp_ * soap_new___ns1__InsSNStationEmp_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNStationEmp_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNStationEmp_ * soap_new_req___ns1__InsSNStationEmp_(
	struct soap *soap)
{
	struct __ns1__InsSNStationEmp_ *_p = soap_new___ns1__InsSNStationEmp_(soap);
	if (_p)
	{	soap_default___ns1__InsSNStationEmp_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNStationEmp_ * soap_new_set___ns1__InsSNStationEmp_(
	struct soap *soap,
	_ns1__InsSNStationEmp *ns1__InsSNStationEmp)
{
	struct __ns1__InsSNStationEmp_ *_p = soap_new___ns1__InsSNStationEmp_(soap);
	if (_p)
	{	soap_default___ns1__InsSNStationEmp_(soap, _p);
		_p->ns1__InsSNStationEmp = ns1__InsSNStationEmp;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNStationEmp_(struct soap*, const struct __ns1__InsSNStationEmp_ *, const char*, const char*);

inline int soap_write___ns1__InsSNStationEmp_(struct soap *soap, struct __ns1__InsSNStationEmp_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNStationEmp_(soap, p), 0) || soap_put___ns1__InsSNStationEmp_(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNStationEmp_(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNStationEmp_(soap, p), 0) || soap_put___ns1__InsSNStationEmp_(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNStationEmp_(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNStationEmp_(soap, p), 0) || soap_put___ns1__InsSNStationEmp_(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNStationEmp_ * SOAP_FMAC4 soap_get___ns1__InsSNStationEmp_(struct soap*, struct __ns1__InsSNStationEmp_ *, const char*, const char*);

inline int soap_read___ns1__InsSNStationEmp_(struct soap *soap, struct __ns1__InsSNStationEmp_ *p)
{
	if (p)
	{	soap_default___ns1__InsSNStationEmp_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNStationEmp_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNStationEmp_(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNStationEmp_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNStationEmp_(struct soap *soap, struct __ns1__InsSNStationEmp_ *p)
{
	if (soap_read___ns1__InsSNStationEmp_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelBoxLnk__DEFINED
#define SOAP_TYPE___ns1__CancelBoxLnk__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelBoxLnk_(struct soap*, struct __ns1__CancelBoxLnk_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelBoxLnk_(struct soap*, const struct __ns1__CancelBoxLnk_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelBoxLnk_(struct soap*, const char*, int, const struct __ns1__CancelBoxLnk_ *, const char*);
SOAP_FMAC3 struct __ns1__CancelBoxLnk_ * SOAP_FMAC4 soap_in___ns1__CancelBoxLnk_(struct soap*, const char*, struct __ns1__CancelBoxLnk_ *, const char*);
SOAP_FMAC1 struct __ns1__CancelBoxLnk_ * SOAP_FMAC2 soap_instantiate___ns1__CancelBoxLnk_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelBoxLnk_ * soap_new___ns1__CancelBoxLnk_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelBoxLnk_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelBoxLnk_ * soap_new_req___ns1__CancelBoxLnk_(
	struct soap *soap)
{
	struct __ns1__CancelBoxLnk_ *_p = soap_new___ns1__CancelBoxLnk_(soap);
	if (_p)
	{	soap_default___ns1__CancelBoxLnk_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelBoxLnk_ * soap_new_set___ns1__CancelBoxLnk_(
	struct soap *soap,
	_ns1__CancelBoxLnk *ns1__CancelBoxLnk)
{
	struct __ns1__CancelBoxLnk_ *_p = soap_new___ns1__CancelBoxLnk_(soap);
	if (_p)
	{	soap_default___ns1__CancelBoxLnk_(soap, _p);
		_p->ns1__CancelBoxLnk = ns1__CancelBoxLnk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelBoxLnk_(struct soap*, const struct __ns1__CancelBoxLnk_ *, const char*, const char*);

inline int soap_write___ns1__CancelBoxLnk_(struct soap *soap, struct __ns1__CancelBoxLnk_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelBoxLnk_(soap, p), 0) || soap_put___ns1__CancelBoxLnk_(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelBoxLnk_(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelBoxLnk_(soap, p), 0) || soap_put___ns1__CancelBoxLnk_(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelBoxLnk_(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelBoxLnk_(soap, p), 0) || soap_put___ns1__CancelBoxLnk_(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelBoxLnk_ * SOAP_FMAC4 soap_get___ns1__CancelBoxLnk_(struct soap*, struct __ns1__CancelBoxLnk_ *, const char*, const char*);

inline int soap_read___ns1__CancelBoxLnk_(struct soap *soap, struct __ns1__CancelBoxLnk_ *p)
{
	if (p)
	{	soap_default___ns1__CancelBoxLnk_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelBoxLnk_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelBoxLnk_(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelBoxLnk_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelBoxLnk_(struct soap *soap, struct __ns1__CancelBoxLnk_ *p)
{
	if (soap_read___ns1__CancelBoxLnk_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OutStationbyBox__DEFINED
#define SOAP_TYPE___ns1__OutStationbyBox__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutStationbyBox_(struct soap*, struct __ns1__OutStationbyBox_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutStationbyBox_(struct soap*, const struct __ns1__OutStationbyBox_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutStationbyBox_(struct soap*, const char*, int, const struct __ns1__OutStationbyBox_ *, const char*);
SOAP_FMAC3 struct __ns1__OutStationbyBox_ * SOAP_FMAC4 soap_in___ns1__OutStationbyBox_(struct soap*, const char*, struct __ns1__OutStationbyBox_ *, const char*);
SOAP_FMAC1 struct __ns1__OutStationbyBox_ * SOAP_FMAC2 soap_instantiate___ns1__OutStationbyBox_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutStationbyBox_ * soap_new___ns1__OutStationbyBox_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutStationbyBox_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutStationbyBox_ * soap_new_req___ns1__OutStationbyBox_(
	struct soap *soap)
{
	struct __ns1__OutStationbyBox_ *_p = soap_new___ns1__OutStationbyBox_(soap);
	if (_p)
	{	soap_default___ns1__OutStationbyBox_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutStationbyBox_ * soap_new_set___ns1__OutStationbyBox_(
	struct soap *soap,
	_ns1__OutStationbyBox *ns1__OutStationbyBox)
{
	struct __ns1__OutStationbyBox_ *_p = soap_new___ns1__OutStationbyBox_(soap);
	if (_p)
	{	soap_default___ns1__OutStationbyBox_(soap, _p);
		_p->ns1__OutStationbyBox = ns1__OutStationbyBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutStationbyBox_(struct soap*, const struct __ns1__OutStationbyBox_ *, const char*, const char*);

inline int soap_write___ns1__OutStationbyBox_(struct soap *soap, struct __ns1__OutStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OutStationbyBox_(soap, p), 0) || soap_put___ns1__OutStationbyBox_(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutStationbyBox_(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutStationbyBox_(soap, p), 0) || soap_put___ns1__OutStationbyBox_(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutStationbyBox_(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutStationbyBox_(soap, p), 0) || soap_put___ns1__OutStationbyBox_(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutStationbyBox_ * SOAP_FMAC4 soap_get___ns1__OutStationbyBox_(struct soap*, struct __ns1__OutStationbyBox_ *, const char*, const char*);

inline int soap_read___ns1__OutStationbyBox_(struct soap *soap, struct __ns1__OutStationbyBox_ *p)
{
	if (p)
	{	soap_default___ns1__OutStationbyBox_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OutStationbyBox_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutStationbyBox_(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OutStationbyBox_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OutStationbyBox_(struct soap *soap, struct __ns1__OutStationbyBox_ *p)
{
	if (soap_read___ns1__OutStationbyBox_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InStationbyBox__DEFINED
#define SOAP_TYPE___ns1__InStationbyBox__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InStationbyBox_(struct soap*, struct __ns1__InStationbyBox_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InStationbyBox_(struct soap*, const struct __ns1__InStationbyBox_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InStationbyBox_(struct soap*, const char*, int, const struct __ns1__InStationbyBox_ *, const char*);
SOAP_FMAC3 struct __ns1__InStationbyBox_ * SOAP_FMAC4 soap_in___ns1__InStationbyBox_(struct soap*, const char*, struct __ns1__InStationbyBox_ *, const char*);
SOAP_FMAC1 struct __ns1__InStationbyBox_ * SOAP_FMAC2 soap_instantiate___ns1__InStationbyBox_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InStationbyBox_ * soap_new___ns1__InStationbyBox_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InStationbyBox_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InStationbyBox_ * soap_new_req___ns1__InStationbyBox_(
	struct soap *soap)
{
	struct __ns1__InStationbyBox_ *_p = soap_new___ns1__InStationbyBox_(soap);
	if (_p)
	{	soap_default___ns1__InStationbyBox_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InStationbyBox_ * soap_new_set___ns1__InStationbyBox_(
	struct soap *soap,
	_ns1__InStationbyBox *ns1__InStationbyBox)
{
	struct __ns1__InStationbyBox_ *_p = soap_new___ns1__InStationbyBox_(soap);
	if (_p)
	{	soap_default___ns1__InStationbyBox_(soap, _p);
		_p->ns1__InStationbyBox = ns1__InStationbyBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InStationbyBox_(struct soap*, const struct __ns1__InStationbyBox_ *, const char*, const char*);

inline int soap_write___ns1__InStationbyBox_(struct soap *soap, struct __ns1__InStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InStationbyBox_(soap, p), 0) || soap_put___ns1__InStationbyBox_(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InStationbyBox_(struct soap *soap, const char *URL, struct __ns1__InStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InStationbyBox_(soap, p), 0) || soap_put___ns1__InStationbyBox_(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InStationbyBox_(struct soap *soap, const char *URL, struct __ns1__InStationbyBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InStationbyBox_(soap, p), 0) || soap_put___ns1__InStationbyBox_(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InStationbyBox_ * SOAP_FMAC4 soap_get___ns1__InStationbyBox_(struct soap*, struct __ns1__InStationbyBox_ *, const char*, const char*);

inline int soap_read___ns1__InStationbyBox_(struct soap *soap, struct __ns1__InStationbyBox_ *p)
{
	if (p)
	{	soap_default___ns1__InStationbyBox_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InStationbyBox_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InStationbyBox_(struct soap *soap, const char *URL, struct __ns1__InStationbyBox_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InStationbyBox_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InStationbyBox_(struct soap *soap, struct __ns1__InStationbyBox_ *p)
{
	if (soap_read___ns1__InStationbyBox_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__EndSNtoBox__DEFINED
#define SOAP_TYPE___ns1__EndSNtoBox__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndSNtoBox_(struct soap*, struct __ns1__EndSNtoBox_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndSNtoBox_(struct soap*, const struct __ns1__EndSNtoBox_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndSNtoBox_(struct soap*, const char*, int, const struct __ns1__EndSNtoBox_ *, const char*);
SOAP_FMAC3 struct __ns1__EndSNtoBox_ * SOAP_FMAC4 soap_in___ns1__EndSNtoBox_(struct soap*, const char*, struct __ns1__EndSNtoBox_ *, const char*);
SOAP_FMAC1 struct __ns1__EndSNtoBox_ * SOAP_FMAC2 soap_instantiate___ns1__EndSNtoBox_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndSNtoBox_ * soap_new___ns1__EndSNtoBox_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EndSNtoBox_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EndSNtoBox_ * soap_new_req___ns1__EndSNtoBox_(
	struct soap *soap)
{
	struct __ns1__EndSNtoBox_ *_p = soap_new___ns1__EndSNtoBox_(soap);
	if (_p)
	{	soap_default___ns1__EndSNtoBox_(soap, _p);
	}
	return _p;
}

inline struct __ns1__EndSNtoBox_ * soap_new_set___ns1__EndSNtoBox_(
	struct soap *soap,
	_ns1__EndSNtoBox *ns1__EndSNtoBox)
{
	struct __ns1__EndSNtoBox_ *_p = soap_new___ns1__EndSNtoBox_(soap);
	if (_p)
	{	soap_default___ns1__EndSNtoBox_(soap, _p);
		_p->ns1__EndSNtoBox = ns1__EndSNtoBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndSNtoBox_(struct soap*, const struct __ns1__EndSNtoBox_ *, const char*, const char*);

inline int soap_write___ns1__EndSNtoBox_(struct soap *soap, struct __ns1__EndSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__EndSNtoBox_(soap, p), 0) || soap_put___ns1__EndSNtoBox_(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EndSNtoBox_(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EndSNtoBox_(soap, p), 0) || soap_put___ns1__EndSNtoBox_(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EndSNtoBox_(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EndSNtoBox_(soap, p), 0) || soap_put___ns1__EndSNtoBox_(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EndSNtoBox_ * SOAP_FMAC4 soap_get___ns1__EndSNtoBox_(struct soap*, struct __ns1__EndSNtoBox_ *, const char*, const char*);

inline int soap_read___ns1__EndSNtoBox_(struct soap *soap, struct __ns1__EndSNtoBox_ *p)
{
	if (p)
	{	soap_default___ns1__EndSNtoBox_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__EndSNtoBox_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EndSNtoBox_(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__EndSNtoBox_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__EndSNtoBox_(struct soap *soap, struct __ns1__EndSNtoBox_ *p)
{
	if (soap_read___ns1__EndSNtoBox_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InSNtoBox__DEFINED
#define SOAP_TYPE___ns1__InSNtoBox__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InSNtoBox_(struct soap*, struct __ns1__InSNtoBox_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InSNtoBox_(struct soap*, const struct __ns1__InSNtoBox_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InSNtoBox_(struct soap*, const char*, int, const struct __ns1__InSNtoBox_ *, const char*);
SOAP_FMAC3 struct __ns1__InSNtoBox_ * SOAP_FMAC4 soap_in___ns1__InSNtoBox_(struct soap*, const char*, struct __ns1__InSNtoBox_ *, const char*);
SOAP_FMAC1 struct __ns1__InSNtoBox_ * SOAP_FMAC2 soap_instantiate___ns1__InSNtoBox_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InSNtoBox_ * soap_new___ns1__InSNtoBox_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InSNtoBox_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InSNtoBox_ * soap_new_req___ns1__InSNtoBox_(
	struct soap *soap)
{
	struct __ns1__InSNtoBox_ *_p = soap_new___ns1__InSNtoBox_(soap);
	if (_p)
	{	soap_default___ns1__InSNtoBox_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InSNtoBox_ * soap_new_set___ns1__InSNtoBox_(
	struct soap *soap,
	_ns1__InSNtoBox *ns1__InSNtoBox)
{
	struct __ns1__InSNtoBox_ *_p = soap_new___ns1__InSNtoBox_(soap);
	if (_p)
	{	soap_default___ns1__InSNtoBox_(soap, _p);
		_p->ns1__InSNtoBox = ns1__InSNtoBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InSNtoBox_(struct soap*, const struct __ns1__InSNtoBox_ *, const char*, const char*);

inline int soap_write___ns1__InSNtoBox_(struct soap *soap, struct __ns1__InSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InSNtoBox_(soap, p), 0) || soap_put___ns1__InSNtoBox_(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InSNtoBox_(struct soap *soap, const char *URL, struct __ns1__InSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InSNtoBox_(soap, p), 0) || soap_put___ns1__InSNtoBox_(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InSNtoBox_(struct soap *soap, const char *URL, struct __ns1__InSNtoBox_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InSNtoBox_(soap, p), 0) || soap_put___ns1__InSNtoBox_(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InSNtoBox_ * SOAP_FMAC4 soap_get___ns1__InSNtoBox_(struct soap*, struct __ns1__InSNtoBox_ *, const char*, const char*);

inline int soap_read___ns1__InSNtoBox_(struct soap *soap, struct __ns1__InSNtoBox_ *p)
{
	if (p)
	{	soap_default___ns1__InSNtoBox_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InSNtoBox_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InSNtoBox_(struct soap *soap, const char *URL, struct __ns1__InSNtoBox_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InSNtoBox_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InSNtoBox_(struct soap *soap, struct __ns1__InSNtoBox_ *p)
{
	if (soap_read___ns1__InSNtoBox_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkBoxNo__DEFINED
#define SOAP_TYPE___ns1__chkBoxNo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkBoxNo_(struct soap*, struct __ns1__chkBoxNo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkBoxNo_(struct soap*, const struct __ns1__chkBoxNo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkBoxNo_(struct soap*, const char*, int, const struct __ns1__chkBoxNo_ *, const char*);
SOAP_FMAC3 struct __ns1__chkBoxNo_ * SOAP_FMAC4 soap_in___ns1__chkBoxNo_(struct soap*, const char*, struct __ns1__chkBoxNo_ *, const char*);
SOAP_FMAC1 struct __ns1__chkBoxNo_ * SOAP_FMAC2 soap_instantiate___ns1__chkBoxNo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkBoxNo_ * soap_new___ns1__chkBoxNo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkBoxNo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkBoxNo_ * soap_new_req___ns1__chkBoxNo_(
	struct soap *soap)
{
	struct __ns1__chkBoxNo_ *_p = soap_new___ns1__chkBoxNo_(soap);
	if (_p)
	{	soap_default___ns1__chkBoxNo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkBoxNo_ * soap_new_set___ns1__chkBoxNo_(
	struct soap *soap,
	_ns1__chkBoxNo *ns1__chkBoxNo)
{
	struct __ns1__chkBoxNo_ *_p = soap_new___ns1__chkBoxNo_(soap);
	if (_p)
	{	soap_default___ns1__chkBoxNo_(soap, _p);
		_p->ns1__chkBoxNo = ns1__chkBoxNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkBoxNo_(struct soap*, const struct __ns1__chkBoxNo_ *, const char*, const char*);

inline int soap_write___ns1__chkBoxNo_(struct soap *soap, struct __ns1__chkBoxNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkBoxNo_(soap, p), 0) || soap_put___ns1__chkBoxNo_(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkBoxNo_(struct soap *soap, const char *URL, struct __ns1__chkBoxNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkBoxNo_(soap, p), 0) || soap_put___ns1__chkBoxNo_(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkBoxNo_(struct soap *soap, const char *URL, struct __ns1__chkBoxNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkBoxNo_(soap, p), 0) || soap_put___ns1__chkBoxNo_(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkBoxNo_ * SOAP_FMAC4 soap_get___ns1__chkBoxNo_(struct soap*, struct __ns1__chkBoxNo_ *, const char*, const char*);

inline int soap_read___ns1__chkBoxNo_(struct soap *soap, struct __ns1__chkBoxNo_ *p)
{
	if (p)
	{	soap_default___ns1__chkBoxNo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkBoxNo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkBoxNo_(struct soap *soap, const char *URL, struct __ns1__chkBoxNo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkBoxNo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkBoxNo_(struct soap *soap, struct __ns1__chkBoxNo_ *p)
{
	if (soap_read___ns1__chkBoxNo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsBoxNOTime__DEFINED
#define SOAP_TYPE___ns1__InsBoxNOTime__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsBoxNOTime_(struct soap*, struct __ns1__InsBoxNOTime_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsBoxNOTime_(struct soap*, const struct __ns1__InsBoxNOTime_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsBoxNOTime_(struct soap*, const char*, int, const struct __ns1__InsBoxNOTime_ *, const char*);
SOAP_FMAC3 struct __ns1__InsBoxNOTime_ * SOAP_FMAC4 soap_in___ns1__InsBoxNOTime_(struct soap*, const char*, struct __ns1__InsBoxNOTime_ *, const char*);
SOAP_FMAC1 struct __ns1__InsBoxNOTime_ * SOAP_FMAC2 soap_instantiate___ns1__InsBoxNOTime_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsBoxNOTime_ * soap_new___ns1__InsBoxNOTime_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsBoxNOTime_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsBoxNOTime_ * soap_new_req___ns1__InsBoxNOTime_(
	struct soap *soap)
{
	struct __ns1__InsBoxNOTime_ *_p = soap_new___ns1__InsBoxNOTime_(soap);
	if (_p)
	{	soap_default___ns1__InsBoxNOTime_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsBoxNOTime_ * soap_new_set___ns1__InsBoxNOTime_(
	struct soap *soap,
	_ns1__InsBoxNOTime *ns1__InsBoxNOTime)
{
	struct __ns1__InsBoxNOTime_ *_p = soap_new___ns1__InsBoxNOTime_(soap);
	if (_p)
	{	soap_default___ns1__InsBoxNOTime_(soap, _p);
		_p->ns1__InsBoxNOTime = ns1__InsBoxNOTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsBoxNOTime_(struct soap*, const struct __ns1__InsBoxNOTime_ *, const char*, const char*);

inline int soap_write___ns1__InsBoxNOTime_(struct soap *soap, struct __ns1__InsBoxNOTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsBoxNOTime_(soap, p), 0) || soap_put___ns1__InsBoxNOTime_(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsBoxNOTime_(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxNOTime_(soap, p), 0) || soap_put___ns1__InsBoxNOTime_(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsBoxNOTime_(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxNOTime_(soap, p), 0) || soap_put___ns1__InsBoxNOTime_(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsBoxNOTime_ * SOAP_FMAC4 soap_get___ns1__InsBoxNOTime_(struct soap*, struct __ns1__InsBoxNOTime_ *, const char*, const char*);

inline int soap_read___ns1__InsBoxNOTime_(struct soap *soap, struct __ns1__InsBoxNOTime_ *p)
{
	if (p)
	{	soap_default___ns1__InsBoxNOTime_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsBoxNOTime_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsBoxNOTime_(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsBoxNOTime_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsBoxNOTime_(struct soap *soap, struct __ns1__InsBoxNOTime_ *p)
{
	if (soap_read___ns1__InsBoxNOTime_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLinkZJCount__DEFINED
#define SOAP_TYPE___ns1__GetLinkZJCount__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLinkZJCount_(struct soap*, struct __ns1__GetLinkZJCount_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLinkZJCount_(struct soap*, const struct __ns1__GetLinkZJCount_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLinkZJCount_(struct soap*, const char*, int, const struct __ns1__GetLinkZJCount_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLinkZJCount_ * SOAP_FMAC4 soap_in___ns1__GetLinkZJCount_(struct soap*, const char*, struct __ns1__GetLinkZJCount_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLinkZJCount_ * SOAP_FMAC2 soap_instantiate___ns1__GetLinkZJCount_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLinkZJCount_ * soap_new___ns1__GetLinkZJCount_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLinkZJCount_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLinkZJCount_ * soap_new_req___ns1__GetLinkZJCount_(
	struct soap *soap)
{
	struct __ns1__GetLinkZJCount_ *_p = soap_new___ns1__GetLinkZJCount_(soap);
	if (_p)
	{	soap_default___ns1__GetLinkZJCount_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLinkZJCount_ * soap_new_set___ns1__GetLinkZJCount_(
	struct soap *soap,
	_ns1__GetLinkZJCount *ns1__GetLinkZJCount)
{
	struct __ns1__GetLinkZJCount_ *_p = soap_new___ns1__GetLinkZJCount_(soap);
	if (_p)
	{	soap_default___ns1__GetLinkZJCount_(soap, _p);
		_p->ns1__GetLinkZJCount = ns1__GetLinkZJCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLinkZJCount_(struct soap*, const struct __ns1__GetLinkZJCount_ *, const char*, const char*);

inline int soap_write___ns1__GetLinkZJCount_(struct soap *soap, struct __ns1__GetLinkZJCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLinkZJCount_(soap, p), 0) || soap_put___ns1__GetLinkZJCount_(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLinkZJCount_(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkZJCount_(soap, p), 0) || soap_put___ns1__GetLinkZJCount_(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLinkZJCount_(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkZJCount_(soap, p), 0) || soap_put___ns1__GetLinkZJCount_(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLinkZJCount_ * SOAP_FMAC4 soap_get___ns1__GetLinkZJCount_(struct soap*, struct __ns1__GetLinkZJCount_ *, const char*, const char*);

inline int soap_read___ns1__GetLinkZJCount_(struct soap *soap, struct __ns1__GetLinkZJCount_ *p)
{
	if (p)
	{	soap_default___ns1__GetLinkZJCount_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLinkZJCount_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLinkZJCount_(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLinkZJCount_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLinkZJCount_(struct soap *soap, struct __ns1__GetLinkZJCount_ *p)
{
	if (soap_read___ns1__GetLinkZJCount_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsLinkSN__DEFINED
#define SOAP_TYPE___ns1__InsLinkSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsLinkSN_(struct soap*, struct __ns1__InsLinkSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsLinkSN_(struct soap*, const struct __ns1__InsLinkSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsLinkSN_(struct soap*, const char*, int, const struct __ns1__InsLinkSN_ *, const char*);
SOAP_FMAC3 struct __ns1__InsLinkSN_ * SOAP_FMAC4 soap_in___ns1__InsLinkSN_(struct soap*, const char*, struct __ns1__InsLinkSN_ *, const char*);
SOAP_FMAC1 struct __ns1__InsLinkSN_ * SOAP_FMAC2 soap_instantiate___ns1__InsLinkSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsLinkSN_ * soap_new___ns1__InsLinkSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsLinkSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsLinkSN_ * soap_new_req___ns1__InsLinkSN_(
	struct soap *soap)
{
	struct __ns1__InsLinkSN_ *_p = soap_new___ns1__InsLinkSN_(soap);
	if (_p)
	{	soap_default___ns1__InsLinkSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsLinkSN_ * soap_new_set___ns1__InsLinkSN_(
	struct soap *soap,
	_ns1__InsLinkSN *ns1__InsLinkSN)
{
	struct __ns1__InsLinkSN_ *_p = soap_new___ns1__InsLinkSN_(soap);
	if (_p)
	{	soap_default___ns1__InsLinkSN_(soap, _p);
		_p->ns1__InsLinkSN = ns1__InsLinkSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsLinkSN_(struct soap*, const struct __ns1__InsLinkSN_ *, const char*, const char*);

inline int soap_write___ns1__InsLinkSN_(struct soap *soap, struct __ns1__InsLinkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsLinkSN_(soap, p), 0) || soap_put___ns1__InsLinkSN_(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsLinkSN_(struct soap *soap, const char *URL, struct __ns1__InsLinkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLinkSN_(soap, p), 0) || soap_put___ns1__InsLinkSN_(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsLinkSN_(struct soap *soap, const char *URL, struct __ns1__InsLinkSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLinkSN_(soap, p), 0) || soap_put___ns1__InsLinkSN_(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsLinkSN_ * SOAP_FMAC4 soap_get___ns1__InsLinkSN_(struct soap*, struct __ns1__InsLinkSN_ *, const char*, const char*);

inline int soap_read___ns1__InsLinkSN_(struct soap *soap, struct __ns1__InsLinkSN_ *p)
{
	if (p)
	{	soap_default___ns1__InsLinkSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsLinkSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsLinkSN_(struct soap *soap, const char *URL, struct __ns1__InsLinkSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsLinkSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsLinkSN_(struct soap *soap, struct __ns1__InsLinkSN_ *p)
{
	if (soap_read___ns1__InsLinkSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doLinkOutSN__DEFINED
#define SOAP_TYPE___ns1__doLinkOutSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doLinkOutSN_(struct soap*, struct __ns1__doLinkOutSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doLinkOutSN_(struct soap*, const struct __ns1__doLinkOutSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doLinkOutSN_(struct soap*, const char*, int, const struct __ns1__doLinkOutSN_ *, const char*);
SOAP_FMAC3 struct __ns1__doLinkOutSN_ * SOAP_FMAC4 soap_in___ns1__doLinkOutSN_(struct soap*, const char*, struct __ns1__doLinkOutSN_ *, const char*);
SOAP_FMAC1 struct __ns1__doLinkOutSN_ * SOAP_FMAC2 soap_instantiate___ns1__doLinkOutSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doLinkOutSN_ * soap_new___ns1__doLinkOutSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doLinkOutSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doLinkOutSN_ * soap_new_req___ns1__doLinkOutSN_(
	struct soap *soap)
{
	struct __ns1__doLinkOutSN_ *_p = soap_new___ns1__doLinkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__doLinkOutSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__doLinkOutSN_ * soap_new_set___ns1__doLinkOutSN_(
	struct soap *soap,
	_ns1__doLinkOutSN *ns1__doLinkOutSN)
{
	struct __ns1__doLinkOutSN_ *_p = soap_new___ns1__doLinkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__doLinkOutSN_(soap, _p);
		_p->ns1__doLinkOutSN = ns1__doLinkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doLinkOutSN_(struct soap*, const struct __ns1__doLinkOutSN_ *, const char*, const char*);

inline int soap_write___ns1__doLinkOutSN_(struct soap *soap, struct __ns1__doLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doLinkOutSN_(soap, p), 0) || soap_put___ns1__doLinkOutSN_(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLinkOutSN_(soap, p), 0) || soap_put___ns1__doLinkOutSN_(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLinkOutSN_(soap, p), 0) || soap_put___ns1__doLinkOutSN_(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doLinkOutSN_ * SOAP_FMAC4 soap_get___ns1__doLinkOutSN_(struct soap*, struct __ns1__doLinkOutSN_ *, const char*, const char*);

inline int soap_read___ns1__doLinkOutSN_(struct soap *soap, struct __ns1__doLinkOutSN_ *p)
{
	if (p)
	{	soap_default___ns1__doLinkOutSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doLinkOutSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doLinkOutSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doLinkOutSN_(struct soap *soap, struct __ns1__doLinkOutSN_ *p)
{
	if (soap_read___ns1__doLinkOutSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkLinkOutSN__DEFINED
#define SOAP_TYPE___ns1__ChkLinkOutSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkLinkOutSN_(struct soap*, struct __ns1__ChkLinkOutSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkLinkOutSN_(struct soap*, const struct __ns1__ChkLinkOutSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkLinkOutSN_(struct soap*, const char*, int, const struct __ns1__ChkLinkOutSN_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkLinkOutSN_ * SOAP_FMAC4 soap_in___ns1__ChkLinkOutSN_(struct soap*, const char*, struct __ns1__ChkLinkOutSN_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkLinkOutSN_ * SOAP_FMAC2 soap_instantiate___ns1__ChkLinkOutSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkLinkOutSN_ * soap_new___ns1__ChkLinkOutSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkLinkOutSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkLinkOutSN_ * soap_new_req___ns1__ChkLinkOutSN_(
	struct soap *soap)
{
	struct __ns1__ChkLinkOutSN_ *_p = soap_new___ns1__ChkLinkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__ChkLinkOutSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkLinkOutSN_ * soap_new_set___ns1__ChkLinkOutSN_(
	struct soap *soap,
	_ns1__ChkLinkOutSN *ns1__ChkLinkOutSN)
{
	struct __ns1__ChkLinkOutSN_ *_p = soap_new___ns1__ChkLinkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__ChkLinkOutSN_(soap, _p);
		_p->ns1__ChkLinkOutSN = ns1__ChkLinkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkLinkOutSN_(struct soap*, const struct __ns1__ChkLinkOutSN_ *, const char*, const char*);

inline int soap_write___ns1__ChkLinkOutSN_(struct soap *soap, struct __ns1__ChkLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkLinkOutSN_(soap, p), 0) || soap_put___ns1__ChkLinkOutSN_(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkLinkOutSN_(soap, p), 0) || soap_put___ns1__ChkLinkOutSN_(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkLinkOutSN_(soap, p), 0) || soap_put___ns1__ChkLinkOutSN_(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkLinkOutSN_ * SOAP_FMAC4 soap_get___ns1__ChkLinkOutSN_(struct soap*, struct __ns1__ChkLinkOutSN_ *, const char*, const char*);

inline int soap_read___ns1__ChkLinkOutSN_(struct soap *soap, struct __ns1__ChkLinkOutSN_ *p)
{
	if (p)
	{	soap_default___ns1__ChkLinkOutSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkLinkOutSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkLinkOutSN_(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkLinkOutSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkLinkOutSN_(struct soap *soap, struct __ns1__ChkLinkOutSN_ *p)
{
	if (soap_read___ns1__ChkLinkOutSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkOutSN__DEFINED
#define SOAP_TYPE___ns1__chkOutSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkOutSN_(struct soap*, struct __ns1__chkOutSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkOutSN_(struct soap*, const struct __ns1__chkOutSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkOutSN_(struct soap*, const char*, int, const struct __ns1__chkOutSN_ *, const char*);
SOAP_FMAC3 struct __ns1__chkOutSN_ * SOAP_FMAC4 soap_in___ns1__chkOutSN_(struct soap*, const char*, struct __ns1__chkOutSN_ *, const char*);
SOAP_FMAC1 struct __ns1__chkOutSN_ * SOAP_FMAC2 soap_instantiate___ns1__chkOutSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkOutSN_ * soap_new___ns1__chkOutSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkOutSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkOutSN_ * soap_new_req___ns1__chkOutSN_(
	struct soap *soap)
{
	struct __ns1__chkOutSN_ *_p = soap_new___ns1__chkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__chkOutSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkOutSN_ * soap_new_set___ns1__chkOutSN_(
	struct soap *soap,
	_ns1__chkOutSN *ns1__chkOutSN)
{
	struct __ns1__chkOutSN_ *_p = soap_new___ns1__chkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__chkOutSN_(soap, _p);
		_p->ns1__chkOutSN = ns1__chkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkOutSN_(struct soap*, const struct __ns1__chkOutSN_ *, const char*, const char*);

inline int soap_write___ns1__chkOutSN_(struct soap *soap, struct __ns1__chkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkOutSN_(soap, p), 0) || soap_put___ns1__chkOutSN_(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkOutSN_(struct soap *soap, const char *URL, struct __ns1__chkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkOutSN_(soap, p), 0) || soap_put___ns1__chkOutSN_(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkOutSN_(struct soap *soap, const char *URL, struct __ns1__chkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkOutSN_(soap, p), 0) || soap_put___ns1__chkOutSN_(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkOutSN_ * SOAP_FMAC4 soap_get___ns1__chkOutSN_(struct soap*, struct __ns1__chkOutSN_ *, const char*, const char*);

inline int soap_read___ns1__chkOutSN_(struct soap *soap, struct __ns1__chkOutSN_ *p)
{
	if (p)
	{	soap_default___ns1__chkOutSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkOutSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkOutSN_(struct soap *soap, const char *URL, struct __ns1__chkOutSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkOutSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkOutSN_(struct soap *soap, struct __ns1__chkOutSN_ *p)
{
	if (soap_read___ns1__chkOutSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLintOutQty__DEFINED
#define SOAP_TYPE___ns1__GetLintOutQty__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLintOutQty_(struct soap*, struct __ns1__GetLintOutQty_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLintOutQty_(struct soap*, const struct __ns1__GetLintOutQty_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLintOutQty_(struct soap*, const char*, int, const struct __ns1__GetLintOutQty_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLintOutQty_ * SOAP_FMAC4 soap_in___ns1__GetLintOutQty_(struct soap*, const char*, struct __ns1__GetLintOutQty_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLintOutQty_ * SOAP_FMAC2 soap_instantiate___ns1__GetLintOutQty_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLintOutQty_ * soap_new___ns1__GetLintOutQty_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLintOutQty_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLintOutQty_ * soap_new_req___ns1__GetLintOutQty_(
	struct soap *soap)
{
	struct __ns1__GetLintOutQty_ *_p = soap_new___ns1__GetLintOutQty_(soap);
	if (_p)
	{	soap_default___ns1__GetLintOutQty_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLintOutQty_ * soap_new_set___ns1__GetLintOutQty_(
	struct soap *soap,
	_ns1__GetLintOutQty *ns1__GetLintOutQty)
{
	struct __ns1__GetLintOutQty_ *_p = soap_new___ns1__GetLintOutQty_(soap);
	if (_p)
	{	soap_default___ns1__GetLintOutQty_(soap, _p);
		_p->ns1__GetLintOutQty = ns1__GetLintOutQty;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLintOutQty_(struct soap*, const struct __ns1__GetLintOutQty_ *, const char*, const char*);

inline int soap_write___ns1__GetLintOutQty_(struct soap *soap, struct __ns1__GetLintOutQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLintOutQty_(soap, p), 0) || soap_put___ns1__GetLintOutQty_(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLintOutQty_(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLintOutQty_(soap, p), 0) || soap_put___ns1__GetLintOutQty_(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLintOutQty_(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLintOutQty_(soap, p), 0) || soap_put___ns1__GetLintOutQty_(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLintOutQty_ * SOAP_FMAC4 soap_get___ns1__GetLintOutQty_(struct soap*, struct __ns1__GetLintOutQty_ *, const char*, const char*);

inline int soap_read___ns1__GetLintOutQty_(struct soap *soap, struct __ns1__GetLintOutQty_ *p)
{
	if (p)
	{	soap_default___ns1__GetLintOutQty_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLintOutQty_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLintOutQty_(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLintOutQty_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLintOutQty_(struct soap *soap, struct __ns1__GetLintOutQty_ *p)
{
	if (soap_read___ns1__GetLintOutQty_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SNLinkZJ__DEFINED
#define SOAP_TYPE___ns1__SNLinkZJ__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SNLinkZJ_(struct soap*, struct __ns1__SNLinkZJ_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SNLinkZJ_(struct soap*, const struct __ns1__SNLinkZJ_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SNLinkZJ_(struct soap*, const char*, int, const struct __ns1__SNLinkZJ_ *, const char*);
SOAP_FMAC3 struct __ns1__SNLinkZJ_ * SOAP_FMAC4 soap_in___ns1__SNLinkZJ_(struct soap*, const char*, struct __ns1__SNLinkZJ_ *, const char*);
SOAP_FMAC1 struct __ns1__SNLinkZJ_ * SOAP_FMAC2 soap_instantiate___ns1__SNLinkZJ_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SNLinkZJ_ * soap_new___ns1__SNLinkZJ_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SNLinkZJ_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SNLinkZJ_ * soap_new_req___ns1__SNLinkZJ_(
	struct soap *soap)
{
	struct __ns1__SNLinkZJ_ *_p = soap_new___ns1__SNLinkZJ_(soap);
	if (_p)
	{	soap_default___ns1__SNLinkZJ_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SNLinkZJ_ * soap_new_set___ns1__SNLinkZJ_(
	struct soap *soap,
	_ns1__SNLinkZJ *ns1__SNLinkZJ)
{
	struct __ns1__SNLinkZJ_ *_p = soap_new___ns1__SNLinkZJ_(soap);
	if (_p)
	{	soap_default___ns1__SNLinkZJ_(soap, _p);
		_p->ns1__SNLinkZJ = ns1__SNLinkZJ;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SNLinkZJ_(struct soap*, const struct __ns1__SNLinkZJ_ *, const char*, const char*);

inline int soap_write___ns1__SNLinkZJ_(struct soap *soap, struct __ns1__SNLinkZJ_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SNLinkZJ_(soap, p), 0) || soap_put___ns1__SNLinkZJ_(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SNLinkZJ_(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkZJ_(soap, p), 0) || soap_put___ns1__SNLinkZJ_(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SNLinkZJ_(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkZJ_(soap, p), 0) || soap_put___ns1__SNLinkZJ_(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SNLinkZJ_ * SOAP_FMAC4 soap_get___ns1__SNLinkZJ_(struct soap*, struct __ns1__SNLinkZJ_ *, const char*, const char*);

inline int soap_read___ns1__SNLinkZJ_(struct soap *soap, struct __ns1__SNLinkZJ_ *p)
{
	if (p)
	{	soap_default___ns1__SNLinkZJ_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SNLinkZJ_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SNLinkZJ_(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SNLinkZJ_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SNLinkZJ_(struct soap *soap, struct __ns1__SNLinkZJ_ *p)
{
	if (soap_read___ns1__SNLinkZJ_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsZJTestData__DEFINED
#define SOAP_TYPE___ns1__InsZJTestData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsZJTestData_(struct soap*, struct __ns1__InsZJTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsZJTestData_(struct soap*, const struct __ns1__InsZJTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsZJTestData_(struct soap*, const char*, int, const struct __ns1__InsZJTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__InsZJTestData_ * SOAP_FMAC4 soap_in___ns1__InsZJTestData_(struct soap*, const char*, struct __ns1__InsZJTestData_ *, const char*);
SOAP_FMAC1 struct __ns1__InsZJTestData_ * SOAP_FMAC2 soap_instantiate___ns1__InsZJTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsZJTestData_ * soap_new___ns1__InsZJTestData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsZJTestData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsZJTestData_ * soap_new_req___ns1__InsZJTestData_(
	struct soap *soap)
{
	struct __ns1__InsZJTestData_ *_p = soap_new___ns1__InsZJTestData_(soap);
	if (_p)
	{	soap_default___ns1__InsZJTestData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsZJTestData_ * soap_new_set___ns1__InsZJTestData_(
	struct soap *soap,
	_ns1__InsZJTestData *ns1__InsZJTestData)
{
	struct __ns1__InsZJTestData_ *_p = soap_new___ns1__InsZJTestData_(soap);
	if (_p)
	{	soap_default___ns1__InsZJTestData_(soap, _p);
		_p->ns1__InsZJTestData = ns1__InsZJTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsZJTestData_(struct soap*, const struct __ns1__InsZJTestData_ *, const char*, const char*);

inline int soap_write___ns1__InsZJTestData_(struct soap *soap, struct __ns1__InsZJTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsZJTestData_(soap, p), 0) || soap_put___ns1__InsZJTestData_(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsZJTestData_(struct soap *soap, const char *URL, struct __ns1__InsZJTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZJTestData_(soap, p), 0) || soap_put___ns1__InsZJTestData_(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsZJTestData_(struct soap *soap, const char *URL, struct __ns1__InsZJTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZJTestData_(soap, p), 0) || soap_put___ns1__InsZJTestData_(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsZJTestData_ * SOAP_FMAC4 soap_get___ns1__InsZJTestData_(struct soap*, struct __ns1__InsZJTestData_ *, const char*, const char*);

inline int soap_read___ns1__InsZJTestData_(struct soap *soap, struct __ns1__InsZJTestData_ *p)
{
	if (p)
	{	soap_default___ns1__InsZJTestData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsZJTestData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsZJTestData_(struct soap *soap, const char *URL, struct __ns1__InsZJTestData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsZJTestData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsZJTestData_(struct soap *soap, struct __ns1__InsZJTestData_ *p)
{
	if (soap_read___ns1__InsZJTestData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doPmcSNLink__DEFINED
#define SOAP_TYPE___ns1__doPmcSNLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doPmcSNLink_(struct soap*, struct __ns1__doPmcSNLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doPmcSNLink_(struct soap*, const struct __ns1__doPmcSNLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doPmcSNLink_(struct soap*, const char*, int, const struct __ns1__doPmcSNLink_ *, const char*);
SOAP_FMAC3 struct __ns1__doPmcSNLink_ * SOAP_FMAC4 soap_in___ns1__doPmcSNLink_(struct soap*, const char*, struct __ns1__doPmcSNLink_ *, const char*);
SOAP_FMAC1 struct __ns1__doPmcSNLink_ * SOAP_FMAC2 soap_instantiate___ns1__doPmcSNLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doPmcSNLink_ * soap_new___ns1__doPmcSNLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doPmcSNLink_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doPmcSNLink_ * soap_new_req___ns1__doPmcSNLink_(
	struct soap *soap)
{
	struct __ns1__doPmcSNLink_ *_p = soap_new___ns1__doPmcSNLink_(soap);
	if (_p)
	{	soap_default___ns1__doPmcSNLink_(soap, _p);
	}
	return _p;
}

inline struct __ns1__doPmcSNLink_ * soap_new_set___ns1__doPmcSNLink_(
	struct soap *soap,
	_ns1__doPmcSNLink *ns1__doPmcSNLink)
{
	struct __ns1__doPmcSNLink_ *_p = soap_new___ns1__doPmcSNLink_(soap);
	if (_p)
	{	soap_default___ns1__doPmcSNLink_(soap, _p);
		_p->ns1__doPmcSNLink = ns1__doPmcSNLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doPmcSNLink_(struct soap*, const struct __ns1__doPmcSNLink_ *, const char*, const char*);

inline int soap_write___ns1__doPmcSNLink_(struct soap *soap, struct __ns1__doPmcSNLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doPmcSNLink_(soap, p), 0) || soap_put___ns1__doPmcSNLink_(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doPmcSNLink_(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doPmcSNLink_(soap, p), 0) || soap_put___ns1__doPmcSNLink_(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doPmcSNLink_(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doPmcSNLink_(soap, p), 0) || soap_put___ns1__doPmcSNLink_(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doPmcSNLink_ * SOAP_FMAC4 soap_get___ns1__doPmcSNLink_(struct soap*, struct __ns1__doPmcSNLink_ *, const char*, const char*);

inline int soap_read___ns1__doPmcSNLink_(struct soap *soap, struct __ns1__doPmcSNLink_ *p)
{
	if (p)
	{	soap_default___ns1__doPmcSNLink_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doPmcSNLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doPmcSNLink_(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doPmcSNLink_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doPmcSNLink_(struct soap *soap, struct __ns1__doPmcSNLink_ *p)
{
	if (soap_read___ns1__doPmcSNLink_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPmcSNPart__DEFINED
#define SOAP_TYPE___ns1__GetPmcSNPart__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPmcSNPart_(struct soap*, struct __ns1__GetPmcSNPart_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPmcSNPart_(struct soap*, const struct __ns1__GetPmcSNPart_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPmcSNPart_(struct soap*, const char*, int, const struct __ns1__GetPmcSNPart_ *, const char*);
SOAP_FMAC3 struct __ns1__GetPmcSNPart_ * SOAP_FMAC4 soap_in___ns1__GetPmcSNPart_(struct soap*, const char*, struct __ns1__GetPmcSNPart_ *, const char*);
SOAP_FMAC1 struct __ns1__GetPmcSNPart_ * SOAP_FMAC2 soap_instantiate___ns1__GetPmcSNPart_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPmcSNPart_ * soap_new___ns1__GetPmcSNPart_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPmcSNPart_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPmcSNPart_ * soap_new_req___ns1__GetPmcSNPart_(
	struct soap *soap)
{
	struct __ns1__GetPmcSNPart_ *_p = soap_new___ns1__GetPmcSNPart_(soap);
	if (_p)
	{	soap_default___ns1__GetPmcSNPart_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPmcSNPart_ * soap_new_set___ns1__GetPmcSNPart_(
	struct soap *soap,
	_ns1__GetPmcSNPart *ns1__GetPmcSNPart)
{
	struct __ns1__GetPmcSNPart_ *_p = soap_new___ns1__GetPmcSNPart_(soap);
	if (_p)
	{	soap_default___ns1__GetPmcSNPart_(soap, _p);
		_p->ns1__GetPmcSNPart = ns1__GetPmcSNPart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPmcSNPart_(struct soap*, const struct __ns1__GetPmcSNPart_ *, const char*, const char*);

inline int soap_write___ns1__GetPmcSNPart_(struct soap *soap, struct __ns1__GetPmcSNPart_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPmcSNPart_(soap, p), 0) || soap_put___ns1__GetPmcSNPart_(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPmcSNPart_(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPmcSNPart_(soap, p), 0) || soap_put___ns1__GetPmcSNPart_(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPmcSNPart_(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPmcSNPart_(soap, p), 0) || soap_put___ns1__GetPmcSNPart_(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPmcSNPart_ * SOAP_FMAC4 soap_get___ns1__GetPmcSNPart_(struct soap*, struct __ns1__GetPmcSNPart_ *, const char*, const char*);

inline int soap_read___ns1__GetPmcSNPart_(struct soap *soap, struct __ns1__GetPmcSNPart_ *p)
{
	if (p)
	{	soap_default___ns1__GetPmcSNPart_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPmcSNPart_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPmcSNPart_(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPmcSNPart_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPmcSNPart_(struct soap *soap, struct __ns1__GetPmcSNPart_ *p)
{
	if (soap_read___ns1__GetPmcSNPart_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPmcPartAssyList__DEFINED
#define SOAP_TYPE___ns1__getPmcPartAssyList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPmcPartAssyList_(struct soap*, struct __ns1__getPmcPartAssyList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPmcPartAssyList_(struct soap*, const struct __ns1__getPmcPartAssyList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPmcPartAssyList_(struct soap*, const char*, int, const struct __ns1__getPmcPartAssyList_ *, const char*);
SOAP_FMAC3 struct __ns1__getPmcPartAssyList_ * SOAP_FMAC4 soap_in___ns1__getPmcPartAssyList_(struct soap*, const char*, struct __ns1__getPmcPartAssyList_ *, const char*);
SOAP_FMAC1 struct __ns1__getPmcPartAssyList_ * SOAP_FMAC2 soap_instantiate___ns1__getPmcPartAssyList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPmcPartAssyList_ * soap_new___ns1__getPmcPartAssyList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPmcPartAssyList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPmcPartAssyList_ * soap_new_req___ns1__getPmcPartAssyList_(
	struct soap *soap)
{
	struct __ns1__getPmcPartAssyList_ *_p = soap_new___ns1__getPmcPartAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getPmcPartAssyList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPmcPartAssyList_ * soap_new_set___ns1__getPmcPartAssyList_(
	struct soap *soap,
	_ns1__getPmcPartAssyList *ns1__getPmcPartAssyList)
{
	struct __ns1__getPmcPartAssyList_ *_p = soap_new___ns1__getPmcPartAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getPmcPartAssyList_(soap, _p);
		_p->ns1__getPmcPartAssyList = ns1__getPmcPartAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPmcPartAssyList_(struct soap*, const struct __ns1__getPmcPartAssyList_ *, const char*, const char*);

inline int soap_write___ns1__getPmcPartAssyList_(struct soap *soap, struct __ns1__getPmcPartAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPmcPartAssyList_(soap, p), 0) || soap_put___ns1__getPmcPartAssyList_(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPmcPartAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcPartAssyList_(soap, p), 0) || soap_put___ns1__getPmcPartAssyList_(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPmcPartAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcPartAssyList_(soap, p), 0) || soap_put___ns1__getPmcPartAssyList_(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPmcPartAssyList_ * SOAP_FMAC4 soap_get___ns1__getPmcPartAssyList_(struct soap*, struct __ns1__getPmcPartAssyList_ *, const char*, const char*);

inline int soap_read___ns1__getPmcPartAssyList_(struct soap *soap, struct __ns1__getPmcPartAssyList_ *p)
{
	if (p)
	{	soap_default___ns1__getPmcPartAssyList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPmcPartAssyList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPmcPartAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPmcPartAssyList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPmcPartAssyList_(struct soap *soap, struct __ns1__getPmcPartAssyList_ *p)
{
	if (soap_read___ns1__getPmcPartAssyList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPmcAssyList__DEFINED
#define SOAP_TYPE___ns1__getPmcAssyList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPmcAssyList_(struct soap*, struct __ns1__getPmcAssyList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPmcAssyList_(struct soap*, const struct __ns1__getPmcAssyList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPmcAssyList_(struct soap*, const char*, int, const struct __ns1__getPmcAssyList_ *, const char*);
SOAP_FMAC3 struct __ns1__getPmcAssyList_ * SOAP_FMAC4 soap_in___ns1__getPmcAssyList_(struct soap*, const char*, struct __ns1__getPmcAssyList_ *, const char*);
SOAP_FMAC1 struct __ns1__getPmcAssyList_ * SOAP_FMAC2 soap_instantiate___ns1__getPmcAssyList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPmcAssyList_ * soap_new___ns1__getPmcAssyList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPmcAssyList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPmcAssyList_ * soap_new_req___ns1__getPmcAssyList_(
	struct soap *soap)
{
	struct __ns1__getPmcAssyList_ *_p = soap_new___ns1__getPmcAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getPmcAssyList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPmcAssyList_ * soap_new_set___ns1__getPmcAssyList_(
	struct soap *soap,
	_ns1__getPmcAssyList *ns1__getPmcAssyList)
{
	struct __ns1__getPmcAssyList_ *_p = soap_new___ns1__getPmcAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getPmcAssyList_(soap, _p);
		_p->ns1__getPmcAssyList = ns1__getPmcAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPmcAssyList_(struct soap*, const struct __ns1__getPmcAssyList_ *, const char*, const char*);

inline int soap_write___ns1__getPmcAssyList_(struct soap *soap, struct __ns1__getPmcAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPmcAssyList_(soap, p), 0) || soap_put___ns1__getPmcAssyList_(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPmcAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcAssyList_(soap, p), 0) || soap_put___ns1__getPmcAssyList_(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPmcAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcAssyList_(soap, p), 0) || soap_put___ns1__getPmcAssyList_(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPmcAssyList_ * SOAP_FMAC4 soap_get___ns1__getPmcAssyList_(struct soap*, struct __ns1__getPmcAssyList_ *, const char*, const char*);

inline int soap_read___ns1__getPmcAssyList_(struct soap *soap, struct __ns1__getPmcAssyList_ *p)
{
	if (p)
	{	soap_default___ns1__getPmcAssyList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPmcAssyList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPmcAssyList_(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPmcAssyList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPmcAssyList_(struct soap *soap, struct __ns1__getPmcAssyList_ *p)
{
	if (soap_read___ns1__getPmcAssyList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doAssy__DEFINED
#define SOAP_TYPE___ns1__doAssy__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doAssy_(struct soap*, struct __ns1__doAssy_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doAssy_(struct soap*, const struct __ns1__doAssy_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doAssy_(struct soap*, const char*, int, const struct __ns1__doAssy_ *, const char*);
SOAP_FMAC3 struct __ns1__doAssy_ * SOAP_FMAC4 soap_in___ns1__doAssy_(struct soap*, const char*, struct __ns1__doAssy_ *, const char*);
SOAP_FMAC1 struct __ns1__doAssy_ * SOAP_FMAC2 soap_instantiate___ns1__doAssy_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doAssy_ * soap_new___ns1__doAssy_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doAssy_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doAssy_ * soap_new_req___ns1__doAssy_(
	struct soap *soap)
{
	struct __ns1__doAssy_ *_p = soap_new___ns1__doAssy_(soap);
	if (_p)
	{	soap_default___ns1__doAssy_(soap, _p);
	}
	return _p;
}

inline struct __ns1__doAssy_ * soap_new_set___ns1__doAssy_(
	struct soap *soap,
	_ns1__doAssy *ns1__doAssy)
{
	struct __ns1__doAssy_ *_p = soap_new___ns1__doAssy_(soap);
	if (_p)
	{	soap_default___ns1__doAssy_(soap, _p);
		_p->ns1__doAssy = ns1__doAssy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doAssy_(struct soap*, const struct __ns1__doAssy_ *, const char*, const char*);

inline int soap_write___ns1__doAssy_(struct soap *soap, struct __ns1__doAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doAssy_(soap, p), 0) || soap_put___ns1__doAssy_(soap, p, "-ns1:doAssy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doAssy_(struct soap *soap, const char *URL, struct __ns1__doAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doAssy_(soap, p), 0) || soap_put___ns1__doAssy_(soap, p, "-ns1:doAssy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doAssy_(struct soap *soap, const char *URL, struct __ns1__doAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doAssy_(soap, p), 0) || soap_put___ns1__doAssy_(soap, p, "-ns1:doAssy", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doAssy_ * SOAP_FMAC4 soap_get___ns1__doAssy_(struct soap*, struct __ns1__doAssy_ *, const char*, const char*);

inline int soap_read___ns1__doAssy_(struct soap *soap, struct __ns1__doAssy_ *p)
{
	if (p)
	{	soap_default___ns1__doAssy_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doAssy_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doAssy_(struct soap *soap, const char *URL, struct __ns1__doAssy_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doAssy_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doAssy_(struct soap *soap, struct __ns1__doAssy_ *p)
{
	if (soap_read___ns1__doAssy_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkAssySN__DEFINED
#define SOAP_TYPE___ns1__chkAssySN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkAssySN_(struct soap*, struct __ns1__chkAssySN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkAssySN_(struct soap*, const struct __ns1__chkAssySN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkAssySN_(struct soap*, const char*, int, const struct __ns1__chkAssySN_ *, const char*);
SOAP_FMAC3 struct __ns1__chkAssySN_ * SOAP_FMAC4 soap_in___ns1__chkAssySN_(struct soap*, const char*, struct __ns1__chkAssySN_ *, const char*);
SOAP_FMAC1 struct __ns1__chkAssySN_ * SOAP_FMAC2 soap_instantiate___ns1__chkAssySN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkAssySN_ * soap_new___ns1__chkAssySN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkAssySN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkAssySN_ * soap_new_req___ns1__chkAssySN_(
	struct soap *soap)
{
	struct __ns1__chkAssySN_ *_p = soap_new___ns1__chkAssySN_(soap);
	if (_p)
	{	soap_default___ns1__chkAssySN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkAssySN_ * soap_new_set___ns1__chkAssySN_(
	struct soap *soap,
	_ns1__chkAssySN *ns1__chkAssySN)
{
	struct __ns1__chkAssySN_ *_p = soap_new___ns1__chkAssySN_(soap);
	if (_p)
	{	soap_default___ns1__chkAssySN_(soap, _p);
		_p->ns1__chkAssySN = ns1__chkAssySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkAssySN_(struct soap*, const struct __ns1__chkAssySN_ *, const char*, const char*);

inline int soap_write___ns1__chkAssySN_(struct soap *soap, struct __ns1__chkAssySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkAssySN_(soap, p), 0) || soap_put___ns1__chkAssySN_(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkAssySN_(struct soap *soap, const char *URL, struct __ns1__chkAssySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkAssySN_(soap, p), 0) || soap_put___ns1__chkAssySN_(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkAssySN_(struct soap *soap, const char *URL, struct __ns1__chkAssySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkAssySN_(soap, p), 0) || soap_put___ns1__chkAssySN_(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkAssySN_ * SOAP_FMAC4 soap_get___ns1__chkAssySN_(struct soap*, struct __ns1__chkAssySN_ *, const char*, const char*);

inline int soap_read___ns1__chkAssySN_(struct soap *soap, struct __ns1__chkAssySN_ *p)
{
	if (p)
	{	soap_default___ns1__chkAssySN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkAssySN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkAssySN_(struct soap *soap, const char *URL, struct __ns1__chkAssySN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkAssySN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkAssySN_(struct soap *soap, struct __ns1__chkAssySN_ *p)
{
	if (soap_read___ns1__chkAssySN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPNbySN__DEFINED
#define SOAP_TYPE___ns1__getPNbySN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPNbySN_(struct soap*, struct __ns1__getPNbySN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPNbySN_(struct soap*, const struct __ns1__getPNbySN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPNbySN_(struct soap*, const char*, int, const struct __ns1__getPNbySN_ *, const char*);
SOAP_FMAC3 struct __ns1__getPNbySN_ * SOAP_FMAC4 soap_in___ns1__getPNbySN_(struct soap*, const char*, struct __ns1__getPNbySN_ *, const char*);
SOAP_FMAC1 struct __ns1__getPNbySN_ * SOAP_FMAC2 soap_instantiate___ns1__getPNbySN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPNbySN_ * soap_new___ns1__getPNbySN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPNbySN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPNbySN_ * soap_new_req___ns1__getPNbySN_(
	struct soap *soap)
{
	struct __ns1__getPNbySN_ *_p = soap_new___ns1__getPNbySN_(soap);
	if (_p)
	{	soap_default___ns1__getPNbySN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPNbySN_ * soap_new_set___ns1__getPNbySN_(
	struct soap *soap,
	_ns1__getPNbySN *ns1__getPNbySN)
{
	struct __ns1__getPNbySN_ *_p = soap_new___ns1__getPNbySN_(soap);
	if (_p)
	{	soap_default___ns1__getPNbySN_(soap, _p);
		_p->ns1__getPNbySN = ns1__getPNbySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPNbySN_(struct soap*, const struct __ns1__getPNbySN_ *, const char*, const char*);

inline int soap_write___ns1__getPNbySN_(struct soap *soap, struct __ns1__getPNbySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPNbySN_(soap, p), 0) || soap_put___ns1__getPNbySN_(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPNbySN_(struct soap *soap, const char *URL, struct __ns1__getPNbySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPNbySN_(soap, p), 0) || soap_put___ns1__getPNbySN_(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPNbySN_(struct soap *soap, const char *URL, struct __ns1__getPNbySN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPNbySN_(soap, p), 0) || soap_put___ns1__getPNbySN_(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPNbySN_ * SOAP_FMAC4 soap_get___ns1__getPNbySN_(struct soap*, struct __ns1__getPNbySN_ *, const char*, const char*);

inline int soap_read___ns1__getPNbySN_(struct soap *soap, struct __ns1__getPNbySN_ *p)
{
	if (p)
	{	soap_default___ns1__getPNbySN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPNbySN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPNbySN_(struct soap *soap, const char *URL, struct __ns1__getPNbySN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPNbySN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPNbySN_(struct soap *soap, struct __ns1__getPNbySN_ *p)
{
	if (soap_read___ns1__getPNbySN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoAssyCount__DEFINED
#define SOAP_TYPE___ns1__getMoAssyCount__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoAssyCount_(struct soap*, struct __ns1__getMoAssyCount_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoAssyCount_(struct soap*, const struct __ns1__getMoAssyCount_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoAssyCount_(struct soap*, const char*, int, const struct __ns1__getMoAssyCount_ *, const char*);
SOAP_FMAC3 struct __ns1__getMoAssyCount_ * SOAP_FMAC4 soap_in___ns1__getMoAssyCount_(struct soap*, const char*, struct __ns1__getMoAssyCount_ *, const char*);
SOAP_FMAC1 struct __ns1__getMoAssyCount_ * SOAP_FMAC2 soap_instantiate___ns1__getMoAssyCount_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoAssyCount_ * soap_new___ns1__getMoAssyCount_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoAssyCount_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoAssyCount_ * soap_new_req___ns1__getMoAssyCount_(
	struct soap *soap)
{
	struct __ns1__getMoAssyCount_ *_p = soap_new___ns1__getMoAssyCount_(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyCount_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoAssyCount_ * soap_new_set___ns1__getMoAssyCount_(
	struct soap *soap,
	_ns1__getMoAssyCount *ns1__getMoAssyCount)
{
	struct __ns1__getMoAssyCount_ *_p = soap_new___ns1__getMoAssyCount_(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyCount_(soap, _p);
		_p->ns1__getMoAssyCount = ns1__getMoAssyCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoAssyCount_(struct soap*, const struct __ns1__getMoAssyCount_ *, const char*, const char*);

inline int soap_write___ns1__getMoAssyCount_(struct soap *soap, struct __ns1__getMoAssyCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoAssyCount_(soap, p), 0) || soap_put___ns1__getMoAssyCount_(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoAssyCount_(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyCount_(soap, p), 0) || soap_put___ns1__getMoAssyCount_(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoAssyCount_(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyCount_(soap, p), 0) || soap_put___ns1__getMoAssyCount_(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoAssyCount_ * SOAP_FMAC4 soap_get___ns1__getMoAssyCount_(struct soap*, struct __ns1__getMoAssyCount_ *, const char*, const char*);

inline int soap_read___ns1__getMoAssyCount_(struct soap *soap, struct __ns1__getMoAssyCount_ *p)
{
	if (p)
	{	soap_default___ns1__getMoAssyCount_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoAssyCount_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoAssyCount_(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoAssyCount_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoAssyCount_(struct soap *soap, struct __ns1__getMoAssyCount_ *p)
{
	if (soap_read___ns1__getMoAssyCount_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLinkOutSn__DEFINED
#define SOAP_TYPE___ns1__GetLinkOutSn__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLinkOutSn_(struct soap*, struct __ns1__GetLinkOutSn_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLinkOutSn_(struct soap*, const struct __ns1__GetLinkOutSn_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLinkOutSn_(struct soap*, const char*, int, const struct __ns1__GetLinkOutSn_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLinkOutSn_ * SOAP_FMAC4 soap_in___ns1__GetLinkOutSn_(struct soap*, const char*, struct __ns1__GetLinkOutSn_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLinkOutSn_ * SOAP_FMAC2 soap_instantiate___ns1__GetLinkOutSn_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLinkOutSn_ * soap_new___ns1__GetLinkOutSn_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLinkOutSn_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLinkOutSn_ * soap_new_req___ns1__GetLinkOutSn_(
	struct soap *soap)
{
	struct __ns1__GetLinkOutSn_ *_p = soap_new___ns1__GetLinkOutSn_(soap);
	if (_p)
	{	soap_default___ns1__GetLinkOutSn_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLinkOutSn_ * soap_new_set___ns1__GetLinkOutSn_(
	struct soap *soap,
	_ns1__GetLinkOutSn *ns1__GetLinkOutSn)
{
	struct __ns1__GetLinkOutSn_ *_p = soap_new___ns1__GetLinkOutSn_(soap);
	if (_p)
	{	soap_default___ns1__GetLinkOutSn_(soap, _p);
		_p->ns1__GetLinkOutSn = ns1__GetLinkOutSn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLinkOutSn_(struct soap*, const struct __ns1__GetLinkOutSn_ *, const char*, const char*);

inline int soap_write___ns1__GetLinkOutSn_(struct soap *soap, struct __ns1__GetLinkOutSn_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLinkOutSn_(soap, p), 0) || soap_put___ns1__GetLinkOutSn_(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLinkOutSn_(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkOutSn_(soap, p), 0) || soap_put___ns1__GetLinkOutSn_(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLinkOutSn_(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkOutSn_(soap, p), 0) || soap_put___ns1__GetLinkOutSn_(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLinkOutSn_ * SOAP_FMAC4 soap_get___ns1__GetLinkOutSn_(struct soap*, struct __ns1__GetLinkOutSn_ *, const char*, const char*);

inline int soap_read___ns1__GetLinkOutSn_(struct soap *soap, struct __ns1__GetLinkOutSn_ *p)
{
	if (p)
	{	soap_default___ns1__GetLinkOutSn_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLinkOutSn_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLinkOutSn_(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLinkOutSn_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLinkOutSn_(struct soap *soap, struct __ns1__GetLinkOutSn_ *p)
{
	if (soap_read___ns1__GetLinkOutSn_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsPartAssy__DEFINED
#define SOAP_TYPE___ns1__InsPartAssy__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsPartAssy_(struct soap*, struct __ns1__InsPartAssy_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsPartAssy_(struct soap*, const struct __ns1__InsPartAssy_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsPartAssy_(struct soap*, const char*, int, const struct __ns1__InsPartAssy_ *, const char*);
SOAP_FMAC3 struct __ns1__InsPartAssy_ * SOAP_FMAC4 soap_in___ns1__InsPartAssy_(struct soap*, const char*, struct __ns1__InsPartAssy_ *, const char*);
SOAP_FMAC1 struct __ns1__InsPartAssy_ * SOAP_FMAC2 soap_instantiate___ns1__InsPartAssy_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsPartAssy_ * soap_new___ns1__InsPartAssy_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsPartAssy_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsPartAssy_ * soap_new_req___ns1__InsPartAssy_(
	struct soap *soap)
{
	struct __ns1__InsPartAssy_ *_p = soap_new___ns1__InsPartAssy_(soap);
	if (_p)
	{	soap_default___ns1__InsPartAssy_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsPartAssy_ * soap_new_set___ns1__InsPartAssy_(
	struct soap *soap,
	_ns1__InsPartAssy *ns1__InsPartAssy)
{
	struct __ns1__InsPartAssy_ *_p = soap_new___ns1__InsPartAssy_(soap);
	if (_p)
	{	soap_default___ns1__InsPartAssy_(soap, _p);
		_p->ns1__InsPartAssy = ns1__InsPartAssy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsPartAssy_(struct soap*, const struct __ns1__InsPartAssy_ *, const char*, const char*);

inline int soap_write___ns1__InsPartAssy_(struct soap *soap, struct __ns1__InsPartAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsPartAssy_(soap, p), 0) || soap_put___ns1__InsPartAssy_(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsPartAssy_(struct soap *soap, const char *URL, struct __ns1__InsPartAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsPartAssy_(soap, p), 0) || soap_put___ns1__InsPartAssy_(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsPartAssy_(struct soap *soap, const char *URL, struct __ns1__InsPartAssy_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsPartAssy_(soap, p), 0) || soap_put___ns1__InsPartAssy_(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsPartAssy_ * SOAP_FMAC4 soap_get___ns1__InsPartAssy_(struct soap*, struct __ns1__InsPartAssy_ *, const char*, const char*);

inline int soap_read___ns1__InsPartAssy_(struct soap *soap, struct __ns1__InsPartAssy_ *p)
{
	if (p)
	{	soap_default___ns1__InsPartAssy_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsPartAssy_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsPartAssy_(struct soap *soap, const char *URL, struct __ns1__InsPartAssy_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsPartAssy_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsPartAssy_(struct soap *soap, struct __ns1__InsPartAssy_ *p)
{
	if (soap_read___ns1__InsPartAssy_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPartBomExt__DEFINED
#define SOAP_TYPE___ns1__getPartBomExt__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPartBomExt_(struct soap*, struct __ns1__getPartBomExt_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPartBomExt_(struct soap*, const struct __ns1__getPartBomExt_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPartBomExt_(struct soap*, const char*, int, const struct __ns1__getPartBomExt_ *, const char*);
SOAP_FMAC3 struct __ns1__getPartBomExt_ * SOAP_FMAC4 soap_in___ns1__getPartBomExt_(struct soap*, const char*, struct __ns1__getPartBomExt_ *, const char*);
SOAP_FMAC1 struct __ns1__getPartBomExt_ * SOAP_FMAC2 soap_instantiate___ns1__getPartBomExt_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPartBomExt_ * soap_new___ns1__getPartBomExt_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPartBomExt_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPartBomExt_ * soap_new_req___ns1__getPartBomExt_(
	struct soap *soap)
{
	struct __ns1__getPartBomExt_ *_p = soap_new___ns1__getPartBomExt_(soap);
	if (_p)
	{	soap_default___ns1__getPartBomExt_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPartBomExt_ * soap_new_set___ns1__getPartBomExt_(
	struct soap *soap,
	_ns1__getPartBomExt *ns1__getPartBomExt)
{
	struct __ns1__getPartBomExt_ *_p = soap_new___ns1__getPartBomExt_(soap);
	if (_p)
	{	soap_default___ns1__getPartBomExt_(soap, _p);
		_p->ns1__getPartBomExt = ns1__getPartBomExt;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPartBomExt_(struct soap*, const struct __ns1__getPartBomExt_ *, const char*, const char*);

inline int soap_write___ns1__getPartBomExt_(struct soap *soap, struct __ns1__getPartBomExt_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPartBomExt_(soap, p), 0) || soap_put___ns1__getPartBomExt_(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPartBomExt_(struct soap *soap, const char *URL, struct __ns1__getPartBomExt_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPartBomExt_(soap, p), 0) || soap_put___ns1__getPartBomExt_(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPartBomExt_(struct soap *soap, const char *URL, struct __ns1__getPartBomExt_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPartBomExt_(soap, p), 0) || soap_put___ns1__getPartBomExt_(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPartBomExt_ * SOAP_FMAC4 soap_get___ns1__getPartBomExt_(struct soap*, struct __ns1__getPartBomExt_ *, const char*, const char*);

inline int soap_read___ns1__getPartBomExt_(struct soap *soap, struct __ns1__getPartBomExt_ *p)
{
	if (p)
	{	soap_default___ns1__getPartBomExt_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPartBomExt_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPartBomExt_(struct soap *soap, const char *URL, struct __ns1__getPartBomExt_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPartBomExt_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPartBomExt_(struct soap *soap, struct __ns1__getPartBomExt_ *p)
{
	if (soap_read___ns1__getPartBomExt_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoAssyList__DEFINED
#define SOAP_TYPE___ns1__getMoAssyList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoAssyList_(struct soap*, struct __ns1__getMoAssyList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoAssyList_(struct soap*, const struct __ns1__getMoAssyList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoAssyList_(struct soap*, const char*, int, const struct __ns1__getMoAssyList_ *, const char*);
SOAP_FMAC3 struct __ns1__getMoAssyList_ * SOAP_FMAC4 soap_in___ns1__getMoAssyList_(struct soap*, const char*, struct __ns1__getMoAssyList_ *, const char*);
SOAP_FMAC1 struct __ns1__getMoAssyList_ * SOAP_FMAC2 soap_instantiate___ns1__getMoAssyList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoAssyList_ * soap_new___ns1__getMoAssyList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoAssyList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoAssyList_ * soap_new_req___ns1__getMoAssyList_(
	struct soap *soap)
{
	struct __ns1__getMoAssyList_ *_p = soap_new___ns1__getMoAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoAssyList_ * soap_new_set___ns1__getMoAssyList_(
	struct soap *soap,
	_ns1__getMoAssyList *ns1__getMoAssyList)
{
	struct __ns1__getMoAssyList_ *_p = soap_new___ns1__getMoAssyList_(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyList_(soap, _p);
		_p->ns1__getMoAssyList = ns1__getMoAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoAssyList_(struct soap*, const struct __ns1__getMoAssyList_ *, const char*, const char*);

inline int soap_write___ns1__getMoAssyList_(struct soap *soap, struct __ns1__getMoAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoAssyList_(soap, p), 0) || soap_put___ns1__getMoAssyList_(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoAssyList_(struct soap *soap, const char *URL, struct __ns1__getMoAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyList_(soap, p), 0) || soap_put___ns1__getMoAssyList_(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoAssyList_(struct soap *soap, const char *URL, struct __ns1__getMoAssyList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyList_(soap, p), 0) || soap_put___ns1__getMoAssyList_(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoAssyList_ * SOAP_FMAC4 soap_get___ns1__getMoAssyList_(struct soap*, struct __ns1__getMoAssyList_ *, const char*, const char*);

inline int soap_read___ns1__getMoAssyList_(struct soap *soap, struct __ns1__getMoAssyList_ *p)
{
	if (p)
	{	soap_default___ns1__getMoAssyList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoAssyList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoAssyList_(struct soap *soap, const char *URL, struct __ns1__getMoAssyList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoAssyList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoAssyList_(struct soap *soap, struct __ns1__getMoAssyList_ *p)
{
	if (soap_read___ns1__getMoAssyList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkSnMapping__DEFINED
#define SOAP_TYPE___ns1__chkSnMapping__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkSnMapping_(struct soap*, struct __ns1__chkSnMapping_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkSnMapping_(struct soap*, const struct __ns1__chkSnMapping_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkSnMapping_(struct soap*, const char*, int, const struct __ns1__chkSnMapping_ *, const char*);
SOAP_FMAC3 struct __ns1__chkSnMapping_ * SOAP_FMAC4 soap_in___ns1__chkSnMapping_(struct soap*, const char*, struct __ns1__chkSnMapping_ *, const char*);
SOAP_FMAC1 struct __ns1__chkSnMapping_ * SOAP_FMAC2 soap_instantiate___ns1__chkSnMapping_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkSnMapping_ * soap_new___ns1__chkSnMapping_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkSnMapping_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkSnMapping_ * soap_new_req___ns1__chkSnMapping_(
	struct soap *soap)
{
	struct __ns1__chkSnMapping_ *_p = soap_new___ns1__chkSnMapping_(soap);
	if (_p)
	{	soap_default___ns1__chkSnMapping_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkSnMapping_ * soap_new_set___ns1__chkSnMapping_(
	struct soap *soap,
	_ns1__chkSnMapping *ns1__chkSnMapping)
{
	struct __ns1__chkSnMapping_ *_p = soap_new___ns1__chkSnMapping_(soap);
	if (_p)
	{	soap_default___ns1__chkSnMapping_(soap, _p);
		_p->ns1__chkSnMapping = ns1__chkSnMapping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkSnMapping_(struct soap*, const struct __ns1__chkSnMapping_ *, const char*, const char*);

inline int soap_write___ns1__chkSnMapping_(struct soap *soap, struct __ns1__chkSnMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkSnMapping_(soap, p), 0) || soap_put___ns1__chkSnMapping_(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkSnMapping_(struct soap *soap, const char *URL, struct __ns1__chkSnMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkSnMapping_(soap, p), 0) || soap_put___ns1__chkSnMapping_(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkSnMapping_(struct soap *soap, const char *URL, struct __ns1__chkSnMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkSnMapping_(soap, p), 0) || soap_put___ns1__chkSnMapping_(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkSnMapping_ * SOAP_FMAC4 soap_get___ns1__chkSnMapping_(struct soap*, struct __ns1__chkSnMapping_ *, const char*, const char*);

inline int soap_read___ns1__chkSnMapping_(struct soap *soap, struct __ns1__chkSnMapping_ *p)
{
	if (p)
	{	soap_default___ns1__chkSnMapping_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkSnMapping_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkSnMapping_(struct soap *soap, const char *URL, struct __ns1__chkSnMapping_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkSnMapping_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkSnMapping_(struct soap *soap, struct __ns1__chkSnMapping_ *p)
{
	if (soap_read___ns1__chkSnMapping_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationTypeDesc__DEFINED
#define SOAP_TYPE___ns1__getStationTypeDesc__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationTypeDesc_(struct soap*, struct __ns1__getStationTypeDesc_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationTypeDesc_(struct soap*, const struct __ns1__getStationTypeDesc_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationTypeDesc_(struct soap*, const char*, int, const struct __ns1__getStationTypeDesc_ *, const char*);
SOAP_FMAC3 struct __ns1__getStationTypeDesc_ * SOAP_FMAC4 soap_in___ns1__getStationTypeDesc_(struct soap*, const char*, struct __ns1__getStationTypeDesc_ *, const char*);
SOAP_FMAC1 struct __ns1__getStationTypeDesc_ * SOAP_FMAC2 soap_instantiate___ns1__getStationTypeDesc_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationTypeDesc_ * soap_new___ns1__getStationTypeDesc_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationTypeDesc_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationTypeDesc_ * soap_new_req___ns1__getStationTypeDesc_(
	struct soap *soap)
{
	struct __ns1__getStationTypeDesc_ *_p = soap_new___ns1__getStationTypeDesc_(soap);
	if (_p)
	{	soap_default___ns1__getStationTypeDesc_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationTypeDesc_ * soap_new_set___ns1__getStationTypeDesc_(
	struct soap *soap,
	_ns1__getStationTypeDesc *ns1__getStationTypeDesc)
{
	struct __ns1__getStationTypeDesc_ *_p = soap_new___ns1__getStationTypeDesc_(soap);
	if (_p)
	{	soap_default___ns1__getStationTypeDesc_(soap, _p);
		_p->ns1__getStationTypeDesc = ns1__getStationTypeDesc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationTypeDesc_(struct soap*, const struct __ns1__getStationTypeDesc_ *, const char*, const char*);

inline int soap_write___ns1__getStationTypeDesc_(struct soap *soap, struct __ns1__getStationTypeDesc_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationTypeDesc_(soap, p), 0) || soap_put___ns1__getStationTypeDesc_(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationTypeDesc_(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationTypeDesc_(soap, p), 0) || soap_put___ns1__getStationTypeDesc_(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationTypeDesc_(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationTypeDesc_(soap, p), 0) || soap_put___ns1__getStationTypeDesc_(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationTypeDesc_ * SOAP_FMAC4 soap_get___ns1__getStationTypeDesc_(struct soap*, struct __ns1__getStationTypeDesc_ *, const char*, const char*);

inline int soap_read___ns1__getStationTypeDesc_(struct soap *soap, struct __ns1__getStationTypeDesc_ *p)
{
	if (p)
	{	soap_default___ns1__getStationTypeDesc_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationTypeDesc_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationTypeDesc_(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationTypeDesc_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationTypeDesc_(struct soap *soap, struct __ns1__getStationTypeDesc_ *p)
{
	if (soap_read___ns1__getStationTypeDesc_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationByMo__DEFINED
#define SOAP_TYPE___ns1__getStationByMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationByMo_(struct soap*, struct __ns1__getStationByMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationByMo_(struct soap*, const struct __ns1__getStationByMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationByMo_(struct soap*, const char*, int, const struct __ns1__getStationByMo_ *, const char*);
SOAP_FMAC3 struct __ns1__getStationByMo_ * SOAP_FMAC4 soap_in___ns1__getStationByMo_(struct soap*, const char*, struct __ns1__getStationByMo_ *, const char*);
SOAP_FMAC1 struct __ns1__getStationByMo_ * SOAP_FMAC2 soap_instantiate___ns1__getStationByMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationByMo_ * soap_new___ns1__getStationByMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationByMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationByMo_ * soap_new_req___ns1__getStationByMo_(
	struct soap *soap)
{
	struct __ns1__getStationByMo_ *_p = soap_new___ns1__getStationByMo_(soap);
	if (_p)
	{	soap_default___ns1__getStationByMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationByMo_ * soap_new_set___ns1__getStationByMo_(
	struct soap *soap,
	_ns1__getStationByMo *ns1__getStationByMo)
{
	struct __ns1__getStationByMo_ *_p = soap_new___ns1__getStationByMo_(soap);
	if (_p)
	{	soap_default___ns1__getStationByMo_(soap, _p);
		_p->ns1__getStationByMo = ns1__getStationByMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationByMo_(struct soap*, const struct __ns1__getStationByMo_ *, const char*, const char*);

inline int soap_write___ns1__getStationByMo_(struct soap *soap, struct __ns1__getStationByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationByMo_(soap, p), 0) || soap_put___ns1__getStationByMo_(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationByMo_(struct soap *soap, const char *URL, struct __ns1__getStationByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMo_(soap, p), 0) || soap_put___ns1__getStationByMo_(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationByMo_(struct soap *soap, const char *URL, struct __ns1__getStationByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMo_(soap, p), 0) || soap_put___ns1__getStationByMo_(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationByMo_ * SOAP_FMAC4 soap_get___ns1__getStationByMo_(struct soap*, struct __ns1__getStationByMo_ *, const char*, const char*);

inline int soap_read___ns1__getStationByMo_(struct soap *soap, struct __ns1__getStationByMo_ *p)
{
	if (p)
	{	soap_default___ns1__getStationByMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationByMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationByMo_(struct soap *soap, const char *URL, struct __ns1__getStationByMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationByMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationByMo_(struct soap *soap, struct __ns1__getStationByMo_ *p)
{
	if (soap_read___ns1__getStationByMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnDoMapping__DEFINED
#define SOAP_TYPE___ns1__SnDoMapping__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnDoMapping_(struct soap*, struct __ns1__SnDoMapping_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnDoMapping_(struct soap*, const struct __ns1__SnDoMapping_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnDoMapping_(struct soap*, const char*, int, const struct __ns1__SnDoMapping_ *, const char*);
SOAP_FMAC3 struct __ns1__SnDoMapping_ * SOAP_FMAC4 soap_in___ns1__SnDoMapping_(struct soap*, const char*, struct __ns1__SnDoMapping_ *, const char*);
SOAP_FMAC1 struct __ns1__SnDoMapping_ * SOAP_FMAC2 soap_instantiate___ns1__SnDoMapping_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnDoMapping_ * soap_new___ns1__SnDoMapping_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnDoMapping_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnDoMapping_ * soap_new_req___ns1__SnDoMapping_(
	struct soap *soap)
{
	struct __ns1__SnDoMapping_ *_p = soap_new___ns1__SnDoMapping_(soap);
	if (_p)
	{	soap_default___ns1__SnDoMapping_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnDoMapping_ * soap_new_set___ns1__SnDoMapping_(
	struct soap *soap,
	_ns1__SnDoMapping *ns1__SnDoMapping)
{
	struct __ns1__SnDoMapping_ *_p = soap_new___ns1__SnDoMapping_(soap);
	if (_p)
	{	soap_default___ns1__SnDoMapping_(soap, _p);
		_p->ns1__SnDoMapping = ns1__SnDoMapping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnDoMapping_(struct soap*, const struct __ns1__SnDoMapping_ *, const char*, const char*);

inline int soap_write___ns1__SnDoMapping_(struct soap *soap, struct __ns1__SnDoMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SnDoMapping_(soap, p), 0) || soap_put___ns1__SnDoMapping_(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SnDoMapping_(struct soap *soap, const char *URL, struct __ns1__SnDoMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnDoMapping_(soap, p), 0) || soap_put___ns1__SnDoMapping_(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SnDoMapping_(struct soap *soap, const char *URL, struct __ns1__SnDoMapping_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnDoMapping_(soap, p), 0) || soap_put___ns1__SnDoMapping_(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnDoMapping_ * SOAP_FMAC4 soap_get___ns1__SnDoMapping_(struct soap*, struct __ns1__SnDoMapping_ *, const char*, const char*);

inline int soap_read___ns1__SnDoMapping_(struct soap *soap, struct __ns1__SnDoMapping_ *p)
{
	if (p)
	{	soap_default___ns1__SnDoMapping_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnDoMapping_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SnDoMapping_(struct soap *soap, const char *URL, struct __ns1__SnDoMapping_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SnDoMapping_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SnDoMapping_(struct soap *soap, struct __ns1__SnDoMapping_ *p)
{
	if (soap_read___ns1__SnDoMapping_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__eMesNextMo__DEFINED
#define SOAP_TYPE___ns1__eMesNextMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__eMesNextMo_(struct soap*, struct __ns1__eMesNextMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__eMesNextMo_(struct soap*, const struct __ns1__eMesNextMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__eMesNextMo_(struct soap*, const char*, int, const struct __ns1__eMesNextMo_ *, const char*);
SOAP_FMAC3 struct __ns1__eMesNextMo_ * SOAP_FMAC4 soap_in___ns1__eMesNextMo_(struct soap*, const char*, struct __ns1__eMesNextMo_ *, const char*);
SOAP_FMAC1 struct __ns1__eMesNextMo_ * SOAP_FMAC2 soap_instantiate___ns1__eMesNextMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__eMesNextMo_ * soap_new___ns1__eMesNextMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__eMesNextMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__eMesNextMo_ * soap_new_req___ns1__eMesNextMo_(
	struct soap *soap)
{
	struct __ns1__eMesNextMo_ *_p = soap_new___ns1__eMesNextMo_(soap);
	if (_p)
	{	soap_default___ns1__eMesNextMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__eMesNextMo_ * soap_new_set___ns1__eMesNextMo_(
	struct soap *soap,
	_ns1__eMesNextMo *ns1__eMesNextMo)
{
	struct __ns1__eMesNextMo_ *_p = soap_new___ns1__eMesNextMo_(soap);
	if (_p)
	{	soap_default___ns1__eMesNextMo_(soap, _p);
		_p->ns1__eMesNextMo = ns1__eMesNextMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__eMesNextMo_(struct soap*, const struct __ns1__eMesNextMo_ *, const char*, const char*);

inline int soap_write___ns1__eMesNextMo_(struct soap *soap, struct __ns1__eMesNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__eMesNextMo_(soap, p), 0) || soap_put___ns1__eMesNextMo_(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__eMesNextMo_(struct soap *soap, const char *URL, struct __ns1__eMesNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__eMesNextMo_(soap, p), 0) || soap_put___ns1__eMesNextMo_(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__eMesNextMo_(struct soap *soap, const char *URL, struct __ns1__eMesNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__eMesNextMo_(soap, p), 0) || soap_put___ns1__eMesNextMo_(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__eMesNextMo_ * SOAP_FMAC4 soap_get___ns1__eMesNextMo_(struct soap*, struct __ns1__eMesNextMo_ *, const char*, const char*);

inline int soap_read___ns1__eMesNextMo_(struct soap *soap, struct __ns1__eMesNextMo_ *p)
{
	if (p)
	{	soap_default___ns1__eMesNextMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__eMesNextMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__eMesNextMo_(struct soap *soap, const char *URL, struct __ns1__eMesNextMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__eMesNextMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__eMesNextMo_(struct soap *soap, struct __ns1__eMesNextMo_ *p)
{
	if (soap_read___ns1__eMesNextMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendResultForStationNumber__DEFINED
#define SOAP_TYPE___ns1__sendResultForStationNumber__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendResultForStationNumber_(struct soap*, struct __ns1__sendResultForStationNumber_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendResultForStationNumber_(struct soap*, const struct __ns1__sendResultForStationNumber_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendResultForStationNumber_(struct soap*, const char*, int, const struct __ns1__sendResultForStationNumber_ *, const char*);
SOAP_FMAC3 struct __ns1__sendResultForStationNumber_ * SOAP_FMAC4 soap_in___ns1__sendResultForStationNumber_(struct soap*, const char*, struct __ns1__sendResultForStationNumber_ *, const char*);
SOAP_FMAC1 struct __ns1__sendResultForStationNumber_ * SOAP_FMAC2 soap_instantiate___ns1__sendResultForStationNumber_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendResultForStationNumber_ * soap_new___ns1__sendResultForStationNumber_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendResultForStationNumber_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendResultForStationNumber_ * soap_new_req___ns1__sendResultForStationNumber_(
	struct soap *soap)
{
	struct __ns1__sendResultForStationNumber_ *_p = soap_new___ns1__sendResultForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__sendResultForStationNumber_(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendResultForStationNumber_ * soap_new_set___ns1__sendResultForStationNumber_(
	struct soap *soap,
	_ns1__sendResultForStationNumber *ns1__sendResultForStationNumber)
{
	struct __ns1__sendResultForStationNumber_ *_p = soap_new___ns1__sendResultForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__sendResultForStationNumber_(soap, _p);
		_p->ns1__sendResultForStationNumber = ns1__sendResultForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendResultForStationNumber_(struct soap*, const struct __ns1__sendResultForStationNumber_ *, const char*, const char*);

inline int soap_write___ns1__sendResultForStationNumber_(struct soap *soap, struct __ns1__sendResultForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendResultForStationNumber_(soap, p), 0) || soap_put___ns1__sendResultForStationNumber_(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendResultForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendResultForStationNumber_(soap, p), 0) || soap_put___ns1__sendResultForStationNumber_(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendResultForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendResultForStationNumber_(soap, p), 0) || soap_put___ns1__sendResultForStationNumber_(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendResultForStationNumber_ * SOAP_FMAC4 soap_get___ns1__sendResultForStationNumber_(struct soap*, struct __ns1__sendResultForStationNumber_ *, const char*, const char*);

inline int soap_read___ns1__sendResultForStationNumber_(struct soap *soap, struct __ns1__sendResultForStationNumber_ *p)
{
	if (p)
	{	soap_default___ns1__sendResultForStationNumber_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendResultForStationNumber_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendResultForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendResultForStationNumber_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendResultForStationNumber_(struct soap *soap, struct __ns1__sendResultForStationNumber_ *p)
{
	if (soap_read___ns1__sendResultForStationNumber_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendDataForStationNumber__DEFINED
#define SOAP_TYPE___ns1__sendDataForStationNumber__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendDataForStationNumber_(struct soap*, struct __ns1__sendDataForStationNumber_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendDataForStationNumber_(struct soap*, const struct __ns1__sendDataForStationNumber_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendDataForStationNumber_(struct soap*, const char*, int, const struct __ns1__sendDataForStationNumber_ *, const char*);
SOAP_FMAC3 struct __ns1__sendDataForStationNumber_ * SOAP_FMAC4 soap_in___ns1__sendDataForStationNumber_(struct soap*, const char*, struct __ns1__sendDataForStationNumber_ *, const char*);
SOAP_FMAC1 struct __ns1__sendDataForStationNumber_ * SOAP_FMAC2 soap_instantiate___ns1__sendDataForStationNumber_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendDataForStationNumber_ * soap_new___ns1__sendDataForStationNumber_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendDataForStationNumber_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendDataForStationNumber_ * soap_new_req___ns1__sendDataForStationNumber_(
	struct soap *soap)
{
	struct __ns1__sendDataForStationNumber_ *_p = soap_new___ns1__sendDataForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__sendDataForStationNumber_(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendDataForStationNumber_ * soap_new_set___ns1__sendDataForStationNumber_(
	struct soap *soap,
	_ns1__sendDataForStationNumber *ns1__sendDataForStationNumber)
{
	struct __ns1__sendDataForStationNumber_ *_p = soap_new___ns1__sendDataForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__sendDataForStationNumber_(soap, _p);
		_p->ns1__sendDataForStationNumber = ns1__sendDataForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendDataForStationNumber_(struct soap*, const struct __ns1__sendDataForStationNumber_ *, const char*, const char*);

inline int soap_write___ns1__sendDataForStationNumber_(struct soap *soap, struct __ns1__sendDataForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendDataForStationNumber_(soap, p), 0) || soap_put___ns1__sendDataForStationNumber_(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendDataForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendDataForStationNumber_(soap, p), 0) || soap_put___ns1__sendDataForStationNumber_(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendDataForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendDataForStationNumber_(soap, p), 0) || soap_put___ns1__sendDataForStationNumber_(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendDataForStationNumber_ * SOAP_FMAC4 soap_get___ns1__sendDataForStationNumber_(struct soap*, struct __ns1__sendDataForStationNumber_ *, const char*, const char*);

inline int soap_read___ns1__sendDataForStationNumber_(struct soap *soap, struct __ns1__sendDataForStationNumber_ *p)
{
	if (p)
	{	soap_default___ns1__sendDataForStationNumber_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendDataForStationNumber_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendDataForStationNumber_(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendDataForStationNumber_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendDataForStationNumber_(struct soap *soap, struct __ns1__sendDataForStationNumber_ *p)
{
	if (soap_read___ns1__sendDataForStationNumber_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkEmpForStationNumber__DEFINED
#define SOAP_TYPE___ns1__checkEmpForStationNumber__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkEmpForStationNumber_(struct soap*, struct __ns1__checkEmpForStationNumber_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkEmpForStationNumber_(struct soap*, const struct __ns1__checkEmpForStationNumber_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkEmpForStationNumber_(struct soap*, const char*, int, const struct __ns1__checkEmpForStationNumber_ *, const char*);
SOAP_FMAC3 struct __ns1__checkEmpForStationNumber_ * SOAP_FMAC4 soap_in___ns1__checkEmpForStationNumber_(struct soap*, const char*, struct __ns1__checkEmpForStationNumber_ *, const char*);
SOAP_FMAC1 struct __ns1__checkEmpForStationNumber_ * SOAP_FMAC2 soap_instantiate___ns1__checkEmpForStationNumber_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkEmpForStationNumber_ * soap_new___ns1__checkEmpForStationNumber_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkEmpForStationNumber_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkEmpForStationNumber_ * soap_new_req___ns1__checkEmpForStationNumber_(
	struct soap *soap)
{
	struct __ns1__checkEmpForStationNumber_ *_p = soap_new___ns1__checkEmpForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__checkEmpForStationNumber_(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkEmpForStationNumber_ * soap_new_set___ns1__checkEmpForStationNumber_(
	struct soap *soap,
	_ns1__checkEmpForStationNumber *ns1__checkEmpForStationNumber)
{
	struct __ns1__checkEmpForStationNumber_ *_p = soap_new___ns1__checkEmpForStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__checkEmpForStationNumber_(soap, _p);
		_p->ns1__checkEmpForStationNumber = ns1__checkEmpForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkEmpForStationNumber_(struct soap*, const struct __ns1__checkEmpForStationNumber_ *, const char*, const char*);

inline int soap_write___ns1__checkEmpForStationNumber_(struct soap *soap, struct __ns1__checkEmpForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkEmpForStationNumber_(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber_(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkEmpForStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpForStationNumber_(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber_(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkEmpForStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpForStationNumber_(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber_(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkEmpForStationNumber_ * SOAP_FMAC4 soap_get___ns1__checkEmpForStationNumber_(struct soap*, struct __ns1__checkEmpForStationNumber_ *, const char*, const char*);

inline int soap_read___ns1__checkEmpForStationNumber_(struct soap *soap, struct __ns1__checkEmpForStationNumber_ *p)
{
	if (p)
	{	soap_default___ns1__checkEmpForStationNumber_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkEmpForStationNumber_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkEmpForStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkEmpForStationNumber_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkEmpForStationNumber_(struct soap *soap, struct __ns1__checkEmpForStationNumber_ *p)
{
	if (soap_read___ns1__checkEmpForStationNumber_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSN_USCOREStationNumber__DEFINED
#define SOAP_TYPE___ns1__checkSN_USCOREStationNumber__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSN_USCOREStationNumber_(struct soap*, struct __ns1__checkSN_USCOREStationNumber_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSN_USCOREStationNumber_(struct soap*, const struct __ns1__checkSN_USCOREStationNumber_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSN_USCOREStationNumber_(struct soap*, const char*, int, const struct __ns1__checkSN_USCOREStationNumber_ *, const char*);
SOAP_FMAC3 struct __ns1__checkSN_USCOREStationNumber_ * SOAP_FMAC4 soap_in___ns1__checkSN_USCOREStationNumber_(struct soap*, const char*, struct __ns1__checkSN_USCOREStationNumber_ *, const char*);
SOAP_FMAC1 struct __ns1__checkSN_USCOREStationNumber_ * SOAP_FMAC2 soap_instantiate___ns1__checkSN_USCOREStationNumber_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSN_USCOREStationNumber_ * soap_new___ns1__checkSN_USCOREStationNumber_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSN_USCOREStationNumber_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSN_USCOREStationNumber_ * soap_new_req___ns1__checkSN_USCOREStationNumber_(
	struct soap *soap)
{
	struct __ns1__checkSN_USCOREStationNumber_ *_p = soap_new___ns1__checkSN_USCOREStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStationNumber_(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSN_USCOREStationNumber_ * soap_new_set___ns1__checkSN_USCOREStationNumber_(
	struct soap *soap,
	_ns1__checkSN_USCOREStationNumber *ns1__checkSN_USCOREStationNumber)
{
	struct __ns1__checkSN_USCOREStationNumber_ *_p = soap_new___ns1__checkSN_USCOREStationNumber_(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStationNumber_(soap, _p);
		_p->ns1__checkSN_USCOREStationNumber = ns1__checkSN_USCOREStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSN_USCOREStationNumber_(struct soap*, const struct __ns1__checkSN_USCOREStationNumber_ *, const char*, const char*);

inline int soap_write___ns1__checkSN_USCOREStationNumber_(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSN_USCOREStationNumber_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber_(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkSN_USCOREStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStationNumber_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber_(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkSN_USCOREStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStationNumber_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber_(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSN_USCOREStationNumber_ * SOAP_FMAC4 soap_get___ns1__checkSN_USCOREStationNumber_(struct soap*, struct __ns1__checkSN_USCOREStationNumber_ *, const char*, const char*);

inline int soap_read___ns1__checkSN_USCOREStationNumber_(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber_ *p)
{
	if (p)
	{	soap_default___ns1__checkSN_USCOREStationNumber_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSN_USCOREStationNumber_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkSN_USCOREStationNumber_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkSN_USCOREStationNumber_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkSN_USCOREStationNumber_(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber_ *p)
{
	if (soap_read___ns1__checkSN_USCOREStationNumber_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnNextMo__DEFINED
#define SOAP_TYPE___ns1__ChkSnNextMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnNextMo_(struct soap*, struct __ns1__ChkSnNextMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnNextMo_(struct soap*, const struct __ns1__ChkSnNextMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnNextMo_(struct soap*, const char*, int, const struct __ns1__ChkSnNextMo_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnNextMo_ * SOAP_FMAC4 soap_in___ns1__ChkSnNextMo_(struct soap*, const char*, struct __ns1__ChkSnNextMo_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnNextMo_ * SOAP_FMAC2 soap_instantiate___ns1__ChkSnNextMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnNextMo_ * soap_new___ns1__ChkSnNextMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnNextMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnNextMo_ * soap_new_req___ns1__ChkSnNextMo_(
	struct soap *soap)
{
	struct __ns1__ChkSnNextMo_ *_p = soap_new___ns1__ChkSnNextMo_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnNextMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnNextMo_ * soap_new_set___ns1__ChkSnNextMo_(
	struct soap *soap,
	_ns1__ChkSnNextMo *ns1__ChkSnNextMo)
{
	struct __ns1__ChkSnNextMo_ *_p = soap_new___ns1__ChkSnNextMo_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnNextMo_(soap, _p);
		_p->ns1__ChkSnNextMo = ns1__ChkSnNextMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnNextMo_(struct soap*, const struct __ns1__ChkSnNextMo_ *, const char*, const char*);

inline int soap_write___ns1__ChkSnNextMo_(struct soap *soap, struct __ns1__ChkSnNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnNextMo_(soap, p), 0) || soap_put___ns1__ChkSnNextMo_(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnNextMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnNextMo_(soap, p), 0) || soap_put___ns1__ChkSnNextMo_(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnNextMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnNextMo_(soap, p), 0) || soap_put___ns1__ChkSnNextMo_(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnNextMo_ * SOAP_FMAC4 soap_get___ns1__ChkSnNextMo_(struct soap*, struct __ns1__ChkSnNextMo_ *, const char*, const char*);

inline int soap_read___ns1__ChkSnNextMo_(struct soap *soap, struct __ns1__ChkSnNextMo_ *p)
{
	if (p)
	{	soap_default___ns1__ChkSnNextMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnNextMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnNextMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnNextMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnNextMo_(struct soap *soap, struct __ns1__ChkSnNextMo_ *p)
{
	if (soap_read___ns1__ChkSnNextMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnMo__DEFINED
#define SOAP_TYPE___ns1__ChkSnMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnMo_(struct soap*, struct __ns1__ChkSnMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnMo_(struct soap*, const struct __ns1__ChkSnMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnMo_(struct soap*, const char*, int, const struct __ns1__ChkSnMo_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnMo_ * SOAP_FMAC4 soap_in___ns1__ChkSnMo_(struct soap*, const char*, struct __ns1__ChkSnMo_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnMo_ * SOAP_FMAC2 soap_instantiate___ns1__ChkSnMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnMo_ * soap_new___ns1__ChkSnMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnMo_ * soap_new_req___ns1__ChkSnMo_(
	struct soap *soap)
{
	struct __ns1__ChkSnMo_ *_p = soap_new___ns1__ChkSnMo_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnMo_ * soap_new_set___ns1__ChkSnMo_(
	struct soap *soap,
	_ns1__ChkSnMo *ns1__ChkSnMo)
{
	struct __ns1__ChkSnMo_ *_p = soap_new___ns1__ChkSnMo_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnMo_(soap, _p);
		_p->ns1__ChkSnMo = ns1__ChkSnMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnMo_(struct soap*, const struct __ns1__ChkSnMo_ *, const char*, const char*);

inline int soap_write___ns1__ChkSnMo_(struct soap *soap, struct __ns1__ChkSnMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnMo_(soap, p), 0) || soap_put___ns1__ChkSnMo_(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnMo_(soap, p), 0) || soap_put___ns1__ChkSnMo_(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnMo_(soap, p), 0) || soap_put___ns1__ChkSnMo_(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnMo_ * SOAP_FMAC4 soap_get___ns1__ChkSnMo_(struct soap*, struct __ns1__ChkSnMo_ *, const char*, const char*);

inline int soap_read___ns1__ChkSnMo_(struct soap *soap, struct __ns1__ChkSnMo_ *p)
{
	if (p)
	{	soap_default___ns1__ChkSnMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnMo_(struct soap *soap, const char *URL, struct __ns1__ChkSnMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnMo_(struct soap *soap, struct __ns1__ChkSnMo_ *p)
{
	if (soap_read___ns1__ChkSnMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkMoStation__DEFINED
#define SOAP_TYPE___ns1__chkMoStation__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkMoStation_(struct soap*, struct __ns1__chkMoStation_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkMoStation_(struct soap*, const struct __ns1__chkMoStation_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkMoStation_(struct soap*, const char*, int, const struct __ns1__chkMoStation_ *, const char*);
SOAP_FMAC3 struct __ns1__chkMoStation_ * SOAP_FMAC4 soap_in___ns1__chkMoStation_(struct soap*, const char*, struct __ns1__chkMoStation_ *, const char*);
SOAP_FMAC1 struct __ns1__chkMoStation_ * SOAP_FMAC2 soap_instantiate___ns1__chkMoStation_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkMoStation_ * soap_new___ns1__chkMoStation_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkMoStation_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkMoStation_ * soap_new_req___ns1__chkMoStation_(
	struct soap *soap)
{
	struct __ns1__chkMoStation_ *_p = soap_new___ns1__chkMoStation_(soap);
	if (_p)
	{	soap_default___ns1__chkMoStation_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkMoStation_ * soap_new_set___ns1__chkMoStation_(
	struct soap *soap,
	_ns1__chkMoStation *ns1__chkMoStation)
{
	struct __ns1__chkMoStation_ *_p = soap_new___ns1__chkMoStation_(soap);
	if (_p)
	{	soap_default___ns1__chkMoStation_(soap, _p);
		_p->ns1__chkMoStation = ns1__chkMoStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkMoStation_(struct soap*, const struct __ns1__chkMoStation_ *, const char*, const char*);

inline int soap_write___ns1__chkMoStation_(struct soap *soap, struct __ns1__chkMoStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkMoStation_(soap, p), 0) || soap_put___ns1__chkMoStation_(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkMoStation_(struct soap *soap, const char *URL, struct __ns1__chkMoStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoStation_(soap, p), 0) || soap_put___ns1__chkMoStation_(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkMoStation_(struct soap *soap, const char *URL, struct __ns1__chkMoStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoStation_(soap, p), 0) || soap_put___ns1__chkMoStation_(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkMoStation_ * SOAP_FMAC4 soap_get___ns1__chkMoStation_(struct soap*, struct __ns1__chkMoStation_ *, const char*, const char*);

inline int soap_read___ns1__chkMoStation_(struct soap *soap, struct __ns1__chkMoStation_ *p)
{
	if (p)
	{	soap_default___ns1__chkMoStation_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkMoStation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkMoStation_(struct soap *soap, const char *URL, struct __ns1__chkMoStation_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkMoStation_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkMoStation_(struct soap *soap, struct __ns1__chkMoStation_ *p)
{
	if (soap_read___ns1__chkMoStation_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetEnergyStat__DEFINED
#define SOAP_TYPE___ns1__SetEnergyStat__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetEnergyStat_(struct soap*, struct __ns1__SetEnergyStat_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetEnergyStat_(struct soap*, const struct __ns1__SetEnergyStat_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetEnergyStat_(struct soap*, const char*, int, const struct __ns1__SetEnergyStat_ *, const char*);
SOAP_FMAC3 struct __ns1__SetEnergyStat_ * SOAP_FMAC4 soap_in___ns1__SetEnergyStat_(struct soap*, const char*, struct __ns1__SetEnergyStat_ *, const char*);
SOAP_FMAC1 struct __ns1__SetEnergyStat_ * SOAP_FMAC2 soap_instantiate___ns1__SetEnergyStat_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetEnergyStat_ * soap_new___ns1__SetEnergyStat_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetEnergyStat_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetEnergyStat_ * soap_new_req___ns1__SetEnergyStat_(
	struct soap *soap)
{
	struct __ns1__SetEnergyStat_ *_p = soap_new___ns1__SetEnergyStat_(soap);
	if (_p)
	{	soap_default___ns1__SetEnergyStat_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetEnergyStat_ * soap_new_set___ns1__SetEnergyStat_(
	struct soap *soap,
	_ns1__SetEnergyStat *ns1__SetEnergyStat)
{
	struct __ns1__SetEnergyStat_ *_p = soap_new___ns1__SetEnergyStat_(soap);
	if (_p)
	{	soap_default___ns1__SetEnergyStat_(soap, _p);
		_p->ns1__SetEnergyStat = ns1__SetEnergyStat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetEnergyStat_(struct soap*, const struct __ns1__SetEnergyStat_ *, const char*, const char*);

inline int soap_write___ns1__SetEnergyStat_(struct soap *soap, struct __ns1__SetEnergyStat_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetEnergyStat_(soap, p), 0) || soap_put___ns1__SetEnergyStat_(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetEnergyStat_(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetEnergyStat_(soap, p), 0) || soap_put___ns1__SetEnergyStat_(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetEnergyStat_(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetEnergyStat_(soap, p), 0) || soap_put___ns1__SetEnergyStat_(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetEnergyStat_ * SOAP_FMAC4 soap_get___ns1__SetEnergyStat_(struct soap*, struct __ns1__SetEnergyStat_ *, const char*, const char*);

inline int soap_read___ns1__SetEnergyStat_(struct soap *soap, struct __ns1__SetEnergyStat_ *p)
{
	if (p)
	{	soap_default___ns1__SetEnergyStat_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetEnergyStat_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetEnergyStat_(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetEnergyStat_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetEnergyStat_(struct soap *soap, struct __ns1__SetEnergyStat_ *p)
{
	if (soap_read___ns1__SetEnergyStat_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getInfoByMo__DEFINED
#define SOAP_TYPE___ns1__getInfoByMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getInfoByMo_(struct soap*, struct __ns1__getInfoByMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getInfoByMo_(struct soap*, const struct __ns1__getInfoByMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getInfoByMo_(struct soap*, const char*, int, const struct __ns1__getInfoByMo_ *, const char*);
SOAP_FMAC3 struct __ns1__getInfoByMo_ * SOAP_FMAC4 soap_in___ns1__getInfoByMo_(struct soap*, const char*, struct __ns1__getInfoByMo_ *, const char*);
SOAP_FMAC1 struct __ns1__getInfoByMo_ * SOAP_FMAC2 soap_instantiate___ns1__getInfoByMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getInfoByMo_ * soap_new___ns1__getInfoByMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getInfoByMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getInfoByMo_ * soap_new_req___ns1__getInfoByMo_(
	struct soap *soap)
{
	struct __ns1__getInfoByMo_ *_p = soap_new___ns1__getInfoByMo_(soap);
	if (_p)
	{	soap_default___ns1__getInfoByMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getInfoByMo_ * soap_new_set___ns1__getInfoByMo_(
	struct soap *soap,
	_ns1__getInfoByMo *ns1__getInfoByMo)
{
	struct __ns1__getInfoByMo_ *_p = soap_new___ns1__getInfoByMo_(soap);
	if (_p)
	{	soap_default___ns1__getInfoByMo_(soap, _p);
		_p->ns1__getInfoByMo = ns1__getInfoByMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getInfoByMo_(struct soap*, const struct __ns1__getInfoByMo_ *, const char*, const char*);

inline int soap_write___ns1__getInfoByMo_(struct soap *soap, struct __ns1__getInfoByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getInfoByMo_(soap, p), 0) || soap_put___ns1__getInfoByMo_(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getInfoByMo_(struct soap *soap, const char *URL, struct __ns1__getInfoByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getInfoByMo_(soap, p), 0) || soap_put___ns1__getInfoByMo_(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getInfoByMo_(struct soap *soap, const char *URL, struct __ns1__getInfoByMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getInfoByMo_(soap, p), 0) || soap_put___ns1__getInfoByMo_(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getInfoByMo_ * SOAP_FMAC4 soap_get___ns1__getInfoByMo_(struct soap*, struct __ns1__getInfoByMo_ *, const char*, const char*);

inline int soap_read___ns1__getInfoByMo_(struct soap *soap, struct __ns1__getInfoByMo_ *p)
{
	if (p)
	{	soap_default___ns1__getInfoByMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getInfoByMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getInfoByMo_(struct soap *soap, const char *URL, struct __ns1__getInfoByMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getInfoByMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getInfoByMo_(struct soap *soap, struct __ns1__getInfoByMo_ *p)
{
	if (soap_read___ns1__getInfoByMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsThermalNew__DEFINED
#define SOAP_TYPE___ns1__InsThermalNew__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsThermalNew_(struct soap*, struct __ns1__InsThermalNew_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsThermalNew_(struct soap*, const struct __ns1__InsThermalNew_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsThermalNew_(struct soap*, const char*, int, const struct __ns1__InsThermalNew_ *, const char*);
SOAP_FMAC3 struct __ns1__InsThermalNew_ * SOAP_FMAC4 soap_in___ns1__InsThermalNew_(struct soap*, const char*, struct __ns1__InsThermalNew_ *, const char*);
SOAP_FMAC1 struct __ns1__InsThermalNew_ * SOAP_FMAC2 soap_instantiate___ns1__InsThermalNew_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsThermalNew_ * soap_new___ns1__InsThermalNew_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsThermalNew_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsThermalNew_ * soap_new_req___ns1__InsThermalNew_(
	struct soap *soap)
{
	struct __ns1__InsThermalNew_ *_p = soap_new___ns1__InsThermalNew_(soap);
	if (_p)
	{	soap_default___ns1__InsThermalNew_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsThermalNew_ * soap_new_set___ns1__InsThermalNew_(
	struct soap *soap,
	_ns1__InsThermalNew *ns1__InsThermalNew)
{
	struct __ns1__InsThermalNew_ *_p = soap_new___ns1__InsThermalNew_(soap);
	if (_p)
	{	soap_default___ns1__InsThermalNew_(soap, _p);
		_p->ns1__InsThermalNew = ns1__InsThermalNew;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsThermalNew_(struct soap*, const struct __ns1__InsThermalNew_ *, const char*, const char*);

inline int soap_write___ns1__InsThermalNew_(struct soap *soap, struct __ns1__InsThermalNew_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsThermalNew_(soap, p), 0) || soap_put___ns1__InsThermalNew_(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsThermalNew_(struct soap *soap, const char *URL, struct __ns1__InsThermalNew_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermalNew_(soap, p), 0) || soap_put___ns1__InsThermalNew_(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsThermalNew_(struct soap *soap, const char *URL, struct __ns1__InsThermalNew_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermalNew_(soap, p), 0) || soap_put___ns1__InsThermalNew_(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsThermalNew_ * SOAP_FMAC4 soap_get___ns1__InsThermalNew_(struct soap*, struct __ns1__InsThermalNew_ *, const char*, const char*);

inline int soap_read___ns1__InsThermalNew_(struct soap *soap, struct __ns1__InsThermalNew_ *p)
{
	if (p)
	{	soap_default___ns1__InsThermalNew_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsThermalNew_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsThermalNew_(struct soap *soap, const char *URL, struct __ns1__InsThermalNew_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsThermalNew_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsThermalNew_(struct soap *soap, struct __ns1__InsThermalNew_ *p)
{
	if (soap_read___ns1__InsThermalNew_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnLink__DEFINED
#define SOAP_TYPE___ns1__ChkSnLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnLink_(struct soap*, struct __ns1__ChkSnLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnLink_(struct soap*, const struct __ns1__ChkSnLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnLink_(struct soap*, const char*, int, const struct __ns1__ChkSnLink_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnLink_ * SOAP_FMAC4 soap_in___ns1__ChkSnLink_(struct soap*, const char*, struct __ns1__ChkSnLink_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnLink_ * SOAP_FMAC2 soap_instantiate___ns1__ChkSnLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnLink_ * soap_new___ns1__ChkSnLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnLink_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnLink_ * soap_new_req___ns1__ChkSnLink_(
	struct soap *soap)
{
	struct __ns1__ChkSnLink_ *_p = soap_new___ns1__ChkSnLink_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLink_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnLink_ * soap_new_set___ns1__ChkSnLink_(
	struct soap *soap,
	_ns1__ChkSnLink *ns1__ChkSnLink)
{
	struct __ns1__ChkSnLink_ *_p = soap_new___ns1__ChkSnLink_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLink_(soap, _p);
		_p->ns1__ChkSnLink = ns1__ChkSnLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnLink_(struct soap*, const struct __ns1__ChkSnLink_ *, const char*, const char*);

inline int soap_write___ns1__ChkSnLink_(struct soap *soap, struct __ns1__ChkSnLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnLink_(soap, p), 0) || soap_put___ns1__ChkSnLink_(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnLink_(struct soap *soap, const char *URL, struct __ns1__ChkSnLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLink_(soap, p), 0) || soap_put___ns1__ChkSnLink_(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnLink_(struct soap *soap, const char *URL, struct __ns1__ChkSnLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLink_(soap, p), 0) || soap_put___ns1__ChkSnLink_(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnLink_ * SOAP_FMAC4 soap_get___ns1__ChkSnLink_(struct soap*, struct __ns1__ChkSnLink_ *, const char*, const char*);

inline int soap_read___ns1__ChkSnLink_(struct soap *soap, struct __ns1__ChkSnLink_ *p)
{
	if (p)
	{	soap_default___ns1__ChkSnLink_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnLink_(struct soap *soap, const char *URL, struct __ns1__ChkSnLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnLink_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnLink_(struct soap *soap, struct __ns1__ChkSnLink_ *p)
{
	if (soap_read___ns1__ChkSnLink_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsThermal__DEFINED
#define SOAP_TYPE___ns1__InsThermal__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsThermal_(struct soap*, struct __ns1__InsThermal_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsThermal_(struct soap*, const struct __ns1__InsThermal_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsThermal_(struct soap*, const char*, int, const struct __ns1__InsThermal_ *, const char*);
SOAP_FMAC3 struct __ns1__InsThermal_ * SOAP_FMAC4 soap_in___ns1__InsThermal_(struct soap*, const char*, struct __ns1__InsThermal_ *, const char*);
SOAP_FMAC1 struct __ns1__InsThermal_ * SOAP_FMAC2 soap_instantiate___ns1__InsThermal_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsThermal_ * soap_new___ns1__InsThermal_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsThermal_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsThermal_ * soap_new_req___ns1__InsThermal_(
	struct soap *soap)
{
	struct __ns1__InsThermal_ *_p = soap_new___ns1__InsThermal_(soap);
	if (_p)
	{	soap_default___ns1__InsThermal_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsThermal_ * soap_new_set___ns1__InsThermal_(
	struct soap *soap,
	_ns1__InsThermal *ns1__InsThermal)
{
	struct __ns1__InsThermal_ *_p = soap_new___ns1__InsThermal_(soap);
	if (_p)
	{	soap_default___ns1__InsThermal_(soap, _p);
		_p->ns1__InsThermal = ns1__InsThermal;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsThermal_(struct soap*, const struct __ns1__InsThermal_ *, const char*, const char*);

inline int soap_write___ns1__InsThermal_(struct soap *soap, struct __ns1__InsThermal_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsThermal_(soap, p), 0) || soap_put___ns1__InsThermal_(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsThermal_(struct soap *soap, const char *URL, struct __ns1__InsThermal_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermal_(soap, p), 0) || soap_put___ns1__InsThermal_(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsThermal_(struct soap *soap, const char *URL, struct __ns1__InsThermal_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermal_(soap, p), 0) || soap_put___ns1__InsThermal_(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsThermal_ * SOAP_FMAC4 soap_get___ns1__InsThermal_(struct soap*, struct __ns1__InsThermal_ *, const char*, const char*);

inline int soap_read___ns1__InsThermal_(struct soap *soap, struct __ns1__InsThermal_ *p)
{
	if (p)
	{	soap_default___ns1__InsThermal_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsThermal_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsThermal_(struct soap *soap, const char *URL, struct __ns1__InsThermal_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsThermal_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsThermal_(struct soap *soap, struct __ns1__InsThermal_ *p)
{
	if (soap_read___ns1__InsThermal_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsWHDetection__DEFINED
#define SOAP_TYPE___ns1__InsWHDetection__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsWHDetection_(struct soap*, struct __ns1__InsWHDetection_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsWHDetection_(struct soap*, const struct __ns1__InsWHDetection_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsWHDetection_(struct soap*, const char*, int, const struct __ns1__InsWHDetection_ *, const char*);
SOAP_FMAC3 struct __ns1__InsWHDetection_ * SOAP_FMAC4 soap_in___ns1__InsWHDetection_(struct soap*, const char*, struct __ns1__InsWHDetection_ *, const char*);
SOAP_FMAC1 struct __ns1__InsWHDetection_ * SOAP_FMAC2 soap_instantiate___ns1__InsWHDetection_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsWHDetection_ * soap_new___ns1__InsWHDetection_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsWHDetection_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsWHDetection_ * soap_new_req___ns1__InsWHDetection_(
	struct soap *soap)
{
	struct __ns1__InsWHDetection_ *_p = soap_new___ns1__InsWHDetection_(soap);
	if (_p)
	{	soap_default___ns1__InsWHDetection_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsWHDetection_ * soap_new_set___ns1__InsWHDetection_(
	struct soap *soap,
	_ns1__InsWHDetection *ns1__InsWHDetection)
{
	struct __ns1__InsWHDetection_ *_p = soap_new___ns1__InsWHDetection_(soap);
	if (_p)
	{	soap_default___ns1__InsWHDetection_(soap, _p);
		_p->ns1__InsWHDetection = ns1__InsWHDetection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsWHDetection_(struct soap*, const struct __ns1__InsWHDetection_ *, const char*, const char*);

inline int soap_write___ns1__InsWHDetection_(struct soap *soap, struct __ns1__InsWHDetection_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsWHDetection_(soap, p), 0) || soap_put___ns1__InsWHDetection_(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsWHDetection_(struct soap *soap, const char *URL, struct __ns1__InsWHDetection_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsWHDetection_(soap, p), 0) || soap_put___ns1__InsWHDetection_(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsWHDetection_(struct soap *soap, const char *URL, struct __ns1__InsWHDetection_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsWHDetection_(soap, p), 0) || soap_put___ns1__InsWHDetection_(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsWHDetection_ * SOAP_FMAC4 soap_get___ns1__InsWHDetection_(struct soap*, struct __ns1__InsWHDetection_ *, const char*, const char*);

inline int soap_read___ns1__InsWHDetection_(struct soap *soap, struct __ns1__InsWHDetection_ *p)
{
	if (p)
	{	soap_default___ns1__InsWHDetection_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsWHDetection_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsWHDetection_(struct soap *soap, const char *URL, struct __ns1__InsWHDetection_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsWHDetection_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsWHDetection_(struct soap *soap, struct __ns1__InsWHDetection_ *p)
{
	if (soap_read___ns1__InsWHDetection_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNessForCL__DEFINED
#define SOAP_TYPE___ns1__InsFlatNessForCL__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNessForCL_(struct soap*, struct __ns1__InsFlatNessForCL_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNessForCL_(struct soap*, const struct __ns1__InsFlatNessForCL_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNessForCL_(struct soap*, const char*, int, const struct __ns1__InsFlatNessForCL_ *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNessForCL_ * SOAP_FMAC4 soap_in___ns1__InsFlatNessForCL_(struct soap*, const char*, struct __ns1__InsFlatNessForCL_ *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNessForCL_ * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNessForCL_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNessForCL_ * soap_new___ns1__InsFlatNessForCL_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNessForCL_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNessForCL_ * soap_new_req___ns1__InsFlatNessForCL_(
	struct soap *soap)
{
	struct __ns1__InsFlatNessForCL_ *_p = soap_new___ns1__InsFlatNessForCL_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForCL_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNessForCL_ * soap_new_set___ns1__InsFlatNessForCL_(
	struct soap *soap,
	_ns1__InsFlatNessForCL *ns1__InsFlatNessForCL)
{
	struct __ns1__InsFlatNessForCL_ *_p = soap_new___ns1__InsFlatNessForCL_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForCL_(soap, _p);
		_p->ns1__InsFlatNessForCL = ns1__InsFlatNessForCL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNessForCL_(struct soap*, const struct __ns1__InsFlatNessForCL_ *, const char*, const char*);

inline int soap_write___ns1__InsFlatNessForCL_(struct soap *soap, struct __ns1__InsFlatNessForCL_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNessForCL_(soap, p), 0) || soap_put___ns1__InsFlatNessForCL_(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNessForCL_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForCL_(soap, p), 0) || soap_put___ns1__InsFlatNessForCL_(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNessForCL_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForCL_(soap, p), 0) || soap_put___ns1__InsFlatNessForCL_(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNessForCL_ * SOAP_FMAC4 soap_get___ns1__InsFlatNessForCL_(struct soap*, struct __ns1__InsFlatNessForCL_ *, const char*, const char*);

inline int soap_read___ns1__InsFlatNessForCL_(struct soap *soap, struct __ns1__InsFlatNessForCL_ *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNessForCL_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNessForCL_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNessForCL_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNessForCL_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNessForCL_(struct soap *soap, struct __ns1__InsFlatNessForCL_ *p)
{
	if (soap_read___ns1__InsFlatNessForCL_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNessForLSD__DEFINED
#define SOAP_TYPE___ns1__InsFlatNessForLSD__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNessForLSD_(struct soap*, struct __ns1__InsFlatNessForLSD_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNessForLSD_(struct soap*, const struct __ns1__InsFlatNessForLSD_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNessForLSD_(struct soap*, const char*, int, const struct __ns1__InsFlatNessForLSD_ *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNessForLSD_ * SOAP_FMAC4 soap_in___ns1__InsFlatNessForLSD_(struct soap*, const char*, struct __ns1__InsFlatNessForLSD_ *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNessForLSD_ * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNessForLSD_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNessForLSD_ * soap_new___ns1__InsFlatNessForLSD_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNessForLSD_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNessForLSD_ * soap_new_req___ns1__InsFlatNessForLSD_(
	struct soap *soap)
{
	struct __ns1__InsFlatNessForLSD_ *_p = soap_new___ns1__InsFlatNessForLSD_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForLSD_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNessForLSD_ * soap_new_set___ns1__InsFlatNessForLSD_(
	struct soap *soap,
	_ns1__InsFlatNessForLSD *ns1__InsFlatNessForLSD)
{
	struct __ns1__InsFlatNessForLSD_ *_p = soap_new___ns1__InsFlatNessForLSD_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForLSD_(soap, _p);
		_p->ns1__InsFlatNessForLSD = ns1__InsFlatNessForLSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNessForLSD_(struct soap*, const struct __ns1__InsFlatNessForLSD_ *, const char*, const char*);

inline int soap_write___ns1__InsFlatNessForLSD_(struct soap *soap, struct __ns1__InsFlatNessForLSD_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNessForLSD_(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD_(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNessForLSD_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForLSD_(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD_(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNessForLSD_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForLSD_(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD_(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNessForLSD_ * SOAP_FMAC4 soap_get___ns1__InsFlatNessForLSD_(struct soap*, struct __ns1__InsFlatNessForLSD_ *, const char*, const char*);

inline int soap_read___ns1__InsFlatNessForLSD_(struct soap *soap, struct __ns1__InsFlatNessForLSD_ *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNessForLSD_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNessForLSD_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNessForLSD_(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNessForLSD_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNessForLSD_(struct soap *soap, struct __ns1__InsFlatNessForLSD_ *p)
{
	if (soap_read___ns1__InsFlatNessForLSD_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNess__DEFINED
#define SOAP_TYPE___ns1__InsFlatNess__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNess_(struct soap*, struct __ns1__InsFlatNess_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNess_(struct soap*, const struct __ns1__InsFlatNess_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNess_(struct soap*, const char*, int, const struct __ns1__InsFlatNess_ *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNess_ * SOAP_FMAC4 soap_in___ns1__InsFlatNess_(struct soap*, const char*, struct __ns1__InsFlatNess_ *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNess_ * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNess_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNess_ * soap_new___ns1__InsFlatNess_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNess_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNess_ * soap_new_req___ns1__InsFlatNess_(
	struct soap *soap)
{
	struct __ns1__InsFlatNess_ *_p = soap_new___ns1__InsFlatNess_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNess_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNess_ * soap_new_set___ns1__InsFlatNess_(
	struct soap *soap,
	_ns1__InsFlatNess *ns1__InsFlatNess)
{
	struct __ns1__InsFlatNess_ *_p = soap_new___ns1__InsFlatNess_(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNess_(soap, _p);
		_p->ns1__InsFlatNess = ns1__InsFlatNess;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNess_(struct soap*, const struct __ns1__InsFlatNess_ *, const char*, const char*);

inline int soap_write___ns1__InsFlatNess_(struct soap *soap, struct __ns1__InsFlatNess_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNess_(soap, p), 0) || soap_put___ns1__InsFlatNess_(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNess_(struct soap *soap, const char *URL, struct __ns1__InsFlatNess_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNess_(soap, p), 0) || soap_put___ns1__InsFlatNess_(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNess_(struct soap *soap, const char *URL, struct __ns1__InsFlatNess_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNess_(soap, p), 0) || soap_put___ns1__InsFlatNess_(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNess_ * SOAP_FMAC4 soap_get___ns1__InsFlatNess_(struct soap*, struct __ns1__InsFlatNess_ *, const char*, const char*);

inline int soap_read___ns1__InsFlatNess_(struct soap *soap, struct __ns1__InsFlatNess_ *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNess_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNess_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNess_(struct soap *soap, const char *URL, struct __ns1__InsFlatNess_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNess_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNess_(struct soap *soap, struct __ns1__InsFlatNess_ *p)
{
	if (soap_read___ns1__InsFlatNess_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ImpMesAteTestData__DEFINED
#define SOAP_TYPE___ns1__ImpMesAteTestData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ImpMesAteTestData_(struct soap*, struct __ns1__ImpMesAteTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ImpMesAteTestData_(struct soap*, const struct __ns1__ImpMesAteTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ImpMesAteTestData_(struct soap*, const char*, int, const struct __ns1__ImpMesAteTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__ImpMesAteTestData_ * SOAP_FMAC4 soap_in___ns1__ImpMesAteTestData_(struct soap*, const char*, struct __ns1__ImpMesAteTestData_ *, const char*);
SOAP_FMAC1 struct __ns1__ImpMesAteTestData_ * SOAP_FMAC2 soap_instantiate___ns1__ImpMesAteTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ImpMesAteTestData_ * soap_new___ns1__ImpMesAteTestData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ImpMesAteTestData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ImpMesAteTestData_ * soap_new_req___ns1__ImpMesAteTestData_(
	struct soap *soap)
{
	struct __ns1__ImpMesAteTestData_ *_p = soap_new___ns1__ImpMesAteTestData_(soap);
	if (_p)
	{	soap_default___ns1__ImpMesAteTestData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ImpMesAteTestData_ * soap_new_set___ns1__ImpMesAteTestData_(
	struct soap *soap,
	_ns1__ImpMesAteTestData *ns1__ImpMesAteTestData)
{
	struct __ns1__ImpMesAteTestData_ *_p = soap_new___ns1__ImpMesAteTestData_(soap);
	if (_p)
	{	soap_default___ns1__ImpMesAteTestData_(soap, _p);
		_p->ns1__ImpMesAteTestData = ns1__ImpMesAteTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ImpMesAteTestData_(struct soap*, const struct __ns1__ImpMesAteTestData_ *, const char*, const char*);

inline int soap_write___ns1__ImpMesAteTestData_(struct soap *soap, struct __ns1__ImpMesAteTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ImpMesAteTestData_(soap, p), 0) || soap_put___ns1__ImpMesAteTestData_(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ImpMesAteTestData_(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ImpMesAteTestData_(soap, p), 0) || soap_put___ns1__ImpMesAteTestData_(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ImpMesAteTestData_(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ImpMesAteTestData_(soap, p), 0) || soap_put___ns1__ImpMesAteTestData_(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ImpMesAteTestData_ * SOAP_FMAC4 soap_get___ns1__ImpMesAteTestData_(struct soap*, struct __ns1__ImpMesAteTestData_ *, const char*, const char*);

inline int soap_read___ns1__ImpMesAteTestData_(struct soap *soap, struct __ns1__ImpMesAteTestData_ *p)
{
	if (p)
	{	soap_default___ns1__ImpMesAteTestData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ImpMesAteTestData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ImpMesAteTestData_(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ImpMesAteTestData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ImpMesAteTestData_(struct soap *soap, struct __ns1__ImpMesAteTestData_ *p)
{
	if (soap_read___ns1__ImpMesAteTestData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkStationTime__DEFINED
#define SOAP_TYPE___ns1__chkStationTime__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkStationTime_(struct soap*, struct __ns1__chkStationTime_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkStationTime_(struct soap*, const struct __ns1__chkStationTime_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkStationTime_(struct soap*, const char*, int, const struct __ns1__chkStationTime_ *, const char*);
SOAP_FMAC3 struct __ns1__chkStationTime_ * SOAP_FMAC4 soap_in___ns1__chkStationTime_(struct soap*, const char*, struct __ns1__chkStationTime_ *, const char*);
SOAP_FMAC1 struct __ns1__chkStationTime_ * SOAP_FMAC2 soap_instantiate___ns1__chkStationTime_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkStationTime_ * soap_new___ns1__chkStationTime_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkStationTime_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkStationTime_ * soap_new_req___ns1__chkStationTime_(
	struct soap *soap)
{
	struct __ns1__chkStationTime_ *_p = soap_new___ns1__chkStationTime_(soap);
	if (_p)
	{	soap_default___ns1__chkStationTime_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkStationTime_ * soap_new_set___ns1__chkStationTime_(
	struct soap *soap,
	_ns1__chkStationTime *ns1__chkStationTime)
{
	struct __ns1__chkStationTime_ *_p = soap_new___ns1__chkStationTime_(soap);
	if (_p)
	{	soap_default___ns1__chkStationTime_(soap, _p);
		_p->ns1__chkStationTime = ns1__chkStationTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkStationTime_(struct soap*, const struct __ns1__chkStationTime_ *, const char*, const char*);

inline int soap_write___ns1__chkStationTime_(struct soap *soap, struct __ns1__chkStationTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkStationTime_(soap, p), 0) || soap_put___ns1__chkStationTime_(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkStationTime_(struct soap *soap, const char *URL, struct __ns1__chkStationTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkStationTime_(soap, p), 0) || soap_put___ns1__chkStationTime_(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkStationTime_(struct soap *soap, const char *URL, struct __ns1__chkStationTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkStationTime_(soap, p), 0) || soap_put___ns1__chkStationTime_(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkStationTime_ * SOAP_FMAC4 soap_get___ns1__chkStationTime_(struct soap*, struct __ns1__chkStationTime_ *, const char*, const char*);

inline int soap_read___ns1__chkStationTime_(struct soap *soap, struct __ns1__chkStationTime_ *p)
{
	if (p)
	{	soap_default___ns1__chkStationTime_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkStationTime_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkStationTime_(struct soap *soap, const char *URL, struct __ns1__chkStationTime_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkStationTime_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkStationTime_(struct soap *soap, struct __ns1__chkStationTime_ *p)
{
	if (soap_read___ns1__chkStationTime_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InFruitsOrtQty__DEFINED
#define SOAP_TYPE___ns1__InFruitsOrtQty__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InFruitsOrtQty_(struct soap*, struct __ns1__InFruitsOrtQty_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InFruitsOrtQty_(struct soap*, const struct __ns1__InFruitsOrtQty_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InFruitsOrtQty_(struct soap*, const char*, int, const struct __ns1__InFruitsOrtQty_ *, const char*);
SOAP_FMAC3 struct __ns1__InFruitsOrtQty_ * SOAP_FMAC4 soap_in___ns1__InFruitsOrtQty_(struct soap*, const char*, struct __ns1__InFruitsOrtQty_ *, const char*);
SOAP_FMAC1 struct __ns1__InFruitsOrtQty_ * SOAP_FMAC2 soap_instantiate___ns1__InFruitsOrtQty_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InFruitsOrtQty_ * soap_new___ns1__InFruitsOrtQty_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InFruitsOrtQty_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InFruitsOrtQty_ * soap_new_req___ns1__InFruitsOrtQty_(
	struct soap *soap)
{
	struct __ns1__InFruitsOrtQty_ *_p = soap_new___ns1__InFruitsOrtQty_(soap);
	if (_p)
	{	soap_default___ns1__InFruitsOrtQty_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InFruitsOrtQty_ * soap_new_set___ns1__InFruitsOrtQty_(
	struct soap *soap,
	_ns1__InFruitsOrtQty *ns1__InFruitsOrtQty)
{
	struct __ns1__InFruitsOrtQty_ *_p = soap_new___ns1__InFruitsOrtQty_(soap);
	if (_p)
	{	soap_default___ns1__InFruitsOrtQty_(soap, _p);
		_p->ns1__InFruitsOrtQty = ns1__InFruitsOrtQty;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InFruitsOrtQty_(struct soap*, const struct __ns1__InFruitsOrtQty_ *, const char*, const char*);

inline int soap_write___ns1__InFruitsOrtQty_(struct soap *soap, struct __ns1__InFruitsOrtQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InFruitsOrtQty_(soap, p), 0) || soap_put___ns1__InFruitsOrtQty_(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InFruitsOrtQty_(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InFruitsOrtQty_(soap, p), 0) || soap_put___ns1__InFruitsOrtQty_(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InFruitsOrtQty_(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InFruitsOrtQty_(soap, p), 0) || soap_put___ns1__InFruitsOrtQty_(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InFruitsOrtQty_ * SOAP_FMAC4 soap_get___ns1__InFruitsOrtQty_(struct soap*, struct __ns1__InFruitsOrtQty_ *, const char*, const char*);

inline int soap_read___ns1__InFruitsOrtQty_(struct soap *soap, struct __ns1__InFruitsOrtQty_ *p)
{
	if (p)
	{	soap_default___ns1__InFruitsOrtQty_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InFruitsOrtQty_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InFruitsOrtQty_(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InFruitsOrtQty_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InFruitsOrtQty_(struct soap *soap, struct __ns1__InFruitsOrtQty_ *p)
{
	if (soap_read___ns1__InFruitsOrtQty_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendTestResult__DEFINED
#define SOAP_TYPE___ns1__sendTestResult__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTestResult_(struct soap*, struct __ns1__sendTestResult_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTestResult_(struct soap*, const struct __ns1__sendTestResult_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTestResult_(struct soap*, const char*, int, const struct __ns1__sendTestResult_ *, const char*);
SOAP_FMAC3 struct __ns1__sendTestResult_ * SOAP_FMAC4 soap_in___ns1__sendTestResult_(struct soap*, const char*, struct __ns1__sendTestResult_ *, const char*);
SOAP_FMAC1 struct __ns1__sendTestResult_ * SOAP_FMAC2 soap_instantiate___ns1__sendTestResult_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTestResult_ * soap_new___ns1__sendTestResult_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendTestResult_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendTestResult_ * soap_new_req___ns1__sendTestResult_(
	struct soap *soap)
{
	struct __ns1__sendTestResult_ *_p = soap_new___ns1__sendTestResult_(soap);
	if (_p)
	{	soap_default___ns1__sendTestResult_(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendTestResult_ * soap_new_set___ns1__sendTestResult_(
	struct soap *soap,
	_ns1__sendTestResult *ns1__sendTestResult)
{
	struct __ns1__sendTestResult_ *_p = soap_new___ns1__sendTestResult_(soap);
	if (_p)
	{	soap_default___ns1__sendTestResult_(soap, _p);
		_p->ns1__sendTestResult = ns1__sendTestResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTestResult_(struct soap*, const struct __ns1__sendTestResult_ *, const char*, const char*);

inline int soap_write___ns1__sendTestResult_(struct soap *soap, struct __ns1__sendTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendTestResult_(soap, p), 0) || soap_put___ns1__sendTestResult_(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendTestResult_(struct soap *soap, const char *URL, struct __ns1__sendTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestResult_(soap, p), 0) || soap_put___ns1__sendTestResult_(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendTestResult_(struct soap *soap, const char *URL, struct __ns1__sendTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestResult_(soap, p), 0) || soap_put___ns1__sendTestResult_(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendTestResult_ * SOAP_FMAC4 soap_get___ns1__sendTestResult_(struct soap*, struct __ns1__sendTestResult_ *, const char*, const char*);

inline int soap_read___ns1__sendTestResult_(struct soap *soap, struct __ns1__sendTestResult_ *p)
{
	if (p)
	{	soap_default___ns1__sendTestResult_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendTestResult_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendTestResult_(struct soap *soap, const char *URL, struct __ns1__sendTestResult_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendTestResult_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendTestResult_(struct soap *soap, struct __ns1__sendTestResult_ *p)
{
	if (soap_read___ns1__sendTestResult_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendTestData__DEFINED
#define SOAP_TYPE___ns1__sendTestData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTestData_(struct soap*, struct __ns1__sendTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTestData_(struct soap*, const struct __ns1__sendTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTestData_(struct soap*, const char*, int, const struct __ns1__sendTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__sendTestData_ * SOAP_FMAC4 soap_in___ns1__sendTestData_(struct soap*, const char*, struct __ns1__sendTestData_ *, const char*);
SOAP_FMAC1 struct __ns1__sendTestData_ * SOAP_FMAC2 soap_instantiate___ns1__sendTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTestData_ * soap_new___ns1__sendTestData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendTestData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendTestData_ * soap_new_req___ns1__sendTestData_(
	struct soap *soap)
{
	struct __ns1__sendTestData_ *_p = soap_new___ns1__sendTestData_(soap);
	if (_p)
	{	soap_default___ns1__sendTestData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendTestData_ * soap_new_set___ns1__sendTestData_(
	struct soap *soap,
	_ns1__sendTestData *ns1__sendTestData)
{
	struct __ns1__sendTestData_ *_p = soap_new___ns1__sendTestData_(soap);
	if (_p)
	{	soap_default___ns1__sendTestData_(soap, _p);
		_p->ns1__sendTestData = ns1__sendTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTestData_(struct soap*, const struct __ns1__sendTestData_ *, const char*, const char*);

inline int soap_write___ns1__sendTestData_(struct soap *soap, struct __ns1__sendTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendTestData_(soap, p), 0) || soap_put___ns1__sendTestData_(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendTestData_(struct soap *soap, const char *URL, struct __ns1__sendTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestData_(soap, p), 0) || soap_put___ns1__sendTestData_(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendTestData_(struct soap *soap, const char *URL, struct __ns1__sendTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestData_(soap, p), 0) || soap_put___ns1__sendTestData_(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendTestData_ * SOAP_FMAC4 soap_get___ns1__sendTestData_(struct soap*, struct __ns1__sendTestData_ *, const char*, const char*);

inline int soap_read___ns1__sendTestData_(struct soap *soap, struct __ns1__sendTestData_ *p)
{
	if (p)
	{	soap_default___ns1__sendTestData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendTestData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendTestData_(struct soap *soap, const char *URL, struct __ns1__sendTestData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendTestData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendTestData_(struct soap *soap, struct __ns1__sendTestData_ *p)
{
	if (soap_read___ns1__sendTestData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSN_USCOREStation__DEFINED
#define SOAP_TYPE___ns1__checkSN_USCOREStation__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSN_USCOREStation_(struct soap*, struct __ns1__checkSN_USCOREStation_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSN_USCOREStation_(struct soap*, const struct __ns1__checkSN_USCOREStation_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSN_USCOREStation_(struct soap*, const char*, int, const struct __ns1__checkSN_USCOREStation_ *, const char*);
SOAP_FMAC3 struct __ns1__checkSN_USCOREStation_ * SOAP_FMAC4 soap_in___ns1__checkSN_USCOREStation_(struct soap*, const char*, struct __ns1__checkSN_USCOREStation_ *, const char*);
SOAP_FMAC1 struct __ns1__checkSN_USCOREStation_ * SOAP_FMAC2 soap_instantiate___ns1__checkSN_USCOREStation_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSN_USCOREStation_ * soap_new___ns1__checkSN_USCOREStation_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSN_USCOREStation_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSN_USCOREStation_ * soap_new_req___ns1__checkSN_USCOREStation_(
	struct soap *soap)
{
	struct __ns1__checkSN_USCOREStation_ *_p = soap_new___ns1__checkSN_USCOREStation_(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStation_(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSN_USCOREStation_ * soap_new_set___ns1__checkSN_USCOREStation_(
	struct soap *soap,
	_ns1__checkSN_USCOREStation *ns1__checkSN_USCOREStation)
{
	struct __ns1__checkSN_USCOREStation_ *_p = soap_new___ns1__checkSN_USCOREStation_(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStation_(soap, _p);
		_p->ns1__checkSN_USCOREStation = ns1__checkSN_USCOREStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSN_USCOREStation_(struct soap*, const struct __ns1__checkSN_USCOREStation_ *, const char*, const char*);

inline int soap_write___ns1__checkSN_USCOREStation_(struct soap *soap, struct __ns1__checkSN_USCOREStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSN_USCOREStation_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation_(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkSN_USCOREStation_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStation_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation_(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkSN_USCOREStation_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStation_(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation_(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSN_USCOREStation_ * SOAP_FMAC4 soap_get___ns1__checkSN_USCOREStation_(struct soap*, struct __ns1__checkSN_USCOREStation_ *, const char*, const char*);

inline int soap_read___ns1__checkSN_USCOREStation_(struct soap *soap, struct __ns1__checkSN_USCOREStation_ *p)
{
	if (p)
	{	soap_default___ns1__checkSN_USCOREStation_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSN_USCOREStation_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkSN_USCOREStation_(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkSN_USCOREStation_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkSN_USCOREStation_(struct soap *soap, struct __ns1__checkSN_USCOREStation_ *p)
{
	if (soap_read___ns1__checkSN_USCOREStation_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkEmpNo__DEFINED
#define SOAP_TYPE___ns1__checkEmpNo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkEmpNo_(struct soap*, struct __ns1__checkEmpNo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkEmpNo_(struct soap*, const struct __ns1__checkEmpNo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkEmpNo_(struct soap*, const char*, int, const struct __ns1__checkEmpNo_ *, const char*);
SOAP_FMAC3 struct __ns1__checkEmpNo_ * SOAP_FMAC4 soap_in___ns1__checkEmpNo_(struct soap*, const char*, struct __ns1__checkEmpNo_ *, const char*);
SOAP_FMAC1 struct __ns1__checkEmpNo_ * SOAP_FMAC2 soap_instantiate___ns1__checkEmpNo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkEmpNo_ * soap_new___ns1__checkEmpNo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkEmpNo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkEmpNo_ * soap_new_req___ns1__checkEmpNo_(
	struct soap *soap)
{
	struct __ns1__checkEmpNo_ *_p = soap_new___ns1__checkEmpNo_(soap);
	if (_p)
	{	soap_default___ns1__checkEmpNo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkEmpNo_ * soap_new_set___ns1__checkEmpNo_(
	struct soap *soap,
	_ns1__checkEmpNo *ns1__checkEmpNo)
{
	struct __ns1__checkEmpNo_ *_p = soap_new___ns1__checkEmpNo_(soap);
	if (_p)
	{	soap_default___ns1__checkEmpNo_(soap, _p);
		_p->ns1__checkEmpNo = ns1__checkEmpNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkEmpNo_(struct soap*, const struct __ns1__checkEmpNo_ *, const char*, const char*);

inline int soap_write___ns1__checkEmpNo_(struct soap *soap, struct __ns1__checkEmpNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkEmpNo_(soap, p), 0) || soap_put___ns1__checkEmpNo_(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkEmpNo_(struct soap *soap, const char *URL, struct __ns1__checkEmpNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpNo_(soap, p), 0) || soap_put___ns1__checkEmpNo_(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkEmpNo_(struct soap *soap, const char *URL, struct __ns1__checkEmpNo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpNo_(soap, p), 0) || soap_put___ns1__checkEmpNo_(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkEmpNo_ * SOAP_FMAC4 soap_get___ns1__checkEmpNo_(struct soap*, struct __ns1__checkEmpNo_ *, const char*, const char*);

inline int soap_read___ns1__checkEmpNo_(struct soap *soap, struct __ns1__checkEmpNo_ *p)
{
	if (p)
	{	soap_default___ns1__checkEmpNo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkEmpNo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkEmpNo_(struct soap *soap, const char *URL, struct __ns1__checkEmpNo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkEmpNo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkEmpNo_(struct soap *soap, struct __ns1__checkEmpNo_ *p)
{
	if (soap_read___ns1__checkEmpNo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkTestData__DEFINED
#define SOAP_TYPE___ns1__checkTestData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkTestData_(struct soap*, struct __ns1__checkTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkTestData_(struct soap*, const struct __ns1__checkTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkTestData_(struct soap*, const char*, int, const struct __ns1__checkTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__checkTestData_ * SOAP_FMAC4 soap_in___ns1__checkTestData_(struct soap*, const char*, struct __ns1__checkTestData_ *, const char*);
SOAP_FMAC1 struct __ns1__checkTestData_ * SOAP_FMAC2 soap_instantiate___ns1__checkTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkTestData_ * soap_new___ns1__checkTestData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkTestData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkTestData_ * soap_new_req___ns1__checkTestData_(
	struct soap *soap)
{
	struct __ns1__checkTestData_ *_p = soap_new___ns1__checkTestData_(soap);
	if (_p)
	{	soap_default___ns1__checkTestData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkTestData_ * soap_new_set___ns1__checkTestData_(
	struct soap *soap,
	_ns1__checkTestData *ns1__checkTestData)
{
	struct __ns1__checkTestData_ *_p = soap_new___ns1__checkTestData_(soap);
	if (_p)
	{	soap_default___ns1__checkTestData_(soap, _p);
		_p->ns1__checkTestData = ns1__checkTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkTestData_(struct soap*, const struct __ns1__checkTestData_ *, const char*, const char*);

inline int soap_write___ns1__checkTestData_(struct soap *soap, struct __ns1__checkTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkTestData_(soap, p), 0) || soap_put___ns1__checkTestData_(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkTestData_(struct soap *soap, const char *URL, struct __ns1__checkTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkTestData_(soap, p), 0) || soap_put___ns1__checkTestData_(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkTestData_(struct soap *soap, const char *URL, struct __ns1__checkTestData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkTestData_(soap, p), 0) || soap_put___ns1__checkTestData_(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkTestData_ * SOAP_FMAC4 soap_get___ns1__checkTestData_(struct soap*, struct __ns1__checkTestData_ *, const char*, const char*);

inline int soap_read___ns1__checkTestData_(struct soap *soap, struct __ns1__checkTestData_ *p)
{
	if (p)
	{	soap_default___ns1__checkTestData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkTestData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkTestData_(struct soap *soap, const char *URL, struct __ns1__checkTestData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkTestData_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkTestData_(struct soap *soap, struct __ns1__checkTestData_ *p)
{
	if (soap_read___ns1__checkTestData_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsZjList__DEFINED
#define SOAP_TYPE___ns1__InsZjList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsZjList_(struct soap*, struct __ns1__InsZjList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsZjList_(struct soap*, const struct __ns1__InsZjList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsZjList_(struct soap*, const char*, int, const struct __ns1__InsZjList_ *, const char*);
SOAP_FMAC3 struct __ns1__InsZjList_ * SOAP_FMAC4 soap_in___ns1__InsZjList_(struct soap*, const char*, struct __ns1__InsZjList_ *, const char*);
SOAP_FMAC1 struct __ns1__InsZjList_ * SOAP_FMAC2 soap_instantiate___ns1__InsZjList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsZjList_ * soap_new___ns1__InsZjList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsZjList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsZjList_ * soap_new_req___ns1__InsZjList_(
	struct soap *soap)
{
	struct __ns1__InsZjList_ *_p = soap_new___ns1__InsZjList_(soap);
	if (_p)
	{	soap_default___ns1__InsZjList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsZjList_ * soap_new_set___ns1__InsZjList_(
	struct soap *soap,
	_ns1__InsZjList *ns1__InsZjList)
{
	struct __ns1__InsZjList_ *_p = soap_new___ns1__InsZjList_(soap);
	if (_p)
	{	soap_default___ns1__InsZjList_(soap, _p);
		_p->ns1__InsZjList = ns1__InsZjList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsZjList_(struct soap*, const struct __ns1__InsZjList_ *, const char*, const char*);

inline int soap_write___ns1__InsZjList_(struct soap *soap, struct __ns1__InsZjList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsZjList_(soap, p), 0) || soap_put___ns1__InsZjList_(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsZjList_(struct soap *soap, const char *URL, struct __ns1__InsZjList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZjList_(soap, p), 0) || soap_put___ns1__InsZjList_(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsZjList_(struct soap *soap, const char *URL, struct __ns1__InsZjList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZjList_(soap, p), 0) || soap_put___ns1__InsZjList_(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsZjList_ * SOAP_FMAC4 soap_get___ns1__InsZjList_(struct soap*, struct __ns1__InsZjList_ *, const char*, const char*);

inline int soap_read___ns1__InsZjList_(struct soap *soap, struct __ns1__InsZjList_ *p)
{
	if (p)
	{	soap_default___ns1__InsZjList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsZjList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsZjList_(struct soap *soap, const char *URL, struct __ns1__InsZjList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsZjList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsZjList_(struct soap *soap, struct __ns1__InsZjList_ *p)
{
	if (soap_read___ns1__InsZjList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFruitMachineChk__DEFINED
#define SOAP_TYPE___ns1__GetFruitMachineChk__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFruitMachineChk_(struct soap*, struct __ns1__GetFruitMachineChk_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFruitMachineChk_(struct soap*, const struct __ns1__GetFruitMachineChk_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFruitMachineChk_(struct soap*, const char*, int, const struct __ns1__GetFruitMachineChk_ *, const char*);
SOAP_FMAC3 struct __ns1__GetFruitMachineChk_ * SOAP_FMAC4 soap_in___ns1__GetFruitMachineChk_(struct soap*, const char*, struct __ns1__GetFruitMachineChk_ *, const char*);
SOAP_FMAC1 struct __ns1__GetFruitMachineChk_ * SOAP_FMAC2 soap_instantiate___ns1__GetFruitMachineChk_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFruitMachineChk_ * soap_new___ns1__GetFruitMachineChk_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFruitMachineChk_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFruitMachineChk_ * soap_new_req___ns1__GetFruitMachineChk_(
	struct soap *soap)
{
	struct __ns1__GetFruitMachineChk_ *_p = soap_new___ns1__GetFruitMachineChk_(soap);
	if (_p)
	{	soap_default___ns1__GetFruitMachineChk_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFruitMachineChk_ * soap_new_set___ns1__GetFruitMachineChk_(
	struct soap *soap,
	_ns1__GetFruitMachineChk *ns1__GetFruitMachineChk)
{
	struct __ns1__GetFruitMachineChk_ *_p = soap_new___ns1__GetFruitMachineChk_(soap);
	if (_p)
	{	soap_default___ns1__GetFruitMachineChk_(soap, _p);
		_p->ns1__GetFruitMachineChk = ns1__GetFruitMachineChk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFruitMachineChk_(struct soap*, const struct __ns1__GetFruitMachineChk_ *, const char*, const char*);

inline int soap_write___ns1__GetFruitMachineChk_(struct soap *soap, struct __ns1__GetFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFruitMachineChk_(soap, p), 0) || soap_put___ns1__GetFruitMachineChk_(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitMachineChk_(soap, p), 0) || soap_put___ns1__GetFruitMachineChk_(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitMachineChk_(soap, p), 0) || soap_put___ns1__GetFruitMachineChk_(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFruitMachineChk_ * SOAP_FMAC4 soap_get___ns1__GetFruitMachineChk_(struct soap*, struct __ns1__GetFruitMachineChk_ *, const char*, const char*);

inline int soap_read___ns1__GetFruitMachineChk_(struct soap *soap, struct __ns1__GetFruitMachineChk_ *p)
{
	if (p)
	{	soap_default___ns1__GetFruitMachineChk_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFruitMachineChk_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFruitMachineChk_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFruitMachineChk_(struct soap *soap, struct __ns1__GetFruitMachineChk_ *p)
{
	if (soap_read___ns1__GetFruitMachineChk_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFruitMachineChk__DEFINED
#define SOAP_TYPE___ns1__InsFruitMachineChk__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFruitMachineChk_(struct soap*, struct __ns1__InsFruitMachineChk_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFruitMachineChk_(struct soap*, const struct __ns1__InsFruitMachineChk_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFruitMachineChk_(struct soap*, const char*, int, const struct __ns1__InsFruitMachineChk_ *, const char*);
SOAP_FMAC3 struct __ns1__InsFruitMachineChk_ * SOAP_FMAC4 soap_in___ns1__InsFruitMachineChk_(struct soap*, const char*, struct __ns1__InsFruitMachineChk_ *, const char*);
SOAP_FMAC1 struct __ns1__InsFruitMachineChk_ * SOAP_FMAC2 soap_instantiate___ns1__InsFruitMachineChk_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFruitMachineChk_ * soap_new___ns1__InsFruitMachineChk_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFruitMachineChk_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFruitMachineChk_ * soap_new_req___ns1__InsFruitMachineChk_(
	struct soap *soap)
{
	struct __ns1__InsFruitMachineChk_ *_p = soap_new___ns1__InsFruitMachineChk_(soap);
	if (_p)
	{	soap_default___ns1__InsFruitMachineChk_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFruitMachineChk_ * soap_new_set___ns1__InsFruitMachineChk_(
	struct soap *soap,
	_ns1__InsFruitMachineChk *ns1__InsFruitMachineChk)
{
	struct __ns1__InsFruitMachineChk_ *_p = soap_new___ns1__InsFruitMachineChk_(soap);
	if (_p)
	{	soap_default___ns1__InsFruitMachineChk_(soap, _p);
		_p->ns1__InsFruitMachineChk = ns1__InsFruitMachineChk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFruitMachineChk_(struct soap*, const struct __ns1__InsFruitMachineChk_ *, const char*, const char*);

inline int soap_write___ns1__InsFruitMachineChk_(struct soap *soap, struct __ns1__InsFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFruitMachineChk_(soap, p), 0) || soap_put___ns1__InsFruitMachineChk_(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFruitMachineChk_(soap, p), 0) || soap_put___ns1__InsFruitMachineChk_(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFruitMachineChk_(soap, p), 0) || soap_put___ns1__InsFruitMachineChk_(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFruitMachineChk_ * SOAP_FMAC4 soap_get___ns1__InsFruitMachineChk_(struct soap*, struct __ns1__InsFruitMachineChk_ *, const char*, const char*);

inline int soap_read___ns1__InsFruitMachineChk_(struct soap *soap, struct __ns1__InsFruitMachineChk_ *p)
{
	if (p)
	{	soap_default___ns1__InsFruitMachineChk_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFruitMachineChk_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFruitMachineChk_(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFruitMachineChk_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFruitMachineChk_(struct soap *soap, struct __ns1__InsFruitMachineChk_ *p)
{
	if (soap_read___ns1__InsFruitMachineChk_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnLnkOutSN__DEFINED
#define SOAP_TYPE___ns1__SnLnkOutSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnLnkOutSN_(struct soap*, struct __ns1__SnLnkOutSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnLnkOutSN_(struct soap*, const struct __ns1__SnLnkOutSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnLnkOutSN_(struct soap*, const char*, int, const struct __ns1__SnLnkOutSN_ *, const char*);
SOAP_FMAC3 struct __ns1__SnLnkOutSN_ * SOAP_FMAC4 soap_in___ns1__SnLnkOutSN_(struct soap*, const char*, struct __ns1__SnLnkOutSN_ *, const char*);
SOAP_FMAC1 struct __ns1__SnLnkOutSN_ * SOAP_FMAC2 soap_instantiate___ns1__SnLnkOutSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnLnkOutSN_ * soap_new___ns1__SnLnkOutSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnLnkOutSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnLnkOutSN_ * soap_new_req___ns1__SnLnkOutSN_(
	struct soap *soap)
{
	struct __ns1__SnLnkOutSN_ *_p = soap_new___ns1__SnLnkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__SnLnkOutSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnLnkOutSN_ * soap_new_set___ns1__SnLnkOutSN_(
	struct soap *soap,
	_ns1__SnLnkOutSN *ns1__SnLnkOutSN)
{
	struct __ns1__SnLnkOutSN_ *_p = soap_new___ns1__SnLnkOutSN_(soap);
	if (_p)
	{	soap_default___ns1__SnLnkOutSN_(soap, _p);
		_p->ns1__SnLnkOutSN = ns1__SnLnkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnLnkOutSN_(struct soap*, const struct __ns1__SnLnkOutSN_ *, const char*, const char*);

inline int soap_write___ns1__SnLnkOutSN_(struct soap *soap, struct __ns1__SnLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SnLnkOutSN_(soap, p), 0) || soap_put___ns1__SnLnkOutSN_(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SnLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnLnkOutSN_(soap, p), 0) || soap_put___ns1__SnLnkOutSN_(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SnLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnLnkOutSN_(soap, p), 0) || soap_put___ns1__SnLnkOutSN_(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnLnkOutSN_ * SOAP_FMAC4 soap_get___ns1__SnLnkOutSN_(struct soap*, struct __ns1__SnLnkOutSN_ *, const char*, const char*);

inline int soap_read___ns1__SnLnkOutSN_(struct soap *soap, struct __ns1__SnLnkOutSN_ *p)
{
	if (p)
	{	soap_default___ns1__SnLnkOutSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnLnkOutSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SnLnkOutSN_(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SnLnkOutSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SnLnkOutSN_(struct soap *soap, struct __ns1__SnLnkOutSN_ *p)
{
	if (soap_read___ns1__SnLnkOutSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoBase__DEFINED
#define SOAP_TYPE___ns1__getMoBase__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoBase_(struct soap*, struct __ns1__getMoBase_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoBase_(struct soap*, const struct __ns1__getMoBase_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoBase_(struct soap*, const char*, int, const struct __ns1__getMoBase_ *, const char*);
SOAP_FMAC3 struct __ns1__getMoBase_ * SOAP_FMAC4 soap_in___ns1__getMoBase_(struct soap*, const char*, struct __ns1__getMoBase_ *, const char*);
SOAP_FMAC1 struct __ns1__getMoBase_ * SOAP_FMAC2 soap_instantiate___ns1__getMoBase_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoBase_ * soap_new___ns1__getMoBase_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoBase_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoBase_ * soap_new_req___ns1__getMoBase_(
	struct soap *soap)
{
	struct __ns1__getMoBase_ *_p = soap_new___ns1__getMoBase_(soap);
	if (_p)
	{	soap_default___ns1__getMoBase_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoBase_ * soap_new_set___ns1__getMoBase_(
	struct soap *soap,
	_ns1__getMoBase *ns1__getMoBase)
{
	struct __ns1__getMoBase_ *_p = soap_new___ns1__getMoBase_(soap);
	if (_p)
	{	soap_default___ns1__getMoBase_(soap, _p);
		_p->ns1__getMoBase = ns1__getMoBase;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoBase_(struct soap*, const struct __ns1__getMoBase_ *, const char*, const char*);

inline int soap_write___ns1__getMoBase_(struct soap *soap, struct __ns1__getMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoBase_(soap, p), 0) || soap_put___ns1__getMoBase_(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoBase_(struct soap *soap, const char *URL, struct __ns1__getMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoBase_(soap, p), 0) || soap_put___ns1__getMoBase_(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoBase_(struct soap *soap, const char *URL, struct __ns1__getMoBase_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoBase_(soap, p), 0) || soap_put___ns1__getMoBase_(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoBase_ * SOAP_FMAC4 soap_get___ns1__getMoBase_(struct soap*, struct __ns1__getMoBase_ *, const char*, const char*);

inline int soap_read___ns1__getMoBase_(struct soap *soap, struct __ns1__getMoBase_ *p)
{
	if (p)
	{	soap_default___ns1__getMoBase_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoBase_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoBase_(struct soap *soap, const char *URL, struct __ns1__getMoBase_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoBase_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoBase_(struct soap *soap, struct __ns1__getMoBase_ *p)
{
	if (soap_read___ns1__getMoBase_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetNgCode__DEFINED
#define SOAP_TYPE___ns1__GetNgCode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetNgCode_(struct soap*, struct __ns1__GetNgCode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetNgCode_(struct soap*, const struct __ns1__GetNgCode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetNgCode_(struct soap*, const char*, int, const struct __ns1__GetNgCode_ *, const char*);
SOAP_FMAC3 struct __ns1__GetNgCode_ * SOAP_FMAC4 soap_in___ns1__GetNgCode_(struct soap*, const char*, struct __ns1__GetNgCode_ *, const char*);
SOAP_FMAC1 struct __ns1__GetNgCode_ * SOAP_FMAC2 soap_instantiate___ns1__GetNgCode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetNgCode_ * soap_new___ns1__GetNgCode_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetNgCode_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetNgCode_ * soap_new_req___ns1__GetNgCode_(
	struct soap *soap)
{
	struct __ns1__GetNgCode_ *_p = soap_new___ns1__GetNgCode_(soap);
	if (_p)
	{	soap_default___ns1__GetNgCode_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetNgCode_ * soap_new_set___ns1__GetNgCode_(
	struct soap *soap,
	_ns1__GetNgCode *ns1__GetNgCode)
{
	struct __ns1__GetNgCode_ *_p = soap_new___ns1__GetNgCode_(soap);
	if (_p)
	{	soap_default___ns1__GetNgCode_(soap, _p);
		_p->ns1__GetNgCode = ns1__GetNgCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetNgCode_(struct soap*, const struct __ns1__GetNgCode_ *, const char*, const char*);

inline int soap_write___ns1__GetNgCode_(struct soap *soap, struct __ns1__GetNgCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetNgCode_(soap, p), 0) || soap_put___ns1__GetNgCode_(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetNgCode_(struct soap *soap, const char *URL, struct __ns1__GetNgCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetNgCode_(soap, p), 0) || soap_put___ns1__GetNgCode_(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetNgCode_(struct soap *soap, const char *URL, struct __ns1__GetNgCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetNgCode_(soap, p), 0) || soap_put___ns1__GetNgCode_(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetNgCode_ * SOAP_FMAC4 soap_get___ns1__GetNgCode_(struct soap*, struct __ns1__GetNgCode_ *, const char*, const char*);

inline int soap_read___ns1__GetNgCode_(struct soap *soap, struct __ns1__GetNgCode_ *p)
{
	if (p)
	{	soap_default___ns1__GetNgCode_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetNgCode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetNgCode_(struct soap *soap, const char *URL, struct __ns1__GetNgCode_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetNgCode_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetNgCode_(struct soap *soap, struct __ns1__GetNgCode_ *p)
{
	if (soap_read___ns1__GetNgCode_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetDiecastSN__DEFINED
#define SOAP_TYPE___ns1__SetDiecastSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetDiecastSN_(struct soap*, struct __ns1__SetDiecastSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetDiecastSN_(struct soap*, const struct __ns1__SetDiecastSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetDiecastSN_(struct soap*, const char*, int, const struct __ns1__SetDiecastSN_ *, const char*);
SOAP_FMAC3 struct __ns1__SetDiecastSN_ * SOAP_FMAC4 soap_in___ns1__SetDiecastSN_(struct soap*, const char*, struct __ns1__SetDiecastSN_ *, const char*);
SOAP_FMAC1 struct __ns1__SetDiecastSN_ * SOAP_FMAC2 soap_instantiate___ns1__SetDiecastSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetDiecastSN_ * soap_new___ns1__SetDiecastSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetDiecastSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetDiecastSN_ * soap_new_req___ns1__SetDiecastSN_(
	struct soap *soap)
{
	struct __ns1__SetDiecastSN_ *_p = soap_new___ns1__SetDiecastSN_(soap);
	if (_p)
	{	soap_default___ns1__SetDiecastSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetDiecastSN_ * soap_new_set___ns1__SetDiecastSN_(
	struct soap *soap,
	_ns1__SetDiecastSN *ns1__SetDiecastSN)
{
	struct __ns1__SetDiecastSN_ *_p = soap_new___ns1__SetDiecastSN_(soap);
	if (_p)
	{	soap_default___ns1__SetDiecastSN_(soap, _p);
		_p->ns1__SetDiecastSN = ns1__SetDiecastSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetDiecastSN_(struct soap*, const struct __ns1__SetDiecastSN_ *, const char*, const char*);

inline int soap_write___ns1__SetDiecastSN_(struct soap *soap, struct __ns1__SetDiecastSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetDiecastSN_(soap, p), 0) || soap_put___ns1__SetDiecastSN_(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetDiecastSN_(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetDiecastSN_(soap, p), 0) || soap_put___ns1__SetDiecastSN_(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetDiecastSN_(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetDiecastSN_(soap, p), 0) || soap_put___ns1__SetDiecastSN_(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetDiecastSN_ * SOAP_FMAC4 soap_get___ns1__SetDiecastSN_(struct soap*, struct __ns1__SetDiecastSN_ *, const char*, const char*);

inline int soap_read___ns1__SetDiecastSN_(struct soap *soap, struct __ns1__SetDiecastSN_ *p)
{
	if (p)
	{	soap_default___ns1__SetDiecastSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetDiecastSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetDiecastSN_(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetDiecastSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetDiecastSN_(struct soap *soap, struct __ns1__SetDiecastSN_ *p)
{
	if (soap_read___ns1__SetDiecastSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMachineForGroup__DEFINED
#define SOAP_TYPE___ns1__GetMachineForGroup__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMachineForGroup_(struct soap*, struct __ns1__GetMachineForGroup_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMachineForGroup_(struct soap*, const struct __ns1__GetMachineForGroup_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMachineForGroup_(struct soap*, const char*, int, const struct __ns1__GetMachineForGroup_ *, const char*);
SOAP_FMAC3 struct __ns1__GetMachineForGroup_ * SOAP_FMAC4 soap_in___ns1__GetMachineForGroup_(struct soap*, const char*, struct __ns1__GetMachineForGroup_ *, const char*);
SOAP_FMAC1 struct __ns1__GetMachineForGroup_ * SOAP_FMAC2 soap_instantiate___ns1__GetMachineForGroup_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMachineForGroup_ * soap_new___ns1__GetMachineForGroup_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMachineForGroup_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMachineForGroup_ * soap_new_req___ns1__GetMachineForGroup_(
	struct soap *soap)
{
	struct __ns1__GetMachineForGroup_ *_p = soap_new___ns1__GetMachineForGroup_(soap);
	if (_p)
	{	soap_default___ns1__GetMachineForGroup_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMachineForGroup_ * soap_new_set___ns1__GetMachineForGroup_(
	struct soap *soap,
	_ns1__GetMachineForGroup *ns1__GetMachineForGroup)
{
	struct __ns1__GetMachineForGroup_ *_p = soap_new___ns1__GetMachineForGroup_(soap);
	if (_p)
	{	soap_default___ns1__GetMachineForGroup_(soap, _p);
		_p->ns1__GetMachineForGroup = ns1__GetMachineForGroup;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMachineForGroup_(struct soap*, const struct __ns1__GetMachineForGroup_ *, const char*, const char*);

inline int soap_write___ns1__GetMachineForGroup_(struct soap *soap, struct __ns1__GetMachineForGroup_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMachineForGroup_(soap, p), 0) || soap_put___ns1__GetMachineForGroup_(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMachineForGroup_(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMachineForGroup_(soap, p), 0) || soap_put___ns1__GetMachineForGroup_(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMachineForGroup_(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMachineForGroup_(soap, p), 0) || soap_put___ns1__GetMachineForGroup_(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMachineForGroup_ * SOAP_FMAC4 soap_get___ns1__GetMachineForGroup_(struct soap*, struct __ns1__GetMachineForGroup_ *, const char*, const char*);

inline int soap_read___ns1__GetMachineForGroup_(struct soap *soap, struct __ns1__GetMachineForGroup_ *p)
{
	if (p)
	{	soap_default___ns1__GetMachineForGroup_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMachineForGroup_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMachineForGroup_(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMachineForGroup_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMachineForGroup_(struct soap *soap, struct __ns1__GetMachineForGroup_ *p)
{
	if (soap_read___ns1__GetMachineForGroup_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadForHP__DEFINED
#define SOAP_TYPE___ns1__UploadForHP__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadForHP_(struct soap*, struct __ns1__UploadForHP_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadForHP_(struct soap*, const struct __ns1__UploadForHP_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadForHP_(struct soap*, const char*, int, const struct __ns1__UploadForHP_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadForHP_ * SOAP_FMAC4 soap_in___ns1__UploadForHP_(struct soap*, const char*, struct __ns1__UploadForHP_ *, const char*);
SOAP_FMAC1 struct __ns1__UploadForHP_ * SOAP_FMAC2 soap_instantiate___ns1__UploadForHP_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadForHP_ * soap_new___ns1__UploadForHP_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadForHP_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadForHP_ * soap_new_req___ns1__UploadForHP_(
	struct soap *soap)
{
	struct __ns1__UploadForHP_ *_p = soap_new___ns1__UploadForHP_(soap);
	if (_p)
	{	soap_default___ns1__UploadForHP_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadForHP_ * soap_new_set___ns1__UploadForHP_(
	struct soap *soap,
	_ns1__UploadForHP *ns1__UploadForHP)
{
	struct __ns1__UploadForHP_ *_p = soap_new___ns1__UploadForHP_(soap);
	if (_p)
	{	soap_default___ns1__UploadForHP_(soap, _p);
		_p->ns1__UploadForHP = ns1__UploadForHP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadForHP_(struct soap*, const struct __ns1__UploadForHP_ *, const char*, const char*);

inline int soap_write___ns1__UploadForHP_(struct soap *soap, struct __ns1__UploadForHP_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UploadForHP_(soap, p), 0) || soap_put___ns1__UploadForHP_(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadForHP_(struct soap *soap, const char *URL, struct __ns1__UploadForHP_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadForHP_(soap, p), 0) || soap_put___ns1__UploadForHP_(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadForHP_(struct soap *soap, const char *URL, struct __ns1__UploadForHP_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadForHP_(soap, p), 0) || soap_put___ns1__UploadForHP_(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadForHP_ * SOAP_FMAC4 soap_get___ns1__UploadForHP_(struct soap*, struct __ns1__UploadForHP_ *, const char*, const char*);

inline int soap_read___ns1__UploadForHP_(struct soap *soap, struct __ns1__UploadForHP_ *p)
{
	if (p)
	{	soap_default___ns1__UploadForHP_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UploadForHP_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadForHP_(struct soap *soap, const char *URL, struct __ns1__UploadForHP_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UploadForHP_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadForHP_(struct soap *soap, struct __ns1__UploadForHP_ *p)
{
	if (soap_read___ns1__UploadForHP_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelShelfLink__DEFINED
#define SOAP_TYPE___ns1__SelShelfLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelShelfLink_(struct soap*, struct __ns1__SelShelfLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelShelfLink_(struct soap*, const struct __ns1__SelShelfLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelShelfLink_(struct soap*, const char*, int, const struct __ns1__SelShelfLink_ *, const char*);
SOAP_FMAC3 struct __ns1__SelShelfLink_ * SOAP_FMAC4 soap_in___ns1__SelShelfLink_(struct soap*, const char*, struct __ns1__SelShelfLink_ *, const char*);
SOAP_FMAC1 struct __ns1__SelShelfLink_ * SOAP_FMAC2 soap_instantiate___ns1__SelShelfLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelShelfLink_ * soap_new___ns1__SelShelfLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelShelfLink_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelShelfLink_ * soap_new_req___ns1__SelShelfLink_(
	struct soap *soap)
{
	struct __ns1__SelShelfLink_ *_p = soap_new___ns1__SelShelfLink_(soap);
	if (_p)
	{	soap_default___ns1__SelShelfLink_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelShelfLink_ * soap_new_set___ns1__SelShelfLink_(
	struct soap *soap,
	_ns1__SelShelfLink *ns1__SelShelfLink)
{
	struct __ns1__SelShelfLink_ *_p = soap_new___ns1__SelShelfLink_(soap);
	if (_p)
	{	soap_default___ns1__SelShelfLink_(soap, _p);
		_p->ns1__SelShelfLink = ns1__SelShelfLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelShelfLink_(struct soap*, const struct __ns1__SelShelfLink_ *, const char*, const char*);

inline int soap_write___ns1__SelShelfLink_(struct soap *soap, struct __ns1__SelShelfLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelShelfLink_(soap, p), 0) || soap_put___ns1__SelShelfLink_(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelShelfLink_(struct soap *soap, const char *URL, struct __ns1__SelShelfLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelShelfLink_(soap, p), 0) || soap_put___ns1__SelShelfLink_(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelShelfLink_(struct soap *soap, const char *URL, struct __ns1__SelShelfLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelShelfLink_(soap, p), 0) || soap_put___ns1__SelShelfLink_(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelShelfLink_ * SOAP_FMAC4 soap_get___ns1__SelShelfLink_(struct soap*, struct __ns1__SelShelfLink_ *, const char*, const char*);

inline int soap_read___ns1__SelShelfLink_(struct soap *soap, struct __ns1__SelShelfLink_ *p)
{
	if (p)
	{	soap_default___ns1__SelShelfLink_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelShelfLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelShelfLink_(struct soap *soap, const char *URL, struct __ns1__SelShelfLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelShelfLink_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelShelfLink_(struct soap *soap, struct __ns1__SelShelfLink_ *p)
{
	if (soap_read___ns1__SelShelfLink_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SNLinkShelf__DEFINED
#define SOAP_TYPE___ns1__SNLinkShelf__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SNLinkShelf_(struct soap*, struct __ns1__SNLinkShelf_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SNLinkShelf_(struct soap*, const struct __ns1__SNLinkShelf_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SNLinkShelf_(struct soap*, const char*, int, const struct __ns1__SNLinkShelf_ *, const char*);
SOAP_FMAC3 struct __ns1__SNLinkShelf_ * SOAP_FMAC4 soap_in___ns1__SNLinkShelf_(struct soap*, const char*, struct __ns1__SNLinkShelf_ *, const char*);
SOAP_FMAC1 struct __ns1__SNLinkShelf_ * SOAP_FMAC2 soap_instantiate___ns1__SNLinkShelf_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SNLinkShelf_ * soap_new___ns1__SNLinkShelf_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SNLinkShelf_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SNLinkShelf_ * soap_new_req___ns1__SNLinkShelf_(
	struct soap *soap)
{
	struct __ns1__SNLinkShelf_ *_p = soap_new___ns1__SNLinkShelf_(soap);
	if (_p)
	{	soap_default___ns1__SNLinkShelf_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SNLinkShelf_ * soap_new_set___ns1__SNLinkShelf_(
	struct soap *soap,
	_ns1__SNLinkShelf *ns1__SNLinkShelf)
{
	struct __ns1__SNLinkShelf_ *_p = soap_new___ns1__SNLinkShelf_(soap);
	if (_p)
	{	soap_default___ns1__SNLinkShelf_(soap, _p);
		_p->ns1__SNLinkShelf = ns1__SNLinkShelf;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SNLinkShelf_(struct soap*, const struct __ns1__SNLinkShelf_ *, const char*, const char*);

inline int soap_write___ns1__SNLinkShelf_(struct soap *soap, struct __ns1__SNLinkShelf_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SNLinkShelf_(soap, p), 0) || soap_put___ns1__SNLinkShelf_(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SNLinkShelf_(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkShelf_(soap, p), 0) || soap_put___ns1__SNLinkShelf_(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SNLinkShelf_(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkShelf_(soap, p), 0) || soap_put___ns1__SNLinkShelf_(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SNLinkShelf_ * SOAP_FMAC4 soap_get___ns1__SNLinkShelf_(struct soap*, struct __ns1__SNLinkShelf_ *, const char*, const char*);

inline int soap_read___ns1__SNLinkShelf_(struct soap *soap, struct __ns1__SNLinkShelf_ *p)
{
	if (p)
	{	soap_default___ns1__SNLinkShelf_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SNLinkShelf_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SNLinkShelf_(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SNLinkShelf_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SNLinkShelf_(struct soap *soap, struct __ns1__SNLinkShelf_ *p)
{
	if (soap_read___ns1__SNLinkShelf_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelSNTestForFruit__DEFINED
#define SOAP_TYPE___ns1__SelSNTestForFruit__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelSNTestForFruit_(struct soap*, struct __ns1__SelSNTestForFruit_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelSNTestForFruit_(struct soap*, const struct __ns1__SelSNTestForFruit_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelSNTestForFruit_(struct soap*, const char*, int, const struct __ns1__SelSNTestForFruit_ *, const char*);
SOAP_FMAC3 struct __ns1__SelSNTestForFruit_ * SOAP_FMAC4 soap_in___ns1__SelSNTestForFruit_(struct soap*, const char*, struct __ns1__SelSNTestForFruit_ *, const char*);
SOAP_FMAC1 struct __ns1__SelSNTestForFruit_ * SOAP_FMAC2 soap_instantiate___ns1__SelSNTestForFruit_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelSNTestForFruit_ * soap_new___ns1__SelSNTestForFruit_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelSNTestForFruit_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelSNTestForFruit_ * soap_new_req___ns1__SelSNTestForFruit_(
	struct soap *soap)
{
	struct __ns1__SelSNTestForFruit_ *_p = soap_new___ns1__SelSNTestForFruit_(soap);
	if (_p)
	{	soap_default___ns1__SelSNTestForFruit_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelSNTestForFruit_ * soap_new_set___ns1__SelSNTestForFruit_(
	struct soap *soap,
	_ns1__SelSNTestForFruit *ns1__SelSNTestForFruit)
{
	struct __ns1__SelSNTestForFruit_ *_p = soap_new___ns1__SelSNTestForFruit_(soap);
	if (_p)
	{	soap_default___ns1__SelSNTestForFruit_(soap, _p);
		_p->ns1__SelSNTestForFruit = ns1__SelSNTestForFruit;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelSNTestForFruit_(struct soap*, const struct __ns1__SelSNTestForFruit_ *, const char*, const char*);

inline int soap_write___ns1__SelSNTestForFruit_(struct soap *soap, struct __ns1__SelSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelSNTestForFruit_(soap, p), 0) || soap_put___ns1__SelSNTestForFruit_(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTestForFruit_(soap, p), 0) || soap_put___ns1__SelSNTestForFruit_(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTestForFruit_(soap, p), 0) || soap_put___ns1__SelSNTestForFruit_(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelSNTestForFruit_ * SOAP_FMAC4 soap_get___ns1__SelSNTestForFruit_(struct soap*, struct __ns1__SelSNTestForFruit_ *, const char*, const char*);

inline int soap_read___ns1__SelSNTestForFruit_(struct soap *soap, struct __ns1__SelSNTestForFruit_ *p)
{
	if (p)
	{	soap_default___ns1__SelSNTestForFruit_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelSNTestForFruit_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelSNTestForFruit_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelSNTestForFruit_(struct soap *soap, struct __ns1__SelSNTestForFruit_ *p)
{
	if (soap_read___ns1__SelSNTestForFruit_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNTestForFruit__DEFINED
#define SOAP_TYPE___ns1__InsSNTestForFruit__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNTestForFruit_(struct soap*, struct __ns1__InsSNTestForFruit_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNTestForFruit_(struct soap*, const struct __ns1__InsSNTestForFruit_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNTestForFruit_(struct soap*, const char*, int, const struct __ns1__InsSNTestForFruit_ *, const char*);
SOAP_FMAC3 struct __ns1__InsSNTestForFruit_ * SOAP_FMAC4 soap_in___ns1__InsSNTestForFruit_(struct soap*, const char*, struct __ns1__InsSNTestForFruit_ *, const char*);
SOAP_FMAC1 struct __ns1__InsSNTestForFruit_ * SOAP_FMAC2 soap_instantiate___ns1__InsSNTestForFruit_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNTestForFruit_ * soap_new___ns1__InsSNTestForFruit_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNTestForFruit_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNTestForFruit_ * soap_new_req___ns1__InsSNTestForFruit_(
	struct soap *soap)
{
	struct __ns1__InsSNTestForFruit_ *_p = soap_new___ns1__InsSNTestForFruit_(soap);
	if (_p)
	{	soap_default___ns1__InsSNTestForFruit_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNTestForFruit_ * soap_new_set___ns1__InsSNTestForFruit_(
	struct soap *soap,
	_ns1__InsSNTestForFruit *ns1__InsSNTestForFruit)
{
	struct __ns1__InsSNTestForFruit_ *_p = soap_new___ns1__InsSNTestForFruit_(soap);
	if (_p)
	{	soap_default___ns1__InsSNTestForFruit_(soap, _p);
		_p->ns1__InsSNTestForFruit = ns1__InsSNTestForFruit;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNTestForFruit_(struct soap*, const struct __ns1__InsSNTestForFruit_ *, const char*, const char*);

inline int soap_write___ns1__InsSNTestForFruit_(struct soap *soap, struct __ns1__InsSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNTestForFruit_(soap, p), 0) || soap_put___ns1__InsSNTestForFruit_(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTestForFruit_(soap, p), 0) || soap_put___ns1__InsSNTestForFruit_(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTestForFruit_(soap, p), 0) || soap_put___ns1__InsSNTestForFruit_(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNTestForFruit_ * SOAP_FMAC4 soap_get___ns1__InsSNTestForFruit_(struct soap*, struct __ns1__InsSNTestForFruit_ *, const char*, const char*);

inline int soap_read___ns1__InsSNTestForFruit_(struct soap *soap, struct __ns1__InsSNTestForFruit_ *p)
{
	if (p)
	{	soap_default___ns1__InsSNTestForFruit_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNTestForFruit_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNTestForFruit_(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNTestForFruit_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNTestForFruit_(struct soap *soap, struct __ns1__InsSNTestForFruit_ *p)
{
	if (soap_read___ns1__InsSNTestForFruit_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetStationNumberForSN__DEFINED
#define SOAP_TYPE___ns1__GetStationNumberForSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStationNumberForSN_(struct soap*, struct __ns1__GetStationNumberForSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStationNumberForSN_(struct soap*, const struct __ns1__GetStationNumberForSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStationNumberForSN_(struct soap*, const char*, int, const struct __ns1__GetStationNumberForSN_ *, const char*);
SOAP_FMAC3 struct __ns1__GetStationNumberForSN_ * SOAP_FMAC4 soap_in___ns1__GetStationNumberForSN_(struct soap*, const char*, struct __ns1__GetStationNumberForSN_ *, const char*);
SOAP_FMAC1 struct __ns1__GetStationNumberForSN_ * SOAP_FMAC2 soap_instantiate___ns1__GetStationNumberForSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStationNumberForSN_ * soap_new___ns1__GetStationNumberForSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetStationNumberForSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetStationNumberForSN_ * soap_new_req___ns1__GetStationNumberForSN_(
	struct soap *soap)
{
	struct __ns1__GetStationNumberForSN_ *_p = soap_new___ns1__GetStationNumberForSN_(soap);
	if (_p)
	{	soap_default___ns1__GetStationNumberForSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetStationNumberForSN_ * soap_new_set___ns1__GetStationNumberForSN_(
	struct soap *soap,
	_ns1__GetStationNumberForSN *ns1__GetStationNumberForSN)
{
	struct __ns1__GetStationNumberForSN_ *_p = soap_new___ns1__GetStationNumberForSN_(soap);
	if (_p)
	{	soap_default___ns1__GetStationNumberForSN_(soap, _p);
		_p->ns1__GetStationNumberForSN = ns1__GetStationNumberForSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStationNumberForSN_(struct soap*, const struct __ns1__GetStationNumberForSN_ *, const char*, const char*);

inline int soap_write___ns1__GetStationNumberForSN_(struct soap *soap, struct __ns1__GetStationNumberForSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetStationNumberForSN_(soap, p), 0) || soap_put___ns1__GetStationNumberForSN_(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetStationNumberForSN_(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetStationNumberForSN_(soap, p), 0) || soap_put___ns1__GetStationNumberForSN_(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetStationNumberForSN_(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetStationNumberForSN_(soap, p), 0) || soap_put___ns1__GetStationNumberForSN_(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetStationNumberForSN_ * SOAP_FMAC4 soap_get___ns1__GetStationNumberForSN_(struct soap*, struct __ns1__GetStationNumberForSN_ *, const char*, const char*);

inline int soap_read___ns1__GetStationNumberForSN_(struct soap *soap, struct __ns1__GetStationNumberForSN_ *p)
{
	if (p)
	{	soap_default___ns1__GetStationNumberForSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetStationNumberForSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetStationNumberForSN_(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetStationNumberForSN_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetStationNumberForSN_(struct soap *soap, struct __ns1__GetStationNumberForSN_ *p)
{
	if (soap_read___ns1__GetStationNumberForSN_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTestValueResult__DEFINED
#define SOAP_TYPE___ns1__GetTestValueResult__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTestValueResult_(struct soap*, struct __ns1__GetTestValueResult_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTestValueResult_(struct soap*, const struct __ns1__GetTestValueResult_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTestValueResult_(struct soap*, const char*, int, const struct __ns1__GetTestValueResult_ *, const char*);
SOAP_FMAC3 struct __ns1__GetTestValueResult_ * SOAP_FMAC4 soap_in___ns1__GetTestValueResult_(struct soap*, const char*, struct __ns1__GetTestValueResult_ *, const char*);
SOAP_FMAC1 struct __ns1__GetTestValueResult_ * SOAP_FMAC2 soap_instantiate___ns1__GetTestValueResult_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTestValueResult_ * soap_new___ns1__GetTestValueResult_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTestValueResult_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTestValueResult_ * soap_new_req___ns1__GetTestValueResult_(
	struct soap *soap)
{
	struct __ns1__GetTestValueResult_ *_p = soap_new___ns1__GetTestValueResult_(soap);
	if (_p)
	{	soap_default___ns1__GetTestValueResult_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTestValueResult_ * soap_new_set___ns1__GetTestValueResult_(
	struct soap *soap,
	_ns1__GetTestValueResult *ns1__GetTestValueResult)
{
	struct __ns1__GetTestValueResult_ *_p = soap_new___ns1__GetTestValueResult_(soap);
	if (_p)
	{	soap_default___ns1__GetTestValueResult_(soap, _p);
		_p->ns1__GetTestValueResult = ns1__GetTestValueResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTestValueResult_(struct soap*, const struct __ns1__GetTestValueResult_ *, const char*, const char*);

inline int soap_write___ns1__GetTestValueResult_(struct soap *soap, struct __ns1__GetTestValueResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTestValueResult_(soap, p), 0) || soap_put___ns1__GetTestValueResult_(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTestValueResult_(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValueResult_(soap, p), 0) || soap_put___ns1__GetTestValueResult_(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTestValueResult_(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValueResult_(soap, p), 0) || soap_put___ns1__GetTestValueResult_(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTestValueResult_ * SOAP_FMAC4 soap_get___ns1__GetTestValueResult_(struct soap*, struct __ns1__GetTestValueResult_ *, const char*, const char*);

inline int soap_read___ns1__GetTestValueResult_(struct soap *soap, struct __ns1__GetTestValueResult_ *p)
{
	if (p)
	{	soap_default___ns1__GetTestValueResult_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTestValueResult_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTestValueResult_(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTestValueResult_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTestValueResult_(struct soap *soap, struct __ns1__GetTestValueResult_ *p)
{
	if (soap_read___ns1__GetTestValueResult_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsCLScada__DEFINED
#define SOAP_TYPE___ns1__InsCLScada__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsCLScada_(struct soap*, struct __ns1__InsCLScada_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsCLScada_(struct soap*, const struct __ns1__InsCLScada_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsCLScada_(struct soap*, const char*, int, const struct __ns1__InsCLScada_ *, const char*);
SOAP_FMAC3 struct __ns1__InsCLScada_ * SOAP_FMAC4 soap_in___ns1__InsCLScada_(struct soap*, const char*, struct __ns1__InsCLScada_ *, const char*);
SOAP_FMAC1 struct __ns1__InsCLScada_ * SOAP_FMAC2 soap_instantiate___ns1__InsCLScada_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsCLScada_ * soap_new___ns1__InsCLScada_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsCLScada_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsCLScada_ * soap_new_req___ns1__InsCLScada_(
	struct soap *soap)
{
	struct __ns1__InsCLScada_ *_p = soap_new___ns1__InsCLScada_(soap);
	if (_p)
	{	soap_default___ns1__InsCLScada_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsCLScada_ * soap_new_set___ns1__InsCLScada_(
	struct soap *soap,
	_ns1__InsCLScada *ns1__InsCLScada)
{
	struct __ns1__InsCLScada_ *_p = soap_new___ns1__InsCLScada_(soap);
	if (_p)
	{	soap_default___ns1__InsCLScada_(soap, _p);
		_p->ns1__InsCLScada = ns1__InsCLScada;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsCLScada_(struct soap*, const struct __ns1__InsCLScada_ *, const char*, const char*);

inline int soap_write___ns1__InsCLScada_(struct soap *soap, struct __ns1__InsCLScada_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsCLScada_(soap, p), 0) || soap_put___ns1__InsCLScada_(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsCLScada_(struct soap *soap, const char *URL, struct __ns1__InsCLScada_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsCLScada_(soap, p), 0) || soap_put___ns1__InsCLScada_(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsCLScada_(struct soap *soap, const char *URL, struct __ns1__InsCLScada_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsCLScada_(soap, p), 0) || soap_put___ns1__InsCLScada_(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsCLScada_ * SOAP_FMAC4 soap_get___ns1__InsCLScada_(struct soap*, struct __ns1__InsCLScada_ *, const char*, const char*);

inline int soap_read___ns1__InsCLScada_(struct soap *soap, struct __ns1__InsCLScada_ *p)
{
	if (p)
	{	soap_default___ns1__InsCLScada_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsCLScada_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsCLScada_(struct soap *soap, const char *URL, struct __ns1__InsCLScada_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsCLScada_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsCLScada_(struct soap *soap, struct __ns1__InsCLScada_ *p)
{
	if (soap_read___ns1__InsCLScada_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsAoiMo__DEFINED
#define SOAP_TYPE___ns1__InsAoiMo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsAoiMo_(struct soap*, struct __ns1__InsAoiMo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsAoiMo_(struct soap*, const struct __ns1__InsAoiMo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsAoiMo_(struct soap*, const char*, int, const struct __ns1__InsAoiMo_ *, const char*);
SOAP_FMAC3 struct __ns1__InsAoiMo_ * SOAP_FMAC4 soap_in___ns1__InsAoiMo_(struct soap*, const char*, struct __ns1__InsAoiMo_ *, const char*);
SOAP_FMAC1 struct __ns1__InsAoiMo_ * SOAP_FMAC2 soap_instantiate___ns1__InsAoiMo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsAoiMo_ * soap_new___ns1__InsAoiMo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsAoiMo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsAoiMo_ * soap_new_req___ns1__InsAoiMo_(
	struct soap *soap)
{
	struct __ns1__InsAoiMo_ *_p = soap_new___ns1__InsAoiMo_(soap);
	if (_p)
	{	soap_default___ns1__InsAoiMo_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsAoiMo_ * soap_new_set___ns1__InsAoiMo_(
	struct soap *soap,
	_ns1__InsAoiMo *ns1__InsAoiMo)
{
	struct __ns1__InsAoiMo_ *_p = soap_new___ns1__InsAoiMo_(soap);
	if (_p)
	{	soap_default___ns1__InsAoiMo_(soap, _p);
		_p->ns1__InsAoiMo = ns1__InsAoiMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsAoiMo_(struct soap*, const struct __ns1__InsAoiMo_ *, const char*, const char*);

inline int soap_write___ns1__InsAoiMo_(struct soap *soap, struct __ns1__InsAoiMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsAoiMo_(soap, p), 0) || soap_put___ns1__InsAoiMo_(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsAoiMo_(struct soap *soap, const char *URL, struct __ns1__InsAoiMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsAoiMo_(soap, p), 0) || soap_put___ns1__InsAoiMo_(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsAoiMo_(struct soap *soap, const char *URL, struct __ns1__InsAoiMo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsAoiMo_(soap, p), 0) || soap_put___ns1__InsAoiMo_(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsAoiMo_ * SOAP_FMAC4 soap_get___ns1__InsAoiMo_(struct soap*, struct __ns1__InsAoiMo_ *, const char*, const char*);

inline int soap_read___ns1__InsAoiMo_(struct soap *soap, struct __ns1__InsAoiMo_ *p)
{
	if (p)
	{	soap_default___ns1__InsAoiMo_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsAoiMo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsAoiMo_(struct soap *soap, const char *URL, struct __ns1__InsAoiMo_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsAoiMo_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsAoiMo_(struct soap *soap, struct __ns1__InsAoiMo_ *p)
{
	if (soap_read___ns1__InsAoiMo_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkMoSNForAOI__DEFINED
#define SOAP_TYPE___ns1__chkMoSNForAOI__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkMoSNForAOI_(struct soap*, struct __ns1__chkMoSNForAOI_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkMoSNForAOI_(struct soap*, const struct __ns1__chkMoSNForAOI_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkMoSNForAOI_(struct soap*, const char*, int, const struct __ns1__chkMoSNForAOI_ *, const char*);
SOAP_FMAC3 struct __ns1__chkMoSNForAOI_ * SOAP_FMAC4 soap_in___ns1__chkMoSNForAOI_(struct soap*, const char*, struct __ns1__chkMoSNForAOI_ *, const char*);
SOAP_FMAC1 struct __ns1__chkMoSNForAOI_ * SOAP_FMAC2 soap_instantiate___ns1__chkMoSNForAOI_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkMoSNForAOI_ * soap_new___ns1__chkMoSNForAOI_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkMoSNForAOI_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkMoSNForAOI_ * soap_new_req___ns1__chkMoSNForAOI_(
	struct soap *soap)
{
	struct __ns1__chkMoSNForAOI_ *_p = soap_new___ns1__chkMoSNForAOI_(soap);
	if (_p)
	{	soap_default___ns1__chkMoSNForAOI_(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkMoSNForAOI_ * soap_new_set___ns1__chkMoSNForAOI_(
	struct soap *soap,
	_ns1__chkMoSNForAOI *ns1__chkMoSNForAOI)
{
	struct __ns1__chkMoSNForAOI_ *_p = soap_new___ns1__chkMoSNForAOI_(soap);
	if (_p)
	{	soap_default___ns1__chkMoSNForAOI_(soap, _p);
		_p->ns1__chkMoSNForAOI = ns1__chkMoSNForAOI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkMoSNForAOI_(struct soap*, const struct __ns1__chkMoSNForAOI_ *, const char*, const char*);

inline int soap_write___ns1__chkMoSNForAOI_(struct soap *soap, struct __ns1__chkMoSNForAOI_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkMoSNForAOI_(soap, p), 0) || soap_put___ns1__chkMoSNForAOI_(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkMoSNForAOI_(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoSNForAOI_(soap, p), 0) || soap_put___ns1__chkMoSNForAOI_(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkMoSNForAOI_(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoSNForAOI_(soap, p), 0) || soap_put___ns1__chkMoSNForAOI_(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkMoSNForAOI_ * SOAP_FMAC4 soap_get___ns1__chkMoSNForAOI_(struct soap*, struct __ns1__chkMoSNForAOI_ *, const char*, const char*);

inline int soap_read___ns1__chkMoSNForAOI_(struct soap *soap, struct __ns1__chkMoSNForAOI_ *p)
{
	if (p)
	{	soap_default___ns1__chkMoSNForAOI_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkMoSNForAOI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkMoSNForAOI_(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkMoSNForAOI_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkMoSNForAOI_(struct soap *soap, struct __ns1__chkMoSNForAOI_ *p)
{
	if (soap_read___ns1__chkMoSNForAOI_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PunchOut__DEFINED
#define SOAP_TYPE___ns1__PunchOut__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PunchOut_(struct soap*, struct __ns1__PunchOut_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PunchOut_(struct soap*, const struct __ns1__PunchOut_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PunchOut_(struct soap*, const char*, int, const struct __ns1__PunchOut_ *, const char*);
SOAP_FMAC3 struct __ns1__PunchOut_ * SOAP_FMAC4 soap_in___ns1__PunchOut_(struct soap*, const char*, struct __ns1__PunchOut_ *, const char*);
SOAP_FMAC1 struct __ns1__PunchOut_ * SOAP_FMAC2 soap_instantiate___ns1__PunchOut_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PunchOut_ * soap_new___ns1__PunchOut_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PunchOut_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PunchOut_ * soap_new_req___ns1__PunchOut_(
	struct soap *soap)
{
	struct __ns1__PunchOut_ *_p = soap_new___ns1__PunchOut_(soap);
	if (_p)
	{	soap_default___ns1__PunchOut_(soap, _p);
	}
	return _p;
}

inline struct __ns1__PunchOut_ * soap_new_set___ns1__PunchOut_(
	struct soap *soap,
	_ns1__PunchOut *ns1__PunchOut)
{
	struct __ns1__PunchOut_ *_p = soap_new___ns1__PunchOut_(soap);
	if (_p)
	{	soap_default___ns1__PunchOut_(soap, _p);
		_p->ns1__PunchOut = ns1__PunchOut;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PunchOut_(struct soap*, const struct __ns1__PunchOut_ *, const char*, const char*);

inline int soap_write___ns1__PunchOut_(struct soap *soap, struct __ns1__PunchOut_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__PunchOut_(soap, p), 0) || soap_put___ns1__PunchOut_(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PunchOut_(struct soap *soap, const char *URL, struct __ns1__PunchOut_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PunchOut_(soap, p), 0) || soap_put___ns1__PunchOut_(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PunchOut_(struct soap *soap, const char *URL, struct __ns1__PunchOut_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PunchOut_(soap, p), 0) || soap_put___ns1__PunchOut_(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PunchOut_ * SOAP_FMAC4 soap_get___ns1__PunchOut_(struct soap*, struct __ns1__PunchOut_ *, const char*, const char*);

inline int soap_read___ns1__PunchOut_(struct soap *soap, struct __ns1__PunchOut_ *p)
{
	if (p)
	{	soap_default___ns1__PunchOut_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PunchOut_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PunchOut_(struct soap *soap, const char *URL, struct __ns1__PunchOut_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__PunchOut_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__PunchOut_(struct soap *soap, struct __ns1__PunchOut_ *p)
{
	if (soap_read___ns1__PunchOut_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BasketLinkPunch__DEFINED
#define SOAP_TYPE___ns1__BasketLinkPunch__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BasketLinkPunch_(struct soap*, struct __ns1__BasketLinkPunch_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BasketLinkPunch_(struct soap*, const struct __ns1__BasketLinkPunch_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BasketLinkPunch_(struct soap*, const char*, int, const struct __ns1__BasketLinkPunch_ *, const char*);
SOAP_FMAC3 struct __ns1__BasketLinkPunch_ * SOAP_FMAC4 soap_in___ns1__BasketLinkPunch_(struct soap*, const char*, struct __ns1__BasketLinkPunch_ *, const char*);
SOAP_FMAC1 struct __ns1__BasketLinkPunch_ * SOAP_FMAC2 soap_instantiate___ns1__BasketLinkPunch_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BasketLinkPunch_ * soap_new___ns1__BasketLinkPunch_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BasketLinkPunch_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BasketLinkPunch_ * soap_new_req___ns1__BasketLinkPunch_(
	struct soap *soap)
{
	struct __ns1__BasketLinkPunch_ *_p = soap_new___ns1__BasketLinkPunch_(soap);
	if (_p)
	{	soap_default___ns1__BasketLinkPunch_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BasketLinkPunch_ * soap_new_set___ns1__BasketLinkPunch_(
	struct soap *soap,
	_ns1__BasketLinkPunch *ns1__BasketLinkPunch)
{
	struct __ns1__BasketLinkPunch_ *_p = soap_new___ns1__BasketLinkPunch_(soap);
	if (_p)
	{	soap_default___ns1__BasketLinkPunch_(soap, _p);
		_p->ns1__BasketLinkPunch = ns1__BasketLinkPunch;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BasketLinkPunch_(struct soap*, const struct __ns1__BasketLinkPunch_ *, const char*, const char*);

inline int soap_write___ns1__BasketLinkPunch_(struct soap *soap, struct __ns1__BasketLinkPunch_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BasketLinkPunch_(soap, p), 0) || soap_put___ns1__BasketLinkPunch_(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BasketLinkPunch_(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BasketLinkPunch_(soap, p), 0) || soap_put___ns1__BasketLinkPunch_(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BasketLinkPunch_(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BasketLinkPunch_(soap, p), 0) || soap_put___ns1__BasketLinkPunch_(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BasketLinkPunch_ * SOAP_FMAC4 soap_get___ns1__BasketLinkPunch_(struct soap*, struct __ns1__BasketLinkPunch_ *, const char*, const char*);

inline int soap_read___ns1__BasketLinkPunch_(struct soap *soap, struct __ns1__BasketLinkPunch_ *p)
{
	if (p)
	{	soap_default___ns1__BasketLinkPunch_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BasketLinkPunch_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BasketLinkPunch_(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BasketLinkPunch_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BasketLinkPunch_(struct soap *soap, struct __ns1__BasketLinkPunch_ *p)
{
	if (soap_read___ns1__BasketLinkPunch_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__HPSNLinkBasket__DEFINED
#define SOAP_TYPE___ns1__HPSNLinkBasket__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__HPSNLinkBasket_(struct soap*, struct __ns1__HPSNLinkBasket_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__HPSNLinkBasket_(struct soap*, const struct __ns1__HPSNLinkBasket_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__HPSNLinkBasket_(struct soap*, const char*, int, const struct __ns1__HPSNLinkBasket_ *, const char*);
SOAP_FMAC3 struct __ns1__HPSNLinkBasket_ * SOAP_FMAC4 soap_in___ns1__HPSNLinkBasket_(struct soap*, const char*, struct __ns1__HPSNLinkBasket_ *, const char*);
SOAP_FMAC1 struct __ns1__HPSNLinkBasket_ * SOAP_FMAC2 soap_instantiate___ns1__HPSNLinkBasket_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__HPSNLinkBasket_ * soap_new___ns1__HPSNLinkBasket_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__HPSNLinkBasket_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__HPSNLinkBasket_ * soap_new_req___ns1__HPSNLinkBasket_(
	struct soap *soap)
{
	struct __ns1__HPSNLinkBasket_ *_p = soap_new___ns1__HPSNLinkBasket_(soap);
	if (_p)
	{	soap_default___ns1__HPSNLinkBasket_(soap, _p);
	}
	return _p;
}

inline struct __ns1__HPSNLinkBasket_ * soap_new_set___ns1__HPSNLinkBasket_(
	struct soap *soap,
	_ns1__HPSNLinkBasket *ns1__HPSNLinkBasket)
{
	struct __ns1__HPSNLinkBasket_ *_p = soap_new___ns1__HPSNLinkBasket_(soap);
	if (_p)
	{	soap_default___ns1__HPSNLinkBasket_(soap, _p);
		_p->ns1__HPSNLinkBasket = ns1__HPSNLinkBasket;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__HPSNLinkBasket_(struct soap*, const struct __ns1__HPSNLinkBasket_ *, const char*, const char*);

inline int soap_write___ns1__HPSNLinkBasket_(struct soap *soap, struct __ns1__HPSNLinkBasket_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__HPSNLinkBasket_(soap, p), 0) || soap_put___ns1__HPSNLinkBasket_(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__HPSNLinkBasket_(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__HPSNLinkBasket_(soap, p), 0) || soap_put___ns1__HPSNLinkBasket_(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__HPSNLinkBasket_(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__HPSNLinkBasket_(soap, p), 0) || soap_put___ns1__HPSNLinkBasket_(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__HPSNLinkBasket_ * SOAP_FMAC4 soap_get___ns1__HPSNLinkBasket_(struct soap*, struct __ns1__HPSNLinkBasket_ *, const char*, const char*);

inline int soap_read___ns1__HPSNLinkBasket_(struct soap *soap, struct __ns1__HPSNLinkBasket_ *p)
{
	if (p)
	{	soap_default___ns1__HPSNLinkBasket_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__HPSNLinkBasket_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__HPSNLinkBasket_(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__HPSNLinkBasket_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__HPSNLinkBasket_(struct soap *soap, struct __ns1__HPSNLinkBasket_ *p)
{
	if (soap_read___ns1__HPSNLinkBasket_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetAutoLineRec__DEFINED
#define SOAP_TYPE___ns1__SetAutoLineRec__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAutoLineRec_(struct soap*, struct __ns1__SetAutoLineRec_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAutoLineRec_(struct soap*, const struct __ns1__SetAutoLineRec_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAutoLineRec_(struct soap*, const char*, int, const struct __ns1__SetAutoLineRec_ *, const char*);
SOAP_FMAC3 struct __ns1__SetAutoLineRec_ * SOAP_FMAC4 soap_in___ns1__SetAutoLineRec_(struct soap*, const char*, struct __ns1__SetAutoLineRec_ *, const char*);
SOAP_FMAC1 struct __ns1__SetAutoLineRec_ * SOAP_FMAC2 soap_instantiate___ns1__SetAutoLineRec_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAutoLineRec_ * soap_new___ns1__SetAutoLineRec_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetAutoLineRec_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetAutoLineRec_ * soap_new_req___ns1__SetAutoLineRec_(
	struct soap *soap)
{
	struct __ns1__SetAutoLineRec_ *_p = soap_new___ns1__SetAutoLineRec_(soap);
	if (_p)
	{	soap_default___ns1__SetAutoLineRec_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetAutoLineRec_ * soap_new_set___ns1__SetAutoLineRec_(
	struct soap *soap,
	_ns1__SetAutoLineRec *ns1__SetAutoLineRec)
{
	struct __ns1__SetAutoLineRec_ *_p = soap_new___ns1__SetAutoLineRec_(soap);
	if (_p)
	{	soap_default___ns1__SetAutoLineRec_(soap, _p);
		_p->ns1__SetAutoLineRec = ns1__SetAutoLineRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAutoLineRec_(struct soap*, const struct __ns1__SetAutoLineRec_ *, const char*, const char*);

inline int soap_write___ns1__SetAutoLineRec_(struct soap *soap, struct __ns1__SetAutoLineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetAutoLineRec_(soap, p), 0) || soap_put___ns1__SetAutoLineRec_(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetAutoLineRec_(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAutoLineRec_(soap, p), 0) || soap_put___ns1__SetAutoLineRec_(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetAutoLineRec_(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAutoLineRec_(soap, p), 0) || soap_put___ns1__SetAutoLineRec_(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetAutoLineRec_ * SOAP_FMAC4 soap_get___ns1__SetAutoLineRec_(struct soap*, struct __ns1__SetAutoLineRec_ *, const char*, const char*);

inline int soap_read___ns1__SetAutoLineRec_(struct soap *soap, struct __ns1__SetAutoLineRec_ *p)
{
	if (p)
	{	soap_default___ns1__SetAutoLineRec_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetAutoLineRec_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetAutoLineRec_(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetAutoLineRec_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetAutoLineRec_(struct soap *soap, struct __ns1__SetAutoLineRec_ *p)
{
	if (soap_read___ns1__SetAutoLineRec_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSNForLink__DEFINED
#define SOAP_TYPE___ns1__GetSNForLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSNForLink_(struct soap*, struct __ns1__GetSNForLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSNForLink_(struct soap*, const struct __ns1__GetSNForLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSNForLink_(struct soap*, const char*, int, const struct __ns1__GetSNForLink_ *, const char*);
SOAP_FMAC3 struct __ns1__GetSNForLink_ * SOAP_FMAC4 soap_in___ns1__GetSNForLink_(struct soap*, const char*, struct __ns1__GetSNForLink_ *, const char*);
SOAP_FMAC1 struct __ns1__GetSNForLink_ * SOAP_FMAC2 soap_instantiate___ns1__GetSNForLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSNForLink_ * soap_new___ns1__GetSNForLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSNForLink_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSNForLink_ * soap_new_req___ns1__GetSNForLink_(
	struct soap *soap)
{
	struct __ns1__GetSNForLink_ *_p = soap_new___ns1__GetSNForLink_(soap);
	if (_p)
	{	soap_default___ns1__GetSNForLink_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSNForLink_ * soap_new_set___ns1__GetSNForLink_(
	struct soap *soap,
	_ns1__GetSNForLink *ns1__GetSNForLink)
{
	struct __ns1__GetSNForLink_ *_p = soap_new___ns1__GetSNForLink_(soap);
	if (_p)
	{	soap_default___ns1__GetSNForLink_(soap, _p);
		_p->ns1__GetSNForLink = ns1__GetSNForLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSNForLink_(struct soap*, const struct __ns1__GetSNForLink_ *, const char*, const char*);

inline int soap_write___ns1__GetSNForLink_(struct soap *soap, struct __ns1__GetSNForLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSNForLink_(soap, p), 0) || soap_put___ns1__GetSNForLink_(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSNForLink_(struct soap *soap, const char *URL, struct __ns1__GetSNForLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSNForLink_(soap, p), 0) || soap_put___ns1__GetSNForLink_(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSNForLink_(struct soap *soap, const char *URL, struct __ns1__GetSNForLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSNForLink_(soap, p), 0) || soap_put___ns1__GetSNForLink_(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSNForLink_ * SOAP_FMAC4 soap_get___ns1__GetSNForLink_(struct soap*, struct __ns1__GetSNForLink_ *, const char*, const char*);

inline int soap_read___ns1__GetSNForLink_(struct soap *soap, struct __ns1__GetSNForLink_ *p)
{
	if (p)
	{	soap_default___ns1__GetSNForLink_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSNForLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSNForLink_(struct soap *soap, const char *URL, struct __ns1__GetSNForLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSNForLink_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSNForLink_(struct soap *soap, struct __ns1__GetSNForLink_ *p)
{
	if (soap_read___ns1__GetSNForLink_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetFlatnessFruitRec__DEFINED
#define SOAP_TYPE___ns1__SetFlatnessFruitRec__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetFlatnessFruitRec_(struct soap*, struct __ns1__SetFlatnessFruitRec_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetFlatnessFruitRec_(struct soap*, const struct __ns1__SetFlatnessFruitRec_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetFlatnessFruitRec_(struct soap*, const char*, int, const struct __ns1__SetFlatnessFruitRec_ *, const char*);
SOAP_FMAC3 struct __ns1__SetFlatnessFruitRec_ * SOAP_FMAC4 soap_in___ns1__SetFlatnessFruitRec_(struct soap*, const char*, struct __ns1__SetFlatnessFruitRec_ *, const char*);
SOAP_FMAC1 struct __ns1__SetFlatnessFruitRec_ * SOAP_FMAC2 soap_instantiate___ns1__SetFlatnessFruitRec_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetFlatnessFruitRec_ * soap_new___ns1__SetFlatnessFruitRec_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetFlatnessFruitRec_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetFlatnessFruitRec_ * soap_new_req___ns1__SetFlatnessFruitRec_(
	struct soap *soap)
{
	struct __ns1__SetFlatnessFruitRec_ *_p = soap_new___ns1__SetFlatnessFruitRec_(soap);
	if (_p)
	{	soap_default___ns1__SetFlatnessFruitRec_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetFlatnessFruitRec_ * soap_new_set___ns1__SetFlatnessFruitRec_(
	struct soap *soap,
	_ns1__SetFlatnessFruitRec *ns1__SetFlatnessFruitRec)
{
	struct __ns1__SetFlatnessFruitRec_ *_p = soap_new___ns1__SetFlatnessFruitRec_(soap);
	if (_p)
	{	soap_default___ns1__SetFlatnessFruitRec_(soap, _p);
		_p->ns1__SetFlatnessFruitRec = ns1__SetFlatnessFruitRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetFlatnessFruitRec_(struct soap*, const struct __ns1__SetFlatnessFruitRec_ *, const char*, const char*);

inline int soap_write___ns1__SetFlatnessFruitRec_(struct soap *soap, struct __ns1__SetFlatnessFruitRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetFlatnessFruitRec_(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec_(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetFlatnessFruitRec_(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetFlatnessFruitRec_(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec_(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetFlatnessFruitRec_(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetFlatnessFruitRec_(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec_(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetFlatnessFruitRec_ * SOAP_FMAC4 soap_get___ns1__SetFlatnessFruitRec_(struct soap*, struct __ns1__SetFlatnessFruitRec_ *, const char*, const char*);

inline int soap_read___ns1__SetFlatnessFruitRec_(struct soap *soap, struct __ns1__SetFlatnessFruitRec_ *p)
{
	if (p)
	{	soap_default___ns1__SetFlatnessFruitRec_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetFlatnessFruitRec_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetFlatnessFruitRec_(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetFlatnessFruitRec_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetFlatnessFruitRec_(struct soap *soap, struct __ns1__SetFlatnessFruitRec_ *p)
{
	if (soap_read___ns1__SetFlatnessFruitRec_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationByMoForTestPad__DEFINED
#define SOAP_TYPE___ns1__getStationByMoForTestPad__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationByMoForTestPad_(struct soap*, struct __ns1__getStationByMoForTestPad_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationByMoForTestPad_(struct soap*, const struct __ns1__getStationByMoForTestPad_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationByMoForTestPad_(struct soap*, const char*, int, const struct __ns1__getStationByMoForTestPad_ *, const char*);
SOAP_FMAC3 struct __ns1__getStationByMoForTestPad_ * SOAP_FMAC4 soap_in___ns1__getStationByMoForTestPad_(struct soap*, const char*, struct __ns1__getStationByMoForTestPad_ *, const char*);
SOAP_FMAC1 struct __ns1__getStationByMoForTestPad_ * SOAP_FMAC2 soap_instantiate___ns1__getStationByMoForTestPad_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationByMoForTestPad_ * soap_new___ns1__getStationByMoForTestPad_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationByMoForTestPad_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationByMoForTestPad_ * soap_new_req___ns1__getStationByMoForTestPad_(
	struct soap *soap)
{
	struct __ns1__getStationByMoForTestPad_ *_p = soap_new___ns1__getStationByMoForTestPad_(soap);
	if (_p)
	{	soap_default___ns1__getStationByMoForTestPad_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationByMoForTestPad_ * soap_new_set___ns1__getStationByMoForTestPad_(
	struct soap *soap,
	_ns1__getStationByMoForTestPad *ns1__getStationByMoForTestPad)
{
	struct __ns1__getStationByMoForTestPad_ *_p = soap_new___ns1__getStationByMoForTestPad_(soap);
	if (_p)
	{	soap_default___ns1__getStationByMoForTestPad_(soap, _p);
		_p->ns1__getStationByMoForTestPad = ns1__getStationByMoForTestPad;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationByMoForTestPad_(struct soap*, const struct __ns1__getStationByMoForTestPad_ *, const char*, const char*);

inline int soap_write___ns1__getStationByMoForTestPad_(struct soap *soap, struct __ns1__getStationByMoForTestPad_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationByMoForTestPad_(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad_(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationByMoForTestPad_(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMoForTestPad_(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad_(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationByMoForTestPad_(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMoForTestPad_(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad_(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationByMoForTestPad_ * SOAP_FMAC4 soap_get___ns1__getStationByMoForTestPad_(struct soap*, struct __ns1__getStationByMoForTestPad_ *, const char*, const char*);

inline int soap_read___ns1__getStationByMoForTestPad_(struct soap *soap, struct __ns1__getStationByMoForTestPad_ *p)
{
	if (p)
	{	soap_default___ns1__getStationByMoForTestPad_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationByMoForTestPad_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationByMoForTestPad_(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationByMoForTestPad_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationByMoForTestPad_(struct soap *soap, struct __ns1__getStationByMoForTestPad_ *p)
{
	if (soap_read___ns1__getStationByMoForTestPad_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingWeight__DEFINED
#define SOAP_TYPE___ns1__GetShippingWeight__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingWeight_(struct soap*, struct __ns1__GetShippingWeight_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingWeight_(struct soap*, const struct __ns1__GetShippingWeight_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingWeight_(struct soap*, const char*, int, const struct __ns1__GetShippingWeight_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingWeight_ * SOAP_FMAC4 soap_in___ns1__GetShippingWeight_(struct soap*, const char*, struct __ns1__GetShippingWeight_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingWeight_ * SOAP_FMAC2 soap_instantiate___ns1__GetShippingWeight_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingWeight_ * soap_new___ns1__GetShippingWeight_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingWeight_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingWeight_ * soap_new_req___ns1__GetShippingWeight_(
	struct soap *soap)
{
	struct __ns1__GetShippingWeight_ *_p = soap_new___ns1__GetShippingWeight_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingWeight_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingWeight_ * soap_new_set___ns1__GetShippingWeight_(
	struct soap *soap,
	_ns1__GetShippingWeight *ns1__GetShippingWeight)
{
	struct __ns1__GetShippingWeight_ *_p = soap_new___ns1__GetShippingWeight_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingWeight_(soap, _p);
		_p->ns1__GetShippingWeight = ns1__GetShippingWeight;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingWeight_(struct soap*, const struct __ns1__GetShippingWeight_ *, const char*, const char*);

inline int soap_write___ns1__GetShippingWeight_(struct soap *soap, struct __ns1__GetShippingWeight_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingWeight_(soap, p), 0) || soap_put___ns1__GetShippingWeight_(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingWeight_(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingWeight_(soap, p), 0) || soap_put___ns1__GetShippingWeight_(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingWeight_(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingWeight_(soap, p), 0) || soap_put___ns1__GetShippingWeight_(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingWeight_ * SOAP_FMAC4 soap_get___ns1__GetShippingWeight_(struct soap*, struct __ns1__GetShippingWeight_ *, const char*, const char*);

inline int soap_read___ns1__GetShippingWeight_(struct soap *soap, struct __ns1__GetShippingWeight_ *p)
{
	if (p)
	{	soap_default___ns1__GetShippingWeight_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingWeight_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingWeight_(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingWeight_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingWeight_(struct soap *soap, struct __ns1__GetShippingWeight_ *p)
{
	if (soap_read___ns1__GetShippingWeight_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingForBerth__DEFINED
#define SOAP_TYPE___ns1__GetShippingForBerth__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingForBerth_(struct soap*, struct __ns1__GetShippingForBerth_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingForBerth_(struct soap*, const struct __ns1__GetShippingForBerth_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingForBerth_(struct soap*, const char*, int, const struct __ns1__GetShippingForBerth_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingForBerth_ * SOAP_FMAC4 soap_in___ns1__GetShippingForBerth_(struct soap*, const char*, struct __ns1__GetShippingForBerth_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingForBerth_ * SOAP_FMAC2 soap_instantiate___ns1__GetShippingForBerth_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingForBerth_ * soap_new___ns1__GetShippingForBerth_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingForBerth_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingForBerth_ * soap_new_req___ns1__GetShippingForBerth_(
	struct soap *soap)
{
	struct __ns1__GetShippingForBerth_ *_p = soap_new___ns1__GetShippingForBerth_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingForBerth_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingForBerth_ * soap_new_set___ns1__GetShippingForBerth_(
	struct soap *soap,
	_ns1__GetShippingForBerth *ns1__GetShippingForBerth)
{
	struct __ns1__GetShippingForBerth_ *_p = soap_new___ns1__GetShippingForBerth_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingForBerth_(soap, _p);
		_p->ns1__GetShippingForBerth = ns1__GetShippingForBerth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingForBerth_(struct soap*, const struct __ns1__GetShippingForBerth_ *, const char*, const char*);

inline int soap_write___ns1__GetShippingForBerth_(struct soap *soap, struct __ns1__GetShippingForBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingForBerth_(soap, p), 0) || soap_put___ns1__GetShippingForBerth_(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingForBerth_(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingForBerth_(soap, p), 0) || soap_put___ns1__GetShippingForBerth_(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingForBerth_(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingForBerth_(soap, p), 0) || soap_put___ns1__GetShippingForBerth_(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingForBerth_ * SOAP_FMAC4 soap_get___ns1__GetShippingForBerth_(struct soap*, struct __ns1__GetShippingForBerth_ *, const char*, const char*);

inline int soap_read___ns1__GetShippingForBerth_(struct soap *soap, struct __ns1__GetShippingForBerth_ *p)
{
	if (p)
	{	soap_default___ns1__GetShippingForBerth_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingForBerth_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingForBerth_(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingForBerth_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingForBerth_(struct soap *soap, struct __ns1__GetShippingForBerth_ *p)
{
	if (soap_read___ns1__GetShippingForBerth_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsShippingBerth__DEFINED
#define SOAP_TYPE___ns1__InsShippingBerth__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsShippingBerth_(struct soap*, struct __ns1__InsShippingBerth_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsShippingBerth_(struct soap*, const struct __ns1__InsShippingBerth_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsShippingBerth_(struct soap*, const char*, int, const struct __ns1__InsShippingBerth_ *, const char*);
SOAP_FMAC3 struct __ns1__InsShippingBerth_ * SOAP_FMAC4 soap_in___ns1__InsShippingBerth_(struct soap*, const char*, struct __ns1__InsShippingBerth_ *, const char*);
SOAP_FMAC1 struct __ns1__InsShippingBerth_ * SOAP_FMAC2 soap_instantiate___ns1__InsShippingBerth_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsShippingBerth_ * soap_new___ns1__InsShippingBerth_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsShippingBerth_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsShippingBerth_ * soap_new_req___ns1__InsShippingBerth_(
	struct soap *soap)
{
	struct __ns1__InsShippingBerth_ *_p = soap_new___ns1__InsShippingBerth_(soap);
	if (_p)
	{	soap_default___ns1__InsShippingBerth_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsShippingBerth_ * soap_new_set___ns1__InsShippingBerth_(
	struct soap *soap,
	_ns1__InsShippingBerth *ns1__InsShippingBerth)
{
	struct __ns1__InsShippingBerth_ *_p = soap_new___ns1__InsShippingBerth_(soap);
	if (_p)
	{	soap_default___ns1__InsShippingBerth_(soap, _p);
		_p->ns1__InsShippingBerth = ns1__InsShippingBerth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsShippingBerth_(struct soap*, const struct __ns1__InsShippingBerth_ *, const char*, const char*);

inline int soap_write___ns1__InsShippingBerth_(struct soap *soap, struct __ns1__InsShippingBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsShippingBerth_(soap, p), 0) || soap_put___ns1__InsShippingBerth_(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsShippingBerth_(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingBerth_(soap, p), 0) || soap_put___ns1__InsShippingBerth_(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsShippingBerth_(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingBerth_(soap, p), 0) || soap_put___ns1__InsShippingBerth_(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsShippingBerth_ * SOAP_FMAC4 soap_get___ns1__InsShippingBerth_(struct soap*, struct __ns1__InsShippingBerth_ *, const char*, const char*);

inline int soap_read___ns1__InsShippingBerth_(struct soap *soap, struct __ns1__InsShippingBerth_ *p)
{
	if (p)
	{	soap_default___ns1__InsShippingBerth_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsShippingBerth_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsShippingBerth_(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsShippingBerth_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsShippingBerth_(struct soap *soap, struct __ns1__InsShippingBerth_ *p)
{
	if (soap_read___ns1__InsShippingBerth_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsShippingPalle__DEFINED
#define SOAP_TYPE___ns1__InsShippingPalle__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsShippingPalle_(struct soap*, struct __ns1__InsShippingPalle_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsShippingPalle_(struct soap*, const struct __ns1__InsShippingPalle_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsShippingPalle_(struct soap*, const char*, int, const struct __ns1__InsShippingPalle_ *, const char*);
SOAP_FMAC3 struct __ns1__InsShippingPalle_ * SOAP_FMAC4 soap_in___ns1__InsShippingPalle_(struct soap*, const char*, struct __ns1__InsShippingPalle_ *, const char*);
SOAP_FMAC1 struct __ns1__InsShippingPalle_ * SOAP_FMAC2 soap_instantiate___ns1__InsShippingPalle_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsShippingPalle_ * soap_new___ns1__InsShippingPalle_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsShippingPalle_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsShippingPalle_ * soap_new_req___ns1__InsShippingPalle_(
	struct soap *soap)
{
	struct __ns1__InsShippingPalle_ *_p = soap_new___ns1__InsShippingPalle_(soap);
	if (_p)
	{	soap_default___ns1__InsShippingPalle_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsShippingPalle_ * soap_new_set___ns1__InsShippingPalle_(
	struct soap *soap,
	_ns1__InsShippingPalle *ns1__InsShippingPalle)
{
	struct __ns1__InsShippingPalle_ *_p = soap_new___ns1__InsShippingPalle_(soap);
	if (_p)
	{	soap_default___ns1__InsShippingPalle_(soap, _p);
		_p->ns1__InsShippingPalle = ns1__InsShippingPalle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsShippingPalle_(struct soap*, const struct __ns1__InsShippingPalle_ *, const char*, const char*);

inline int soap_write___ns1__InsShippingPalle_(struct soap *soap, struct __ns1__InsShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsShippingPalle_(soap, p), 0) || soap_put___ns1__InsShippingPalle_(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsShippingPalle_(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingPalle_(soap, p), 0) || soap_put___ns1__InsShippingPalle_(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsShippingPalle_(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingPalle_(soap, p), 0) || soap_put___ns1__InsShippingPalle_(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsShippingPalle_ * SOAP_FMAC4 soap_get___ns1__InsShippingPalle_(struct soap*, struct __ns1__InsShippingPalle_ *, const char*, const char*);

inline int soap_read___ns1__InsShippingPalle_(struct soap *soap, struct __ns1__InsShippingPalle_ *p)
{
	if (p)
	{	soap_default___ns1__InsShippingPalle_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsShippingPalle_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsShippingPalle_(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsShippingPalle_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsShippingPalle_(struct soap *soap, struct __ns1__InsShippingPalle_ *p)
{
	if (soap_read___ns1__InsShippingPalle_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingPalle__DEFINED
#define SOAP_TYPE___ns1__GetShippingPalle__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingPalle_(struct soap*, struct __ns1__GetShippingPalle_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingPalle_(struct soap*, const struct __ns1__GetShippingPalle_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingPalle_(struct soap*, const char*, int, const struct __ns1__GetShippingPalle_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingPalle_ * SOAP_FMAC4 soap_in___ns1__GetShippingPalle_(struct soap*, const char*, struct __ns1__GetShippingPalle_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingPalle_ * SOAP_FMAC2 soap_instantiate___ns1__GetShippingPalle_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingPalle_ * soap_new___ns1__GetShippingPalle_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingPalle_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingPalle_ * soap_new_req___ns1__GetShippingPalle_(
	struct soap *soap)
{
	struct __ns1__GetShippingPalle_ *_p = soap_new___ns1__GetShippingPalle_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingPalle_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingPalle_ * soap_new_set___ns1__GetShippingPalle_(
	struct soap *soap,
	_ns1__GetShippingPalle *ns1__GetShippingPalle)
{
	struct __ns1__GetShippingPalle_ *_p = soap_new___ns1__GetShippingPalle_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingPalle_(soap, _p);
		_p->ns1__GetShippingPalle = ns1__GetShippingPalle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingPalle_(struct soap*, const struct __ns1__GetShippingPalle_ *, const char*, const char*);

inline int soap_write___ns1__GetShippingPalle_(struct soap *soap, struct __ns1__GetShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingPalle_(soap, p), 0) || soap_put___ns1__GetShippingPalle_(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingPalle_(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingPalle_(soap, p), 0) || soap_put___ns1__GetShippingPalle_(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingPalle_(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingPalle_(soap, p), 0) || soap_put___ns1__GetShippingPalle_(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingPalle_ * SOAP_FMAC4 soap_get___ns1__GetShippingPalle_(struct soap*, struct __ns1__GetShippingPalle_ *, const char*, const char*);

inline int soap_read___ns1__GetShippingPalle_(struct soap *soap, struct __ns1__GetShippingPalle_ *p)
{
	if (p)
	{	soap_default___ns1__GetShippingPalle_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingPalle_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingPalle_(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingPalle_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingPalle_(struct soap *soap, struct __ns1__GetShippingPalle_ *p)
{
	if (soap_read___ns1__GetShippingPalle_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdShipping__DEFINED
#define SOAP_TYPE___ns1__UpdShipping__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdShipping_(struct soap*, struct __ns1__UpdShipping_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdShipping_(struct soap*, const struct __ns1__UpdShipping_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdShipping_(struct soap*, const char*, int, const struct __ns1__UpdShipping_ *, const char*);
SOAP_FMAC3 struct __ns1__UpdShipping_ * SOAP_FMAC4 soap_in___ns1__UpdShipping_(struct soap*, const char*, struct __ns1__UpdShipping_ *, const char*);
SOAP_FMAC1 struct __ns1__UpdShipping_ * SOAP_FMAC2 soap_instantiate___ns1__UpdShipping_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdShipping_ * soap_new___ns1__UpdShipping_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdShipping_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdShipping_ * soap_new_req___ns1__UpdShipping_(
	struct soap *soap)
{
	struct __ns1__UpdShipping_ *_p = soap_new___ns1__UpdShipping_(soap);
	if (_p)
	{	soap_default___ns1__UpdShipping_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdShipping_ * soap_new_set___ns1__UpdShipping_(
	struct soap *soap,
	_ns1__UpdShipping *ns1__UpdShipping)
{
	struct __ns1__UpdShipping_ *_p = soap_new___ns1__UpdShipping_(soap);
	if (_p)
	{	soap_default___ns1__UpdShipping_(soap, _p);
		_p->ns1__UpdShipping = ns1__UpdShipping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdShipping_(struct soap*, const struct __ns1__UpdShipping_ *, const char*, const char*);

inline int soap_write___ns1__UpdShipping_(struct soap *soap, struct __ns1__UpdShipping_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdShipping_(soap, p), 0) || soap_put___ns1__UpdShipping_(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdShipping_(struct soap *soap, const char *URL, struct __ns1__UpdShipping_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdShipping_(soap, p), 0) || soap_put___ns1__UpdShipping_(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdShipping_(struct soap *soap, const char *URL, struct __ns1__UpdShipping_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdShipping_(soap, p), 0) || soap_put___ns1__UpdShipping_(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdShipping_ * SOAP_FMAC4 soap_get___ns1__UpdShipping_(struct soap*, struct __ns1__UpdShipping_ *, const char*, const char*);

inline int soap_read___ns1__UpdShipping_(struct soap *soap, struct __ns1__UpdShipping_ *p)
{
	if (p)
	{	soap_default___ns1__UpdShipping_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdShipping_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdShipping_(struct soap *soap, const char *URL, struct __ns1__UpdShipping_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdShipping_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdShipping_(struct soap *soap, struct __ns1__UpdShipping_ *p)
{
	if (soap_read___ns1__UpdShipping_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingBerthList__DEFINED
#define SOAP_TYPE___ns1__GetShippingBerthList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingBerthList_(struct soap*, struct __ns1__GetShippingBerthList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingBerthList_(struct soap*, const struct __ns1__GetShippingBerthList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingBerthList_(struct soap*, const char*, int, const struct __ns1__GetShippingBerthList_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingBerthList_ * SOAP_FMAC4 soap_in___ns1__GetShippingBerthList_(struct soap*, const char*, struct __ns1__GetShippingBerthList_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingBerthList_ * SOAP_FMAC2 soap_instantiate___ns1__GetShippingBerthList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingBerthList_ * soap_new___ns1__GetShippingBerthList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingBerthList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingBerthList_ * soap_new_req___ns1__GetShippingBerthList_(
	struct soap *soap)
{
	struct __ns1__GetShippingBerthList_ *_p = soap_new___ns1__GetShippingBerthList_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingBerthList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingBerthList_ * soap_new_set___ns1__GetShippingBerthList_(
	struct soap *soap,
	_ns1__GetShippingBerthList *ns1__GetShippingBerthList)
{
	struct __ns1__GetShippingBerthList_ *_p = soap_new___ns1__GetShippingBerthList_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingBerthList_(soap, _p);
		_p->ns1__GetShippingBerthList = ns1__GetShippingBerthList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingBerthList_(struct soap*, const struct __ns1__GetShippingBerthList_ *, const char*, const char*);

inline int soap_write___ns1__GetShippingBerthList_(struct soap *soap, struct __ns1__GetShippingBerthList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingBerthList_(soap, p), 0) || soap_put___ns1__GetShippingBerthList_(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingBerthList_(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingBerthList_(soap, p), 0) || soap_put___ns1__GetShippingBerthList_(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingBerthList_(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingBerthList_(soap, p), 0) || soap_put___ns1__GetShippingBerthList_(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingBerthList_ * SOAP_FMAC4 soap_get___ns1__GetShippingBerthList_(struct soap*, struct __ns1__GetShippingBerthList_ *, const char*, const char*);

inline int soap_read___ns1__GetShippingBerthList_(struct soap *soap, struct __ns1__GetShippingBerthList_ *p)
{
	if (p)
	{	soap_default___ns1__GetShippingBerthList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingBerthList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingBerthList_(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingBerthList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingBerthList_(struct soap *soap, struct __ns1__GetShippingBerthList_ *p)
{
	if (soap_read___ns1__GetShippingBerthList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingList__DEFINED
#define SOAP_TYPE___ns1__GetShippingList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingList_(struct soap*, struct __ns1__GetShippingList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingList_(struct soap*, const struct __ns1__GetShippingList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingList_(struct soap*, const char*, int, const struct __ns1__GetShippingList_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingList_ * SOAP_FMAC4 soap_in___ns1__GetShippingList_(struct soap*, const char*, struct __ns1__GetShippingList_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingList_ * SOAP_FMAC2 soap_instantiate___ns1__GetShippingList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingList_ * soap_new___ns1__GetShippingList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingList_ * soap_new_req___ns1__GetShippingList_(
	struct soap *soap)
{
	struct __ns1__GetShippingList_ *_p = soap_new___ns1__GetShippingList_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingList_ * soap_new_set___ns1__GetShippingList_(
	struct soap *soap,
	_ns1__GetShippingList *ns1__GetShippingList)
{
	struct __ns1__GetShippingList_ *_p = soap_new___ns1__GetShippingList_(soap);
	if (_p)
	{	soap_default___ns1__GetShippingList_(soap, _p);
		_p->ns1__GetShippingList = ns1__GetShippingList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingList_(struct soap*, const struct __ns1__GetShippingList_ *, const char*, const char*);

inline int soap_write___ns1__GetShippingList_(struct soap *soap, struct __ns1__GetShippingList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingList_(soap, p), 0) || soap_put___ns1__GetShippingList_(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingList_(struct soap *soap, const char *URL, struct __ns1__GetShippingList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingList_(soap, p), 0) || soap_put___ns1__GetShippingList_(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingList_(struct soap *soap, const char *URL, struct __ns1__GetShippingList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingList_(soap, p), 0) || soap_put___ns1__GetShippingList_(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingList_ * SOAP_FMAC4 soap_get___ns1__GetShippingList_(struct soap*, struct __ns1__GetShippingList_ *, const char*, const char*);

inline int soap_read___ns1__GetShippingList_(struct soap *soap, struct __ns1__GetShippingList_ *p)
{
	if (p)
	{	soap_default___ns1__GetShippingList_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingList_(struct soap *soap, const char *URL, struct __ns1__GetShippingList_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingList_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingList_(struct soap *soap, struct __ns1__GetShippingList_ *p)
{
	if (soap_read___ns1__GetShippingList_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doLotLinkForApple__DEFINED
#define SOAP_TYPE___ns1__doLotLinkForApple__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doLotLinkForApple_(struct soap*, struct __ns1__doLotLinkForApple_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doLotLinkForApple_(struct soap*, const struct __ns1__doLotLinkForApple_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doLotLinkForApple_(struct soap*, const char*, int, const struct __ns1__doLotLinkForApple_ *, const char*);
SOAP_FMAC3 struct __ns1__doLotLinkForApple_ * SOAP_FMAC4 soap_in___ns1__doLotLinkForApple_(struct soap*, const char*, struct __ns1__doLotLinkForApple_ *, const char*);
SOAP_FMAC1 struct __ns1__doLotLinkForApple_ * SOAP_FMAC2 soap_instantiate___ns1__doLotLinkForApple_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doLotLinkForApple_ * soap_new___ns1__doLotLinkForApple_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doLotLinkForApple_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doLotLinkForApple_ * soap_new_req___ns1__doLotLinkForApple_(
	struct soap *soap)
{
	struct __ns1__doLotLinkForApple_ *_p = soap_new___ns1__doLotLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__doLotLinkForApple_(soap, _p);
	}
	return _p;
}

inline struct __ns1__doLotLinkForApple_ * soap_new_set___ns1__doLotLinkForApple_(
	struct soap *soap,
	_ns1__doLotLinkForApple *ns1__doLotLinkForApple)
{
	struct __ns1__doLotLinkForApple_ *_p = soap_new___ns1__doLotLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__doLotLinkForApple_(soap, _p);
		_p->ns1__doLotLinkForApple = ns1__doLotLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doLotLinkForApple_(struct soap*, const struct __ns1__doLotLinkForApple_ *, const char*, const char*);

inline int soap_write___ns1__doLotLinkForApple_(struct soap *soap, struct __ns1__doLotLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doLotLinkForApple_(soap, p), 0) || soap_put___ns1__doLotLinkForApple_(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doLotLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLotLinkForApple_(soap, p), 0) || soap_put___ns1__doLotLinkForApple_(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doLotLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLotLinkForApple_(soap, p), 0) || soap_put___ns1__doLotLinkForApple_(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doLotLinkForApple_ * SOAP_FMAC4 soap_get___ns1__doLotLinkForApple_(struct soap*, struct __ns1__doLotLinkForApple_ *, const char*, const char*);

inline int soap_read___ns1__doLotLinkForApple_(struct soap *soap, struct __ns1__doLotLinkForApple_ *p)
{
	if (p)
	{	soap_default___ns1__doLotLinkForApple_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doLotLinkForApple_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doLotLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doLotLinkForApple_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doLotLinkForApple_(struct soap *soap, struct __ns1__doLotLinkForApple_ *p)
{
	if (soap_read___ns1__doLotLinkForApple_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLotLinkCount__DEFINED
#define SOAP_TYPE___ns1__GetLotLinkCount__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLotLinkCount_(struct soap*, struct __ns1__GetLotLinkCount_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLotLinkCount_(struct soap*, const struct __ns1__GetLotLinkCount_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLotLinkCount_(struct soap*, const char*, int, const struct __ns1__GetLotLinkCount_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLotLinkCount_ * SOAP_FMAC4 soap_in___ns1__GetLotLinkCount_(struct soap*, const char*, struct __ns1__GetLotLinkCount_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLotLinkCount_ * SOAP_FMAC2 soap_instantiate___ns1__GetLotLinkCount_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLotLinkCount_ * soap_new___ns1__GetLotLinkCount_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLotLinkCount_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLotLinkCount_ * soap_new_req___ns1__GetLotLinkCount_(
	struct soap *soap)
{
	struct __ns1__GetLotLinkCount_ *_p = soap_new___ns1__GetLotLinkCount_(soap);
	if (_p)
	{	soap_default___ns1__GetLotLinkCount_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLotLinkCount_ * soap_new_set___ns1__GetLotLinkCount_(
	struct soap *soap,
	_ns1__GetLotLinkCount *ns1__GetLotLinkCount)
{
	struct __ns1__GetLotLinkCount_ *_p = soap_new___ns1__GetLotLinkCount_(soap);
	if (_p)
	{	soap_default___ns1__GetLotLinkCount_(soap, _p);
		_p->ns1__GetLotLinkCount = ns1__GetLotLinkCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLotLinkCount_(struct soap*, const struct __ns1__GetLotLinkCount_ *, const char*, const char*);

inline int soap_write___ns1__GetLotLinkCount_(struct soap *soap, struct __ns1__GetLotLinkCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLotLinkCount_(soap, p), 0) || soap_put___ns1__GetLotLinkCount_(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLotLinkCount_(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLotLinkCount_(soap, p), 0) || soap_put___ns1__GetLotLinkCount_(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLotLinkCount_(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLotLinkCount_(soap, p), 0) || soap_put___ns1__GetLotLinkCount_(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLotLinkCount_ * SOAP_FMAC4 soap_get___ns1__GetLotLinkCount_(struct soap*, struct __ns1__GetLotLinkCount_ *, const char*, const char*);

inline int soap_read___ns1__GetLotLinkCount_(struct soap *soap, struct __ns1__GetLotLinkCount_ *p)
{
	if (p)
	{	soap_default___ns1__GetLotLinkCount_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLotLinkCount_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLotLinkCount_(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLotLinkCount_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLotLinkCount_(struct soap *soap, struct __ns1__GetLotLinkCount_ *p)
{
	if (soap_read___ns1__GetLotLinkCount_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFruitSNCheck__DEFINED
#define SOAP_TYPE___ns1__GetFruitSNCheck__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFruitSNCheck_(struct soap*, struct __ns1__GetFruitSNCheck_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFruitSNCheck_(struct soap*, const struct __ns1__GetFruitSNCheck_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFruitSNCheck_(struct soap*, const char*, int, const struct __ns1__GetFruitSNCheck_ *, const char*);
SOAP_FMAC3 struct __ns1__GetFruitSNCheck_ * SOAP_FMAC4 soap_in___ns1__GetFruitSNCheck_(struct soap*, const char*, struct __ns1__GetFruitSNCheck_ *, const char*);
SOAP_FMAC1 struct __ns1__GetFruitSNCheck_ * SOAP_FMAC2 soap_instantiate___ns1__GetFruitSNCheck_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFruitSNCheck_ * soap_new___ns1__GetFruitSNCheck_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFruitSNCheck_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFruitSNCheck_ * soap_new_req___ns1__GetFruitSNCheck_(
	struct soap *soap)
{
	struct __ns1__GetFruitSNCheck_ *_p = soap_new___ns1__GetFruitSNCheck_(soap);
	if (_p)
	{	soap_default___ns1__GetFruitSNCheck_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFruitSNCheck_ * soap_new_set___ns1__GetFruitSNCheck_(
	struct soap *soap,
	_ns1__GetFruitSNCheck *ns1__GetFruitSNCheck)
{
	struct __ns1__GetFruitSNCheck_ *_p = soap_new___ns1__GetFruitSNCheck_(soap);
	if (_p)
	{	soap_default___ns1__GetFruitSNCheck_(soap, _p);
		_p->ns1__GetFruitSNCheck = ns1__GetFruitSNCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFruitSNCheck_(struct soap*, const struct __ns1__GetFruitSNCheck_ *, const char*, const char*);

inline int soap_write___ns1__GetFruitSNCheck_(struct soap *soap, struct __ns1__GetFruitSNCheck_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFruitSNCheck_(soap, p), 0) || soap_put___ns1__GetFruitSNCheck_(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFruitSNCheck_(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitSNCheck_(soap, p), 0) || soap_put___ns1__GetFruitSNCheck_(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFruitSNCheck_(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitSNCheck_(soap, p), 0) || soap_put___ns1__GetFruitSNCheck_(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFruitSNCheck_ * SOAP_FMAC4 soap_get___ns1__GetFruitSNCheck_(struct soap*, struct __ns1__GetFruitSNCheck_ *, const char*, const char*);

inline int soap_read___ns1__GetFruitSNCheck_(struct soap *soap, struct __ns1__GetFruitSNCheck_ *p)
{
	if (p)
	{	soap_default___ns1__GetFruitSNCheck_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFruitSNCheck_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFruitSNCheck_(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFruitSNCheck_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFruitSNCheck_(struct soap *soap, struct __ns1__GetFruitSNCheck_ *p)
{
	if (soap_read___ns1__GetFruitSNCheck_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetObeNW__DEFINED
#define SOAP_TYPE___ns1__GetObeNW__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObeNW_(struct soap*, struct __ns1__GetObeNW_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObeNW_(struct soap*, const struct __ns1__GetObeNW_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObeNW_(struct soap*, const char*, int, const struct __ns1__GetObeNW_ *, const char*);
SOAP_FMAC3 struct __ns1__GetObeNW_ * SOAP_FMAC4 soap_in___ns1__GetObeNW_(struct soap*, const char*, struct __ns1__GetObeNW_ *, const char*);
SOAP_FMAC1 struct __ns1__GetObeNW_ * SOAP_FMAC2 soap_instantiate___ns1__GetObeNW_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetObeNW_ * soap_new___ns1__GetObeNW_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetObeNW_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetObeNW_ * soap_new_req___ns1__GetObeNW_(
	struct soap *soap)
{
	struct __ns1__GetObeNW_ *_p = soap_new___ns1__GetObeNW_(soap);
	if (_p)
	{	soap_default___ns1__GetObeNW_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetObeNW_ * soap_new_set___ns1__GetObeNW_(
	struct soap *soap,
	_ns1__GetObeNW *ns1__GetObeNW)
{
	struct __ns1__GetObeNW_ *_p = soap_new___ns1__GetObeNW_(soap);
	if (_p)
	{	soap_default___ns1__GetObeNW_(soap, _p);
		_p->ns1__GetObeNW = ns1__GetObeNW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObeNW_(struct soap*, const struct __ns1__GetObeNW_ *, const char*, const char*);

inline int soap_write___ns1__GetObeNW_(struct soap *soap, struct __ns1__GetObeNW_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetObeNW_(soap, p), 0) || soap_put___ns1__GetObeNW_(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetObeNW_(struct soap *soap, const char *URL, struct __ns1__GetObeNW_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetObeNW_(soap, p), 0) || soap_put___ns1__GetObeNW_(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetObeNW_(struct soap *soap, const char *URL, struct __ns1__GetObeNW_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetObeNW_(soap, p), 0) || soap_put___ns1__GetObeNW_(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetObeNW_ * SOAP_FMAC4 soap_get___ns1__GetObeNW_(struct soap*, struct __ns1__GetObeNW_ *, const char*, const char*);

inline int soap_read___ns1__GetObeNW_(struct soap *soap, struct __ns1__GetObeNW_ *p)
{
	if (p)
	{	soap_default___ns1__GetObeNW_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetObeNW_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetObeNW_(struct soap *soap, const char *URL, struct __ns1__GetObeNW_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetObeNW_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetObeNW_(struct soap *soap, struct __ns1__GetObeNW_ *p)
{
	if (soap_read___ns1__GetObeNW_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doSnLinkForApple__DEFINED
#define SOAP_TYPE___ns1__doSnLinkForApple__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doSnLinkForApple_(struct soap*, struct __ns1__doSnLinkForApple_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doSnLinkForApple_(struct soap*, const struct __ns1__doSnLinkForApple_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doSnLinkForApple_(struct soap*, const char*, int, const struct __ns1__doSnLinkForApple_ *, const char*);
SOAP_FMAC3 struct __ns1__doSnLinkForApple_ * SOAP_FMAC4 soap_in___ns1__doSnLinkForApple_(struct soap*, const char*, struct __ns1__doSnLinkForApple_ *, const char*);
SOAP_FMAC1 struct __ns1__doSnLinkForApple_ * SOAP_FMAC2 soap_instantiate___ns1__doSnLinkForApple_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doSnLinkForApple_ * soap_new___ns1__doSnLinkForApple_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doSnLinkForApple_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doSnLinkForApple_ * soap_new_req___ns1__doSnLinkForApple_(
	struct soap *soap)
{
	struct __ns1__doSnLinkForApple_ *_p = soap_new___ns1__doSnLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__doSnLinkForApple_(soap, _p);
	}
	return _p;
}

inline struct __ns1__doSnLinkForApple_ * soap_new_set___ns1__doSnLinkForApple_(
	struct soap *soap,
	_ns1__doSnLinkForApple *ns1__doSnLinkForApple)
{
	struct __ns1__doSnLinkForApple_ *_p = soap_new___ns1__doSnLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__doSnLinkForApple_(soap, _p);
		_p->ns1__doSnLinkForApple = ns1__doSnLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doSnLinkForApple_(struct soap*, const struct __ns1__doSnLinkForApple_ *, const char*, const char*);

inline int soap_write___ns1__doSnLinkForApple_(struct soap *soap, struct __ns1__doSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doSnLinkForApple_(soap, p), 0) || soap_put___ns1__doSnLinkForApple_(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doSnLinkForApple_(soap, p), 0) || soap_put___ns1__doSnLinkForApple_(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doSnLinkForApple_(soap, p), 0) || soap_put___ns1__doSnLinkForApple_(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doSnLinkForApple_ * SOAP_FMAC4 soap_get___ns1__doSnLinkForApple_(struct soap*, struct __ns1__doSnLinkForApple_ *, const char*, const char*);

inline int soap_read___ns1__doSnLinkForApple_(struct soap *soap, struct __ns1__doSnLinkForApple_ *p)
{
	if (p)
	{	soap_default___ns1__doSnLinkForApple_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doSnLinkForApple_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doSnLinkForApple_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doSnLinkForApple_(struct soap *soap, struct __ns1__doSnLinkForApple_ *p)
{
	if (soap_read___ns1__doSnLinkForApple_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnLinkForApple__DEFINED
#define SOAP_TYPE___ns1__ChkSnLinkForApple__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnLinkForApple_(struct soap*, struct __ns1__ChkSnLinkForApple_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnLinkForApple_(struct soap*, const struct __ns1__ChkSnLinkForApple_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnLinkForApple_(struct soap*, const char*, int, const struct __ns1__ChkSnLinkForApple_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnLinkForApple_ * SOAP_FMAC4 soap_in___ns1__ChkSnLinkForApple_(struct soap*, const char*, struct __ns1__ChkSnLinkForApple_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnLinkForApple_ * SOAP_FMAC2 soap_instantiate___ns1__ChkSnLinkForApple_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnLinkForApple_ * soap_new___ns1__ChkSnLinkForApple_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnLinkForApple_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnLinkForApple_ * soap_new_req___ns1__ChkSnLinkForApple_(
	struct soap *soap)
{
	struct __ns1__ChkSnLinkForApple_ *_p = soap_new___ns1__ChkSnLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLinkForApple_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnLinkForApple_ * soap_new_set___ns1__ChkSnLinkForApple_(
	struct soap *soap,
	_ns1__ChkSnLinkForApple *ns1__ChkSnLinkForApple)
{
	struct __ns1__ChkSnLinkForApple_ *_p = soap_new___ns1__ChkSnLinkForApple_(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLinkForApple_(soap, _p);
		_p->ns1__ChkSnLinkForApple = ns1__ChkSnLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnLinkForApple_(struct soap*, const struct __ns1__ChkSnLinkForApple_ *, const char*, const char*);

inline int soap_write___ns1__ChkSnLinkForApple_(struct soap *soap, struct __ns1__ChkSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnLinkForApple_(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple_(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLinkForApple_(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple_(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLinkForApple_(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple_(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnLinkForApple_ * SOAP_FMAC4 soap_get___ns1__ChkSnLinkForApple_(struct soap*, struct __ns1__ChkSnLinkForApple_ *, const char*, const char*);

inline int soap_read___ns1__ChkSnLinkForApple_(struct soap *soap, struct __ns1__ChkSnLinkForApple_ *p)
{
	if (p)
	{	soap_default___ns1__ChkSnLinkForApple_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnLinkForApple_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnLinkForApple_(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnLinkForApple_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnLinkForApple_(struct soap *soap, struct __ns1__ChkSnLinkForApple_ *p)
{
	if (soap_read___ns1__ChkSnLinkForApple_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DelSNTest__DEFINED
#define SOAP_TYPE___ns1__DelSNTest__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DelSNTest_(struct soap*, struct __ns1__DelSNTest_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DelSNTest_(struct soap*, const struct __ns1__DelSNTest_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DelSNTest_(struct soap*, const char*, int, const struct __ns1__DelSNTest_ *, const char*);
SOAP_FMAC3 struct __ns1__DelSNTest_ * SOAP_FMAC4 soap_in___ns1__DelSNTest_(struct soap*, const char*, struct __ns1__DelSNTest_ *, const char*);
SOAP_FMAC1 struct __ns1__DelSNTest_ * SOAP_FMAC2 soap_instantiate___ns1__DelSNTest_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DelSNTest_ * soap_new___ns1__DelSNTest_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DelSNTest_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DelSNTest_ * soap_new_req___ns1__DelSNTest_(
	struct soap *soap)
{
	struct __ns1__DelSNTest_ *_p = soap_new___ns1__DelSNTest_(soap);
	if (_p)
	{	soap_default___ns1__DelSNTest_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DelSNTest_ * soap_new_set___ns1__DelSNTest_(
	struct soap *soap,
	_ns1__DelSNTest *ns1__DelSNTest)
{
	struct __ns1__DelSNTest_ *_p = soap_new___ns1__DelSNTest_(soap);
	if (_p)
	{	soap_default___ns1__DelSNTest_(soap, _p);
		_p->ns1__DelSNTest = ns1__DelSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DelSNTest_(struct soap*, const struct __ns1__DelSNTest_ *, const char*, const char*);

inline int soap_write___ns1__DelSNTest_(struct soap *soap, struct __ns1__DelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DelSNTest_(soap, p), 0) || soap_put___ns1__DelSNTest_(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DelSNTest_(struct soap *soap, const char *URL, struct __ns1__DelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DelSNTest_(soap, p), 0) || soap_put___ns1__DelSNTest_(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DelSNTest_(struct soap *soap, const char *URL, struct __ns1__DelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DelSNTest_(soap, p), 0) || soap_put___ns1__DelSNTest_(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DelSNTest_ * SOAP_FMAC4 soap_get___ns1__DelSNTest_(struct soap*, struct __ns1__DelSNTest_ *, const char*, const char*);

inline int soap_read___ns1__DelSNTest_(struct soap *soap, struct __ns1__DelSNTest_ *p)
{
	if (p)
	{	soap_default___ns1__DelSNTest_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DelSNTest_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DelSNTest_(struct soap *soap, const char *URL, struct __ns1__DelSNTest_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DelSNTest_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DelSNTest_(struct soap *soap, struct __ns1__DelSNTest_ *p)
{
	if (soap_read___ns1__DelSNTest_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelSNTest__DEFINED
#define SOAP_TYPE___ns1__SelSNTest__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelSNTest_(struct soap*, struct __ns1__SelSNTest_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelSNTest_(struct soap*, const struct __ns1__SelSNTest_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelSNTest_(struct soap*, const char*, int, const struct __ns1__SelSNTest_ *, const char*);
SOAP_FMAC3 struct __ns1__SelSNTest_ * SOAP_FMAC4 soap_in___ns1__SelSNTest_(struct soap*, const char*, struct __ns1__SelSNTest_ *, const char*);
SOAP_FMAC1 struct __ns1__SelSNTest_ * SOAP_FMAC2 soap_instantiate___ns1__SelSNTest_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelSNTest_ * soap_new___ns1__SelSNTest_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelSNTest_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelSNTest_ * soap_new_req___ns1__SelSNTest_(
	struct soap *soap)
{
	struct __ns1__SelSNTest_ *_p = soap_new___ns1__SelSNTest_(soap);
	if (_p)
	{	soap_default___ns1__SelSNTest_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelSNTest_ * soap_new_set___ns1__SelSNTest_(
	struct soap *soap,
	_ns1__SelSNTest *ns1__SelSNTest)
{
	struct __ns1__SelSNTest_ *_p = soap_new___ns1__SelSNTest_(soap);
	if (_p)
	{	soap_default___ns1__SelSNTest_(soap, _p);
		_p->ns1__SelSNTest = ns1__SelSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelSNTest_(struct soap*, const struct __ns1__SelSNTest_ *, const char*, const char*);

inline int soap_write___ns1__SelSNTest_(struct soap *soap, struct __ns1__SelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelSNTest_(soap, p), 0) || soap_put___ns1__SelSNTest_(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelSNTest_(struct soap *soap, const char *URL, struct __ns1__SelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTest_(soap, p), 0) || soap_put___ns1__SelSNTest_(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelSNTest_(struct soap *soap, const char *URL, struct __ns1__SelSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTest_(soap, p), 0) || soap_put___ns1__SelSNTest_(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelSNTest_ * SOAP_FMAC4 soap_get___ns1__SelSNTest_(struct soap*, struct __ns1__SelSNTest_ *, const char*, const char*);

inline int soap_read___ns1__SelSNTest_(struct soap *soap, struct __ns1__SelSNTest_ *p)
{
	if (p)
	{	soap_default___ns1__SelSNTest_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelSNTest_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelSNTest_(struct soap *soap, const char *URL, struct __ns1__SelSNTest_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelSNTest_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelSNTest_(struct soap *soap, struct __ns1__SelSNTest_ *p)
{
	if (soap_read___ns1__SelSNTest_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNTest__DEFINED
#define SOAP_TYPE___ns1__InsSNTest__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNTest_(struct soap*, struct __ns1__InsSNTest_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNTest_(struct soap*, const struct __ns1__InsSNTest_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNTest_(struct soap*, const char*, int, const struct __ns1__InsSNTest_ *, const char*);
SOAP_FMAC3 struct __ns1__InsSNTest_ * SOAP_FMAC4 soap_in___ns1__InsSNTest_(struct soap*, const char*, struct __ns1__InsSNTest_ *, const char*);
SOAP_FMAC1 struct __ns1__InsSNTest_ * SOAP_FMAC2 soap_instantiate___ns1__InsSNTest_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNTest_ * soap_new___ns1__InsSNTest_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNTest_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNTest_ * soap_new_req___ns1__InsSNTest_(
	struct soap *soap)
{
	struct __ns1__InsSNTest_ *_p = soap_new___ns1__InsSNTest_(soap);
	if (_p)
	{	soap_default___ns1__InsSNTest_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNTest_ * soap_new_set___ns1__InsSNTest_(
	struct soap *soap,
	_ns1__InsSNTest *ns1__InsSNTest)
{
	struct __ns1__InsSNTest_ *_p = soap_new___ns1__InsSNTest_(soap);
	if (_p)
	{	soap_default___ns1__InsSNTest_(soap, _p);
		_p->ns1__InsSNTest = ns1__InsSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNTest_(struct soap*, const struct __ns1__InsSNTest_ *, const char*, const char*);

inline int soap_write___ns1__InsSNTest_(struct soap *soap, struct __ns1__InsSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNTest_(soap, p), 0) || soap_put___ns1__InsSNTest_(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNTest_(struct soap *soap, const char *URL, struct __ns1__InsSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTest_(soap, p), 0) || soap_put___ns1__InsSNTest_(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNTest_(struct soap *soap, const char *URL, struct __ns1__InsSNTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTest_(soap, p), 0) || soap_put___ns1__InsSNTest_(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNTest_ * SOAP_FMAC4 soap_get___ns1__InsSNTest_(struct soap*, struct __ns1__InsSNTest_ *, const char*, const char*);

inline int soap_read___ns1__InsSNTest_(struct soap *soap, struct __ns1__InsSNTest_ *p)
{
	if (p)
	{	soap_default___ns1__InsSNTest_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNTest_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNTest_(struct soap *soap, const char *URL, struct __ns1__InsSNTest_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNTest_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNTest_(struct soap *soap, struct __ns1__InsSNTest_ *p)
{
	if (soap_read___ns1__InsSNTest_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkWeightTime__DEFINED
#define SOAP_TYPE___ns1__ChkWeightTime__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkWeightTime_(struct soap*, struct __ns1__ChkWeightTime_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkWeightTime_(struct soap*, const struct __ns1__ChkWeightTime_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkWeightTime_(struct soap*, const char*, int, const struct __ns1__ChkWeightTime_ *, const char*);
SOAP_FMAC3 struct __ns1__ChkWeightTime_ * SOAP_FMAC4 soap_in___ns1__ChkWeightTime_(struct soap*, const char*, struct __ns1__ChkWeightTime_ *, const char*);
SOAP_FMAC1 struct __ns1__ChkWeightTime_ * SOAP_FMAC2 soap_instantiate___ns1__ChkWeightTime_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkWeightTime_ * soap_new___ns1__ChkWeightTime_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkWeightTime_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkWeightTime_ * soap_new_req___ns1__ChkWeightTime_(
	struct soap *soap)
{
	struct __ns1__ChkWeightTime_ *_p = soap_new___ns1__ChkWeightTime_(soap);
	if (_p)
	{	soap_default___ns1__ChkWeightTime_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkWeightTime_ * soap_new_set___ns1__ChkWeightTime_(
	struct soap *soap,
	_ns1__ChkWeightTime *ns1__ChkWeightTime)
{
	struct __ns1__ChkWeightTime_ *_p = soap_new___ns1__ChkWeightTime_(soap);
	if (_p)
	{	soap_default___ns1__ChkWeightTime_(soap, _p);
		_p->ns1__ChkWeightTime = ns1__ChkWeightTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkWeightTime_(struct soap*, const struct __ns1__ChkWeightTime_ *, const char*, const char*);

inline int soap_write___ns1__ChkWeightTime_(struct soap *soap, struct __ns1__ChkWeightTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkWeightTime_(soap, p), 0) || soap_put___ns1__ChkWeightTime_(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkWeightTime_(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkWeightTime_(soap, p), 0) || soap_put___ns1__ChkWeightTime_(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkWeightTime_(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkWeightTime_(soap, p), 0) || soap_put___ns1__ChkWeightTime_(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkWeightTime_ * SOAP_FMAC4 soap_get___ns1__ChkWeightTime_(struct soap*, struct __ns1__ChkWeightTime_ *, const char*, const char*);

inline int soap_read___ns1__ChkWeightTime_(struct soap *soap, struct __ns1__ChkWeightTime_ *p)
{
	if (p)
	{	soap_default___ns1__ChkWeightTime_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkWeightTime_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkWeightTime_(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkWeightTime_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkWeightTime_(struct soap *soap, struct __ns1__ChkWeightTime_ *p)
{
	if (soap_read___ns1__ChkWeightTime_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdAhsBarcode__DEFINED
#define SOAP_TYPE___ns1__UpdAhsBarcode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdAhsBarcode_(struct soap*, struct __ns1__UpdAhsBarcode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdAhsBarcode_(struct soap*, const struct __ns1__UpdAhsBarcode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdAhsBarcode_(struct soap*, const char*, int, const struct __ns1__UpdAhsBarcode_ *, const char*);
SOAP_FMAC3 struct __ns1__UpdAhsBarcode_ * SOAP_FMAC4 soap_in___ns1__UpdAhsBarcode_(struct soap*, const char*, struct __ns1__UpdAhsBarcode_ *, const char*);
SOAP_FMAC1 struct __ns1__UpdAhsBarcode_ * SOAP_FMAC2 soap_instantiate___ns1__UpdAhsBarcode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdAhsBarcode_ * soap_new___ns1__UpdAhsBarcode_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdAhsBarcode_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdAhsBarcode_ * soap_new_req___ns1__UpdAhsBarcode_(
	struct soap *soap)
{
	struct __ns1__UpdAhsBarcode_ *_p = soap_new___ns1__UpdAhsBarcode_(soap);
	if (_p)
	{	soap_default___ns1__UpdAhsBarcode_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdAhsBarcode_ * soap_new_set___ns1__UpdAhsBarcode_(
	struct soap *soap,
	_ns1__UpdAhsBarcode *ns1__UpdAhsBarcode)
{
	struct __ns1__UpdAhsBarcode_ *_p = soap_new___ns1__UpdAhsBarcode_(soap);
	if (_p)
	{	soap_default___ns1__UpdAhsBarcode_(soap, _p);
		_p->ns1__UpdAhsBarcode = ns1__UpdAhsBarcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdAhsBarcode_(struct soap*, const struct __ns1__UpdAhsBarcode_ *, const char*, const char*);

inline int soap_write___ns1__UpdAhsBarcode_(struct soap *soap, struct __ns1__UpdAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdAhsBarcode_(soap, p), 0) || soap_put___ns1__UpdAhsBarcode_(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdAhsBarcode_(soap, p), 0) || soap_put___ns1__UpdAhsBarcode_(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdAhsBarcode_(soap, p), 0) || soap_put___ns1__UpdAhsBarcode_(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdAhsBarcode_ * SOAP_FMAC4 soap_get___ns1__UpdAhsBarcode_(struct soap*, struct __ns1__UpdAhsBarcode_ *, const char*, const char*);

inline int soap_read___ns1__UpdAhsBarcode_(struct soap *soap, struct __ns1__UpdAhsBarcode_ *p)
{
	if (p)
	{	soap_default___ns1__UpdAhsBarcode_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdAhsBarcode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdAhsBarcode_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdAhsBarcode_(struct soap *soap, struct __ns1__UpdAhsBarcode_ *p)
{
	if (soap_read___ns1__UpdAhsBarcode_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAhsBarcode__DEFINED
#define SOAP_TYPE___ns1__GetAhsBarcode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAhsBarcode_(struct soap*, struct __ns1__GetAhsBarcode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAhsBarcode_(struct soap*, const struct __ns1__GetAhsBarcode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAhsBarcode_(struct soap*, const char*, int, const struct __ns1__GetAhsBarcode_ *, const char*);
SOAP_FMAC3 struct __ns1__GetAhsBarcode_ * SOAP_FMAC4 soap_in___ns1__GetAhsBarcode_(struct soap*, const char*, struct __ns1__GetAhsBarcode_ *, const char*);
SOAP_FMAC1 struct __ns1__GetAhsBarcode_ * SOAP_FMAC2 soap_instantiate___ns1__GetAhsBarcode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAhsBarcode_ * soap_new___ns1__GetAhsBarcode_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAhsBarcode_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAhsBarcode_ * soap_new_req___ns1__GetAhsBarcode_(
	struct soap *soap)
{
	struct __ns1__GetAhsBarcode_ *_p = soap_new___ns1__GetAhsBarcode_(soap);
	if (_p)
	{	soap_default___ns1__GetAhsBarcode_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAhsBarcode_ * soap_new_set___ns1__GetAhsBarcode_(
	struct soap *soap,
	_ns1__GetAhsBarcode *ns1__GetAhsBarcode)
{
	struct __ns1__GetAhsBarcode_ *_p = soap_new___ns1__GetAhsBarcode_(soap);
	if (_p)
	{	soap_default___ns1__GetAhsBarcode_(soap, _p);
		_p->ns1__GetAhsBarcode = ns1__GetAhsBarcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAhsBarcode_(struct soap*, const struct __ns1__GetAhsBarcode_ *, const char*, const char*);

inline int soap_write___ns1__GetAhsBarcode_(struct soap *soap, struct __ns1__GetAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAhsBarcode_(soap, p), 0) || soap_put___ns1__GetAhsBarcode_(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsBarcode_(soap, p), 0) || soap_put___ns1__GetAhsBarcode_(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsBarcode_(soap, p), 0) || soap_put___ns1__GetAhsBarcode_(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAhsBarcode_ * SOAP_FMAC4 soap_get___ns1__GetAhsBarcode_(struct soap*, struct __ns1__GetAhsBarcode_ *, const char*, const char*);

inline int soap_read___ns1__GetAhsBarcode_(struct soap *soap, struct __ns1__GetAhsBarcode_ *p)
{
	if (p)
	{	soap_default___ns1__GetAhsBarcode_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAhsBarcode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAhsBarcode_(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAhsBarcode_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAhsBarcode_(struct soap *soap, struct __ns1__GetAhsBarcode_ *p)
{
	if (soap_read___ns1__GetAhsBarcode_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAhsMo_DEFINED
#define SOAP_TYPE___ns1__GetAhsMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAhsMo(struct soap*, struct __ns1__GetAhsMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAhsMo(struct soap*, const struct __ns1__GetAhsMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAhsMo(struct soap*, const char*, int, const struct __ns1__GetAhsMo *, const char*);
SOAP_FMAC3 struct __ns1__GetAhsMo * SOAP_FMAC4 soap_in___ns1__GetAhsMo(struct soap*, const char*, struct __ns1__GetAhsMo *, const char*);
SOAP_FMAC1 struct __ns1__GetAhsMo * SOAP_FMAC2 soap_instantiate___ns1__GetAhsMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAhsMo * soap_new___ns1__GetAhsMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAhsMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAhsMo * soap_new_req___ns1__GetAhsMo(
	struct soap *soap)
{
	struct __ns1__GetAhsMo *_p = soap_new___ns1__GetAhsMo(soap);
	if (_p)
	{	soap_default___ns1__GetAhsMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAhsMo * soap_new_set___ns1__GetAhsMo(
	struct soap *soap,
	_ns1__GetAhsMo *ns1__GetAhsMo)
{
	struct __ns1__GetAhsMo *_p = soap_new___ns1__GetAhsMo(soap);
	if (_p)
	{	soap_default___ns1__GetAhsMo(soap, _p);
		_p->ns1__GetAhsMo = ns1__GetAhsMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAhsMo(struct soap*, const struct __ns1__GetAhsMo *, const char*, const char*);

inline int soap_write___ns1__GetAhsMo(struct soap *soap, struct __ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAhsMo(soap, p), 0) || soap_put___ns1__GetAhsMo(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAhsMo(struct soap *soap, const char *URL, struct __ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsMo(soap, p), 0) || soap_put___ns1__GetAhsMo(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAhsMo(struct soap *soap, const char *URL, struct __ns1__GetAhsMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsMo(soap, p), 0) || soap_put___ns1__GetAhsMo(soap, p, "-ns1:GetAhsMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAhsMo * SOAP_FMAC4 soap_get___ns1__GetAhsMo(struct soap*, struct __ns1__GetAhsMo *, const char*, const char*);

inline int soap_read___ns1__GetAhsMo(struct soap *soap, struct __ns1__GetAhsMo *p)
{
	if (p)
	{	soap_default___ns1__GetAhsMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAhsMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAhsMo(struct soap *soap, const char *URL, struct __ns1__GetAhsMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAhsMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAhsMo(struct soap *soap, struct __ns1__GetAhsMo *p)
{
	if (soap_read___ns1__GetAhsMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackWeigth_DEFINED
#define SOAP_TYPE___ns1__GetPackWeigth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackWeigth(struct soap*, struct __ns1__GetPackWeigth *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackWeigth(struct soap*, const struct __ns1__GetPackWeigth *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackWeigth(struct soap*, const char*, int, const struct __ns1__GetPackWeigth *, const char*);
SOAP_FMAC3 struct __ns1__GetPackWeigth * SOAP_FMAC4 soap_in___ns1__GetPackWeigth(struct soap*, const char*, struct __ns1__GetPackWeigth *, const char*);
SOAP_FMAC1 struct __ns1__GetPackWeigth * SOAP_FMAC2 soap_instantiate___ns1__GetPackWeigth(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackWeigth * soap_new___ns1__GetPackWeigth(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackWeigth(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackWeigth * soap_new_req___ns1__GetPackWeigth(
	struct soap *soap)
{
	struct __ns1__GetPackWeigth *_p = soap_new___ns1__GetPackWeigth(soap);
	if (_p)
	{	soap_default___ns1__GetPackWeigth(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackWeigth * soap_new_set___ns1__GetPackWeigth(
	struct soap *soap,
	_ns1__GetPackWeigth *ns1__GetPackWeigth)
{
	struct __ns1__GetPackWeigth *_p = soap_new___ns1__GetPackWeigth(soap);
	if (_p)
	{	soap_default___ns1__GetPackWeigth(soap, _p);
		_p->ns1__GetPackWeigth = ns1__GetPackWeigth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackWeigth(struct soap*, const struct __ns1__GetPackWeigth *, const char*, const char*);

inline int soap_write___ns1__GetPackWeigth(struct soap *soap, struct __ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackWeigth(soap, p), 0) || soap_put___ns1__GetPackWeigth(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackWeigth(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackWeigth(soap, p), 0) || soap_put___ns1__GetPackWeigth(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackWeigth(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackWeigth(soap, p), 0) || soap_put___ns1__GetPackWeigth(soap, p, "-ns1:GetPackWeigth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackWeigth * SOAP_FMAC4 soap_get___ns1__GetPackWeigth(struct soap*, struct __ns1__GetPackWeigth *, const char*, const char*);

inline int soap_read___ns1__GetPackWeigth(struct soap *soap, struct __ns1__GetPackWeigth *p)
{
	if (p)
	{	soap_default___ns1__GetPackWeigth(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackWeigth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackWeigth(struct soap *soap, const char *URL, struct __ns1__GetPackWeigth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackWeigth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackWeigth(struct soap *soap, struct __ns1__GetPackWeigth *p)
{
	if (soap_read___ns1__GetPackWeigth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackStation_DEFINED
#define SOAP_TYPE___ns1__GetPackStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackStation(struct soap*, struct __ns1__GetPackStation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackStation(struct soap*, const struct __ns1__GetPackStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackStation(struct soap*, const char*, int, const struct __ns1__GetPackStation *, const char*);
SOAP_FMAC3 struct __ns1__GetPackStation * SOAP_FMAC4 soap_in___ns1__GetPackStation(struct soap*, const char*, struct __ns1__GetPackStation *, const char*);
SOAP_FMAC1 struct __ns1__GetPackStation * SOAP_FMAC2 soap_instantiate___ns1__GetPackStation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackStation * soap_new___ns1__GetPackStation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackStation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackStation * soap_new_req___ns1__GetPackStation(
	struct soap *soap)
{
	struct __ns1__GetPackStation *_p = soap_new___ns1__GetPackStation(soap);
	if (_p)
	{	soap_default___ns1__GetPackStation(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackStation * soap_new_set___ns1__GetPackStation(
	struct soap *soap,
	_ns1__GetPackStation *ns1__GetPackStation)
{
	struct __ns1__GetPackStation *_p = soap_new___ns1__GetPackStation(soap);
	if (_p)
	{	soap_default___ns1__GetPackStation(soap, _p);
		_p->ns1__GetPackStation = ns1__GetPackStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackStation(struct soap*, const struct __ns1__GetPackStation *, const char*, const char*);

inline int soap_write___ns1__GetPackStation(struct soap *soap, struct __ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackStation(soap, p), 0) || soap_put___ns1__GetPackStation(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackStation(struct soap *soap, const char *URL, struct __ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackStation(soap, p), 0) || soap_put___ns1__GetPackStation(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackStation(struct soap *soap, const char *URL, struct __ns1__GetPackStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackStation(soap, p), 0) || soap_put___ns1__GetPackStation(soap, p, "-ns1:GetPackStation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackStation * SOAP_FMAC4 soap_get___ns1__GetPackStation(struct soap*, struct __ns1__GetPackStation *, const char*, const char*);

inline int soap_read___ns1__GetPackStation(struct soap *soap, struct __ns1__GetPackStation *p)
{
	if (p)
	{	soap_default___ns1__GetPackStation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackStation(struct soap *soap, const char *URL, struct __ns1__GetPackStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackStation(struct soap *soap, struct __ns1__GetPackStation *p)
{
	if (soap_read___ns1__GetPackStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetPallentForWMS_DEFINED
#define SOAP_TYPE___ns1__SetPallentForWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetPallentForWMS(struct soap*, struct __ns1__SetPallentForWMS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetPallentForWMS(struct soap*, const struct __ns1__SetPallentForWMS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetPallentForWMS(struct soap*, const char*, int, const struct __ns1__SetPallentForWMS *, const char*);
SOAP_FMAC3 struct __ns1__SetPallentForWMS * SOAP_FMAC4 soap_in___ns1__SetPallentForWMS(struct soap*, const char*, struct __ns1__SetPallentForWMS *, const char*);
SOAP_FMAC1 struct __ns1__SetPallentForWMS * SOAP_FMAC2 soap_instantiate___ns1__SetPallentForWMS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetPallentForWMS * soap_new___ns1__SetPallentForWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetPallentForWMS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetPallentForWMS * soap_new_req___ns1__SetPallentForWMS(
	struct soap *soap)
{
	struct __ns1__SetPallentForWMS *_p = soap_new___ns1__SetPallentForWMS(soap);
	if (_p)
	{	soap_default___ns1__SetPallentForWMS(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetPallentForWMS * soap_new_set___ns1__SetPallentForWMS(
	struct soap *soap,
	_ns1__SetPallentForWMS *ns1__SetPallentForWMS)
{
	struct __ns1__SetPallentForWMS *_p = soap_new___ns1__SetPallentForWMS(soap);
	if (_p)
	{	soap_default___ns1__SetPallentForWMS(soap, _p);
		_p->ns1__SetPallentForWMS = ns1__SetPallentForWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetPallentForWMS(struct soap*, const struct __ns1__SetPallentForWMS *, const char*, const char*);

inline int soap_write___ns1__SetPallentForWMS(struct soap *soap, struct __ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetPallentForWMS(soap, p), 0) || soap_put___ns1__SetPallentForWMS(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetPallentForWMS(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetPallentForWMS(soap, p), 0) || soap_put___ns1__SetPallentForWMS(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetPallentForWMS(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetPallentForWMS(soap, p), 0) || soap_put___ns1__SetPallentForWMS(soap, p, "-ns1:SetPallentForWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetPallentForWMS * SOAP_FMAC4 soap_get___ns1__SetPallentForWMS(struct soap*, struct __ns1__SetPallentForWMS *, const char*, const char*);

inline int soap_read___ns1__SetPallentForWMS(struct soap *soap, struct __ns1__SetPallentForWMS *p)
{
	if (p)
	{	soap_default___ns1__SetPallentForWMS(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetPallentForWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetPallentForWMS(struct soap *soap, const char *URL, struct __ns1__SetPallentForWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetPallentForWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetPallentForWMS(struct soap *soap, struct __ns1__SetPallentForWMS *p)
{
	if (soap_read___ns1__SetPallentForWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPallentToWMS_DEFINED
#define SOAP_TYPE___ns1__GetPallentToWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPallentToWMS(struct soap*, struct __ns1__GetPallentToWMS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPallentToWMS(struct soap*, const struct __ns1__GetPallentToWMS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPallentToWMS(struct soap*, const char*, int, const struct __ns1__GetPallentToWMS *, const char*);
SOAP_FMAC3 struct __ns1__GetPallentToWMS * SOAP_FMAC4 soap_in___ns1__GetPallentToWMS(struct soap*, const char*, struct __ns1__GetPallentToWMS *, const char*);
SOAP_FMAC1 struct __ns1__GetPallentToWMS * SOAP_FMAC2 soap_instantiate___ns1__GetPallentToWMS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPallentToWMS * soap_new___ns1__GetPallentToWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPallentToWMS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPallentToWMS * soap_new_req___ns1__GetPallentToWMS(
	struct soap *soap)
{
	struct __ns1__GetPallentToWMS *_p = soap_new___ns1__GetPallentToWMS(soap);
	if (_p)
	{	soap_default___ns1__GetPallentToWMS(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPallentToWMS * soap_new_set___ns1__GetPallentToWMS(
	struct soap *soap,
	_ns1__GetPallentToWMS *ns1__GetPallentToWMS)
{
	struct __ns1__GetPallentToWMS *_p = soap_new___ns1__GetPallentToWMS(soap);
	if (_p)
	{	soap_default___ns1__GetPallentToWMS(soap, _p);
		_p->ns1__GetPallentToWMS = ns1__GetPallentToWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPallentToWMS(struct soap*, const struct __ns1__GetPallentToWMS *, const char*, const char*);

inline int soap_write___ns1__GetPallentToWMS(struct soap *soap, struct __ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPallentToWMS(soap, p), 0) || soap_put___ns1__GetPallentToWMS(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPallentToWMS(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPallentToWMS(soap, p), 0) || soap_put___ns1__GetPallentToWMS(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPallentToWMS(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPallentToWMS(soap, p), 0) || soap_put___ns1__GetPallentToWMS(soap, p, "-ns1:GetPallentToWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPallentToWMS * SOAP_FMAC4 soap_get___ns1__GetPallentToWMS(struct soap*, struct __ns1__GetPallentToWMS *, const char*, const char*);

inline int soap_read___ns1__GetPallentToWMS(struct soap *soap, struct __ns1__GetPallentToWMS *p)
{
	if (p)
	{	soap_default___ns1__GetPallentToWMS(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPallentToWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPallentToWMS(struct soap *soap, const char *URL, struct __ns1__GetPallentToWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPallentToWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPallentToWMS(struct soap *soap, struct __ns1__GetPallentToWMS *p)
{
	if (soap_read___ns1__GetPallentToWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPackToWMS_DEFINED
#define SOAP_TYPE___ns1__GetPackToWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPackToWMS(struct soap*, struct __ns1__GetPackToWMS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPackToWMS(struct soap*, const struct __ns1__GetPackToWMS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPackToWMS(struct soap*, const char*, int, const struct __ns1__GetPackToWMS *, const char*);
SOAP_FMAC3 struct __ns1__GetPackToWMS * SOAP_FMAC4 soap_in___ns1__GetPackToWMS(struct soap*, const char*, struct __ns1__GetPackToWMS *, const char*);
SOAP_FMAC1 struct __ns1__GetPackToWMS * SOAP_FMAC2 soap_instantiate___ns1__GetPackToWMS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPackToWMS * soap_new___ns1__GetPackToWMS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPackToWMS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPackToWMS * soap_new_req___ns1__GetPackToWMS(
	struct soap *soap)
{
	struct __ns1__GetPackToWMS *_p = soap_new___ns1__GetPackToWMS(soap);
	if (_p)
	{	soap_default___ns1__GetPackToWMS(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPackToWMS * soap_new_set___ns1__GetPackToWMS(
	struct soap *soap,
	_ns1__GetPackToWMS *ns1__GetPackToWMS)
{
	struct __ns1__GetPackToWMS *_p = soap_new___ns1__GetPackToWMS(soap);
	if (_p)
	{	soap_default___ns1__GetPackToWMS(soap, _p);
		_p->ns1__GetPackToWMS = ns1__GetPackToWMS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPackToWMS(struct soap*, const struct __ns1__GetPackToWMS *, const char*, const char*);

inline int soap_write___ns1__GetPackToWMS(struct soap *soap, struct __ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPackToWMS(soap, p), 0) || soap_put___ns1__GetPackToWMS(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPackToWMS(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackToWMS(soap, p), 0) || soap_put___ns1__GetPackToWMS(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPackToWMS(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPackToWMS(soap, p), 0) || soap_put___ns1__GetPackToWMS(soap, p, "-ns1:GetPackToWMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPackToWMS * SOAP_FMAC4 soap_get___ns1__GetPackToWMS(struct soap*, struct __ns1__GetPackToWMS *, const char*, const char*);

inline int soap_read___ns1__GetPackToWMS(struct soap *soap, struct __ns1__GetPackToWMS *p)
{
	if (p)
	{	soap_default___ns1__GetPackToWMS(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPackToWMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPackToWMS(struct soap *soap, const char *URL, struct __ns1__GetPackToWMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPackToWMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPackToWMS(struct soap *soap, struct __ns1__GetPackToWMS *p)
{
	if (soap_read___ns1__GetPackToWMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetWeightSet_DEFINED
#define SOAP_TYPE___ns1__GetWeightSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWeightSet(struct soap*, struct __ns1__GetWeightSet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWeightSet(struct soap*, const struct __ns1__GetWeightSet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWeightSet(struct soap*, const char*, int, const struct __ns1__GetWeightSet *, const char*);
SOAP_FMAC3 struct __ns1__GetWeightSet * SOAP_FMAC4 soap_in___ns1__GetWeightSet(struct soap*, const char*, struct __ns1__GetWeightSet *, const char*);
SOAP_FMAC1 struct __ns1__GetWeightSet * SOAP_FMAC2 soap_instantiate___ns1__GetWeightSet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWeightSet * soap_new___ns1__GetWeightSet(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWeightSet(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWeightSet * soap_new_req___ns1__GetWeightSet(
	struct soap *soap)
{
	struct __ns1__GetWeightSet *_p = soap_new___ns1__GetWeightSet(soap);
	if (_p)
	{	soap_default___ns1__GetWeightSet(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWeightSet * soap_new_set___ns1__GetWeightSet(
	struct soap *soap,
	_ns1__GetWeightSet *ns1__GetWeightSet)
{
	struct __ns1__GetWeightSet *_p = soap_new___ns1__GetWeightSet(soap);
	if (_p)
	{	soap_default___ns1__GetWeightSet(soap, _p);
		_p->ns1__GetWeightSet = ns1__GetWeightSet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWeightSet(struct soap*, const struct __ns1__GetWeightSet *, const char*, const char*);

inline int soap_write___ns1__GetWeightSet(struct soap *soap, struct __ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetWeightSet(soap, p), 0) || soap_put___ns1__GetWeightSet(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWeightSet(struct soap *soap, const char *URL, struct __ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetWeightSet(soap, p), 0) || soap_put___ns1__GetWeightSet(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWeightSet(struct soap *soap, const char *URL, struct __ns1__GetWeightSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetWeightSet(soap, p), 0) || soap_put___ns1__GetWeightSet(soap, p, "-ns1:GetWeightSet", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWeightSet * SOAP_FMAC4 soap_get___ns1__GetWeightSet(struct soap*, struct __ns1__GetWeightSet *, const char*, const char*);

inline int soap_read___ns1__GetWeightSet(struct soap *soap, struct __ns1__GetWeightSet *p)
{
	if (p)
	{	soap_default___ns1__GetWeightSet(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetWeightSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWeightSet(struct soap *soap, const char *URL, struct __ns1__GetWeightSet *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetWeightSet(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetWeightSet(struct soap *soap, struct __ns1__GetWeightSet *p)
{
	if (soap_read___ns1__GetWeightSet(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelLnkSN_DEFINED
#define SOAP_TYPE___ns1__CancelLnkSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelLnkSN(struct soap*, struct __ns1__CancelLnkSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelLnkSN(struct soap*, const struct __ns1__CancelLnkSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelLnkSN(struct soap*, const char*, int, const struct __ns1__CancelLnkSN *, const char*);
SOAP_FMAC3 struct __ns1__CancelLnkSN * SOAP_FMAC4 soap_in___ns1__CancelLnkSN(struct soap*, const char*, struct __ns1__CancelLnkSN *, const char*);
SOAP_FMAC1 struct __ns1__CancelLnkSN * SOAP_FMAC2 soap_instantiate___ns1__CancelLnkSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelLnkSN * soap_new___ns1__CancelLnkSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelLnkSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelLnkSN * soap_new_req___ns1__CancelLnkSN(
	struct soap *soap)
{
	struct __ns1__CancelLnkSN *_p = soap_new___ns1__CancelLnkSN(soap);
	if (_p)
	{	soap_default___ns1__CancelLnkSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelLnkSN * soap_new_set___ns1__CancelLnkSN(
	struct soap *soap,
	_ns1__CancelLnkSN *ns1__CancelLnkSN)
{
	struct __ns1__CancelLnkSN *_p = soap_new___ns1__CancelLnkSN(soap);
	if (_p)
	{	soap_default___ns1__CancelLnkSN(soap, _p);
		_p->ns1__CancelLnkSN = ns1__CancelLnkSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelLnkSN(struct soap*, const struct __ns1__CancelLnkSN *, const char*, const char*);

inline int soap_write___ns1__CancelLnkSN(struct soap *soap, struct __ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelLnkSN(soap, p), 0) || soap_put___ns1__CancelLnkSN(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelLnkSN(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelLnkSN(soap, p), 0) || soap_put___ns1__CancelLnkSN(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelLnkSN(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelLnkSN(soap, p), 0) || soap_put___ns1__CancelLnkSN(soap, p, "-ns1:CancelLnkSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelLnkSN * SOAP_FMAC4 soap_get___ns1__CancelLnkSN(struct soap*, struct __ns1__CancelLnkSN *, const char*, const char*);

inline int soap_read___ns1__CancelLnkSN(struct soap *soap, struct __ns1__CancelLnkSN *p)
{
	if (p)
	{	soap_default___ns1__CancelLnkSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelLnkSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelLnkSN(struct soap *soap, const char *URL, struct __ns1__CancelLnkSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelLnkSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelLnkSN(struct soap *soap, struct __ns1__CancelLnkSN *p)
{
	if (soap_read___ns1__CancelLnkSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelGrillSN_DEFINED
#define SOAP_TYPE___ns1__CancelGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelGrillSN(struct soap*, struct __ns1__CancelGrillSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelGrillSN(struct soap*, const struct __ns1__CancelGrillSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelGrillSN(struct soap*, const char*, int, const struct __ns1__CancelGrillSN *, const char*);
SOAP_FMAC3 struct __ns1__CancelGrillSN * SOAP_FMAC4 soap_in___ns1__CancelGrillSN(struct soap*, const char*, struct __ns1__CancelGrillSN *, const char*);
SOAP_FMAC1 struct __ns1__CancelGrillSN * SOAP_FMAC2 soap_instantiate___ns1__CancelGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelGrillSN * soap_new___ns1__CancelGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelGrillSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelGrillSN * soap_new_req___ns1__CancelGrillSN(
	struct soap *soap)
{
	struct __ns1__CancelGrillSN *_p = soap_new___ns1__CancelGrillSN(soap);
	if (_p)
	{	soap_default___ns1__CancelGrillSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelGrillSN * soap_new_set___ns1__CancelGrillSN(
	struct soap *soap,
	_ns1__CancelGrillSN *ns1__CancelGrillSN)
{
	struct __ns1__CancelGrillSN *_p = soap_new___ns1__CancelGrillSN(soap);
	if (_p)
	{	soap_default___ns1__CancelGrillSN(soap, _p);
		_p->ns1__CancelGrillSN = ns1__CancelGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelGrillSN(struct soap*, const struct __ns1__CancelGrillSN *, const char*, const char*);

inline int soap_write___ns1__CancelGrillSN(struct soap *soap, struct __ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelGrillSN(soap, p), 0) || soap_put___ns1__CancelGrillSN(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelGrillSN(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelGrillSN(soap, p), 0) || soap_put___ns1__CancelGrillSN(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelGrillSN(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelGrillSN(soap, p), 0) || soap_put___ns1__CancelGrillSN(soap, p, "-ns1:CancelGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelGrillSN * SOAP_FMAC4 soap_get___ns1__CancelGrillSN(struct soap*, struct __ns1__CancelGrillSN *, const char*, const char*);

inline int soap_read___ns1__CancelGrillSN(struct soap *soap, struct __ns1__CancelGrillSN *p)
{
	if (p)
	{	soap_default___ns1__CancelGrillSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelGrillSN(struct soap *soap, const char *URL, struct __ns1__CancelGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelGrillSN(struct soap *soap, struct __ns1__CancelGrillSN *p)
{
	if (soap_read___ns1__CancelGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OutGrillBySN_DEFINED
#define SOAP_TYPE___ns1__OutGrillBySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutGrillBySN(struct soap*, struct __ns1__OutGrillBySN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutGrillBySN(struct soap*, const struct __ns1__OutGrillBySN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutGrillBySN(struct soap*, const char*, int, const struct __ns1__OutGrillBySN *, const char*);
SOAP_FMAC3 struct __ns1__OutGrillBySN * SOAP_FMAC4 soap_in___ns1__OutGrillBySN(struct soap*, const char*, struct __ns1__OutGrillBySN *, const char*);
SOAP_FMAC1 struct __ns1__OutGrillBySN * SOAP_FMAC2 soap_instantiate___ns1__OutGrillBySN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutGrillBySN * soap_new___ns1__OutGrillBySN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutGrillBySN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutGrillBySN * soap_new_req___ns1__OutGrillBySN(
	struct soap *soap)
{
	struct __ns1__OutGrillBySN *_p = soap_new___ns1__OutGrillBySN(soap);
	if (_p)
	{	soap_default___ns1__OutGrillBySN(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutGrillBySN * soap_new_set___ns1__OutGrillBySN(
	struct soap *soap,
	_ns1__OutGrillBySN *ns1__OutGrillBySN)
{
	struct __ns1__OutGrillBySN *_p = soap_new___ns1__OutGrillBySN(soap);
	if (_p)
	{	soap_default___ns1__OutGrillBySN(soap, _p);
		_p->ns1__OutGrillBySN = ns1__OutGrillBySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutGrillBySN(struct soap*, const struct __ns1__OutGrillBySN *, const char*, const char*);

inline int soap_write___ns1__OutGrillBySN(struct soap *soap, struct __ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OutGrillBySN(soap, p), 0) || soap_put___ns1__OutGrillBySN(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutGrillBySN(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutGrillBySN(soap, p), 0) || soap_put___ns1__OutGrillBySN(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutGrillBySN(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutGrillBySN(soap, p), 0) || soap_put___ns1__OutGrillBySN(soap, p, "-ns1:OutGrillBySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutGrillBySN * SOAP_FMAC4 soap_get___ns1__OutGrillBySN(struct soap*, struct __ns1__OutGrillBySN *, const char*, const char*);

inline int soap_read___ns1__OutGrillBySN(struct soap *soap, struct __ns1__OutGrillBySN *p)
{
	if (p)
	{	soap_default___ns1__OutGrillBySN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OutGrillBySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutGrillBySN(struct soap *soap, const char *URL, struct __ns1__OutGrillBySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OutGrillBySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OutGrillBySN(struct soap *soap, struct __ns1__OutGrillBySN *p)
{
	if (soap_read___ns1__OutGrillBySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetGrillTime_DEFINED
#define SOAP_TYPE___ns1__GetGrillTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGrillTime(struct soap*, struct __ns1__GetGrillTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGrillTime(struct soap*, const struct __ns1__GetGrillTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGrillTime(struct soap*, const char*, int, const struct __ns1__GetGrillTime *, const char*);
SOAP_FMAC3 struct __ns1__GetGrillTime * SOAP_FMAC4 soap_in___ns1__GetGrillTime(struct soap*, const char*, struct __ns1__GetGrillTime *, const char*);
SOAP_FMAC1 struct __ns1__GetGrillTime * SOAP_FMAC2 soap_instantiate___ns1__GetGrillTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetGrillTime * soap_new___ns1__GetGrillTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetGrillTime(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetGrillTime * soap_new_req___ns1__GetGrillTime(
	struct soap *soap)
{
	struct __ns1__GetGrillTime *_p = soap_new___ns1__GetGrillTime(soap);
	if (_p)
	{	soap_default___ns1__GetGrillTime(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetGrillTime * soap_new_set___ns1__GetGrillTime(
	struct soap *soap,
	_ns1__GetGrillTime *ns1__GetGrillTime)
{
	struct __ns1__GetGrillTime *_p = soap_new___ns1__GetGrillTime(soap);
	if (_p)
	{	soap_default___ns1__GetGrillTime(soap, _p);
		_p->ns1__GetGrillTime = ns1__GetGrillTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGrillTime(struct soap*, const struct __ns1__GetGrillTime *, const char*, const char*);

inline int soap_write___ns1__GetGrillTime(struct soap *soap, struct __ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetGrillTime(soap, p), 0) || soap_put___ns1__GetGrillTime(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetGrillTime(struct soap *soap, const char *URL, struct __ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetGrillTime(soap, p), 0) || soap_put___ns1__GetGrillTime(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetGrillTime(struct soap *soap, const char *URL, struct __ns1__GetGrillTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetGrillTime(soap, p), 0) || soap_put___ns1__GetGrillTime(soap, p, "-ns1:GetGrillTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetGrillTime * SOAP_FMAC4 soap_get___ns1__GetGrillTime(struct soap*, struct __ns1__GetGrillTime *, const char*, const char*);

inline int soap_read___ns1__GetGrillTime(struct soap *soap, struct __ns1__GetGrillTime *p)
{
	if (p)
	{	soap_default___ns1__GetGrillTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetGrillTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetGrillTime(struct soap *soap, const char *URL, struct __ns1__GetGrillTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetGrillTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetGrillTime(struct soap *soap, struct __ns1__GetGrillTime *p)
{
	if (soap_read___ns1__GetGrillTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsGrillBySN_DEFINED
#define SOAP_TYPE___ns1__InsGrillBySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsGrillBySN(struct soap*, struct __ns1__InsGrillBySN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsGrillBySN(struct soap*, const struct __ns1__InsGrillBySN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsGrillBySN(struct soap*, const char*, int, const struct __ns1__InsGrillBySN *, const char*);
SOAP_FMAC3 struct __ns1__InsGrillBySN * SOAP_FMAC4 soap_in___ns1__InsGrillBySN(struct soap*, const char*, struct __ns1__InsGrillBySN *, const char*);
SOAP_FMAC1 struct __ns1__InsGrillBySN * SOAP_FMAC2 soap_instantiate___ns1__InsGrillBySN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsGrillBySN * soap_new___ns1__InsGrillBySN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsGrillBySN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsGrillBySN * soap_new_req___ns1__InsGrillBySN(
	struct soap *soap)
{
	struct __ns1__InsGrillBySN *_p = soap_new___ns1__InsGrillBySN(soap);
	if (_p)
	{	soap_default___ns1__InsGrillBySN(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsGrillBySN * soap_new_set___ns1__InsGrillBySN(
	struct soap *soap,
	_ns1__InsGrillBySN *ns1__InsGrillBySN)
{
	struct __ns1__InsGrillBySN *_p = soap_new___ns1__InsGrillBySN(soap);
	if (_p)
	{	soap_default___ns1__InsGrillBySN(soap, _p);
		_p->ns1__InsGrillBySN = ns1__InsGrillBySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsGrillBySN(struct soap*, const struct __ns1__InsGrillBySN *, const char*, const char*);

inline int soap_write___ns1__InsGrillBySN(struct soap *soap, struct __ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsGrillBySN(soap, p), 0) || soap_put___ns1__InsGrillBySN(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsGrillBySN(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsGrillBySN(soap, p), 0) || soap_put___ns1__InsGrillBySN(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsGrillBySN(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsGrillBySN(soap, p), 0) || soap_put___ns1__InsGrillBySN(soap, p, "-ns1:InsGrillBySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsGrillBySN * SOAP_FMAC4 soap_get___ns1__InsGrillBySN(struct soap*, struct __ns1__InsGrillBySN *, const char*, const char*);

inline int soap_read___ns1__InsGrillBySN(struct soap *soap, struct __ns1__InsGrillBySN *p)
{
	if (p)
	{	soap_default___ns1__InsGrillBySN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsGrillBySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsGrillBySN(struct soap *soap, const char *URL, struct __ns1__InsGrillBySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsGrillBySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsGrillBySN(struct soap *soap, struct __ns1__InsGrillBySN *p)
{
	if (soap_read___ns1__InsGrillBySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseGrillSN_DEFINED
#define SOAP_TYPE___ns1__CloseGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseGrillSN(struct soap*, struct __ns1__CloseGrillSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseGrillSN(struct soap*, const struct __ns1__CloseGrillSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseGrillSN(struct soap*, const char*, int, const struct __ns1__CloseGrillSN *, const char*);
SOAP_FMAC3 struct __ns1__CloseGrillSN * SOAP_FMAC4 soap_in___ns1__CloseGrillSN(struct soap*, const char*, struct __ns1__CloseGrillSN *, const char*);
SOAP_FMAC1 struct __ns1__CloseGrillSN * SOAP_FMAC2 soap_instantiate___ns1__CloseGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseGrillSN * soap_new___ns1__CloseGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseGrillSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseGrillSN * soap_new_req___ns1__CloseGrillSN(
	struct soap *soap)
{
	struct __ns1__CloseGrillSN *_p = soap_new___ns1__CloseGrillSN(soap);
	if (_p)
	{	soap_default___ns1__CloseGrillSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseGrillSN * soap_new_set___ns1__CloseGrillSN(
	struct soap *soap,
	_ns1__CloseGrillSN *ns1__CloseGrillSN)
{
	struct __ns1__CloseGrillSN *_p = soap_new___ns1__CloseGrillSN(soap);
	if (_p)
	{	soap_default___ns1__CloseGrillSN(soap, _p);
		_p->ns1__CloseGrillSN = ns1__CloseGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseGrillSN(struct soap*, const struct __ns1__CloseGrillSN *, const char*, const char*);

inline int soap_write___ns1__CloseGrillSN(struct soap *soap, struct __ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseGrillSN(soap, p), 0) || soap_put___ns1__CloseGrillSN(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseGrillSN(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CloseGrillSN(soap, p), 0) || soap_put___ns1__CloseGrillSN(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseGrillSN(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CloseGrillSN(soap, p), 0) || soap_put___ns1__CloseGrillSN(soap, p, "-ns1:CloseGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseGrillSN * SOAP_FMAC4 soap_get___ns1__CloseGrillSN(struct soap*, struct __ns1__CloseGrillSN *, const char*, const char*);

inline int soap_read___ns1__CloseGrillSN(struct soap *soap, struct __ns1__CloseGrillSN *p)
{
	if (p)
	{	soap_default___ns1__CloseGrillSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseGrillSN(struct soap *soap, const char *URL, struct __ns1__CloseGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseGrillSN(struct soap *soap, struct __ns1__CloseGrillSN *p)
{
	if (soap_read___ns1__CloseGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkGrillSN_DEFINED
#define SOAP_TYPE___ns1__LnkGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkGrillSN(struct soap*, struct __ns1__LnkGrillSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkGrillSN(struct soap*, const struct __ns1__LnkGrillSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkGrillSN(struct soap*, const char*, int, const struct __ns1__LnkGrillSN *, const char*);
SOAP_FMAC3 struct __ns1__LnkGrillSN * SOAP_FMAC4 soap_in___ns1__LnkGrillSN(struct soap*, const char*, struct __ns1__LnkGrillSN *, const char*);
SOAP_FMAC1 struct __ns1__LnkGrillSN * SOAP_FMAC2 soap_instantiate___ns1__LnkGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkGrillSN * soap_new___ns1__LnkGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkGrillSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkGrillSN * soap_new_req___ns1__LnkGrillSN(
	struct soap *soap)
{
	struct __ns1__LnkGrillSN *_p = soap_new___ns1__LnkGrillSN(soap);
	if (_p)
	{	soap_default___ns1__LnkGrillSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkGrillSN * soap_new_set___ns1__LnkGrillSN(
	struct soap *soap,
	_ns1__LnkGrillSN *ns1__LnkGrillSN)
{
	struct __ns1__LnkGrillSN *_p = soap_new___ns1__LnkGrillSN(soap);
	if (_p)
	{	soap_default___ns1__LnkGrillSN(soap, _p);
		_p->ns1__LnkGrillSN = ns1__LnkGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkGrillSN(struct soap*, const struct __ns1__LnkGrillSN *, const char*, const char*);

inline int soap_write___ns1__LnkGrillSN(struct soap *soap, struct __ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkGrillSN(soap, p), 0) || soap_put___ns1__LnkGrillSN(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkGrillSN(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkGrillSN(soap, p), 0) || soap_put___ns1__LnkGrillSN(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkGrillSN(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkGrillSN(soap, p), 0) || soap_put___ns1__LnkGrillSN(soap, p, "-ns1:LnkGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkGrillSN * SOAP_FMAC4 soap_get___ns1__LnkGrillSN(struct soap*, struct __ns1__LnkGrillSN *, const char*, const char*);

inline int soap_read___ns1__LnkGrillSN(struct soap *soap, struct __ns1__LnkGrillSN *p)
{
	if (p)
	{	soap_default___ns1__LnkGrillSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkGrillSN(struct soap *soap, const char *URL, struct __ns1__LnkGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkGrillSN(struct soap *soap, struct __ns1__LnkGrillSN *p)
{
	if (soap_read___ns1__LnkGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkGrillSN_DEFINED
#define SOAP_TYPE___ns1__chkGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkGrillSN(struct soap*, struct __ns1__chkGrillSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkGrillSN(struct soap*, const struct __ns1__chkGrillSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkGrillSN(struct soap*, const char*, int, const struct __ns1__chkGrillSN *, const char*);
SOAP_FMAC3 struct __ns1__chkGrillSN * SOAP_FMAC4 soap_in___ns1__chkGrillSN(struct soap*, const char*, struct __ns1__chkGrillSN *, const char*);
SOAP_FMAC1 struct __ns1__chkGrillSN * SOAP_FMAC2 soap_instantiate___ns1__chkGrillSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkGrillSN * soap_new___ns1__chkGrillSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkGrillSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkGrillSN * soap_new_req___ns1__chkGrillSN(
	struct soap *soap)
{
	struct __ns1__chkGrillSN *_p = soap_new___ns1__chkGrillSN(soap);
	if (_p)
	{	soap_default___ns1__chkGrillSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkGrillSN * soap_new_set___ns1__chkGrillSN(
	struct soap *soap,
	_ns1__chkGrillSN *ns1__chkGrillSN)
{
	struct __ns1__chkGrillSN *_p = soap_new___ns1__chkGrillSN(soap);
	if (_p)
	{	soap_default___ns1__chkGrillSN(soap, _p);
		_p->ns1__chkGrillSN = ns1__chkGrillSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkGrillSN(struct soap*, const struct __ns1__chkGrillSN *, const char*, const char*);

inline int soap_write___ns1__chkGrillSN(struct soap *soap, struct __ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkGrillSN(soap, p), 0) || soap_put___ns1__chkGrillSN(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkGrillSN(struct soap *soap, const char *URL, struct __ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkGrillSN(soap, p), 0) || soap_put___ns1__chkGrillSN(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkGrillSN(struct soap *soap, const char *URL, struct __ns1__chkGrillSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkGrillSN(soap, p), 0) || soap_put___ns1__chkGrillSN(soap, p, "-ns1:chkGrillSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkGrillSN * SOAP_FMAC4 soap_get___ns1__chkGrillSN(struct soap*, struct __ns1__chkGrillSN *, const char*, const char*);

inline int soap_read___ns1__chkGrillSN(struct soap *soap, struct __ns1__chkGrillSN *p)
{
	if (p)
	{	soap_default___ns1__chkGrillSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkGrillSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkGrillSN(struct soap *soap, const char *URL, struct __ns1__chkGrillSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkGrillSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkGrillSN(struct soap *soap, struct __ns1__chkGrillSN *p)
{
	if (soap_read___ns1__chkGrillSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkSideSN_DEFINED
#define SOAP_TYPE___ns1__LnkSideSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkSideSN(struct soap*, struct __ns1__LnkSideSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkSideSN(struct soap*, const struct __ns1__LnkSideSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkSideSN(struct soap*, const char*, int, const struct __ns1__LnkSideSN *, const char*);
SOAP_FMAC3 struct __ns1__LnkSideSN * SOAP_FMAC4 soap_in___ns1__LnkSideSN(struct soap*, const char*, struct __ns1__LnkSideSN *, const char*);
SOAP_FMAC1 struct __ns1__LnkSideSN * SOAP_FMAC2 soap_instantiate___ns1__LnkSideSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkSideSN * soap_new___ns1__LnkSideSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkSideSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkSideSN * soap_new_req___ns1__LnkSideSN(
	struct soap *soap)
{
	struct __ns1__LnkSideSN *_p = soap_new___ns1__LnkSideSN(soap);
	if (_p)
	{	soap_default___ns1__LnkSideSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkSideSN * soap_new_set___ns1__LnkSideSN(
	struct soap *soap,
	_ns1__LnkSideSN *ns1__LnkSideSN)
{
	struct __ns1__LnkSideSN *_p = soap_new___ns1__LnkSideSN(soap);
	if (_p)
	{	soap_default___ns1__LnkSideSN(soap, _p);
		_p->ns1__LnkSideSN = ns1__LnkSideSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkSideSN(struct soap*, const struct __ns1__LnkSideSN *, const char*, const char*);

inline int soap_write___ns1__LnkSideSN(struct soap *soap, struct __ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkSideSN(soap, p), 0) || soap_put___ns1__LnkSideSN(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkSideSN(struct soap *soap, const char *URL, struct __ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkSideSN(soap, p), 0) || soap_put___ns1__LnkSideSN(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkSideSN(struct soap *soap, const char *URL, struct __ns1__LnkSideSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkSideSN(soap, p), 0) || soap_put___ns1__LnkSideSN(soap, p, "-ns1:LnkSideSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkSideSN * SOAP_FMAC4 soap_get___ns1__LnkSideSN(struct soap*, struct __ns1__LnkSideSN *, const char*, const char*);

inline int soap_read___ns1__LnkSideSN(struct soap *soap, struct __ns1__LnkSideSN *p)
{
	if (p)
	{	soap_default___ns1__LnkSideSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkSideSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkSideSN(struct soap *soap, const char *URL, struct __ns1__LnkSideSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkSideSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkSideSN(struct soap *soap, struct __ns1__LnkSideSN *p)
{
	if (soap_read___ns1__LnkSideSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LnkZJSN_DEFINED
#define SOAP_TYPE___ns1__LnkZJSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LnkZJSN(struct soap*, struct __ns1__LnkZJSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LnkZJSN(struct soap*, const struct __ns1__LnkZJSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LnkZJSN(struct soap*, const char*, int, const struct __ns1__LnkZJSN *, const char*);
SOAP_FMAC3 struct __ns1__LnkZJSN * SOAP_FMAC4 soap_in___ns1__LnkZJSN(struct soap*, const char*, struct __ns1__LnkZJSN *, const char*);
SOAP_FMAC1 struct __ns1__LnkZJSN * SOAP_FMAC2 soap_instantiate___ns1__LnkZJSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LnkZJSN * soap_new___ns1__LnkZJSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LnkZJSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LnkZJSN * soap_new_req___ns1__LnkZJSN(
	struct soap *soap)
{
	struct __ns1__LnkZJSN *_p = soap_new___ns1__LnkZJSN(soap);
	if (_p)
	{	soap_default___ns1__LnkZJSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__LnkZJSN * soap_new_set___ns1__LnkZJSN(
	struct soap *soap,
	_ns1__LnkZJSN *ns1__LnkZJSN)
{
	struct __ns1__LnkZJSN *_p = soap_new___ns1__LnkZJSN(soap);
	if (_p)
	{	soap_default___ns1__LnkZJSN(soap, _p);
		_p->ns1__LnkZJSN = ns1__LnkZJSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LnkZJSN(struct soap*, const struct __ns1__LnkZJSN *, const char*, const char*);

inline int soap_write___ns1__LnkZJSN(struct soap *soap, struct __ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__LnkZJSN(soap, p), 0) || soap_put___ns1__LnkZJSN(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__LnkZJSN(struct soap *soap, const char *URL, struct __ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkZJSN(soap, p), 0) || soap_put___ns1__LnkZJSN(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__LnkZJSN(struct soap *soap, const char *URL, struct __ns1__LnkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__LnkZJSN(soap, p), 0) || soap_put___ns1__LnkZJSN(soap, p, "-ns1:LnkZJSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LnkZJSN * SOAP_FMAC4 soap_get___ns1__LnkZJSN(struct soap*, struct __ns1__LnkZJSN *, const char*, const char*);

inline int soap_read___ns1__LnkZJSN(struct soap *soap, struct __ns1__LnkZJSN *p)
{
	if (p)
	{	soap_default___ns1__LnkZJSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LnkZJSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__LnkZJSN(struct soap *soap, const char *URL, struct __ns1__LnkZJSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__LnkZJSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__LnkZJSN(struct soap *soap, struct __ns1__LnkZJSN *p)
{
	if (soap_read___ns1__LnkZJSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkZJSN_DEFINED
#define SOAP_TYPE___ns1__chkZJSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkZJSN(struct soap*, struct __ns1__chkZJSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkZJSN(struct soap*, const struct __ns1__chkZJSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkZJSN(struct soap*, const char*, int, const struct __ns1__chkZJSN *, const char*);
SOAP_FMAC3 struct __ns1__chkZJSN * SOAP_FMAC4 soap_in___ns1__chkZJSN(struct soap*, const char*, struct __ns1__chkZJSN *, const char*);
SOAP_FMAC1 struct __ns1__chkZJSN * SOAP_FMAC2 soap_instantiate___ns1__chkZJSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkZJSN * soap_new___ns1__chkZJSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkZJSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkZJSN * soap_new_req___ns1__chkZJSN(
	struct soap *soap)
{
	struct __ns1__chkZJSN *_p = soap_new___ns1__chkZJSN(soap);
	if (_p)
	{	soap_default___ns1__chkZJSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkZJSN * soap_new_set___ns1__chkZJSN(
	struct soap *soap,
	_ns1__chkZJSN *ns1__chkZJSN)
{
	struct __ns1__chkZJSN *_p = soap_new___ns1__chkZJSN(soap);
	if (_p)
	{	soap_default___ns1__chkZJSN(soap, _p);
		_p->ns1__chkZJSN = ns1__chkZJSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkZJSN(struct soap*, const struct __ns1__chkZJSN *, const char*, const char*);

inline int soap_write___ns1__chkZJSN(struct soap *soap, struct __ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkZJSN(soap, p), 0) || soap_put___ns1__chkZJSN(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkZJSN(struct soap *soap, const char *URL, struct __ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkZJSN(soap, p), 0) || soap_put___ns1__chkZJSN(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkZJSN(struct soap *soap, const char *URL, struct __ns1__chkZJSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkZJSN(soap, p), 0) || soap_put___ns1__chkZJSN(soap, p, "-ns1:chkZJSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkZJSN * SOAP_FMAC4 soap_get___ns1__chkZJSN(struct soap*, struct __ns1__chkZJSN *, const char*, const char*);

inline int soap_read___ns1__chkZJSN(struct soap *soap, struct __ns1__chkZJSN *p)
{
	if (p)
	{	soap_default___ns1__chkZJSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkZJSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkZJSN(struct soap *soap, const char *URL, struct __ns1__chkZJSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkZJSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkZJSN(struct soap *soap, struct __ns1__chkZJSN *p)
{
	if (soap_read___ns1__chkZJSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkDispensing_DEFINED
#define SOAP_TYPE___ns1__chkDispensing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkDispensing(struct soap*, struct __ns1__chkDispensing *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkDispensing(struct soap*, const struct __ns1__chkDispensing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkDispensing(struct soap*, const char*, int, const struct __ns1__chkDispensing *, const char*);
SOAP_FMAC3 struct __ns1__chkDispensing * SOAP_FMAC4 soap_in___ns1__chkDispensing(struct soap*, const char*, struct __ns1__chkDispensing *, const char*);
SOAP_FMAC1 struct __ns1__chkDispensing * SOAP_FMAC2 soap_instantiate___ns1__chkDispensing(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkDispensing * soap_new___ns1__chkDispensing(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkDispensing(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkDispensing * soap_new_req___ns1__chkDispensing(
	struct soap *soap)
{
	struct __ns1__chkDispensing *_p = soap_new___ns1__chkDispensing(soap);
	if (_p)
	{	soap_default___ns1__chkDispensing(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkDispensing * soap_new_set___ns1__chkDispensing(
	struct soap *soap,
	_ns1__chkDispensing *ns1__chkDispensing)
{
	struct __ns1__chkDispensing *_p = soap_new___ns1__chkDispensing(soap);
	if (_p)
	{	soap_default___ns1__chkDispensing(soap, _p);
		_p->ns1__chkDispensing = ns1__chkDispensing;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkDispensing(struct soap*, const struct __ns1__chkDispensing *, const char*, const char*);

inline int soap_write___ns1__chkDispensing(struct soap *soap, struct __ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkDispensing(soap, p), 0) || soap_put___ns1__chkDispensing(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkDispensing(struct soap *soap, const char *URL, struct __ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkDispensing(soap, p), 0) || soap_put___ns1__chkDispensing(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkDispensing(struct soap *soap, const char *URL, struct __ns1__chkDispensing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkDispensing(soap, p), 0) || soap_put___ns1__chkDispensing(soap, p, "-ns1:chkDispensing", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkDispensing * SOAP_FMAC4 soap_get___ns1__chkDispensing(struct soap*, struct __ns1__chkDispensing *, const char*, const char*);

inline int soap_read___ns1__chkDispensing(struct soap *soap, struct __ns1__chkDispensing *p)
{
	if (p)
	{	soap_default___ns1__chkDispensing(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkDispensing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkDispensing(struct soap *soap, const char *URL, struct __ns1__chkDispensing *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkDispensing(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkDispensing(struct soap *soap, struct __ns1__chkDispensing *p)
{
	if (soap_read___ns1__chkDispensing(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsIotTestData_DEFINED
#define SOAP_TYPE___ns1__InsIotTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsIotTestData(struct soap*, struct __ns1__InsIotTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsIotTestData(struct soap*, const struct __ns1__InsIotTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsIotTestData(struct soap*, const char*, int, const struct __ns1__InsIotTestData *, const char*);
SOAP_FMAC3 struct __ns1__InsIotTestData * SOAP_FMAC4 soap_in___ns1__InsIotTestData(struct soap*, const char*, struct __ns1__InsIotTestData *, const char*);
SOAP_FMAC1 struct __ns1__InsIotTestData * SOAP_FMAC2 soap_instantiate___ns1__InsIotTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsIotTestData * soap_new___ns1__InsIotTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsIotTestData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsIotTestData * soap_new_req___ns1__InsIotTestData(
	struct soap *soap)
{
	struct __ns1__InsIotTestData *_p = soap_new___ns1__InsIotTestData(soap);
	if (_p)
	{	soap_default___ns1__InsIotTestData(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsIotTestData * soap_new_set___ns1__InsIotTestData(
	struct soap *soap,
	_ns1__InsIotTestData *ns1__InsIotTestData)
{
	struct __ns1__InsIotTestData *_p = soap_new___ns1__InsIotTestData(soap);
	if (_p)
	{	soap_default___ns1__InsIotTestData(soap, _p);
		_p->ns1__InsIotTestData = ns1__InsIotTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsIotTestData(struct soap*, const struct __ns1__InsIotTestData *, const char*, const char*);

inline int soap_write___ns1__InsIotTestData(struct soap *soap, struct __ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsIotTestData(soap, p), 0) || soap_put___ns1__InsIotTestData(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsIotTestData(struct soap *soap, const char *URL, struct __ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotTestData(soap, p), 0) || soap_put___ns1__InsIotTestData(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsIotTestData(struct soap *soap, const char *URL, struct __ns1__InsIotTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotTestData(soap, p), 0) || soap_put___ns1__InsIotTestData(soap, p, "-ns1:InsIotTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsIotTestData * SOAP_FMAC4 soap_get___ns1__InsIotTestData(struct soap*, struct __ns1__InsIotTestData *, const char*, const char*);

inline int soap_read___ns1__InsIotTestData(struct soap *soap, struct __ns1__InsIotTestData *p)
{
	if (p)
	{	soap_default___ns1__InsIotTestData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsIotTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsIotTestData(struct soap *soap, const char *URL, struct __ns1__InsIotTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsIotTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsIotTestData(struct soap *soap, struct __ns1__InsIotTestData *p)
{
	if (soap_read___ns1__InsIotTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsIotMachineRec_DEFINED
#define SOAP_TYPE___ns1__InsIotMachineRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsIotMachineRec(struct soap*, struct __ns1__InsIotMachineRec *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsIotMachineRec(struct soap*, const struct __ns1__InsIotMachineRec *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsIotMachineRec(struct soap*, const char*, int, const struct __ns1__InsIotMachineRec *, const char*);
SOAP_FMAC3 struct __ns1__InsIotMachineRec * SOAP_FMAC4 soap_in___ns1__InsIotMachineRec(struct soap*, const char*, struct __ns1__InsIotMachineRec *, const char*);
SOAP_FMAC1 struct __ns1__InsIotMachineRec * SOAP_FMAC2 soap_instantiate___ns1__InsIotMachineRec(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsIotMachineRec * soap_new___ns1__InsIotMachineRec(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsIotMachineRec(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsIotMachineRec * soap_new_req___ns1__InsIotMachineRec(
	struct soap *soap)
{
	struct __ns1__InsIotMachineRec *_p = soap_new___ns1__InsIotMachineRec(soap);
	if (_p)
	{	soap_default___ns1__InsIotMachineRec(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsIotMachineRec * soap_new_set___ns1__InsIotMachineRec(
	struct soap *soap,
	_ns1__InsIotMachineRec *ns1__InsIotMachineRec)
{
	struct __ns1__InsIotMachineRec *_p = soap_new___ns1__InsIotMachineRec(soap);
	if (_p)
	{	soap_default___ns1__InsIotMachineRec(soap, _p);
		_p->ns1__InsIotMachineRec = ns1__InsIotMachineRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsIotMachineRec(struct soap*, const struct __ns1__InsIotMachineRec *, const char*, const char*);

inline int soap_write___ns1__InsIotMachineRec(struct soap *soap, struct __ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsIotMachineRec(soap, p), 0) || soap_put___ns1__InsIotMachineRec(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsIotMachineRec(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotMachineRec(soap, p), 0) || soap_put___ns1__InsIotMachineRec(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsIotMachineRec(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsIotMachineRec(soap, p), 0) || soap_put___ns1__InsIotMachineRec(soap, p, "-ns1:InsIotMachineRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsIotMachineRec * SOAP_FMAC4 soap_get___ns1__InsIotMachineRec(struct soap*, struct __ns1__InsIotMachineRec *, const char*, const char*);

inline int soap_read___ns1__InsIotMachineRec(struct soap *soap, struct __ns1__InsIotMachineRec *p)
{
	if (p)
	{	soap_default___ns1__InsIotMachineRec(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsIotMachineRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsIotMachineRec(struct soap *soap, const char *URL, struct __ns1__InsIotMachineRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsIotMachineRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsIotMachineRec(struct soap *soap, struct __ns1__InsIotMachineRec *p)
{
	if (soap_read___ns1__InsIotMachineRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLnkData_DEFINED
#define SOAP_TYPE___ns1__GetLnkData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLnkData(struct soap*, struct __ns1__GetLnkData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLnkData(struct soap*, const struct __ns1__GetLnkData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLnkData(struct soap*, const char*, int, const struct __ns1__GetLnkData *, const char*);
SOAP_FMAC3 struct __ns1__GetLnkData * SOAP_FMAC4 soap_in___ns1__GetLnkData(struct soap*, const char*, struct __ns1__GetLnkData *, const char*);
SOAP_FMAC1 struct __ns1__GetLnkData * SOAP_FMAC2 soap_instantiate___ns1__GetLnkData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLnkData * soap_new___ns1__GetLnkData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLnkData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLnkData * soap_new_req___ns1__GetLnkData(
	struct soap *soap)
{
	struct __ns1__GetLnkData *_p = soap_new___ns1__GetLnkData(soap);
	if (_p)
	{	soap_default___ns1__GetLnkData(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLnkData * soap_new_set___ns1__GetLnkData(
	struct soap *soap,
	_ns1__GetLnkData *ns1__GetLnkData)
{
	struct __ns1__GetLnkData *_p = soap_new___ns1__GetLnkData(soap);
	if (_p)
	{	soap_default___ns1__GetLnkData(soap, _p);
		_p->ns1__GetLnkData = ns1__GetLnkData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLnkData(struct soap*, const struct __ns1__GetLnkData *, const char*, const char*);

inline int soap_write___ns1__GetLnkData(struct soap *soap, struct __ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLnkData(soap, p), 0) || soap_put___ns1__GetLnkData(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLnkData(struct soap *soap, const char *URL, struct __ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLnkData(soap, p), 0) || soap_put___ns1__GetLnkData(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLnkData(struct soap *soap, const char *URL, struct __ns1__GetLnkData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLnkData(soap, p), 0) || soap_put___ns1__GetLnkData(soap, p, "-ns1:GetLnkData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLnkData * SOAP_FMAC4 soap_get___ns1__GetLnkData(struct soap*, struct __ns1__GetLnkData *, const char*, const char*);

inline int soap_read___ns1__GetLnkData(struct soap *soap, struct __ns1__GetLnkData *p)
{
	if (p)
	{	soap_default___ns1__GetLnkData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLnkData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLnkData(struct soap *soap, const char *URL, struct __ns1__GetLnkData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLnkData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLnkData(struct soap *soap, struct __ns1__GetLnkData *p)
{
	if (soap_read___ns1__GetLnkData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTestValue_DEFINED
#define SOAP_TYPE___ns1__GetTestValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTestValue(struct soap*, struct __ns1__GetTestValue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTestValue(struct soap*, const struct __ns1__GetTestValue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTestValue(struct soap*, const char*, int, const struct __ns1__GetTestValue *, const char*);
SOAP_FMAC3 struct __ns1__GetTestValue * SOAP_FMAC4 soap_in___ns1__GetTestValue(struct soap*, const char*, struct __ns1__GetTestValue *, const char*);
SOAP_FMAC1 struct __ns1__GetTestValue * SOAP_FMAC2 soap_instantiate___ns1__GetTestValue(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTestValue * soap_new___ns1__GetTestValue(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTestValue(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTestValue * soap_new_req___ns1__GetTestValue(
	struct soap *soap)
{
	struct __ns1__GetTestValue *_p = soap_new___ns1__GetTestValue(soap);
	if (_p)
	{	soap_default___ns1__GetTestValue(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTestValue * soap_new_set___ns1__GetTestValue(
	struct soap *soap,
	_ns1__GetTestValue *ns1__GetTestValue)
{
	struct __ns1__GetTestValue *_p = soap_new___ns1__GetTestValue(soap);
	if (_p)
	{	soap_default___ns1__GetTestValue(soap, _p);
		_p->ns1__GetTestValue = ns1__GetTestValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTestValue(struct soap*, const struct __ns1__GetTestValue *, const char*, const char*);

inline int soap_write___ns1__GetTestValue(struct soap *soap, struct __ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTestValue(soap, p), 0) || soap_put___ns1__GetTestValue(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTestValue(struct soap *soap, const char *URL, struct __ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValue(soap, p), 0) || soap_put___ns1__GetTestValue(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTestValue(struct soap *soap, const char *URL, struct __ns1__GetTestValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValue(soap, p), 0) || soap_put___ns1__GetTestValue(soap, p, "-ns1:GetTestValue", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTestValue * SOAP_FMAC4 soap_get___ns1__GetTestValue(struct soap*, struct __ns1__GetTestValue *, const char*, const char*);

inline int soap_read___ns1__GetTestValue(struct soap *soap, struct __ns1__GetTestValue *p)
{
	if (p)
	{	soap_default___ns1__GetTestValue(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTestValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTestValue(struct soap *soap, const char *URL, struct __ns1__GetTestValue *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTestValue(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTestValue(struct soap *soap, struct __ns1__GetTestValue *p)
{
	if (soap_read___ns1__GetTestValue(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMoBase_DEFINED
#define SOAP_TYPE___ns1__GetMoBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMoBase(struct soap*, struct __ns1__GetMoBase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMoBase(struct soap*, const struct __ns1__GetMoBase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMoBase(struct soap*, const char*, int, const struct __ns1__GetMoBase *, const char*);
SOAP_FMAC3 struct __ns1__GetMoBase * SOAP_FMAC4 soap_in___ns1__GetMoBase(struct soap*, const char*, struct __ns1__GetMoBase *, const char*);
SOAP_FMAC1 struct __ns1__GetMoBase * SOAP_FMAC2 soap_instantiate___ns1__GetMoBase(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMoBase * soap_new___ns1__GetMoBase(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMoBase(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMoBase * soap_new_req___ns1__GetMoBase(
	struct soap *soap)
{
	struct __ns1__GetMoBase *_p = soap_new___ns1__GetMoBase(soap);
	if (_p)
	{	soap_default___ns1__GetMoBase(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMoBase * soap_new_set___ns1__GetMoBase(
	struct soap *soap,
	_ns1__GetMoBase *ns1__GetMoBase)
{
	struct __ns1__GetMoBase *_p = soap_new___ns1__GetMoBase(soap);
	if (_p)
	{	soap_default___ns1__GetMoBase(soap, _p);
		_p->ns1__GetMoBase = ns1__GetMoBase;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMoBase(struct soap*, const struct __ns1__GetMoBase *, const char*, const char*);

inline int soap_write___ns1__GetMoBase(struct soap *soap, struct __ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMoBase(soap, p), 0) || soap_put___ns1__GetMoBase(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMoBase(struct soap *soap, const char *URL, struct __ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMoBase(soap, p), 0) || soap_put___ns1__GetMoBase(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMoBase(struct soap *soap, const char *URL, struct __ns1__GetMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMoBase(soap, p), 0) || soap_put___ns1__GetMoBase(soap, p, "-ns1:GetMoBase", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMoBase * SOAP_FMAC4 soap_get___ns1__GetMoBase(struct soap*, struct __ns1__GetMoBase *, const char*, const char*);

inline int soap_read___ns1__GetMoBase(struct soap *soap, struct __ns1__GetMoBase *p)
{
	if (p)
	{	soap_default___ns1__GetMoBase(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMoBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMoBase(struct soap *soap, const char *URL, struct __ns1__GetMoBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMoBase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMoBase(struct soap *soap, struct __ns1__GetMoBase *p)
{
	if (soap_read___ns1__GetMoBase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdSnRecInfo_DEFINED
#define SOAP_TYPE___ns1__UpdSnRecInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdSnRecInfo(struct soap*, struct __ns1__UpdSnRecInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdSnRecInfo(struct soap*, const struct __ns1__UpdSnRecInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdSnRecInfo(struct soap*, const char*, int, const struct __ns1__UpdSnRecInfo *, const char*);
SOAP_FMAC3 struct __ns1__UpdSnRecInfo * SOAP_FMAC4 soap_in___ns1__UpdSnRecInfo(struct soap*, const char*, struct __ns1__UpdSnRecInfo *, const char*);
SOAP_FMAC1 struct __ns1__UpdSnRecInfo * SOAP_FMAC2 soap_instantiate___ns1__UpdSnRecInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdSnRecInfo * soap_new___ns1__UpdSnRecInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdSnRecInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdSnRecInfo * soap_new_req___ns1__UpdSnRecInfo(
	struct soap *soap)
{
	struct __ns1__UpdSnRecInfo *_p = soap_new___ns1__UpdSnRecInfo(soap);
	if (_p)
	{	soap_default___ns1__UpdSnRecInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdSnRecInfo * soap_new_set___ns1__UpdSnRecInfo(
	struct soap *soap,
	_ns1__UpdSnRecInfo *ns1__UpdSnRecInfo)
{
	struct __ns1__UpdSnRecInfo *_p = soap_new___ns1__UpdSnRecInfo(soap);
	if (_p)
	{	soap_default___ns1__UpdSnRecInfo(soap, _p);
		_p->ns1__UpdSnRecInfo = ns1__UpdSnRecInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdSnRecInfo(struct soap*, const struct __ns1__UpdSnRecInfo *, const char*, const char*);

inline int soap_write___ns1__UpdSnRecInfo(struct soap *soap, struct __ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdSnRecInfo(soap, p), 0) || soap_put___ns1__UpdSnRecInfo(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdSnRecInfo(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdSnRecInfo(soap, p), 0) || soap_put___ns1__UpdSnRecInfo(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdSnRecInfo(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdSnRecInfo(soap, p), 0) || soap_put___ns1__UpdSnRecInfo(soap, p, "-ns1:UpdSnRecInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdSnRecInfo * SOAP_FMAC4 soap_get___ns1__UpdSnRecInfo(struct soap*, struct __ns1__UpdSnRecInfo *, const char*, const char*);

inline int soap_read___ns1__UpdSnRecInfo(struct soap *soap, struct __ns1__UpdSnRecInfo *p)
{
	if (p)
	{	soap_default___ns1__UpdSnRecInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdSnRecInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdSnRecInfo(struct soap *soap, const char *URL, struct __ns1__UpdSnRecInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdSnRecInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdSnRecInfo(struct soap *soap, struct __ns1__UpdSnRecInfo *p)
{
	if (soap_read___ns1__UpdSnRecInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsBoxInfo_DEFINED
#define SOAP_TYPE___ns1__InsBoxInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsBoxInfo(struct soap*, struct __ns1__InsBoxInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsBoxInfo(struct soap*, const struct __ns1__InsBoxInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsBoxInfo(struct soap*, const char*, int, const struct __ns1__InsBoxInfo *, const char*);
SOAP_FMAC3 struct __ns1__InsBoxInfo * SOAP_FMAC4 soap_in___ns1__InsBoxInfo(struct soap*, const char*, struct __ns1__InsBoxInfo *, const char*);
SOAP_FMAC1 struct __ns1__InsBoxInfo * SOAP_FMAC2 soap_instantiate___ns1__InsBoxInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsBoxInfo * soap_new___ns1__InsBoxInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsBoxInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsBoxInfo * soap_new_req___ns1__InsBoxInfo(
	struct soap *soap)
{
	struct __ns1__InsBoxInfo *_p = soap_new___ns1__InsBoxInfo(soap);
	if (_p)
	{	soap_default___ns1__InsBoxInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsBoxInfo * soap_new_set___ns1__InsBoxInfo(
	struct soap *soap,
	_ns1__InsBoxInfo *ns1__InsBoxInfo)
{
	struct __ns1__InsBoxInfo *_p = soap_new___ns1__InsBoxInfo(soap);
	if (_p)
	{	soap_default___ns1__InsBoxInfo(soap, _p);
		_p->ns1__InsBoxInfo = ns1__InsBoxInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsBoxInfo(struct soap*, const struct __ns1__InsBoxInfo *, const char*, const char*);

inline int soap_write___ns1__InsBoxInfo(struct soap *soap, struct __ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsBoxInfo(soap, p), 0) || soap_put___ns1__InsBoxInfo(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsBoxInfo(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxInfo(soap, p), 0) || soap_put___ns1__InsBoxInfo(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsBoxInfo(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxInfo(soap, p), 0) || soap_put___ns1__InsBoxInfo(soap, p, "-ns1:InsBoxInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsBoxInfo * SOAP_FMAC4 soap_get___ns1__InsBoxInfo(struct soap*, struct __ns1__InsBoxInfo *, const char*, const char*);

inline int soap_read___ns1__InsBoxInfo(struct soap *soap, struct __ns1__InsBoxInfo *p)
{
	if (p)
	{	soap_default___ns1__InsBoxInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsBoxInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsBoxInfo(struct soap *soap, const char *URL, struct __ns1__InsBoxInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsBoxInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsBoxInfo(struct soap *soap, struct __ns1__InsBoxInfo *p)
{
	if (soap_read___ns1__InsBoxInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsLnkOutSN_DEFINED
#define SOAP_TYPE___ns1__InsLnkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsLnkOutSN(struct soap*, struct __ns1__InsLnkOutSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsLnkOutSN(struct soap*, const struct __ns1__InsLnkOutSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsLnkOutSN(struct soap*, const char*, int, const struct __ns1__InsLnkOutSN *, const char*);
SOAP_FMAC3 struct __ns1__InsLnkOutSN * SOAP_FMAC4 soap_in___ns1__InsLnkOutSN(struct soap*, const char*, struct __ns1__InsLnkOutSN *, const char*);
SOAP_FMAC1 struct __ns1__InsLnkOutSN * SOAP_FMAC2 soap_instantiate___ns1__InsLnkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsLnkOutSN * soap_new___ns1__InsLnkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsLnkOutSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsLnkOutSN * soap_new_req___ns1__InsLnkOutSN(
	struct soap *soap)
{
	struct __ns1__InsLnkOutSN *_p = soap_new___ns1__InsLnkOutSN(soap);
	if (_p)
	{	soap_default___ns1__InsLnkOutSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsLnkOutSN * soap_new_set___ns1__InsLnkOutSN(
	struct soap *soap,
	_ns1__InsLnkOutSN *ns1__InsLnkOutSN)
{
	struct __ns1__InsLnkOutSN *_p = soap_new___ns1__InsLnkOutSN(soap);
	if (_p)
	{	soap_default___ns1__InsLnkOutSN(soap, _p);
		_p->ns1__InsLnkOutSN = ns1__InsLnkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsLnkOutSN(struct soap*, const struct __ns1__InsLnkOutSN *, const char*, const char*);

inline int soap_write___ns1__InsLnkOutSN(struct soap *soap, struct __ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsLnkOutSN(soap, p), 0) || soap_put___ns1__InsLnkOutSN(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsLnkOutSN(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLnkOutSN(soap, p), 0) || soap_put___ns1__InsLnkOutSN(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsLnkOutSN(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLnkOutSN(soap, p), 0) || soap_put___ns1__InsLnkOutSN(soap, p, "-ns1:InsLnkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsLnkOutSN * SOAP_FMAC4 soap_get___ns1__InsLnkOutSN(struct soap*, struct __ns1__InsLnkOutSN *, const char*, const char*);

inline int soap_read___ns1__InsLnkOutSN(struct soap *soap, struct __ns1__InsLnkOutSN *p)
{
	if (p)
	{	soap_default___ns1__InsLnkOutSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsLnkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsLnkOutSN(struct soap *soap, const char *URL, struct __ns1__InsLnkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsLnkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsLnkOutSN(struct soap *soap, struct __ns1__InsLnkOutSN *p)
{
	if (soap_read___ns1__InsLnkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNStationEmp_DEFINED
#define SOAP_TYPE___ns1__InsSNStationEmp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNStationEmp(struct soap*, struct __ns1__InsSNStationEmp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNStationEmp(struct soap*, const struct __ns1__InsSNStationEmp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNStationEmp(struct soap*, const char*, int, const struct __ns1__InsSNStationEmp *, const char*);
SOAP_FMAC3 struct __ns1__InsSNStationEmp * SOAP_FMAC4 soap_in___ns1__InsSNStationEmp(struct soap*, const char*, struct __ns1__InsSNStationEmp *, const char*);
SOAP_FMAC1 struct __ns1__InsSNStationEmp * SOAP_FMAC2 soap_instantiate___ns1__InsSNStationEmp(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNStationEmp * soap_new___ns1__InsSNStationEmp(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNStationEmp(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNStationEmp * soap_new_req___ns1__InsSNStationEmp(
	struct soap *soap)
{
	struct __ns1__InsSNStationEmp *_p = soap_new___ns1__InsSNStationEmp(soap);
	if (_p)
	{	soap_default___ns1__InsSNStationEmp(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNStationEmp * soap_new_set___ns1__InsSNStationEmp(
	struct soap *soap,
	_ns1__InsSNStationEmp *ns1__InsSNStationEmp)
{
	struct __ns1__InsSNStationEmp *_p = soap_new___ns1__InsSNStationEmp(soap);
	if (_p)
	{	soap_default___ns1__InsSNStationEmp(soap, _p);
		_p->ns1__InsSNStationEmp = ns1__InsSNStationEmp;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNStationEmp(struct soap*, const struct __ns1__InsSNStationEmp *, const char*, const char*);

inline int soap_write___ns1__InsSNStationEmp(struct soap *soap, struct __ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNStationEmp(soap, p), 0) || soap_put___ns1__InsSNStationEmp(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNStationEmp(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNStationEmp(soap, p), 0) || soap_put___ns1__InsSNStationEmp(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNStationEmp(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNStationEmp(soap, p), 0) || soap_put___ns1__InsSNStationEmp(soap, p, "-ns1:InsSNStationEmp", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNStationEmp * SOAP_FMAC4 soap_get___ns1__InsSNStationEmp(struct soap*, struct __ns1__InsSNStationEmp *, const char*, const char*);

inline int soap_read___ns1__InsSNStationEmp(struct soap *soap, struct __ns1__InsSNStationEmp *p)
{
	if (p)
	{	soap_default___ns1__InsSNStationEmp(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNStationEmp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNStationEmp(struct soap *soap, const char *URL, struct __ns1__InsSNStationEmp *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNStationEmp(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNStationEmp(struct soap *soap, struct __ns1__InsSNStationEmp *p)
{
	if (soap_read___ns1__InsSNStationEmp(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CancelBoxLnk_DEFINED
#define SOAP_TYPE___ns1__CancelBoxLnk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CancelBoxLnk(struct soap*, struct __ns1__CancelBoxLnk *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CancelBoxLnk(struct soap*, const struct __ns1__CancelBoxLnk *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CancelBoxLnk(struct soap*, const char*, int, const struct __ns1__CancelBoxLnk *, const char*);
SOAP_FMAC3 struct __ns1__CancelBoxLnk * SOAP_FMAC4 soap_in___ns1__CancelBoxLnk(struct soap*, const char*, struct __ns1__CancelBoxLnk *, const char*);
SOAP_FMAC1 struct __ns1__CancelBoxLnk * SOAP_FMAC2 soap_instantiate___ns1__CancelBoxLnk(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CancelBoxLnk * soap_new___ns1__CancelBoxLnk(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CancelBoxLnk(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CancelBoxLnk * soap_new_req___ns1__CancelBoxLnk(
	struct soap *soap)
{
	struct __ns1__CancelBoxLnk *_p = soap_new___ns1__CancelBoxLnk(soap);
	if (_p)
	{	soap_default___ns1__CancelBoxLnk(soap, _p);
	}
	return _p;
}

inline struct __ns1__CancelBoxLnk * soap_new_set___ns1__CancelBoxLnk(
	struct soap *soap,
	_ns1__CancelBoxLnk *ns1__CancelBoxLnk)
{
	struct __ns1__CancelBoxLnk *_p = soap_new___ns1__CancelBoxLnk(soap);
	if (_p)
	{	soap_default___ns1__CancelBoxLnk(soap, _p);
		_p->ns1__CancelBoxLnk = ns1__CancelBoxLnk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CancelBoxLnk(struct soap*, const struct __ns1__CancelBoxLnk *, const char*, const char*);

inline int soap_write___ns1__CancelBoxLnk(struct soap *soap, struct __ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CancelBoxLnk(soap, p), 0) || soap_put___ns1__CancelBoxLnk(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CancelBoxLnk(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelBoxLnk(soap, p), 0) || soap_put___ns1__CancelBoxLnk(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CancelBoxLnk(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CancelBoxLnk(soap, p), 0) || soap_put___ns1__CancelBoxLnk(soap, p, "-ns1:CancelBoxLnk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CancelBoxLnk * SOAP_FMAC4 soap_get___ns1__CancelBoxLnk(struct soap*, struct __ns1__CancelBoxLnk *, const char*, const char*);

inline int soap_read___ns1__CancelBoxLnk(struct soap *soap, struct __ns1__CancelBoxLnk *p)
{
	if (p)
	{	soap_default___ns1__CancelBoxLnk(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CancelBoxLnk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CancelBoxLnk(struct soap *soap, const char *URL, struct __ns1__CancelBoxLnk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CancelBoxLnk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CancelBoxLnk(struct soap *soap, struct __ns1__CancelBoxLnk *p)
{
	if (soap_read___ns1__CancelBoxLnk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OutStationbyBox_DEFINED
#define SOAP_TYPE___ns1__OutStationbyBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutStationbyBox(struct soap*, struct __ns1__OutStationbyBox *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutStationbyBox(struct soap*, const struct __ns1__OutStationbyBox *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutStationbyBox(struct soap*, const char*, int, const struct __ns1__OutStationbyBox *, const char*);
SOAP_FMAC3 struct __ns1__OutStationbyBox * SOAP_FMAC4 soap_in___ns1__OutStationbyBox(struct soap*, const char*, struct __ns1__OutStationbyBox *, const char*);
SOAP_FMAC1 struct __ns1__OutStationbyBox * SOAP_FMAC2 soap_instantiate___ns1__OutStationbyBox(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutStationbyBox * soap_new___ns1__OutStationbyBox(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutStationbyBox(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutStationbyBox * soap_new_req___ns1__OutStationbyBox(
	struct soap *soap)
{
	struct __ns1__OutStationbyBox *_p = soap_new___ns1__OutStationbyBox(soap);
	if (_p)
	{	soap_default___ns1__OutStationbyBox(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutStationbyBox * soap_new_set___ns1__OutStationbyBox(
	struct soap *soap,
	_ns1__OutStationbyBox *ns1__OutStationbyBox)
{
	struct __ns1__OutStationbyBox *_p = soap_new___ns1__OutStationbyBox(soap);
	if (_p)
	{	soap_default___ns1__OutStationbyBox(soap, _p);
		_p->ns1__OutStationbyBox = ns1__OutStationbyBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutStationbyBox(struct soap*, const struct __ns1__OutStationbyBox *, const char*, const char*);

inline int soap_write___ns1__OutStationbyBox(struct soap *soap, struct __ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OutStationbyBox(soap, p), 0) || soap_put___ns1__OutStationbyBox(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutStationbyBox(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutStationbyBox(soap, p), 0) || soap_put___ns1__OutStationbyBox(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutStationbyBox(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__OutStationbyBox(soap, p), 0) || soap_put___ns1__OutStationbyBox(soap, p, "-ns1:OutStationbyBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutStationbyBox * SOAP_FMAC4 soap_get___ns1__OutStationbyBox(struct soap*, struct __ns1__OutStationbyBox *, const char*, const char*);

inline int soap_read___ns1__OutStationbyBox(struct soap *soap, struct __ns1__OutStationbyBox *p)
{
	if (p)
	{	soap_default___ns1__OutStationbyBox(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OutStationbyBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutStationbyBox(struct soap *soap, const char *URL, struct __ns1__OutStationbyBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OutStationbyBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OutStationbyBox(struct soap *soap, struct __ns1__OutStationbyBox *p)
{
	if (soap_read___ns1__OutStationbyBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InStationbyBox_DEFINED
#define SOAP_TYPE___ns1__InStationbyBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InStationbyBox(struct soap*, struct __ns1__InStationbyBox *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InStationbyBox(struct soap*, const struct __ns1__InStationbyBox *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InStationbyBox(struct soap*, const char*, int, const struct __ns1__InStationbyBox *, const char*);
SOAP_FMAC3 struct __ns1__InStationbyBox * SOAP_FMAC4 soap_in___ns1__InStationbyBox(struct soap*, const char*, struct __ns1__InStationbyBox *, const char*);
SOAP_FMAC1 struct __ns1__InStationbyBox * SOAP_FMAC2 soap_instantiate___ns1__InStationbyBox(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InStationbyBox * soap_new___ns1__InStationbyBox(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InStationbyBox(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InStationbyBox * soap_new_req___ns1__InStationbyBox(
	struct soap *soap)
{
	struct __ns1__InStationbyBox *_p = soap_new___ns1__InStationbyBox(soap);
	if (_p)
	{	soap_default___ns1__InStationbyBox(soap, _p);
	}
	return _p;
}

inline struct __ns1__InStationbyBox * soap_new_set___ns1__InStationbyBox(
	struct soap *soap,
	_ns1__InStationbyBox *ns1__InStationbyBox)
{
	struct __ns1__InStationbyBox *_p = soap_new___ns1__InStationbyBox(soap);
	if (_p)
	{	soap_default___ns1__InStationbyBox(soap, _p);
		_p->ns1__InStationbyBox = ns1__InStationbyBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InStationbyBox(struct soap*, const struct __ns1__InStationbyBox *, const char*, const char*);

inline int soap_write___ns1__InStationbyBox(struct soap *soap, struct __ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InStationbyBox(soap, p), 0) || soap_put___ns1__InStationbyBox(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InStationbyBox(struct soap *soap, const char *URL, struct __ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InStationbyBox(soap, p), 0) || soap_put___ns1__InStationbyBox(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InStationbyBox(struct soap *soap, const char *URL, struct __ns1__InStationbyBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InStationbyBox(soap, p), 0) || soap_put___ns1__InStationbyBox(soap, p, "-ns1:InStationbyBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InStationbyBox * SOAP_FMAC4 soap_get___ns1__InStationbyBox(struct soap*, struct __ns1__InStationbyBox *, const char*, const char*);

inline int soap_read___ns1__InStationbyBox(struct soap *soap, struct __ns1__InStationbyBox *p)
{
	if (p)
	{	soap_default___ns1__InStationbyBox(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InStationbyBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InStationbyBox(struct soap *soap, const char *URL, struct __ns1__InStationbyBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InStationbyBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InStationbyBox(struct soap *soap, struct __ns1__InStationbyBox *p)
{
	if (soap_read___ns1__InStationbyBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__EndSNtoBox_DEFINED
#define SOAP_TYPE___ns1__EndSNtoBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndSNtoBox(struct soap*, struct __ns1__EndSNtoBox *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndSNtoBox(struct soap*, const struct __ns1__EndSNtoBox *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndSNtoBox(struct soap*, const char*, int, const struct __ns1__EndSNtoBox *, const char*);
SOAP_FMAC3 struct __ns1__EndSNtoBox * SOAP_FMAC4 soap_in___ns1__EndSNtoBox(struct soap*, const char*, struct __ns1__EndSNtoBox *, const char*);
SOAP_FMAC1 struct __ns1__EndSNtoBox * SOAP_FMAC2 soap_instantiate___ns1__EndSNtoBox(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndSNtoBox * soap_new___ns1__EndSNtoBox(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EndSNtoBox(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EndSNtoBox * soap_new_req___ns1__EndSNtoBox(
	struct soap *soap)
{
	struct __ns1__EndSNtoBox *_p = soap_new___ns1__EndSNtoBox(soap);
	if (_p)
	{	soap_default___ns1__EndSNtoBox(soap, _p);
	}
	return _p;
}

inline struct __ns1__EndSNtoBox * soap_new_set___ns1__EndSNtoBox(
	struct soap *soap,
	_ns1__EndSNtoBox *ns1__EndSNtoBox)
{
	struct __ns1__EndSNtoBox *_p = soap_new___ns1__EndSNtoBox(soap);
	if (_p)
	{	soap_default___ns1__EndSNtoBox(soap, _p);
		_p->ns1__EndSNtoBox = ns1__EndSNtoBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndSNtoBox(struct soap*, const struct __ns1__EndSNtoBox *, const char*, const char*);

inline int soap_write___ns1__EndSNtoBox(struct soap *soap, struct __ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__EndSNtoBox(soap, p), 0) || soap_put___ns1__EndSNtoBox(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EndSNtoBox(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EndSNtoBox(soap, p), 0) || soap_put___ns1__EndSNtoBox(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EndSNtoBox(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__EndSNtoBox(soap, p), 0) || soap_put___ns1__EndSNtoBox(soap, p, "-ns1:EndSNtoBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EndSNtoBox * SOAP_FMAC4 soap_get___ns1__EndSNtoBox(struct soap*, struct __ns1__EndSNtoBox *, const char*, const char*);

inline int soap_read___ns1__EndSNtoBox(struct soap *soap, struct __ns1__EndSNtoBox *p)
{
	if (p)
	{	soap_default___ns1__EndSNtoBox(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__EndSNtoBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EndSNtoBox(struct soap *soap, const char *URL, struct __ns1__EndSNtoBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__EndSNtoBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__EndSNtoBox(struct soap *soap, struct __ns1__EndSNtoBox *p)
{
	if (soap_read___ns1__EndSNtoBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InSNtoBox_DEFINED
#define SOAP_TYPE___ns1__InSNtoBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InSNtoBox(struct soap*, struct __ns1__InSNtoBox *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InSNtoBox(struct soap*, const struct __ns1__InSNtoBox *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InSNtoBox(struct soap*, const char*, int, const struct __ns1__InSNtoBox *, const char*);
SOAP_FMAC3 struct __ns1__InSNtoBox * SOAP_FMAC4 soap_in___ns1__InSNtoBox(struct soap*, const char*, struct __ns1__InSNtoBox *, const char*);
SOAP_FMAC1 struct __ns1__InSNtoBox * SOAP_FMAC2 soap_instantiate___ns1__InSNtoBox(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InSNtoBox * soap_new___ns1__InSNtoBox(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InSNtoBox(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InSNtoBox * soap_new_req___ns1__InSNtoBox(
	struct soap *soap)
{
	struct __ns1__InSNtoBox *_p = soap_new___ns1__InSNtoBox(soap);
	if (_p)
	{	soap_default___ns1__InSNtoBox(soap, _p);
	}
	return _p;
}

inline struct __ns1__InSNtoBox * soap_new_set___ns1__InSNtoBox(
	struct soap *soap,
	_ns1__InSNtoBox *ns1__InSNtoBox)
{
	struct __ns1__InSNtoBox *_p = soap_new___ns1__InSNtoBox(soap);
	if (_p)
	{	soap_default___ns1__InSNtoBox(soap, _p);
		_p->ns1__InSNtoBox = ns1__InSNtoBox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InSNtoBox(struct soap*, const struct __ns1__InSNtoBox *, const char*, const char*);

inline int soap_write___ns1__InSNtoBox(struct soap *soap, struct __ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InSNtoBox(soap, p), 0) || soap_put___ns1__InSNtoBox(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InSNtoBox(struct soap *soap, const char *URL, struct __ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InSNtoBox(soap, p), 0) || soap_put___ns1__InSNtoBox(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InSNtoBox(struct soap *soap, const char *URL, struct __ns1__InSNtoBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InSNtoBox(soap, p), 0) || soap_put___ns1__InSNtoBox(soap, p, "-ns1:InSNtoBox", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InSNtoBox * SOAP_FMAC4 soap_get___ns1__InSNtoBox(struct soap*, struct __ns1__InSNtoBox *, const char*, const char*);

inline int soap_read___ns1__InSNtoBox(struct soap *soap, struct __ns1__InSNtoBox *p)
{
	if (p)
	{	soap_default___ns1__InSNtoBox(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InSNtoBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InSNtoBox(struct soap *soap, const char *URL, struct __ns1__InSNtoBox *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InSNtoBox(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InSNtoBox(struct soap *soap, struct __ns1__InSNtoBox *p)
{
	if (soap_read___ns1__InSNtoBox(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkBoxNo_DEFINED
#define SOAP_TYPE___ns1__chkBoxNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkBoxNo(struct soap*, struct __ns1__chkBoxNo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkBoxNo(struct soap*, const struct __ns1__chkBoxNo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkBoxNo(struct soap*, const char*, int, const struct __ns1__chkBoxNo *, const char*);
SOAP_FMAC3 struct __ns1__chkBoxNo * SOAP_FMAC4 soap_in___ns1__chkBoxNo(struct soap*, const char*, struct __ns1__chkBoxNo *, const char*);
SOAP_FMAC1 struct __ns1__chkBoxNo * SOAP_FMAC2 soap_instantiate___ns1__chkBoxNo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkBoxNo * soap_new___ns1__chkBoxNo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkBoxNo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkBoxNo * soap_new_req___ns1__chkBoxNo(
	struct soap *soap)
{
	struct __ns1__chkBoxNo *_p = soap_new___ns1__chkBoxNo(soap);
	if (_p)
	{	soap_default___ns1__chkBoxNo(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkBoxNo * soap_new_set___ns1__chkBoxNo(
	struct soap *soap,
	_ns1__chkBoxNo *ns1__chkBoxNo)
{
	struct __ns1__chkBoxNo *_p = soap_new___ns1__chkBoxNo(soap);
	if (_p)
	{	soap_default___ns1__chkBoxNo(soap, _p);
		_p->ns1__chkBoxNo = ns1__chkBoxNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkBoxNo(struct soap*, const struct __ns1__chkBoxNo *, const char*, const char*);

inline int soap_write___ns1__chkBoxNo(struct soap *soap, struct __ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkBoxNo(soap, p), 0) || soap_put___ns1__chkBoxNo(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkBoxNo(struct soap *soap, const char *URL, struct __ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkBoxNo(soap, p), 0) || soap_put___ns1__chkBoxNo(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkBoxNo(struct soap *soap, const char *URL, struct __ns1__chkBoxNo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkBoxNo(soap, p), 0) || soap_put___ns1__chkBoxNo(soap, p, "-ns1:chkBoxNo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkBoxNo * SOAP_FMAC4 soap_get___ns1__chkBoxNo(struct soap*, struct __ns1__chkBoxNo *, const char*, const char*);

inline int soap_read___ns1__chkBoxNo(struct soap *soap, struct __ns1__chkBoxNo *p)
{
	if (p)
	{	soap_default___ns1__chkBoxNo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkBoxNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkBoxNo(struct soap *soap, const char *URL, struct __ns1__chkBoxNo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkBoxNo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkBoxNo(struct soap *soap, struct __ns1__chkBoxNo *p)
{
	if (soap_read___ns1__chkBoxNo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsBoxNOTime_DEFINED
#define SOAP_TYPE___ns1__InsBoxNOTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsBoxNOTime(struct soap*, struct __ns1__InsBoxNOTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsBoxNOTime(struct soap*, const struct __ns1__InsBoxNOTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsBoxNOTime(struct soap*, const char*, int, const struct __ns1__InsBoxNOTime *, const char*);
SOAP_FMAC3 struct __ns1__InsBoxNOTime * SOAP_FMAC4 soap_in___ns1__InsBoxNOTime(struct soap*, const char*, struct __ns1__InsBoxNOTime *, const char*);
SOAP_FMAC1 struct __ns1__InsBoxNOTime * SOAP_FMAC2 soap_instantiate___ns1__InsBoxNOTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsBoxNOTime * soap_new___ns1__InsBoxNOTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsBoxNOTime(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsBoxNOTime * soap_new_req___ns1__InsBoxNOTime(
	struct soap *soap)
{
	struct __ns1__InsBoxNOTime *_p = soap_new___ns1__InsBoxNOTime(soap);
	if (_p)
	{	soap_default___ns1__InsBoxNOTime(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsBoxNOTime * soap_new_set___ns1__InsBoxNOTime(
	struct soap *soap,
	_ns1__InsBoxNOTime *ns1__InsBoxNOTime)
{
	struct __ns1__InsBoxNOTime *_p = soap_new___ns1__InsBoxNOTime(soap);
	if (_p)
	{	soap_default___ns1__InsBoxNOTime(soap, _p);
		_p->ns1__InsBoxNOTime = ns1__InsBoxNOTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsBoxNOTime(struct soap*, const struct __ns1__InsBoxNOTime *, const char*, const char*);

inline int soap_write___ns1__InsBoxNOTime(struct soap *soap, struct __ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsBoxNOTime(soap, p), 0) || soap_put___ns1__InsBoxNOTime(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsBoxNOTime(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxNOTime(soap, p), 0) || soap_put___ns1__InsBoxNOTime(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsBoxNOTime(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsBoxNOTime(soap, p), 0) || soap_put___ns1__InsBoxNOTime(soap, p, "-ns1:InsBoxNOTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsBoxNOTime * SOAP_FMAC4 soap_get___ns1__InsBoxNOTime(struct soap*, struct __ns1__InsBoxNOTime *, const char*, const char*);

inline int soap_read___ns1__InsBoxNOTime(struct soap *soap, struct __ns1__InsBoxNOTime *p)
{
	if (p)
	{	soap_default___ns1__InsBoxNOTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsBoxNOTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsBoxNOTime(struct soap *soap, const char *URL, struct __ns1__InsBoxNOTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsBoxNOTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsBoxNOTime(struct soap *soap, struct __ns1__InsBoxNOTime *p)
{
	if (soap_read___ns1__InsBoxNOTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLinkZJCount_DEFINED
#define SOAP_TYPE___ns1__GetLinkZJCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLinkZJCount(struct soap*, struct __ns1__GetLinkZJCount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLinkZJCount(struct soap*, const struct __ns1__GetLinkZJCount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLinkZJCount(struct soap*, const char*, int, const struct __ns1__GetLinkZJCount *, const char*);
SOAP_FMAC3 struct __ns1__GetLinkZJCount * SOAP_FMAC4 soap_in___ns1__GetLinkZJCount(struct soap*, const char*, struct __ns1__GetLinkZJCount *, const char*);
SOAP_FMAC1 struct __ns1__GetLinkZJCount * SOAP_FMAC2 soap_instantiate___ns1__GetLinkZJCount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLinkZJCount * soap_new___ns1__GetLinkZJCount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLinkZJCount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLinkZJCount * soap_new_req___ns1__GetLinkZJCount(
	struct soap *soap)
{
	struct __ns1__GetLinkZJCount *_p = soap_new___ns1__GetLinkZJCount(soap);
	if (_p)
	{	soap_default___ns1__GetLinkZJCount(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLinkZJCount * soap_new_set___ns1__GetLinkZJCount(
	struct soap *soap,
	_ns1__GetLinkZJCount *ns1__GetLinkZJCount)
{
	struct __ns1__GetLinkZJCount *_p = soap_new___ns1__GetLinkZJCount(soap);
	if (_p)
	{	soap_default___ns1__GetLinkZJCount(soap, _p);
		_p->ns1__GetLinkZJCount = ns1__GetLinkZJCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLinkZJCount(struct soap*, const struct __ns1__GetLinkZJCount *, const char*, const char*);

inline int soap_write___ns1__GetLinkZJCount(struct soap *soap, struct __ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLinkZJCount(soap, p), 0) || soap_put___ns1__GetLinkZJCount(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLinkZJCount(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkZJCount(soap, p), 0) || soap_put___ns1__GetLinkZJCount(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLinkZJCount(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkZJCount(soap, p), 0) || soap_put___ns1__GetLinkZJCount(soap, p, "-ns1:GetLinkZJCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLinkZJCount * SOAP_FMAC4 soap_get___ns1__GetLinkZJCount(struct soap*, struct __ns1__GetLinkZJCount *, const char*, const char*);

inline int soap_read___ns1__GetLinkZJCount(struct soap *soap, struct __ns1__GetLinkZJCount *p)
{
	if (p)
	{	soap_default___ns1__GetLinkZJCount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLinkZJCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLinkZJCount(struct soap *soap, const char *URL, struct __ns1__GetLinkZJCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLinkZJCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLinkZJCount(struct soap *soap, struct __ns1__GetLinkZJCount *p)
{
	if (soap_read___ns1__GetLinkZJCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsLinkSN_DEFINED
#define SOAP_TYPE___ns1__InsLinkSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsLinkSN(struct soap*, struct __ns1__InsLinkSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsLinkSN(struct soap*, const struct __ns1__InsLinkSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsLinkSN(struct soap*, const char*, int, const struct __ns1__InsLinkSN *, const char*);
SOAP_FMAC3 struct __ns1__InsLinkSN * SOAP_FMAC4 soap_in___ns1__InsLinkSN(struct soap*, const char*, struct __ns1__InsLinkSN *, const char*);
SOAP_FMAC1 struct __ns1__InsLinkSN * SOAP_FMAC2 soap_instantiate___ns1__InsLinkSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsLinkSN * soap_new___ns1__InsLinkSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsLinkSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsLinkSN * soap_new_req___ns1__InsLinkSN(
	struct soap *soap)
{
	struct __ns1__InsLinkSN *_p = soap_new___ns1__InsLinkSN(soap);
	if (_p)
	{	soap_default___ns1__InsLinkSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsLinkSN * soap_new_set___ns1__InsLinkSN(
	struct soap *soap,
	_ns1__InsLinkSN *ns1__InsLinkSN)
{
	struct __ns1__InsLinkSN *_p = soap_new___ns1__InsLinkSN(soap);
	if (_p)
	{	soap_default___ns1__InsLinkSN(soap, _p);
		_p->ns1__InsLinkSN = ns1__InsLinkSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsLinkSN(struct soap*, const struct __ns1__InsLinkSN *, const char*, const char*);

inline int soap_write___ns1__InsLinkSN(struct soap *soap, struct __ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsLinkSN(soap, p), 0) || soap_put___ns1__InsLinkSN(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsLinkSN(struct soap *soap, const char *URL, struct __ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLinkSN(soap, p), 0) || soap_put___ns1__InsLinkSN(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsLinkSN(struct soap *soap, const char *URL, struct __ns1__InsLinkSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsLinkSN(soap, p), 0) || soap_put___ns1__InsLinkSN(soap, p, "-ns1:InsLinkSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsLinkSN * SOAP_FMAC4 soap_get___ns1__InsLinkSN(struct soap*, struct __ns1__InsLinkSN *, const char*, const char*);

inline int soap_read___ns1__InsLinkSN(struct soap *soap, struct __ns1__InsLinkSN *p)
{
	if (p)
	{	soap_default___ns1__InsLinkSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsLinkSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsLinkSN(struct soap *soap, const char *URL, struct __ns1__InsLinkSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsLinkSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsLinkSN(struct soap *soap, struct __ns1__InsLinkSN *p)
{
	if (soap_read___ns1__InsLinkSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doLinkOutSN_DEFINED
#define SOAP_TYPE___ns1__doLinkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doLinkOutSN(struct soap*, struct __ns1__doLinkOutSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doLinkOutSN(struct soap*, const struct __ns1__doLinkOutSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doLinkOutSN(struct soap*, const char*, int, const struct __ns1__doLinkOutSN *, const char*);
SOAP_FMAC3 struct __ns1__doLinkOutSN * SOAP_FMAC4 soap_in___ns1__doLinkOutSN(struct soap*, const char*, struct __ns1__doLinkOutSN *, const char*);
SOAP_FMAC1 struct __ns1__doLinkOutSN * SOAP_FMAC2 soap_instantiate___ns1__doLinkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doLinkOutSN * soap_new___ns1__doLinkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doLinkOutSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doLinkOutSN * soap_new_req___ns1__doLinkOutSN(
	struct soap *soap)
{
	struct __ns1__doLinkOutSN *_p = soap_new___ns1__doLinkOutSN(soap);
	if (_p)
	{	soap_default___ns1__doLinkOutSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__doLinkOutSN * soap_new_set___ns1__doLinkOutSN(
	struct soap *soap,
	_ns1__doLinkOutSN *ns1__doLinkOutSN)
{
	struct __ns1__doLinkOutSN *_p = soap_new___ns1__doLinkOutSN(soap);
	if (_p)
	{	soap_default___ns1__doLinkOutSN(soap, _p);
		_p->ns1__doLinkOutSN = ns1__doLinkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doLinkOutSN(struct soap*, const struct __ns1__doLinkOutSN *, const char*, const char*);

inline int soap_write___ns1__doLinkOutSN(struct soap *soap, struct __ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doLinkOutSN(soap, p), 0) || soap_put___ns1__doLinkOutSN(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doLinkOutSN(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLinkOutSN(soap, p), 0) || soap_put___ns1__doLinkOutSN(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doLinkOutSN(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLinkOutSN(soap, p), 0) || soap_put___ns1__doLinkOutSN(soap, p, "-ns1:doLinkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doLinkOutSN * SOAP_FMAC4 soap_get___ns1__doLinkOutSN(struct soap*, struct __ns1__doLinkOutSN *, const char*, const char*);

inline int soap_read___ns1__doLinkOutSN(struct soap *soap, struct __ns1__doLinkOutSN *p)
{
	if (p)
	{	soap_default___ns1__doLinkOutSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doLinkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doLinkOutSN(struct soap *soap, const char *URL, struct __ns1__doLinkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doLinkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doLinkOutSN(struct soap *soap, struct __ns1__doLinkOutSN *p)
{
	if (soap_read___ns1__doLinkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkLinkOutSN_DEFINED
#define SOAP_TYPE___ns1__ChkLinkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkLinkOutSN(struct soap*, struct __ns1__ChkLinkOutSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkLinkOutSN(struct soap*, const struct __ns1__ChkLinkOutSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkLinkOutSN(struct soap*, const char*, int, const struct __ns1__ChkLinkOutSN *, const char*);
SOAP_FMAC3 struct __ns1__ChkLinkOutSN * SOAP_FMAC4 soap_in___ns1__ChkLinkOutSN(struct soap*, const char*, struct __ns1__ChkLinkOutSN *, const char*);
SOAP_FMAC1 struct __ns1__ChkLinkOutSN * SOAP_FMAC2 soap_instantiate___ns1__ChkLinkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkLinkOutSN * soap_new___ns1__ChkLinkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkLinkOutSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkLinkOutSN * soap_new_req___ns1__ChkLinkOutSN(
	struct soap *soap)
{
	struct __ns1__ChkLinkOutSN *_p = soap_new___ns1__ChkLinkOutSN(soap);
	if (_p)
	{	soap_default___ns1__ChkLinkOutSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkLinkOutSN * soap_new_set___ns1__ChkLinkOutSN(
	struct soap *soap,
	_ns1__ChkLinkOutSN *ns1__ChkLinkOutSN)
{
	struct __ns1__ChkLinkOutSN *_p = soap_new___ns1__ChkLinkOutSN(soap);
	if (_p)
	{	soap_default___ns1__ChkLinkOutSN(soap, _p);
		_p->ns1__ChkLinkOutSN = ns1__ChkLinkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkLinkOutSN(struct soap*, const struct __ns1__ChkLinkOutSN *, const char*, const char*);

inline int soap_write___ns1__ChkLinkOutSN(struct soap *soap, struct __ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkLinkOutSN(soap, p), 0) || soap_put___ns1__ChkLinkOutSN(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkLinkOutSN(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkLinkOutSN(soap, p), 0) || soap_put___ns1__ChkLinkOutSN(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkLinkOutSN(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkLinkOutSN(soap, p), 0) || soap_put___ns1__ChkLinkOutSN(soap, p, "-ns1:ChkLinkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkLinkOutSN * SOAP_FMAC4 soap_get___ns1__ChkLinkOutSN(struct soap*, struct __ns1__ChkLinkOutSN *, const char*, const char*);

inline int soap_read___ns1__ChkLinkOutSN(struct soap *soap, struct __ns1__ChkLinkOutSN *p)
{
	if (p)
	{	soap_default___ns1__ChkLinkOutSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkLinkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkLinkOutSN(struct soap *soap, const char *URL, struct __ns1__ChkLinkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkLinkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkLinkOutSN(struct soap *soap, struct __ns1__ChkLinkOutSN *p)
{
	if (soap_read___ns1__ChkLinkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkOutSN_DEFINED
#define SOAP_TYPE___ns1__chkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkOutSN(struct soap*, struct __ns1__chkOutSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkOutSN(struct soap*, const struct __ns1__chkOutSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkOutSN(struct soap*, const char*, int, const struct __ns1__chkOutSN *, const char*);
SOAP_FMAC3 struct __ns1__chkOutSN * SOAP_FMAC4 soap_in___ns1__chkOutSN(struct soap*, const char*, struct __ns1__chkOutSN *, const char*);
SOAP_FMAC1 struct __ns1__chkOutSN * SOAP_FMAC2 soap_instantiate___ns1__chkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkOutSN * soap_new___ns1__chkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkOutSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkOutSN * soap_new_req___ns1__chkOutSN(
	struct soap *soap)
{
	struct __ns1__chkOutSN *_p = soap_new___ns1__chkOutSN(soap);
	if (_p)
	{	soap_default___ns1__chkOutSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkOutSN * soap_new_set___ns1__chkOutSN(
	struct soap *soap,
	_ns1__chkOutSN *ns1__chkOutSN)
{
	struct __ns1__chkOutSN *_p = soap_new___ns1__chkOutSN(soap);
	if (_p)
	{	soap_default___ns1__chkOutSN(soap, _p);
		_p->ns1__chkOutSN = ns1__chkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkOutSN(struct soap*, const struct __ns1__chkOutSN *, const char*, const char*);

inline int soap_write___ns1__chkOutSN(struct soap *soap, struct __ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkOutSN(soap, p), 0) || soap_put___ns1__chkOutSN(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkOutSN(struct soap *soap, const char *URL, struct __ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkOutSN(soap, p), 0) || soap_put___ns1__chkOutSN(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkOutSN(struct soap *soap, const char *URL, struct __ns1__chkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkOutSN(soap, p), 0) || soap_put___ns1__chkOutSN(soap, p, "-ns1:chkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkOutSN * SOAP_FMAC4 soap_get___ns1__chkOutSN(struct soap*, struct __ns1__chkOutSN *, const char*, const char*);

inline int soap_read___ns1__chkOutSN(struct soap *soap, struct __ns1__chkOutSN *p)
{
	if (p)
	{	soap_default___ns1__chkOutSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkOutSN(struct soap *soap, const char *URL, struct __ns1__chkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkOutSN(struct soap *soap, struct __ns1__chkOutSN *p)
{
	if (soap_read___ns1__chkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLintOutQty_DEFINED
#define SOAP_TYPE___ns1__GetLintOutQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLintOutQty(struct soap*, struct __ns1__GetLintOutQty *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLintOutQty(struct soap*, const struct __ns1__GetLintOutQty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLintOutQty(struct soap*, const char*, int, const struct __ns1__GetLintOutQty *, const char*);
SOAP_FMAC3 struct __ns1__GetLintOutQty * SOAP_FMAC4 soap_in___ns1__GetLintOutQty(struct soap*, const char*, struct __ns1__GetLintOutQty *, const char*);
SOAP_FMAC1 struct __ns1__GetLintOutQty * SOAP_FMAC2 soap_instantiate___ns1__GetLintOutQty(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLintOutQty * soap_new___ns1__GetLintOutQty(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLintOutQty(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLintOutQty * soap_new_req___ns1__GetLintOutQty(
	struct soap *soap)
{
	struct __ns1__GetLintOutQty *_p = soap_new___ns1__GetLintOutQty(soap);
	if (_p)
	{	soap_default___ns1__GetLintOutQty(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLintOutQty * soap_new_set___ns1__GetLintOutQty(
	struct soap *soap,
	_ns1__GetLintOutQty *ns1__GetLintOutQty)
{
	struct __ns1__GetLintOutQty *_p = soap_new___ns1__GetLintOutQty(soap);
	if (_p)
	{	soap_default___ns1__GetLintOutQty(soap, _p);
		_p->ns1__GetLintOutQty = ns1__GetLintOutQty;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLintOutQty(struct soap*, const struct __ns1__GetLintOutQty *, const char*, const char*);

inline int soap_write___ns1__GetLintOutQty(struct soap *soap, struct __ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLintOutQty(soap, p), 0) || soap_put___ns1__GetLintOutQty(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLintOutQty(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLintOutQty(soap, p), 0) || soap_put___ns1__GetLintOutQty(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLintOutQty(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLintOutQty(soap, p), 0) || soap_put___ns1__GetLintOutQty(soap, p, "-ns1:GetLintOutQty", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLintOutQty * SOAP_FMAC4 soap_get___ns1__GetLintOutQty(struct soap*, struct __ns1__GetLintOutQty *, const char*, const char*);

inline int soap_read___ns1__GetLintOutQty(struct soap *soap, struct __ns1__GetLintOutQty *p)
{
	if (p)
	{	soap_default___ns1__GetLintOutQty(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLintOutQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLintOutQty(struct soap *soap, const char *URL, struct __ns1__GetLintOutQty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLintOutQty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLintOutQty(struct soap *soap, struct __ns1__GetLintOutQty *p)
{
	if (soap_read___ns1__GetLintOutQty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SNLinkZJ_DEFINED
#define SOAP_TYPE___ns1__SNLinkZJ_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SNLinkZJ(struct soap*, struct __ns1__SNLinkZJ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SNLinkZJ(struct soap*, const struct __ns1__SNLinkZJ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SNLinkZJ(struct soap*, const char*, int, const struct __ns1__SNLinkZJ *, const char*);
SOAP_FMAC3 struct __ns1__SNLinkZJ * SOAP_FMAC4 soap_in___ns1__SNLinkZJ(struct soap*, const char*, struct __ns1__SNLinkZJ *, const char*);
SOAP_FMAC1 struct __ns1__SNLinkZJ * SOAP_FMAC2 soap_instantiate___ns1__SNLinkZJ(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SNLinkZJ * soap_new___ns1__SNLinkZJ(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SNLinkZJ(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SNLinkZJ * soap_new_req___ns1__SNLinkZJ(
	struct soap *soap)
{
	struct __ns1__SNLinkZJ *_p = soap_new___ns1__SNLinkZJ(soap);
	if (_p)
	{	soap_default___ns1__SNLinkZJ(soap, _p);
	}
	return _p;
}

inline struct __ns1__SNLinkZJ * soap_new_set___ns1__SNLinkZJ(
	struct soap *soap,
	_ns1__SNLinkZJ *ns1__SNLinkZJ)
{
	struct __ns1__SNLinkZJ *_p = soap_new___ns1__SNLinkZJ(soap);
	if (_p)
	{	soap_default___ns1__SNLinkZJ(soap, _p);
		_p->ns1__SNLinkZJ = ns1__SNLinkZJ;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SNLinkZJ(struct soap*, const struct __ns1__SNLinkZJ *, const char*, const char*);

inline int soap_write___ns1__SNLinkZJ(struct soap *soap, struct __ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SNLinkZJ(soap, p), 0) || soap_put___ns1__SNLinkZJ(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SNLinkZJ(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkZJ(soap, p), 0) || soap_put___ns1__SNLinkZJ(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SNLinkZJ(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkZJ(soap, p), 0) || soap_put___ns1__SNLinkZJ(soap, p, "-ns1:SNLinkZJ", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SNLinkZJ * SOAP_FMAC4 soap_get___ns1__SNLinkZJ(struct soap*, struct __ns1__SNLinkZJ *, const char*, const char*);

inline int soap_read___ns1__SNLinkZJ(struct soap *soap, struct __ns1__SNLinkZJ *p)
{
	if (p)
	{	soap_default___ns1__SNLinkZJ(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SNLinkZJ(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SNLinkZJ(struct soap *soap, const char *URL, struct __ns1__SNLinkZJ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SNLinkZJ(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SNLinkZJ(struct soap *soap, struct __ns1__SNLinkZJ *p)
{
	if (soap_read___ns1__SNLinkZJ(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsZJTestData_DEFINED
#define SOAP_TYPE___ns1__InsZJTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsZJTestData(struct soap*, struct __ns1__InsZJTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsZJTestData(struct soap*, const struct __ns1__InsZJTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsZJTestData(struct soap*, const char*, int, const struct __ns1__InsZJTestData *, const char*);
SOAP_FMAC3 struct __ns1__InsZJTestData * SOAP_FMAC4 soap_in___ns1__InsZJTestData(struct soap*, const char*, struct __ns1__InsZJTestData *, const char*);
SOAP_FMAC1 struct __ns1__InsZJTestData * SOAP_FMAC2 soap_instantiate___ns1__InsZJTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsZJTestData * soap_new___ns1__InsZJTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsZJTestData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsZJTestData * soap_new_req___ns1__InsZJTestData(
	struct soap *soap)
{
	struct __ns1__InsZJTestData *_p = soap_new___ns1__InsZJTestData(soap);
	if (_p)
	{	soap_default___ns1__InsZJTestData(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsZJTestData * soap_new_set___ns1__InsZJTestData(
	struct soap *soap,
	_ns1__InsZJTestData *ns1__InsZJTestData)
{
	struct __ns1__InsZJTestData *_p = soap_new___ns1__InsZJTestData(soap);
	if (_p)
	{	soap_default___ns1__InsZJTestData(soap, _p);
		_p->ns1__InsZJTestData = ns1__InsZJTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsZJTestData(struct soap*, const struct __ns1__InsZJTestData *, const char*, const char*);

inline int soap_write___ns1__InsZJTestData(struct soap *soap, struct __ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsZJTestData(soap, p), 0) || soap_put___ns1__InsZJTestData(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsZJTestData(struct soap *soap, const char *URL, struct __ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZJTestData(soap, p), 0) || soap_put___ns1__InsZJTestData(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsZJTestData(struct soap *soap, const char *URL, struct __ns1__InsZJTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZJTestData(soap, p), 0) || soap_put___ns1__InsZJTestData(soap, p, "-ns1:InsZJTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsZJTestData * SOAP_FMAC4 soap_get___ns1__InsZJTestData(struct soap*, struct __ns1__InsZJTestData *, const char*, const char*);

inline int soap_read___ns1__InsZJTestData(struct soap *soap, struct __ns1__InsZJTestData *p)
{
	if (p)
	{	soap_default___ns1__InsZJTestData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsZJTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsZJTestData(struct soap *soap, const char *URL, struct __ns1__InsZJTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsZJTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsZJTestData(struct soap *soap, struct __ns1__InsZJTestData *p)
{
	if (soap_read___ns1__InsZJTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doPmcSNLink_DEFINED
#define SOAP_TYPE___ns1__doPmcSNLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doPmcSNLink(struct soap*, struct __ns1__doPmcSNLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doPmcSNLink(struct soap*, const struct __ns1__doPmcSNLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doPmcSNLink(struct soap*, const char*, int, const struct __ns1__doPmcSNLink *, const char*);
SOAP_FMAC3 struct __ns1__doPmcSNLink * SOAP_FMAC4 soap_in___ns1__doPmcSNLink(struct soap*, const char*, struct __ns1__doPmcSNLink *, const char*);
SOAP_FMAC1 struct __ns1__doPmcSNLink * SOAP_FMAC2 soap_instantiate___ns1__doPmcSNLink(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doPmcSNLink * soap_new___ns1__doPmcSNLink(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doPmcSNLink(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doPmcSNLink * soap_new_req___ns1__doPmcSNLink(
	struct soap *soap)
{
	struct __ns1__doPmcSNLink *_p = soap_new___ns1__doPmcSNLink(soap);
	if (_p)
	{	soap_default___ns1__doPmcSNLink(soap, _p);
	}
	return _p;
}

inline struct __ns1__doPmcSNLink * soap_new_set___ns1__doPmcSNLink(
	struct soap *soap,
	_ns1__doPmcSNLink *ns1__doPmcSNLink)
{
	struct __ns1__doPmcSNLink *_p = soap_new___ns1__doPmcSNLink(soap);
	if (_p)
	{	soap_default___ns1__doPmcSNLink(soap, _p);
		_p->ns1__doPmcSNLink = ns1__doPmcSNLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doPmcSNLink(struct soap*, const struct __ns1__doPmcSNLink *, const char*, const char*);

inline int soap_write___ns1__doPmcSNLink(struct soap *soap, struct __ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doPmcSNLink(soap, p), 0) || soap_put___ns1__doPmcSNLink(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doPmcSNLink(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doPmcSNLink(soap, p), 0) || soap_put___ns1__doPmcSNLink(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doPmcSNLink(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doPmcSNLink(soap, p), 0) || soap_put___ns1__doPmcSNLink(soap, p, "-ns1:doPmcSNLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doPmcSNLink * SOAP_FMAC4 soap_get___ns1__doPmcSNLink(struct soap*, struct __ns1__doPmcSNLink *, const char*, const char*);

inline int soap_read___ns1__doPmcSNLink(struct soap *soap, struct __ns1__doPmcSNLink *p)
{
	if (p)
	{	soap_default___ns1__doPmcSNLink(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doPmcSNLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doPmcSNLink(struct soap *soap, const char *URL, struct __ns1__doPmcSNLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doPmcSNLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doPmcSNLink(struct soap *soap, struct __ns1__doPmcSNLink *p)
{
	if (soap_read___ns1__doPmcSNLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetPmcSNPart_DEFINED
#define SOAP_TYPE___ns1__GetPmcSNPart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPmcSNPart(struct soap*, struct __ns1__GetPmcSNPart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPmcSNPart(struct soap*, const struct __ns1__GetPmcSNPart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPmcSNPart(struct soap*, const char*, int, const struct __ns1__GetPmcSNPart *, const char*);
SOAP_FMAC3 struct __ns1__GetPmcSNPart * SOAP_FMAC4 soap_in___ns1__GetPmcSNPart(struct soap*, const char*, struct __ns1__GetPmcSNPart *, const char*);
SOAP_FMAC1 struct __ns1__GetPmcSNPart * SOAP_FMAC2 soap_instantiate___ns1__GetPmcSNPart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPmcSNPart * soap_new___ns1__GetPmcSNPart(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetPmcSNPart(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetPmcSNPart * soap_new_req___ns1__GetPmcSNPart(
	struct soap *soap)
{
	struct __ns1__GetPmcSNPart *_p = soap_new___ns1__GetPmcSNPart(soap);
	if (_p)
	{	soap_default___ns1__GetPmcSNPart(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetPmcSNPart * soap_new_set___ns1__GetPmcSNPart(
	struct soap *soap,
	_ns1__GetPmcSNPart *ns1__GetPmcSNPart)
{
	struct __ns1__GetPmcSNPart *_p = soap_new___ns1__GetPmcSNPart(soap);
	if (_p)
	{	soap_default___ns1__GetPmcSNPart(soap, _p);
		_p->ns1__GetPmcSNPart = ns1__GetPmcSNPart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPmcSNPart(struct soap*, const struct __ns1__GetPmcSNPart *, const char*, const char*);

inline int soap_write___ns1__GetPmcSNPart(struct soap *soap, struct __ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetPmcSNPart(soap, p), 0) || soap_put___ns1__GetPmcSNPart(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetPmcSNPart(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPmcSNPart(soap, p), 0) || soap_put___ns1__GetPmcSNPart(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetPmcSNPart(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetPmcSNPart(soap, p), 0) || soap_put___ns1__GetPmcSNPart(soap, p, "-ns1:GetPmcSNPart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetPmcSNPart * SOAP_FMAC4 soap_get___ns1__GetPmcSNPart(struct soap*, struct __ns1__GetPmcSNPart *, const char*, const char*);

inline int soap_read___ns1__GetPmcSNPart(struct soap *soap, struct __ns1__GetPmcSNPart *p)
{
	if (p)
	{	soap_default___ns1__GetPmcSNPart(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetPmcSNPart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetPmcSNPart(struct soap *soap, const char *URL, struct __ns1__GetPmcSNPart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetPmcSNPart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetPmcSNPart(struct soap *soap, struct __ns1__GetPmcSNPart *p)
{
	if (soap_read___ns1__GetPmcSNPart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPmcPartAssyList_DEFINED
#define SOAP_TYPE___ns1__getPmcPartAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPmcPartAssyList(struct soap*, struct __ns1__getPmcPartAssyList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPmcPartAssyList(struct soap*, const struct __ns1__getPmcPartAssyList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPmcPartAssyList(struct soap*, const char*, int, const struct __ns1__getPmcPartAssyList *, const char*);
SOAP_FMAC3 struct __ns1__getPmcPartAssyList * SOAP_FMAC4 soap_in___ns1__getPmcPartAssyList(struct soap*, const char*, struct __ns1__getPmcPartAssyList *, const char*);
SOAP_FMAC1 struct __ns1__getPmcPartAssyList * SOAP_FMAC2 soap_instantiate___ns1__getPmcPartAssyList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPmcPartAssyList * soap_new___ns1__getPmcPartAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPmcPartAssyList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPmcPartAssyList * soap_new_req___ns1__getPmcPartAssyList(
	struct soap *soap)
{
	struct __ns1__getPmcPartAssyList *_p = soap_new___ns1__getPmcPartAssyList(soap);
	if (_p)
	{	soap_default___ns1__getPmcPartAssyList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPmcPartAssyList * soap_new_set___ns1__getPmcPartAssyList(
	struct soap *soap,
	_ns1__getPmcPartAssyList *ns1__getPmcPartAssyList)
{
	struct __ns1__getPmcPartAssyList *_p = soap_new___ns1__getPmcPartAssyList(soap);
	if (_p)
	{	soap_default___ns1__getPmcPartAssyList(soap, _p);
		_p->ns1__getPmcPartAssyList = ns1__getPmcPartAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPmcPartAssyList(struct soap*, const struct __ns1__getPmcPartAssyList *, const char*, const char*);

inline int soap_write___ns1__getPmcPartAssyList(struct soap *soap, struct __ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPmcPartAssyList(soap, p), 0) || soap_put___ns1__getPmcPartAssyList(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPmcPartAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcPartAssyList(soap, p), 0) || soap_put___ns1__getPmcPartAssyList(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPmcPartAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcPartAssyList(soap, p), 0) || soap_put___ns1__getPmcPartAssyList(soap, p, "-ns1:getPmcPartAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPmcPartAssyList * SOAP_FMAC4 soap_get___ns1__getPmcPartAssyList(struct soap*, struct __ns1__getPmcPartAssyList *, const char*, const char*);

inline int soap_read___ns1__getPmcPartAssyList(struct soap *soap, struct __ns1__getPmcPartAssyList *p)
{
	if (p)
	{	soap_default___ns1__getPmcPartAssyList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPmcPartAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPmcPartAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcPartAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPmcPartAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPmcPartAssyList(struct soap *soap, struct __ns1__getPmcPartAssyList *p)
{
	if (soap_read___ns1__getPmcPartAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPmcAssyList_DEFINED
#define SOAP_TYPE___ns1__getPmcAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPmcAssyList(struct soap*, struct __ns1__getPmcAssyList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPmcAssyList(struct soap*, const struct __ns1__getPmcAssyList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPmcAssyList(struct soap*, const char*, int, const struct __ns1__getPmcAssyList *, const char*);
SOAP_FMAC3 struct __ns1__getPmcAssyList * SOAP_FMAC4 soap_in___ns1__getPmcAssyList(struct soap*, const char*, struct __ns1__getPmcAssyList *, const char*);
SOAP_FMAC1 struct __ns1__getPmcAssyList * SOAP_FMAC2 soap_instantiate___ns1__getPmcAssyList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPmcAssyList * soap_new___ns1__getPmcAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPmcAssyList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPmcAssyList * soap_new_req___ns1__getPmcAssyList(
	struct soap *soap)
{
	struct __ns1__getPmcAssyList *_p = soap_new___ns1__getPmcAssyList(soap);
	if (_p)
	{	soap_default___ns1__getPmcAssyList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPmcAssyList * soap_new_set___ns1__getPmcAssyList(
	struct soap *soap,
	_ns1__getPmcAssyList *ns1__getPmcAssyList)
{
	struct __ns1__getPmcAssyList *_p = soap_new___ns1__getPmcAssyList(soap);
	if (_p)
	{	soap_default___ns1__getPmcAssyList(soap, _p);
		_p->ns1__getPmcAssyList = ns1__getPmcAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPmcAssyList(struct soap*, const struct __ns1__getPmcAssyList *, const char*, const char*);

inline int soap_write___ns1__getPmcAssyList(struct soap *soap, struct __ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPmcAssyList(soap, p), 0) || soap_put___ns1__getPmcAssyList(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPmcAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcAssyList(soap, p), 0) || soap_put___ns1__getPmcAssyList(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPmcAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPmcAssyList(soap, p), 0) || soap_put___ns1__getPmcAssyList(soap, p, "-ns1:getPmcAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPmcAssyList * SOAP_FMAC4 soap_get___ns1__getPmcAssyList(struct soap*, struct __ns1__getPmcAssyList *, const char*, const char*);

inline int soap_read___ns1__getPmcAssyList(struct soap *soap, struct __ns1__getPmcAssyList *p)
{
	if (p)
	{	soap_default___ns1__getPmcAssyList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPmcAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPmcAssyList(struct soap *soap, const char *URL, struct __ns1__getPmcAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPmcAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPmcAssyList(struct soap *soap, struct __ns1__getPmcAssyList *p)
{
	if (soap_read___ns1__getPmcAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doAssy_DEFINED
#define SOAP_TYPE___ns1__doAssy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doAssy(struct soap*, struct __ns1__doAssy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doAssy(struct soap*, const struct __ns1__doAssy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doAssy(struct soap*, const char*, int, const struct __ns1__doAssy *, const char*);
SOAP_FMAC3 struct __ns1__doAssy * SOAP_FMAC4 soap_in___ns1__doAssy(struct soap*, const char*, struct __ns1__doAssy *, const char*);
SOAP_FMAC1 struct __ns1__doAssy * SOAP_FMAC2 soap_instantiate___ns1__doAssy(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doAssy * soap_new___ns1__doAssy(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doAssy(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doAssy * soap_new_req___ns1__doAssy(
	struct soap *soap)
{
	struct __ns1__doAssy *_p = soap_new___ns1__doAssy(soap);
	if (_p)
	{	soap_default___ns1__doAssy(soap, _p);
	}
	return _p;
}

inline struct __ns1__doAssy * soap_new_set___ns1__doAssy(
	struct soap *soap,
	_ns1__doAssy *ns1__doAssy)
{
	struct __ns1__doAssy *_p = soap_new___ns1__doAssy(soap);
	if (_p)
	{	soap_default___ns1__doAssy(soap, _p);
		_p->ns1__doAssy = ns1__doAssy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doAssy(struct soap*, const struct __ns1__doAssy *, const char*, const char*);

inline int soap_write___ns1__doAssy(struct soap *soap, struct __ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doAssy(soap, p), 0) || soap_put___ns1__doAssy(soap, p, "-ns1:doAssy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doAssy(struct soap *soap, const char *URL, struct __ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doAssy(soap, p), 0) || soap_put___ns1__doAssy(soap, p, "-ns1:doAssy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doAssy(struct soap *soap, const char *URL, struct __ns1__doAssy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doAssy(soap, p), 0) || soap_put___ns1__doAssy(soap, p, "-ns1:doAssy", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doAssy * SOAP_FMAC4 soap_get___ns1__doAssy(struct soap*, struct __ns1__doAssy *, const char*, const char*);

inline int soap_read___ns1__doAssy(struct soap *soap, struct __ns1__doAssy *p)
{
	if (p)
	{	soap_default___ns1__doAssy(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doAssy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doAssy(struct soap *soap, const char *URL, struct __ns1__doAssy *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doAssy(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doAssy(struct soap *soap, struct __ns1__doAssy *p)
{
	if (soap_read___ns1__doAssy(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkAssySN_DEFINED
#define SOAP_TYPE___ns1__chkAssySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkAssySN(struct soap*, struct __ns1__chkAssySN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkAssySN(struct soap*, const struct __ns1__chkAssySN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkAssySN(struct soap*, const char*, int, const struct __ns1__chkAssySN *, const char*);
SOAP_FMAC3 struct __ns1__chkAssySN * SOAP_FMAC4 soap_in___ns1__chkAssySN(struct soap*, const char*, struct __ns1__chkAssySN *, const char*);
SOAP_FMAC1 struct __ns1__chkAssySN * SOAP_FMAC2 soap_instantiate___ns1__chkAssySN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkAssySN * soap_new___ns1__chkAssySN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkAssySN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkAssySN * soap_new_req___ns1__chkAssySN(
	struct soap *soap)
{
	struct __ns1__chkAssySN *_p = soap_new___ns1__chkAssySN(soap);
	if (_p)
	{	soap_default___ns1__chkAssySN(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkAssySN * soap_new_set___ns1__chkAssySN(
	struct soap *soap,
	_ns1__chkAssySN *ns1__chkAssySN)
{
	struct __ns1__chkAssySN *_p = soap_new___ns1__chkAssySN(soap);
	if (_p)
	{	soap_default___ns1__chkAssySN(soap, _p);
		_p->ns1__chkAssySN = ns1__chkAssySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkAssySN(struct soap*, const struct __ns1__chkAssySN *, const char*, const char*);

inline int soap_write___ns1__chkAssySN(struct soap *soap, struct __ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkAssySN(soap, p), 0) || soap_put___ns1__chkAssySN(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkAssySN(struct soap *soap, const char *URL, struct __ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkAssySN(soap, p), 0) || soap_put___ns1__chkAssySN(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkAssySN(struct soap *soap, const char *URL, struct __ns1__chkAssySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkAssySN(soap, p), 0) || soap_put___ns1__chkAssySN(soap, p, "-ns1:chkAssySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkAssySN * SOAP_FMAC4 soap_get___ns1__chkAssySN(struct soap*, struct __ns1__chkAssySN *, const char*, const char*);

inline int soap_read___ns1__chkAssySN(struct soap *soap, struct __ns1__chkAssySN *p)
{
	if (p)
	{	soap_default___ns1__chkAssySN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkAssySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkAssySN(struct soap *soap, const char *URL, struct __ns1__chkAssySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkAssySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkAssySN(struct soap *soap, struct __ns1__chkAssySN *p)
{
	if (soap_read___ns1__chkAssySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPNbySN_DEFINED
#define SOAP_TYPE___ns1__getPNbySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPNbySN(struct soap*, struct __ns1__getPNbySN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPNbySN(struct soap*, const struct __ns1__getPNbySN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPNbySN(struct soap*, const char*, int, const struct __ns1__getPNbySN *, const char*);
SOAP_FMAC3 struct __ns1__getPNbySN * SOAP_FMAC4 soap_in___ns1__getPNbySN(struct soap*, const char*, struct __ns1__getPNbySN *, const char*);
SOAP_FMAC1 struct __ns1__getPNbySN * SOAP_FMAC2 soap_instantiate___ns1__getPNbySN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPNbySN * soap_new___ns1__getPNbySN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPNbySN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPNbySN * soap_new_req___ns1__getPNbySN(
	struct soap *soap)
{
	struct __ns1__getPNbySN *_p = soap_new___ns1__getPNbySN(soap);
	if (_p)
	{	soap_default___ns1__getPNbySN(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPNbySN * soap_new_set___ns1__getPNbySN(
	struct soap *soap,
	_ns1__getPNbySN *ns1__getPNbySN)
{
	struct __ns1__getPNbySN *_p = soap_new___ns1__getPNbySN(soap);
	if (_p)
	{	soap_default___ns1__getPNbySN(soap, _p);
		_p->ns1__getPNbySN = ns1__getPNbySN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPNbySN(struct soap*, const struct __ns1__getPNbySN *, const char*, const char*);

inline int soap_write___ns1__getPNbySN(struct soap *soap, struct __ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPNbySN(soap, p), 0) || soap_put___ns1__getPNbySN(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPNbySN(struct soap *soap, const char *URL, struct __ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPNbySN(soap, p), 0) || soap_put___ns1__getPNbySN(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPNbySN(struct soap *soap, const char *URL, struct __ns1__getPNbySN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPNbySN(soap, p), 0) || soap_put___ns1__getPNbySN(soap, p, "-ns1:getPNbySN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPNbySN * SOAP_FMAC4 soap_get___ns1__getPNbySN(struct soap*, struct __ns1__getPNbySN *, const char*, const char*);

inline int soap_read___ns1__getPNbySN(struct soap *soap, struct __ns1__getPNbySN *p)
{
	if (p)
	{	soap_default___ns1__getPNbySN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPNbySN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPNbySN(struct soap *soap, const char *URL, struct __ns1__getPNbySN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPNbySN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPNbySN(struct soap *soap, struct __ns1__getPNbySN *p)
{
	if (soap_read___ns1__getPNbySN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoAssyCount_DEFINED
#define SOAP_TYPE___ns1__getMoAssyCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoAssyCount(struct soap*, struct __ns1__getMoAssyCount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoAssyCount(struct soap*, const struct __ns1__getMoAssyCount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoAssyCount(struct soap*, const char*, int, const struct __ns1__getMoAssyCount *, const char*);
SOAP_FMAC3 struct __ns1__getMoAssyCount * SOAP_FMAC4 soap_in___ns1__getMoAssyCount(struct soap*, const char*, struct __ns1__getMoAssyCount *, const char*);
SOAP_FMAC1 struct __ns1__getMoAssyCount * SOAP_FMAC2 soap_instantiate___ns1__getMoAssyCount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoAssyCount * soap_new___ns1__getMoAssyCount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoAssyCount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoAssyCount * soap_new_req___ns1__getMoAssyCount(
	struct soap *soap)
{
	struct __ns1__getMoAssyCount *_p = soap_new___ns1__getMoAssyCount(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyCount(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoAssyCount * soap_new_set___ns1__getMoAssyCount(
	struct soap *soap,
	_ns1__getMoAssyCount *ns1__getMoAssyCount)
{
	struct __ns1__getMoAssyCount *_p = soap_new___ns1__getMoAssyCount(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyCount(soap, _p);
		_p->ns1__getMoAssyCount = ns1__getMoAssyCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoAssyCount(struct soap*, const struct __ns1__getMoAssyCount *, const char*, const char*);

inline int soap_write___ns1__getMoAssyCount(struct soap *soap, struct __ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoAssyCount(soap, p), 0) || soap_put___ns1__getMoAssyCount(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoAssyCount(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyCount(soap, p), 0) || soap_put___ns1__getMoAssyCount(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoAssyCount(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyCount(soap, p), 0) || soap_put___ns1__getMoAssyCount(soap, p, "-ns1:getMoAssyCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoAssyCount * SOAP_FMAC4 soap_get___ns1__getMoAssyCount(struct soap*, struct __ns1__getMoAssyCount *, const char*, const char*);

inline int soap_read___ns1__getMoAssyCount(struct soap *soap, struct __ns1__getMoAssyCount *p)
{
	if (p)
	{	soap_default___ns1__getMoAssyCount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoAssyCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoAssyCount(struct soap *soap, const char *URL, struct __ns1__getMoAssyCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoAssyCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoAssyCount(struct soap *soap, struct __ns1__getMoAssyCount *p)
{
	if (soap_read___ns1__getMoAssyCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLinkOutSn_DEFINED
#define SOAP_TYPE___ns1__GetLinkOutSn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLinkOutSn(struct soap*, struct __ns1__GetLinkOutSn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLinkOutSn(struct soap*, const struct __ns1__GetLinkOutSn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLinkOutSn(struct soap*, const char*, int, const struct __ns1__GetLinkOutSn *, const char*);
SOAP_FMAC3 struct __ns1__GetLinkOutSn * SOAP_FMAC4 soap_in___ns1__GetLinkOutSn(struct soap*, const char*, struct __ns1__GetLinkOutSn *, const char*);
SOAP_FMAC1 struct __ns1__GetLinkOutSn * SOAP_FMAC2 soap_instantiate___ns1__GetLinkOutSn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLinkOutSn * soap_new___ns1__GetLinkOutSn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLinkOutSn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLinkOutSn * soap_new_req___ns1__GetLinkOutSn(
	struct soap *soap)
{
	struct __ns1__GetLinkOutSn *_p = soap_new___ns1__GetLinkOutSn(soap);
	if (_p)
	{	soap_default___ns1__GetLinkOutSn(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLinkOutSn * soap_new_set___ns1__GetLinkOutSn(
	struct soap *soap,
	_ns1__GetLinkOutSn *ns1__GetLinkOutSn)
{
	struct __ns1__GetLinkOutSn *_p = soap_new___ns1__GetLinkOutSn(soap);
	if (_p)
	{	soap_default___ns1__GetLinkOutSn(soap, _p);
		_p->ns1__GetLinkOutSn = ns1__GetLinkOutSn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLinkOutSn(struct soap*, const struct __ns1__GetLinkOutSn *, const char*, const char*);

inline int soap_write___ns1__GetLinkOutSn(struct soap *soap, struct __ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLinkOutSn(soap, p), 0) || soap_put___ns1__GetLinkOutSn(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLinkOutSn(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkOutSn(soap, p), 0) || soap_put___ns1__GetLinkOutSn(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLinkOutSn(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLinkOutSn(soap, p), 0) || soap_put___ns1__GetLinkOutSn(soap, p, "-ns1:GetLinkOutSn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLinkOutSn * SOAP_FMAC4 soap_get___ns1__GetLinkOutSn(struct soap*, struct __ns1__GetLinkOutSn *, const char*, const char*);

inline int soap_read___ns1__GetLinkOutSn(struct soap *soap, struct __ns1__GetLinkOutSn *p)
{
	if (p)
	{	soap_default___ns1__GetLinkOutSn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLinkOutSn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLinkOutSn(struct soap *soap, const char *URL, struct __ns1__GetLinkOutSn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLinkOutSn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLinkOutSn(struct soap *soap, struct __ns1__GetLinkOutSn *p)
{
	if (soap_read___ns1__GetLinkOutSn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsPartAssy_DEFINED
#define SOAP_TYPE___ns1__InsPartAssy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsPartAssy(struct soap*, struct __ns1__InsPartAssy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsPartAssy(struct soap*, const struct __ns1__InsPartAssy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsPartAssy(struct soap*, const char*, int, const struct __ns1__InsPartAssy *, const char*);
SOAP_FMAC3 struct __ns1__InsPartAssy * SOAP_FMAC4 soap_in___ns1__InsPartAssy(struct soap*, const char*, struct __ns1__InsPartAssy *, const char*);
SOAP_FMAC1 struct __ns1__InsPartAssy * SOAP_FMAC2 soap_instantiate___ns1__InsPartAssy(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsPartAssy * soap_new___ns1__InsPartAssy(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsPartAssy(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsPartAssy * soap_new_req___ns1__InsPartAssy(
	struct soap *soap)
{
	struct __ns1__InsPartAssy *_p = soap_new___ns1__InsPartAssy(soap);
	if (_p)
	{	soap_default___ns1__InsPartAssy(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsPartAssy * soap_new_set___ns1__InsPartAssy(
	struct soap *soap,
	_ns1__InsPartAssy *ns1__InsPartAssy)
{
	struct __ns1__InsPartAssy *_p = soap_new___ns1__InsPartAssy(soap);
	if (_p)
	{	soap_default___ns1__InsPartAssy(soap, _p);
		_p->ns1__InsPartAssy = ns1__InsPartAssy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsPartAssy(struct soap*, const struct __ns1__InsPartAssy *, const char*, const char*);

inline int soap_write___ns1__InsPartAssy(struct soap *soap, struct __ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsPartAssy(soap, p), 0) || soap_put___ns1__InsPartAssy(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsPartAssy(struct soap *soap, const char *URL, struct __ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsPartAssy(soap, p), 0) || soap_put___ns1__InsPartAssy(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsPartAssy(struct soap *soap, const char *URL, struct __ns1__InsPartAssy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsPartAssy(soap, p), 0) || soap_put___ns1__InsPartAssy(soap, p, "-ns1:InsPartAssy", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsPartAssy * SOAP_FMAC4 soap_get___ns1__InsPartAssy(struct soap*, struct __ns1__InsPartAssy *, const char*, const char*);

inline int soap_read___ns1__InsPartAssy(struct soap *soap, struct __ns1__InsPartAssy *p)
{
	if (p)
	{	soap_default___ns1__InsPartAssy(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsPartAssy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsPartAssy(struct soap *soap, const char *URL, struct __ns1__InsPartAssy *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsPartAssy(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsPartAssy(struct soap *soap, struct __ns1__InsPartAssy *p)
{
	if (soap_read___ns1__InsPartAssy(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPartBomExt_DEFINED
#define SOAP_TYPE___ns1__getPartBomExt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPartBomExt(struct soap*, struct __ns1__getPartBomExt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPartBomExt(struct soap*, const struct __ns1__getPartBomExt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPartBomExt(struct soap*, const char*, int, const struct __ns1__getPartBomExt *, const char*);
SOAP_FMAC3 struct __ns1__getPartBomExt * SOAP_FMAC4 soap_in___ns1__getPartBomExt(struct soap*, const char*, struct __ns1__getPartBomExt *, const char*);
SOAP_FMAC1 struct __ns1__getPartBomExt * SOAP_FMAC2 soap_instantiate___ns1__getPartBomExt(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPartBomExt * soap_new___ns1__getPartBomExt(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPartBomExt(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPartBomExt * soap_new_req___ns1__getPartBomExt(
	struct soap *soap)
{
	struct __ns1__getPartBomExt *_p = soap_new___ns1__getPartBomExt(soap);
	if (_p)
	{	soap_default___ns1__getPartBomExt(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPartBomExt * soap_new_set___ns1__getPartBomExt(
	struct soap *soap,
	_ns1__getPartBomExt *ns1__getPartBomExt)
{
	struct __ns1__getPartBomExt *_p = soap_new___ns1__getPartBomExt(soap);
	if (_p)
	{	soap_default___ns1__getPartBomExt(soap, _p);
		_p->ns1__getPartBomExt = ns1__getPartBomExt;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPartBomExt(struct soap*, const struct __ns1__getPartBomExt *, const char*, const char*);

inline int soap_write___ns1__getPartBomExt(struct soap *soap, struct __ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getPartBomExt(soap, p), 0) || soap_put___ns1__getPartBomExt(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPartBomExt(struct soap *soap, const char *URL, struct __ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPartBomExt(soap, p), 0) || soap_put___ns1__getPartBomExt(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPartBomExt(struct soap *soap, const char *URL, struct __ns1__getPartBomExt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPartBomExt(soap, p), 0) || soap_put___ns1__getPartBomExt(soap, p, "-ns1:getPartBomExt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPartBomExt * SOAP_FMAC4 soap_get___ns1__getPartBomExt(struct soap*, struct __ns1__getPartBomExt *, const char*, const char*);

inline int soap_read___ns1__getPartBomExt(struct soap *soap, struct __ns1__getPartBomExt *p)
{
	if (p)
	{	soap_default___ns1__getPartBomExt(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPartBomExt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPartBomExt(struct soap *soap, const char *URL, struct __ns1__getPartBomExt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getPartBomExt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getPartBomExt(struct soap *soap, struct __ns1__getPartBomExt *p)
{
	if (soap_read___ns1__getPartBomExt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoAssyList_DEFINED
#define SOAP_TYPE___ns1__getMoAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoAssyList(struct soap*, struct __ns1__getMoAssyList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoAssyList(struct soap*, const struct __ns1__getMoAssyList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoAssyList(struct soap*, const char*, int, const struct __ns1__getMoAssyList *, const char*);
SOAP_FMAC3 struct __ns1__getMoAssyList * SOAP_FMAC4 soap_in___ns1__getMoAssyList(struct soap*, const char*, struct __ns1__getMoAssyList *, const char*);
SOAP_FMAC1 struct __ns1__getMoAssyList * SOAP_FMAC2 soap_instantiate___ns1__getMoAssyList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoAssyList * soap_new___ns1__getMoAssyList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoAssyList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoAssyList * soap_new_req___ns1__getMoAssyList(
	struct soap *soap)
{
	struct __ns1__getMoAssyList *_p = soap_new___ns1__getMoAssyList(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoAssyList * soap_new_set___ns1__getMoAssyList(
	struct soap *soap,
	_ns1__getMoAssyList *ns1__getMoAssyList)
{
	struct __ns1__getMoAssyList *_p = soap_new___ns1__getMoAssyList(soap);
	if (_p)
	{	soap_default___ns1__getMoAssyList(soap, _p);
		_p->ns1__getMoAssyList = ns1__getMoAssyList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoAssyList(struct soap*, const struct __ns1__getMoAssyList *, const char*, const char*);

inline int soap_write___ns1__getMoAssyList(struct soap *soap, struct __ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoAssyList(soap, p), 0) || soap_put___ns1__getMoAssyList(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoAssyList(struct soap *soap, const char *URL, struct __ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyList(soap, p), 0) || soap_put___ns1__getMoAssyList(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoAssyList(struct soap *soap, const char *URL, struct __ns1__getMoAssyList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoAssyList(soap, p), 0) || soap_put___ns1__getMoAssyList(soap, p, "-ns1:getMoAssyList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoAssyList * SOAP_FMAC4 soap_get___ns1__getMoAssyList(struct soap*, struct __ns1__getMoAssyList *, const char*, const char*);

inline int soap_read___ns1__getMoAssyList(struct soap *soap, struct __ns1__getMoAssyList *p)
{
	if (p)
	{	soap_default___ns1__getMoAssyList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoAssyList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoAssyList(struct soap *soap, const char *URL, struct __ns1__getMoAssyList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoAssyList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoAssyList(struct soap *soap, struct __ns1__getMoAssyList *p)
{
	if (soap_read___ns1__getMoAssyList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkSnMapping_DEFINED
#define SOAP_TYPE___ns1__chkSnMapping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkSnMapping(struct soap*, struct __ns1__chkSnMapping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkSnMapping(struct soap*, const struct __ns1__chkSnMapping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkSnMapping(struct soap*, const char*, int, const struct __ns1__chkSnMapping *, const char*);
SOAP_FMAC3 struct __ns1__chkSnMapping * SOAP_FMAC4 soap_in___ns1__chkSnMapping(struct soap*, const char*, struct __ns1__chkSnMapping *, const char*);
SOAP_FMAC1 struct __ns1__chkSnMapping * SOAP_FMAC2 soap_instantiate___ns1__chkSnMapping(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkSnMapping * soap_new___ns1__chkSnMapping(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkSnMapping(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkSnMapping * soap_new_req___ns1__chkSnMapping(
	struct soap *soap)
{
	struct __ns1__chkSnMapping *_p = soap_new___ns1__chkSnMapping(soap);
	if (_p)
	{	soap_default___ns1__chkSnMapping(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkSnMapping * soap_new_set___ns1__chkSnMapping(
	struct soap *soap,
	_ns1__chkSnMapping *ns1__chkSnMapping)
{
	struct __ns1__chkSnMapping *_p = soap_new___ns1__chkSnMapping(soap);
	if (_p)
	{	soap_default___ns1__chkSnMapping(soap, _p);
		_p->ns1__chkSnMapping = ns1__chkSnMapping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkSnMapping(struct soap*, const struct __ns1__chkSnMapping *, const char*, const char*);

inline int soap_write___ns1__chkSnMapping(struct soap *soap, struct __ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkSnMapping(soap, p), 0) || soap_put___ns1__chkSnMapping(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkSnMapping(struct soap *soap, const char *URL, struct __ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkSnMapping(soap, p), 0) || soap_put___ns1__chkSnMapping(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkSnMapping(struct soap *soap, const char *URL, struct __ns1__chkSnMapping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkSnMapping(soap, p), 0) || soap_put___ns1__chkSnMapping(soap, p, "-ns1:chkSnMapping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkSnMapping * SOAP_FMAC4 soap_get___ns1__chkSnMapping(struct soap*, struct __ns1__chkSnMapping *, const char*, const char*);

inline int soap_read___ns1__chkSnMapping(struct soap *soap, struct __ns1__chkSnMapping *p)
{
	if (p)
	{	soap_default___ns1__chkSnMapping(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkSnMapping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkSnMapping(struct soap *soap, const char *URL, struct __ns1__chkSnMapping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkSnMapping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkSnMapping(struct soap *soap, struct __ns1__chkSnMapping *p)
{
	if (soap_read___ns1__chkSnMapping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationTypeDesc_DEFINED
#define SOAP_TYPE___ns1__getStationTypeDesc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationTypeDesc(struct soap*, struct __ns1__getStationTypeDesc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationTypeDesc(struct soap*, const struct __ns1__getStationTypeDesc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationTypeDesc(struct soap*, const char*, int, const struct __ns1__getStationTypeDesc *, const char*);
SOAP_FMAC3 struct __ns1__getStationTypeDesc * SOAP_FMAC4 soap_in___ns1__getStationTypeDesc(struct soap*, const char*, struct __ns1__getStationTypeDesc *, const char*);
SOAP_FMAC1 struct __ns1__getStationTypeDesc * SOAP_FMAC2 soap_instantiate___ns1__getStationTypeDesc(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationTypeDesc * soap_new___ns1__getStationTypeDesc(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationTypeDesc(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationTypeDesc * soap_new_req___ns1__getStationTypeDesc(
	struct soap *soap)
{
	struct __ns1__getStationTypeDesc *_p = soap_new___ns1__getStationTypeDesc(soap);
	if (_p)
	{	soap_default___ns1__getStationTypeDesc(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationTypeDesc * soap_new_set___ns1__getStationTypeDesc(
	struct soap *soap,
	_ns1__getStationTypeDesc *ns1__getStationTypeDesc)
{
	struct __ns1__getStationTypeDesc *_p = soap_new___ns1__getStationTypeDesc(soap);
	if (_p)
	{	soap_default___ns1__getStationTypeDesc(soap, _p);
		_p->ns1__getStationTypeDesc = ns1__getStationTypeDesc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationTypeDesc(struct soap*, const struct __ns1__getStationTypeDesc *, const char*, const char*);

inline int soap_write___ns1__getStationTypeDesc(struct soap *soap, struct __ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationTypeDesc(soap, p), 0) || soap_put___ns1__getStationTypeDesc(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationTypeDesc(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationTypeDesc(soap, p), 0) || soap_put___ns1__getStationTypeDesc(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationTypeDesc(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationTypeDesc(soap, p), 0) || soap_put___ns1__getStationTypeDesc(soap, p, "-ns1:getStationTypeDesc", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationTypeDesc * SOAP_FMAC4 soap_get___ns1__getStationTypeDesc(struct soap*, struct __ns1__getStationTypeDesc *, const char*, const char*);

inline int soap_read___ns1__getStationTypeDesc(struct soap *soap, struct __ns1__getStationTypeDesc *p)
{
	if (p)
	{	soap_default___ns1__getStationTypeDesc(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationTypeDesc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationTypeDesc(struct soap *soap, const char *URL, struct __ns1__getStationTypeDesc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationTypeDesc(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationTypeDesc(struct soap *soap, struct __ns1__getStationTypeDesc *p)
{
	if (soap_read___ns1__getStationTypeDesc(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationByMo_DEFINED
#define SOAP_TYPE___ns1__getStationByMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationByMo(struct soap*, struct __ns1__getStationByMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationByMo(struct soap*, const struct __ns1__getStationByMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationByMo(struct soap*, const char*, int, const struct __ns1__getStationByMo *, const char*);
SOAP_FMAC3 struct __ns1__getStationByMo * SOAP_FMAC4 soap_in___ns1__getStationByMo(struct soap*, const char*, struct __ns1__getStationByMo *, const char*);
SOAP_FMAC1 struct __ns1__getStationByMo * SOAP_FMAC2 soap_instantiate___ns1__getStationByMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationByMo * soap_new___ns1__getStationByMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationByMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationByMo * soap_new_req___ns1__getStationByMo(
	struct soap *soap)
{
	struct __ns1__getStationByMo *_p = soap_new___ns1__getStationByMo(soap);
	if (_p)
	{	soap_default___ns1__getStationByMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationByMo * soap_new_set___ns1__getStationByMo(
	struct soap *soap,
	_ns1__getStationByMo *ns1__getStationByMo)
{
	struct __ns1__getStationByMo *_p = soap_new___ns1__getStationByMo(soap);
	if (_p)
	{	soap_default___ns1__getStationByMo(soap, _p);
		_p->ns1__getStationByMo = ns1__getStationByMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationByMo(struct soap*, const struct __ns1__getStationByMo *, const char*, const char*);

inline int soap_write___ns1__getStationByMo(struct soap *soap, struct __ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationByMo(soap, p), 0) || soap_put___ns1__getStationByMo(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationByMo(struct soap *soap, const char *URL, struct __ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMo(soap, p), 0) || soap_put___ns1__getStationByMo(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationByMo(struct soap *soap, const char *URL, struct __ns1__getStationByMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMo(soap, p), 0) || soap_put___ns1__getStationByMo(soap, p, "-ns1:getStationByMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationByMo * SOAP_FMAC4 soap_get___ns1__getStationByMo(struct soap*, struct __ns1__getStationByMo *, const char*, const char*);

inline int soap_read___ns1__getStationByMo(struct soap *soap, struct __ns1__getStationByMo *p)
{
	if (p)
	{	soap_default___ns1__getStationByMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationByMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationByMo(struct soap *soap, const char *URL, struct __ns1__getStationByMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationByMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationByMo(struct soap *soap, struct __ns1__getStationByMo *p)
{
	if (soap_read___ns1__getStationByMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnDoMapping_DEFINED
#define SOAP_TYPE___ns1__SnDoMapping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnDoMapping(struct soap*, struct __ns1__SnDoMapping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnDoMapping(struct soap*, const struct __ns1__SnDoMapping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnDoMapping(struct soap*, const char*, int, const struct __ns1__SnDoMapping *, const char*);
SOAP_FMAC3 struct __ns1__SnDoMapping * SOAP_FMAC4 soap_in___ns1__SnDoMapping(struct soap*, const char*, struct __ns1__SnDoMapping *, const char*);
SOAP_FMAC1 struct __ns1__SnDoMapping * SOAP_FMAC2 soap_instantiate___ns1__SnDoMapping(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnDoMapping * soap_new___ns1__SnDoMapping(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnDoMapping(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnDoMapping * soap_new_req___ns1__SnDoMapping(
	struct soap *soap)
{
	struct __ns1__SnDoMapping *_p = soap_new___ns1__SnDoMapping(soap);
	if (_p)
	{	soap_default___ns1__SnDoMapping(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnDoMapping * soap_new_set___ns1__SnDoMapping(
	struct soap *soap,
	_ns1__SnDoMapping *ns1__SnDoMapping)
{
	struct __ns1__SnDoMapping *_p = soap_new___ns1__SnDoMapping(soap);
	if (_p)
	{	soap_default___ns1__SnDoMapping(soap, _p);
		_p->ns1__SnDoMapping = ns1__SnDoMapping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnDoMapping(struct soap*, const struct __ns1__SnDoMapping *, const char*, const char*);

inline int soap_write___ns1__SnDoMapping(struct soap *soap, struct __ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SnDoMapping(soap, p), 0) || soap_put___ns1__SnDoMapping(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SnDoMapping(struct soap *soap, const char *URL, struct __ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnDoMapping(soap, p), 0) || soap_put___ns1__SnDoMapping(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SnDoMapping(struct soap *soap, const char *URL, struct __ns1__SnDoMapping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnDoMapping(soap, p), 0) || soap_put___ns1__SnDoMapping(soap, p, "-ns1:SnDoMapping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnDoMapping * SOAP_FMAC4 soap_get___ns1__SnDoMapping(struct soap*, struct __ns1__SnDoMapping *, const char*, const char*);

inline int soap_read___ns1__SnDoMapping(struct soap *soap, struct __ns1__SnDoMapping *p)
{
	if (p)
	{	soap_default___ns1__SnDoMapping(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnDoMapping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SnDoMapping(struct soap *soap, const char *URL, struct __ns1__SnDoMapping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SnDoMapping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SnDoMapping(struct soap *soap, struct __ns1__SnDoMapping *p)
{
	if (soap_read___ns1__SnDoMapping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__eMesNextMo_DEFINED
#define SOAP_TYPE___ns1__eMesNextMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__eMesNextMo(struct soap*, struct __ns1__eMesNextMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__eMesNextMo(struct soap*, const struct __ns1__eMesNextMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__eMesNextMo(struct soap*, const char*, int, const struct __ns1__eMesNextMo *, const char*);
SOAP_FMAC3 struct __ns1__eMesNextMo * SOAP_FMAC4 soap_in___ns1__eMesNextMo(struct soap*, const char*, struct __ns1__eMesNextMo *, const char*);
SOAP_FMAC1 struct __ns1__eMesNextMo * SOAP_FMAC2 soap_instantiate___ns1__eMesNextMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__eMesNextMo * soap_new___ns1__eMesNextMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__eMesNextMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__eMesNextMo * soap_new_req___ns1__eMesNextMo(
	struct soap *soap)
{
	struct __ns1__eMesNextMo *_p = soap_new___ns1__eMesNextMo(soap);
	if (_p)
	{	soap_default___ns1__eMesNextMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__eMesNextMo * soap_new_set___ns1__eMesNextMo(
	struct soap *soap,
	_ns1__eMesNextMo *ns1__eMesNextMo)
{
	struct __ns1__eMesNextMo *_p = soap_new___ns1__eMesNextMo(soap);
	if (_p)
	{	soap_default___ns1__eMesNextMo(soap, _p);
		_p->ns1__eMesNextMo = ns1__eMesNextMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__eMesNextMo(struct soap*, const struct __ns1__eMesNextMo *, const char*, const char*);

inline int soap_write___ns1__eMesNextMo(struct soap *soap, struct __ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__eMesNextMo(soap, p), 0) || soap_put___ns1__eMesNextMo(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__eMesNextMo(struct soap *soap, const char *URL, struct __ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__eMesNextMo(soap, p), 0) || soap_put___ns1__eMesNextMo(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__eMesNextMo(struct soap *soap, const char *URL, struct __ns1__eMesNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__eMesNextMo(soap, p), 0) || soap_put___ns1__eMesNextMo(soap, p, "-ns1:eMesNextMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__eMesNextMo * SOAP_FMAC4 soap_get___ns1__eMesNextMo(struct soap*, struct __ns1__eMesNextMo *, const char*, const char*);

inline int soap_read___ns1__eMesNextMo(struct soap *soap, struct __ns1__eMesNextMo *p)
{
	if (p)
	{	soap_default___ns1__eMesNextMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__eMesNextMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__eMesNextMo(struct soap *soap, const char *URL, struct __ns1__eMesNextMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__eMesNextMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__eMesNextMo(struct soap *soap, struct __ns1__eMesNextMo *p)
{
	if (soap_read___ns1__eMesNextMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendResultForStationNumber_DEFINED
#define SOAP_TYPE___ns1__sendResultForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendResultForStationNumber(struct soap*, struct __ns1__sendResultForStationNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendResultForStationNumber(struct soap*, const struct __ns1__sendResultForStationNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendResultForStationNumber(struct soap*, const char*, int, const struct __ns1__sendResultForStationNumber *, const char*);
SOAP_FMAC3 struct __ns1__sendResultForStationNumber * SOAP_FMAC4 soap_in___ns1__sendResultForStationNumber(struct soap*, const char*, struct __ns1__sendResultForStationNumber *, const char*);
SOAP_FMAC1 struct __ns1__sendResultForStationNumber * SOAP_FMAC2 soap_instantiate___ns1__sendResultForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendResultForStationNumber * soap_new___ns1__sendResultForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendResultForStationNumber(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendResultForStationNumber * soap_new_req___ns1__sendResultForStationNumber(
	struct soap *soap)
{
	struct __ns1__sendResultForStationNumber *_p = soap_new___ns1__sendResultForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__sendResultForStationNumber(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendResultForStationNumber * soap_new_set___ns1__sendResultForStationNumber(
	struct soap *soap,
	_ns1__sendResultForStationNumber *ns1__sendResultForStationNumber)
{
	struct __ns1__sendResultForStationNumber *_p = soap_new___ns1__sendResultForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__sendResultForStationNumber(soap, _p);
		_p->ns1__sendResultForStationNumber = ns1__sendResultForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendResultForStationNumber(struct soap*, const struct __ns1__sendResultForStationNumber *, const char*, const char*);

inline int soap_write___ns1__sendResultForStationNumber(struct soap *soap, struct __ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendResultForStationNumber(soap, p), 0) || soap_put___ns1__sendResultForStationNumber(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendResultForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendResultForStationNumber(soap, p), 0) || soap_put___ns1__sendResultForStationNumber(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendResultForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendResultForStationNumber(soap, p), 0) || soap_put___ns1__sendResultForStationNumber(soap, p, "-ns1:sendResultForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendResultForStationNumber * SOAP_FMAC4 soap_get___ns1__sendResultForStationNumber(struct soap*, struct __ns1__sendResultForStationNumber *, const char*, const char*);

inline int soap_read___ns1__sendResultForStationNumber(struct soap *soap, struct __ns1__sendResultForStationNumber *p)
{
	if (p)
	{	soap_default___ns1__sendResultForStationNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendResultForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendResultForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendResultForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendResultForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendResultForStationNumber(struct soap *soap, struct __ns1__sendResultForStationNumber *p)
{
	if (soap_read___ns1__sendResultForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendDataForStationNumber_DEFINED
#define SOAP_TYPE___ns1__sendDataForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendDataForStationNumber(struct soap*, struct __ns1__sendDataForStationNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendDataForStationNumber(struct soap*, const struct __ns1__sendDataForStationNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendDataForStationNumber(struct soap*, const char*, int, const struct __ns1__sendDataForStationNumber *, const char*);
SOAP_FMAC3 struct __ns1__sendDataForStationNumber * SOAP_FMAC4 soap_in___ns1__sendDataForStationNumber(struct soap*, const char*, struct __ns1__sendDataForStationNumber *, const char*);
SOAP_FMAC1 struct __ns1__sendDataForStationNumber * SOAP_FMAC2 soap_instantiate___ns1__sendDataForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendDataForStationNumber * soap_new___ns1__sendDataForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendDataForStationNumber(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendDataForStationNumber * soap_new_req___ns1__sendDataForStationNumber(
	struct soap *soap)
{
	struct __ns1__sendDataForStationNumber *_p = soap_new___ns1__sendDataForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__sendDataForStationNumber(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendDataForStationNumber * soap_new_set___ns1__sendDataForStationNumber(
	struct soap *soap,
	_ns1__sendDataForStationNumber *ns1__sendDataForStationNumber)
{
	struct __ns1__sendDataForStationNumber *_p = soap_new___ns1__sendDataForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__sendDataForStationNumber(soap, _p);
		_p->ns1__sendDataForStationNumber = ns1__sendDataForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendDataForStationNumber(struct soap*, const struct __ns1__sendDataForStationNumber *, const char*, const char*);

inline int soap_write___ns1__sendDataForStationNumber(struct soap *soap, struct __ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendDataForStationNumber(soap, p), 0) || soap_put___ns1__sendDataForStationNumber(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendDataForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendDataForStationNumber(soap, p), 0) || soap_put___ns1__sendDataForStationNumber(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendDataForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendDataForStationNumber(soap, p), 0) || soap_put___ns1__sendDataForStationNumber(soap, p, "-ns1:sendDataForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendDataForStationNumber * SOAP_FMAC4 soap_get___ns1__sendDataForStationNumber(struct soap*, struct __ns1__sendDataForStationNumber *, const char*, const char*);

inline int soap_read___ns1__sendDataForStationNumber(struct soap *soap, struct __ns1__sendDataForStationNumber *p)
{
	if (p)
	{	soap_default___ns1__sendDataForStationNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendDataForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendDataForStationNumber(struct soap *soap, const char *URL, struct __ns1__sendDataForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendDataForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendDataForStationNumber(struct soap *soap, struct __ns1__sendDataForStationNumber *p)
{
	if (soap_read___ns1__sendDataForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkEmpForStationNumber_DEFINED
#define SOAP_TYPE___ns1__checkEmpForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkEmpForStationNumber(struct soap*, struct __ns1__checkEmpForStationNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkEmpForStationNumber(struct soap*, const struct __ns1__checkEmpForStationNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkEmpForStationNumber(struct soap*, const char*, int, const struct __ns1__checkEmpForStationNumber *, const char*);
SOAP_FMAC3 struct __ns1__checkEmpForStationNumber * SOAP_FMAC4 soap_in___ns1__checkEmpForStationNumber(struct soap*, const char*, struct __ns1__checkEmpForStationNumber *, const char*);
SOAP_FMAC1 struct __ns1__checkEmpForStationNumber * SOAP_FMAC2 soap_instantiate___ns1__checkEmpForStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkEmpForStationNumber * soap_new___ns1__checkEmpForStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkEmpForStationNumber(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkEmpForStationNumber * soap_new_req___ns1__checkEmpForStationNumber(
	struct soap *soap)
{
	struct __ns1__checkEmpForStationNumber *_p = soap_new___ns1__checkEmpForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__checkEmpForStationNumber(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkEmpForStationNumber * soap_new_set___ns1__checkEmpForStationNumber(
	struct soap *soap,
	_ns1__checkEmpForStationNumber *ns1__checkEmpForStationNumber)
{
	struct __ns1__checkEmpForStationNumber *_p = soap_new___ns1__checkEmpForStationNumber(soap);
	if (_p)
	{	soap_default___ns1__checkEmpForStationNumber(soap, _p);
		_p->ns1__checkEmpForStationNumber = ns1__checkEmpForStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkEmpForStationNumber(struct soap*, const struct __ns1__checkEmpForStationNumber *, const char*, const char*);

inline int soap_write___ns1__checkEmpForStationNumber(struct soap *soap, struct __ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkEmpForStationNumber(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpForStationNumber(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpForStationNumber(soap, p), 0) || soap_put___ns1__checkEmpForStationNumber(soap, p, "-ns1:checkEmpForStationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkEmpForStationNumber * SOAP_FMAC4 soap_get___ns1__checkEmpForStationNumber(struct soap*, struct __ns1__checkEmpForStationNumber *, const char*, const char*);

inline int soap_read___ns1__checkEmpForStationNumber(struct soap *soap, struct __ns1__checkEmpForStationNumber *p)
{
	if (p)
	{	soap_default___ns1__checkEmpForStationNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkEmpForStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkEmpForStationNumber(struct soap *soap, const char *URL, struct __ns1__checkEmpForStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkEmpForStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkEmpForStationNumber(struct soap *soap, struct __ns1__checkEmpForStationNumber *p)
{
	if (soap_read___ns1__checkEmpForStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSN_USCOREStationNumber_DEFINED
#define SOAP_TYPE___ns1__checkSN_USCOREStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSN_USCOREStationNumber(struct soap*, struct __ns1__checkSN_USCOREStationNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSN_USCOREStationNumber(struct soap*, const struct __ns1__checkSN_USCOREStationNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSN_USCOREStationNumber(struct soap*, const char*, int, const struct __ns1__checkSN_USCOREStationNumber *, const char*);
SOAP_FMAC3 struct __ns1__checkSN_USCOREStationNumber * SOAP_FMAC4 soap_in___ns1__checkSN_USCOREStationNumber(struct soap*, const char*, struct __ns1__checkSN_USCOREStationNumber *, const char*);
SOAP_FMAC1 struct __ns1__checkSN_USCOREStationNumber * SOAP_FMAC2 soap_instantiate___ns1__checkSN_USCOREStationNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSN_USCOREStationNumber * soap_new___ns1__checkSN_USCOREStationNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSN_USCOREStationNumber(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSN_USCOREStationNumber * soap_new_req___ns1__checkSN_USCOREStationNumber(
	struct soap *soap)
{
	struct __ns1__checkSN_USCOREStationNumber *_p = soap_new___ns1__checkSN_USCOREStationNumber(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStationNumber(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSN_USCOREStationNumber * soap_new_set___ns1__checkSN_USCOREStationNumber(
	struct soap *soap,
	_ns1__checkSN_USCOREStationNumber *ns1__checkSN_USCOREStationNumber)
{
	struct __ns1__checkSN_USCOREStationNumber *_p = soap_new___ns1__checkSN_USCOREStationNumber(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStationNumber(soap, _p);
		_p->ns1__checkSN_USCOREStationNumber = ns1__checkSN_USCOREStationNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSN_USCOREStationNumber(struct soap*, const struct __ns1__checkSN_USCOREStationNumber *, const char*, const char*);

inline int soap_write___ns1__checkSN_USCOREStationNumber(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSN_USCOREStationNumber(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStationNumber(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStationNumber(soap, p), 0) || soap_put___ns1__checkSN_USCOREStationNumber(soap, p, "-ns1:checkSN_StationNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSN_USCOREStationNumber * SOAP_FMAC4 soap_get___ns1__checkSN_USCOREStationNumber(struct soap*, struct __ns1__checkSN_USCOREStationNumber *, const char*, const char*);

inline int soap_read___ns1__checkSN_USCOREStationNumber(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber *p)
{
	if (p)
	{	soap_default___ns1__checkSN_USCOREStationNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSN_USCOREStationNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkSN_USCOREStationNumber(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStationNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkSN_USCOREStationNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkSN_USCOREStationNumber(struct soap *soap, struct __ns1__checkSN_USCOREStationNumber *p)
{
	if (soap_read___ns1__checkSN_USCOREStationNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnNextMo_DEFINED
#define SOAP_TYPE___ns1__ChkSnNextMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnNextMo(struct soap*, struct __ns1__ChkSnNextMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnNextMo(struct soap*, const struct __ns1__ChkSnNextMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnNextMo(struct soap*, const char*, int, const struct __ns1__ChkSnNextMo *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnNextMo * SOAP_FMAC4 soap_in___ns1__ChkSnNextMo(struct soap*, const char*, struct __ns1__ChkSnNextMo *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnNextMo * SOAP_FMAC2 soap_instantiate___ns1__ChkSnNextMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnNextMo * soap_new___ns1__ChkSnNextMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnNextMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnNextMo * soap_new_req___ns1__ChkSnNextMo(
	struct soap *soap)
{
	struct __ns1__ChkSnNextMo *_p = soap_new___ns1__ChkSnNextMo(soap);
	if (_p)
	{	soap_default___ns1__ChkSnNextMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnNextMo * soap_new_set___ns1__ChkSnNextMo(
	struct soap *soap,
	_ns1__ChkSnNextMo *ns1__ChkSnNextMo)
{
	struct __ns1__ChkSnNextMo *_p = soap_new___ns1__ChkSnNextMo(soap);
	if (_p)
	{	soap_default___ns1__ChkSnNextMo(soap, _p);
		_p->ns1__ChkSnNextMo = ns1__ChkSnNextMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnNextMo(struct soap*, const struct __ns1__ChkSnNextMo *, const char*, const char*);

inline int soap_write___ns1__ChkSnNextMo(struct soap *soap, struct __ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnNextMo(soap, p), 0) || soap_put___ns1__ChkSnNextMo(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnNextMo(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnNextMo(soap, p), 0) || soap_put___ns1__ChkSnNextMo(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnNextMo(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnNextMo(soap, p), 0) || soap_put___ns1__ChkSnNextMo(soap, p, "-ns1:ChkSnNextMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnNextMo * SOAP_FMAC4 soap_get___ns1__ChkSnNextMo(struct soap*, struct __ns1__ChkSnNextMo *, const char*, const char*);

inline int soap_read___ns1__ChkSnNextMo(struct soap *soap, struct __ns1__ChkSnNextMo *p)
{
	if (p)
	{	soap_default___ns1__ChkSnNextMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnNextMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnNextMo(struct soap *soap, const char *URL, struct __ns1__ChkSnNextMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnNextMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnNextMo(struct soap *soap, struct __ns1__ChkSnNextMo *p)
{
	if (soap_read___ns1__ChkSnNextMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnMo_DEFINED
#define SOAP_TYPE___ns1__ChkSnMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnMo(struct soap*, struct __ns1__ChkSnMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnMo(struct soap*, const struct __ns1__ChkSnMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnMo(struct soap*, const char*, int, const struct __ns1__ChkSnMo *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnMo * SOAP_FMAC4 soap_in___ns1__ChkSnMo(struct soap*, const char*, struct __ns1__ChkSnMo *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnMo * SOAP_FMAC2 soap_instantiate___ns1__ChkSnMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnMo * soap_new___ns1__ChkSnMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnMo * soap_new_req___ns1__ChkSnMo(
	struct soap *soap)
{
	struct __ns1__ChkSnMo *_p = soap_new___ns1__ChkSnMo(soap);
	if (_p)
	{	soap_default___ns1__ChkSnMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnMo * soap_new_set___ns1__ChkSnMo(
	struct soap *soap,
	_ns1__ChkSnMo *ns1__ChkSnMo)
{
	struct __ns1__ChkSnMo *_p = soap_new___ns1__ChkSnMo(soap);
	if (_p)
	{	soap_default___ns1__ChkSnMo(soap, _p);
		_p->ns1__ChkSnMo = ns1__ChkSnMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnMo(struct soap*, const struct __ns1__ChkSnMo *, const char*, const char*);

inline int soap_write___ns1__ChkSnMo(struct soap *soap, struct __ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnMo(soap, p), 0) || soap_put___ns1__ChkSnMo(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnMo(struct soap *soap, const char *URL, struct __ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnMo(soap, p), 0) || soap_put___ns1__ChkSnMo(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnMo(struct soap *soap, const char *URL, struct __ns1__ChkSnMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnMo(soap, p), 0) || soap_put___ns1__ChkSnMo(soap, p, "-ns1:ChkSnMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnMo * SOAP_FMAC4 soap_get___ns1__ChkSnMo(struct soap*, struct __ns1__ChkSnMo *, const char*, const char*);

inline int soap_read___ns1__ChkSnMo(struct soap *soap, struct __ns1__ChkSnMo *p)
{
	if (p)
	{	soap_default___ns1__ChkSnMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnMo(struct soap *soap, const char *URL, struct __ns1__ChkSnMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnMo(struct soap *soap, struct __ns1__ChkSnMo *p)
{
	if (soap_read___ns1__ChkSnMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkMoStation_DEFINED
#define SOAP_TYPE___ns1__chkMoStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkMoStation(struct soap*, struct __ns1__chkMoStation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkMoStation(struct soap*, const struct __ns1__chkMoStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkMoStation(struct soap*, const char*, int, const struct __ns1__chkMoStation *, const char*);
SOAP_FMAC3 struct __ns1__chkMoStation * SOAP_FMAC4 soap_in___ns1__chkMoStation(struct soap*, const char*, struct __ns1__chkMoStation *, const char*);
SOAP_FMAC1 struct __ns1__chkMoStation * SOAP_FMAC2 soap_instantiate___ns1__chkMoStation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkMoStation * soap_new___ns1__chkMoStation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkMoStation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkMoStation * soap_new_req___ns1__chkMoStation(
	struct soap *soap)
{
	struct __ns1__chkMoStation *_p = soap_new___ns1__chkMoStation(soap);
	if (_p)
	{	soap_default___ns1__chkMoStation(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkMoStation * soap_new_set___ns1__chkMoStation(
	struct soap *soap,
	_ns1__chkMoStation *ns1__chkMoStation)
{
	struct __ns1__chkMoStation *_p = soap_new___ns1__chkMoStation(soap);
	if (_p)
	{	soap_default___ns1__chkMoStation(soap, _p);
		_p->ns1__chkMoStation = ns1__chkMoStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkMoStation(struct soap*, const struct __ns1__chkMoStation *, const char*, const char*);

inline int soap_write___ns1__chkMoStation(struct soap *soap, struct __ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkMoStation(soap, p), 0) || soap_put___ns1__chkMoStation(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkMoStation(struct soap *soap, const char *URL, struct __ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoStation(soap, p), 0) || soap_put___ns1__chkMoStation(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkMoStation(struct soap *soap, const char *URL, struct __ns1__chkMoStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoStation(soap, p), 0) || soap_put___ns1__chkMoStation(soap, p, "-ns1:chkMoStation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkMoStation * SOAP_FMAC4 soap_get___ns1__chkMoStation(struct soap*, struct __ns1__chkMoStation *, const char*, const char*);

inline int soap_read___ns1__chkMoStation(struct soap *soap, struct __ns1__chkMoStation *p)
{
	if (p)
	{	soap_default___ns1__chkMoStation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkMoStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkMoStation(struct soap *soap, const char *URL, struct __ns1__chkMoStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkMoStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkMoStation(struct soap *soap, struct __ns1__chkMoStation *p)
{
	if (soap_read___ns1__chkMoStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetEnergyStat_DEFINED
#define SOAP_TYPE___ns1__SetEnergyStat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetEnergyStat(struct soap*, struct __ns1__SetEnergyStat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetEnergyStat(struct soap*, const struct __ns1__SetEnergyStat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetEnergyStat(struct soap*, const char*, int, const struct __ns1__SetEnergyStat *, const char*);
SOAP_FMAC3 struct __ns1__SetEnergyStat * SOAP_FMAC4 soap_in___ns1__SetEnergyStat(struct soap*, const char*, struct __ns1__SetEnergyStat *, const char*);
SOAP_FMAC1 struct __ns1__SetEnergyStat * SOAP_FMAC2 soap_instantiate___ns1__SetEnergyStat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetEnergyStat * soap_new___ns1__SetEnergyStat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetEnergyStat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetEnergyStat * soap_new_req___ns1__SetEnergyStat(
	struct soap *soap)
{
	struct __ns1__SetEnergyStat *_p = soap_new___ns1__SetEnergyStat(soap);
	if (_p)
	{	soap_default___ns1__SetEnergyStat(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetEnergyStat * soap_new_set___ns1__SetEnergyStat(
	struct soap *soap,
	_ns1__SetEnergyStat *ns1__SetEnergyStat)
{
	struct __ns1__SetEnergyStat *_p = soap_new___ns1__SetEnergyStat(soap);
	if (_p)
	{	soap_default___ns1__SetEnergyStat(soap, _p);
		_p->ns1__SetEnergyStat = ns1__SetEnergyStat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetEnergyStat(struct soap*, const struct __ns1__SetEnergyStat *, const char*, const char*);

inline int soap_write___ns1__SetEnergyStat(struct soap *soap, struct __ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetEnergyStat(soap, p), 0) || soap_put___ns1__SetEnergyStat(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetEnergyStat(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetEnergyStat(soap, p), 0) || soap_put___ns1__SetEnergyStat(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetEnergyStat(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetEnergyStat(soap, p), 0) || soap_put___ns1__SetEnergyStat(soap, p, "-ns1:SetEnergyStat", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetEnergyStat * SOAP_FMAC4 soap_get___ns1__SetEnergyStat(struct soap*, struct __ns1__SetEnergyStat *, const char*, const char*);

inline int soap_read___ns1__SetEnergyStat(struct soap *soap, struct __ns1__SetEnergyStat *p)
{
	if (p)
	{	soap_default___ns1__SetEnergyStat(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetEnergyStat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetEnergyStat(struct soap *soap, const char *URL, struct __ns1__SetEnergyStat *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetEnergyStat(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetEnergyStat(struct soap *soap, struct __ns1__SetEnergyStat *p)
{
	if (soap_read___ns1__SetEnergyStat(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getInfoByMo_DEFINED
#define SOAP_TYPE___ns1__getInfoByMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getInfoByMo(struct soap*, struct __ns1__getInfoByMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getInfoByMo(struct soap*, const struct __ns1__getInfoByMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getInfoByMo(struct soap*, const char*, int, const struct __ns1__getInfoByMo *, const char*);
SOAP_FMAC3 struct __ns1__getInfoByMo * SOAP_FMAC4 soap_in___ns1__getInfoByMo(struct soap*, const char*, struct __ns1__getInfoByMo *, const char*);
SOAP_FMAC1 struct __ns1__getInfoByMo * SOAP_FMAC2 soap_instantiate___ns1__getInfoByMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getInfoByMo * soap_new___ns1__getInfoByMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getInfoByMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getInfoByMo * soap_new_req___ns1__getInfoByMo(
	struct soap *soap)
{
	struct __ns1__getInfoByMo *_p = soap_new___ns1__getInfoByMo(soap);
	if (_p)
	{	soap_default___ns1__getInfoByMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__getInfoByMo * soap_new_set___ns1__getInfoByMo(
	struct soap *soap,
	_ns1__getInfoByMo *ns1__getInfoByMo)
{
	struct __ns1__getInfoByMo *_p = soap_new___ns1__getInfoByMo(soap);
	if (_p)
	{	soap_default___ns1__getInfoByMo(soap, _p);
		_p->ns1__getInfoByMo = ns1__getInfoByMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getInfoByMo(struct soap*, const struct __ns1__getInfoByMo *, const char*, const char*);

inline int soap_write___ns1__getInfoByMo(struct soap *soap, struct __ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getInfoByMo(soap, p), 0) || soap_put___ns1__getInfoByMo(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getInfoByMo(struct soap *soap, const char *URL, struct __ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getInfoByMo(soap, p), 0) || soap_put___ns1__getInfoByMo(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getInfoByMo(struct soap *soap, const char *URL, struct __ns1__getInfoByMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getInfoByMo(soap, p), 0) || soap_put___ns1__getInfoByMo(soap, p, "-ns1:getInfoByMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getInfoByMo * SOAP_FMAC4 soap_get___ns1__getInfoByMo(struct soap*, struct __ns1__getInfoByMo *, const char*, const char*);

inline int soap_read___ns1__getInfoByMo(struct soap *soap, struct __ns1__getInfoByMo *p)
{
	if (p)
	{	soap_default___ns1__getInfoByMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getInfoByMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getInfoByMo(struct soap *soap, const char *URL, struct __ns1__getInfoByMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getInfoByMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getInfoByMo(struct soap *soap, struct __ns1__getInfoByMo *p)
{
	if (soap_read___ns1__getInfoByMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsThermalNew_DEFINED
#define SOAP_TYPE___ns1__InsThermalNew_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsThermalNew(struct soap*, struct __ns1__InsThermalNew *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsThermalNew(struct soap*, const struct __ns1__InsThermalNew *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsThermalNew(struct soap*, const char*, int, const struct __ns1__InsThermalNew *, const char*);
SOAP_FMAC3 struct __ns1__InsThermalNew * SOAP_FMAC4 soap_in___ns1__InsThermalNew(struct soap*, const char*, struct __ns1__InsThermalNew *, const char*);
SOAP_FMAC1 struct __ns1__InsThermalNew * SOAP_FMAC2 soap_instantiate___ns1__InsThermalNew(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsThermalNew * soap_new___ns1__InsThermalNew(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsThermalNew(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsThermalNew * soap_new_req___ns1__InsThermalNew(
	struct soap *soap)
{
	struct __ns1__InsThermalNew *_p = soap_new___ns1__InsThermalNew(soap);
	if (_p)
	{	soap_default___ns1__InsThermalNew(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsThermalNew * soap_new_set___ns1__InsThermalNew(
	struct soap *soap,
	_ns1__InsThermalNew *ns1__InsThermalNew)
{
	struct __ns1__InsThermalNew *_p = soap_new___ns1__InsThermalNew(soap);
	if (_p)
	{	soap_default___ns1__InsThermalNew(soap, _p);
		_p->ns1__InsThermalNew = ns1__InsThermalNew;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsThermalNew(struct soap*, const struct __ns1__InsThermalNew *, const char*, const char*);

inline int soap_write___ns1__InsThermalNew(struct soap *soap, struct __ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsThermalNew(soap, p), 0) || soap_put___ns1__InsThermalNew(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsThermalNew(struct soap *soap, const char *URL, struct __ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermalNew(soap, p), 0) || soap_put___ns1__InsThermalNew(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsThermalNew(struct soap *soap, const char *URL, struct __ns1__InsThermalNew const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermalNew(soap, p), 0) || soap_put___ns1__InsThermalNew(soap, p, "-ns1:InsThermalNew", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsThermalNew * SOAP_FMAC4 soap_get___ns1__InsThermalNew(struct soap*, struct __ns1__InsThermalNew *, const char*, const char*);

inline int soap_read___ns1__InsThermalNew(struct soap *soap, struct __ns1__InsThermalNew *p)
{
	if (p)
	{	soap_default___ns1__InsThermalNew(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsThermalNew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsThermalNew(struct soap *soap, const char *URL, struct __ns1__InsThermalNew *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsThermalNew(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsThermalNew(struct soap *soap, struct __ns1__InsThermalNew *p)
{
	if (soap_read___ns1__InsThermalNew(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnLink_DEFINED
#define SOAP_TYPE___ns1__ChkSnLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnLink(struct soap*, struct __ns1__ChkSnLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnLink(struct soap*, const struct __ns1__ChkSnLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnLink(struct soap*, const char*, int, const struct __ns1__ChkSnLink *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnLink * SOAP_FMAC4 soap_in___ns1__ChkSnLink(struct soap*, const char*, struct __ns1__ChkSnLink *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnLink * SOAP_FMAC2 soap_instantiate___ns1__ChkSnLink(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnLink * soap_new___ns1__ChkSnLink(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnLink(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnLink * soap_new_req___ns1__ChkSnLink(
	struct soap *soap)
{
	struct __ns1__ChkSnLink *_p = soap_new___ns1__ChkSnLink(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLink(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnLink * soap_new_set___ns1__ChkSnLink(
	struct soap *soap,
	_ns1__ChkSnLink *ns1__ChkSnLink)
{
	struct __ns1__ChkSnLink *_p = soap_new___ns1__ChkSnLink(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLink(soap, _p);
		_p->ns1__ChkSnLink = ns1__ChkSnLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnLink(struct soap*, const struct __ns1__ChkSnLink *, const char*, const char*);

inline int soap_write___ns1__ChkSnLink(struct soap *soap, struct __ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnLink(soap, p), 0) || soap_put___ns1__ChkSnLink(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnLink(struct soap *soap, const char *URL, struct __ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLink(soap, p), 0) || soap_put___ns1__ChkSnLink(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnLink(struct soap *soap, const char *URL, struct __ns1__ChkSnLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLink(soap, p), 0) || soap_put___ns1__ChkSnLink(soap, p, "-ns1:ChkSnLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnLink * SOAP_FMAC4 soap_get___ns1__ChkSnLink(struct soap*, struct __ns1__ChkSnLink *, const char*, const char*);

inline int soap_read___ns1__ChkSnLink(struct soap *soap, struct __ns1__ChkSnLink *p)
{
	if (p)
	{	soap_default___ns1__ChkSnLink(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnLink(struct soap *soap, const char *URL, struct __ns1__ChkSnLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnLink(struct soap *soap, struct __ns1__ChkSnLink *p)
{
	if (soap_read___ns1__ChkSnLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsThermal_DEFINED
#define SOAP_TYPE___ns1__InsThermal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsThermal(struct soap*, struct __ns1__InsThermal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsThermal(struct soap*, const struct __ns1__InsThermal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsThermal(struct soap*, const char*, int, const struct __ns1__InsThermal *, const char*);
SOAP_FMAC3 struct __ns1__InsThermal * SOAP_FMAC4 soap_in___ns1__InsThermal(struct soap*, const char*, struct __ns1__InsThermal *, const char*);
SOAP_FMAC1 struct __ns1__InsThermal * SOAP_FMAC2 soap_instantiate___ns1__InsThermal(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsThermal * soap_new___ns1__InsThermal(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsThermal(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsThermal * soap_new_req___ns1__InsThermal(
	struct soap *soap)
{
	struct __ns1__InsThermal *_p = soap_new___ns1__InsThermal(soap);
	if (_p)
	{	soap_default___ns1__InsThermal(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsThermal * soap_new_set___ns1__InsThermal(
	struct soap *soap,
	_ns1__InsThermal *ns1__InsThermal)
{
	struct __ns1__InsThermal *_p = soap_new___ns1__InsThermal(soap);
	if (_p)
	{	soap_default___ns1__InsThermal(soap, _p);
		_p->ns1__InsThermal = ns1__InsThermal;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsThermal(struct soap*, const struct __ns1__InsThermal *, const char*, const char*);

inline int soap_write___ns1__InsThermal(struct soap *soap, struct __ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsThermal(soap, p), 0) || soap_put___ns1__InsThermal(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsThermal(struct soap *soap, const char *URL, struct __ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermal(soap, p), 0) || soap_put___ns1__InsThermal(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsThermal(struct soap *soap, const char *URL, struct __ns1__InsThermal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsThermal(soap, p), 0) || soap_put___ns1__InsThermal(soap, p, "-ns1:InsThermal", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsThermal * SOAP_FMAC4 soap_get___ns1__InsThermal(struct soap*, struct __ns1__InsThermal *, const char*, const char*);

inline int soap_read___ns1__InsThermal(struct soap *soap, struct __ns1__InsThermal *p)
{
	if (p)
	{	soap_default___ns1__InsThermal(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsThermal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsThermal(struct soap *soap, const char *URL, struct __ns1__InsThermal *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsThermal(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsThermal(struct soap *soap, struct __ns1__InsThermal *p)
{
	if (soap_read___ns1__InsThermal(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsWHDetection_DEFINED
#define SOAP_TYPE___ns1__InsWHDetection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsWHDetection(struct soap*, struct __ns1__InsWHDetection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsWHDetection(struct soap*, const struct __ns1__InsWHDetection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsWHDetection(struct soap*, const char*, int, const struct __ns1__InsWHDetection *, const char*);
SOAP_FMAC3 struct __ns1__InsWHDetection * SOAP_FMAC4 soap_in___ns1__InsWHDetection(struct soap*, const char*, struct __ns1__InsWHDetection *, const char*);
SOAP_FMAC1 struct __ns1__InsWHDetection * SOAP_FMAC2 soap_instantiate___ns1__InsWHDetection(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsWHDetection * soap_new___ns1__InsWHDetection(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsWHDetection(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsWHDetection * soap_new_req___ns1__InsWHDetection(
	struct soap *soap)
{
	struct __ns1__InsWHDetection *_p = soap_new___ns1__InsWHDetection(soap);
	if (_p)
	{	soap_default___ns1__InsWHDetection(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsWHDetection * soap_new_set___ns1__InsWHDetection(
	struct soap *soap,
	_ns1__InsWHDetection *ns1__InsWHDetection)
{
	struct __ns1__InsWHDetection *_p = soap_new___ns1__InsWHDetection(soap);
	if (_p)
	{	soap_default___ns1__InsWHDetection(soap, _p);
		_p->ns1__InsWHDetection = ns1__InsWHDetection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsWHDetection(struct soap*, const struct __ns1__InsWHDetection *, const char*, const char*);

inline int soap_write___ns1__InsWHDetection(struct soap *soap, struct __ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsWHDetection(soap, p), 0) || soap_put___ns1__InsWHDetection(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsWHDetection(struct soap *soap, const char *URL, struct __ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsWHDetection(soap, p), 0) || soap_put___ns1__InsWHDetection(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsWHDetection(struct soap *soap, const char *URL, struct __ns1__InsWHDetection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsWHDetection(soap, p), 0) || soap_put___ns1__InsWHDetection(soap, p, "-ns1:InsWHDetection", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsWHDetection * SOAP_FMAC4 soap_get___ns1__InsWHDetection(struct soap*, struct __ns1__InsWHDetection *, const char*, const char*);

inline int soap_read___ns1__InsWHDetection(struct soap *soap, struct __ns1__InsWHDetection *p)
{
	if (p)
	{	soap_default___ns1__InsWHDetection(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsWHDetection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsWHDetection(struct soap *soap, const char *URL, struct __ns1__InsWHDetection *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsWHDetection(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsWHDetection(struct soap *soap, struct __ns1__InsWHDetection *p)
{
	if (soap_read___ns1__InsWHDetection(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNessForCL_DEFINED
#define SOAP_TYPE___ns1__InsFlatNessForCL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNessForCL(struct soap*, struct __ns1__InsFlatNessForCL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNessForCL(struct soap*, const struct __ns1__InsFlatNessForCL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNessForCL(struct soap*, const char*, int, const struct __ns1__InsFlatNessForCL *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNessForCL * SOAP_FMAC4 soap_in___ns1__InsFlatNessForCL(struct soap*, const char*, struct __ns1__InsFlatNessForCL *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNessForCL * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNessForCL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNessForCL * soap_new___ns1__InsFlatNessForCL(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNessForCL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNessForCL * soap_new_req___ns1__InsFlatNessForCL(
	struct soap *soap)
{
	struct __ns1__InsFlatNessForCL *_p = soap_new___ns1__InsFlatNessForCL(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForCL(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNessForCL * soap_new_set___ns1__InsFlatNessForCL(
	struct soap *soap,
	_ns1__InsFlatNessForCL *ns1__InsFlatNessForCL)
{
	struct __ns1__InsFlatNessForCL *_p = soap_new___ns1__InsFlatNessForCL(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForCL(soap, _p);
		_p->ns1__InsFlatNessForCL = ns1__InsFlatNessForCL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNessForCL(struct soap*, const struct __ns1__InsFlatNessForCL *, const char*, const char*);

inline int soap_write___ns1__InsFlatNessForCL(struct soap *soap, struct __ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNessForCL(soap, p), 0) || soap_put___ns1__InsFlatNessForCL(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNessForCL(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForCL(soap, p), 0) || soap_put___ns1__InsFlatNessForCL(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNessForCL(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForCL(soap, p), 0) || soap_put___ns1__InsFlatNessForCL(soap, p, "-ns1:InsFlatNessForCL", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNessForCL * SOAP_FMAC4 soap_get___ns1__InsFlatNessForCL(struct soap*, struct __ns1__InsFlatNessForCL *, const char*, const char*);

inline int soap_read___ns1__InsFlatNessForCL(struct soap *soap, struct __ns1__InsFlatNessForCL *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNessForCL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNessForCL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNessForCL(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForCL *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNessForCL(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNessForCL(struct soap *soap, struct __ns1__InsFlatNessForCL *p)
{
	if (soap_read___ns1__InsFlatNessForCL(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNessForLSD_DEFINED
#define SOAP_TYPE___ns1__InsFlatNessForLSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNessForLSD(struct soap*, struct __ns1__InsFlatNessForLSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNessForLSD(struct soap*, const struct __ns1__InsFlatNessForLSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNessForLSD(struct soap*, const char*, int, const struct __ns1__InsFlatNessForLSD *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNessForLSD * SOAP_FMAC4 soap_in___ns1__InsFlatNessForLSD(struct soap*, const char*, struct __ns1__InsFlatNessForLSD *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNessForLSD * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNessForLSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNessForLSD * soap_new___ns1__InsFlatNessForLSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNessForLSD(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNessForLSD * soap_new_req___ns1__InsFlatNessForLSD(
	struct soap *soap)
{
	struct __ns1__InsFlatNessForLSD *_p = soap_new___ns1__InsFlatNessForLSD(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForLSD(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNessForLSD * soap_new_set___ns1__InsFlatNessForLSD(
	struct soap *soap,
	_ns1__InsFlatNessForLSD *ns1__InsFlatNessForLSD)
{
	struct __ns1__InsFlatNessForLSD *_p = soap_new___ns1__InsFlatNessForLSD(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNessForLSD(soap, _p);
		_p->ns1__InsFlatNessForLSD = ns1__InsFlatNessForLSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNessForLSD(struct soap*, const struct __ns1__InsFlatNessForLSD *, const char*, const char*);

inline int soap_write___ns1__InsFlatNessForLSD(struct soap *soap, struct __ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNessForLSD(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForLSD(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNessForLSD(soap, p), 0) || soap_put___ns1__InsFlatNessForLSD(soap, p, "-ns1:InsFlatNessForLSD", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNessForLSD * SOAP_FMAC4 soap_get___ns1__InsFlatNessForLSD(struct soap*, struct __ns1__InsFlatNessForLSD *, const char*, const char*);

inline int soap_read___ns1__InsFlatNessForLSD(struct soap *soap, struct __ns1__InsFlatNessForLSD *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNessForLSD(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNessForLSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNessForLSD(struct soap *soap, const char *URL, struct __ns1__InsFlatNessForLSD *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNessForLSD(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNessForLSD(struct soap *soap, struct __ns1__InsFlatNessForLSD *p)
{
	if (soap_read___ns1__InsFlatNessForLSD(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFlatNess_DEFINED
#define SOAP_TYPE___ns1__InsFlatNess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFlatNess(struct soap*, struct __ns1__InsFlatNess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFlatNess(struct soap*, const struct __ns1__InsFlatNess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFlatNess(struct soap*, const char*, int, const struct __ns1__InsFlatNess *, const char*);
SOAP_FMAC3 struct __ns1__InsFlatNess * SOAP_FMAC4 soap_in___ns1__InsFlatNess(struct soap*, const char*, struct __ns1__InsFlatNess *, const char*);
SOAP_FMAC1 struct __ns1__InsFlatNess * SOAP_FMAC2 soap_instantiate___ns1__InsFlatNess(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFlatNess * soap_new___ns1__InsFlatNess(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFlatNess(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFlatNess * soap_new_req___ns1__InsFlatNess(
	struct soap *soap)
{
	struct __ns1__InsFlatNess *_p = soap_new___ns1__InsFlatNess(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNess(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFlatNess * soap_new_set___ns1__InsFlatNess(
	struct soap *soap,
	_ns1__InsFlatNess *ns1__InsFlatNess)
{
	struct __ns1__InsFlatNess *_p = soap_new___ns1__InsFlatNess(soap);
	if (_p)
	{	soap_default___ns1__InsFlatNess(soap, _p);
		_p->ns1__InsFlatNess = ns1__InsFlatNess;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFlatNess(struct soap*, const struct __ns1__InsFlatNess *, const char*, const char*);

inline int soap_write___ns1__InsFlatNess(struct soap *soap, struct __ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFlatNess(soap, p), 0) || soap_put___ns1__InsFlatNess(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFlatNess(struct soap *soap, const char *URL, struct __ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNess(soap, p), 0) || soap_put___ns1__InsFlatNess(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFlatNess(struct soap *soap, const char *URL, struct __ns1__InsFlatNess const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFlatNess(soap, p), 0) || soap_put___ns1__InsFlatNess(soap, p, "-ns1:InsFlatNess", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFlatNess * SOAP_FMAC4 soap_get___ns1__InsFlatNess(struct soap*, struct __ns1__InsFlatNess *, const char*, const char*);

inline int soap_read___ns1__InsFlatNess(struct soap *soap, struct __ns1__InsFlatNess *p)
{
	if (p)
	{	soap_default___ns1__InsFlatNess(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFlatNess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFlatNess(struct soap *soap, const char *URL, struct __ns1__InsFlatNess *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFlatNess(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFlatNess(struct soap *soap, struct __ns1__InsFlatNess *p)
{
	if (soap_read___ns1__InsFlatNess(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ImpMesAteTestData_DEFINED
#define SOAP_TYPE___ns1__ImpMesAteTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ImpMesAteTestData(struct soap*, struct __ns1__ImpMesAteTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ImpMesAteTestData(struct soap*, const struct __ns1__ImpMesAteTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ImpMesAteTestData(struct soap*, const char*, int, const struct __ns1__ImpMesAteTestData *, const char*);
SOAP_FMAC3 struct __ns1__ImpMesAteTestData * SOAP_FMAC4 soap_in___ns1__ImpMesAteTestData(struct soap*, const char*, struct __ns1__ImpMesAteTestData *, const char*);
SOAP_FMAC1 struct __ns1__ImpMesAteTestData * SOAP_FMAC2 soap_instantiate___ns1__ImpMesAteTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ImpMesAteTestData * soap_new___ns1__ImpMesAteTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ImpMesAteTestData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ImpMesAteTestData * soap_new_req___ns1__ImpMesAteTestData(
	struct soap *soap)
{
	struct __ns1__ImpMesAteTestData *_p = soap_new___ns1__ImpMesAteTestData(soap);
	if (_p)
	{	soap_default___ns1__ImpMesAteTestData(soap, _p);
	}
	return _p;
}

inline struct __ns1__ImpMesAteTestData * soap_new_set___ns1__ImpMesAteTestData(
	struct soap *soap,
	_ns1__ImpMesAteTestData *ns1__ImpMesAteTestData)
{
	struct __ns1__ImpMesAteTestData *_p = soap_new___ns1__ImpMesAteTestData(soap);
	if (_p)
	{	soap_default___ns1__ImpMesAteTestData(soap, _p);
		_p->ns1__ImpMesAteTestData = ns1__ImpMesAteTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ImpMesAteTestData(struct soap*, const struct __ns1__ImpMesAteTestData *, const char*, const char*);

inline int soap_write___ns1__ImpMesAteTestData(struct soap *soap, struct __ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ImpMesAteTestData(soap, p), 0) || soap_put___ns1__ImpMesAteTestData(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ImpMesAteTestData(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ImpMesAteTestData(soap, p), 0) || soap_put___ns1__ImpMesAteTestData(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ImpMesAteTestData(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ImpMesAteTestData(soap, p), 0) || soap_put___ns1__ImpMesAteTestData(soap, p, "-ns1:ImpMesAteTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ImpMesAteTestData * SOAP_FMAC4 soap_get___ns1__ImpMesAteTestData(struct soap*, struct __ns1__ImpMesAteTestData *, const char*, const char*);

inline int soap_read___ns1__ImpMesAteTestData(struct soap *soap, struct __ns1__ImpMesAteTestData *p)
{
	if (p)
	{	soap_default___ns1__ImpMesAteTestData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ImpMesAteTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ImpMesAteTestData(struct soap *soap, const char *URL, struct __ns1__ImpMesAteTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ImpMesAteTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ImpMesAteTestData(struct soap *soap, struct __ns1__ImpMesAteTestData *p)
{
	if (soap_read___ns1__ImpMesAteTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkStationTime_DEFINED
#define SOAP_TYPE___ns1__chkStationTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkStationTime(struct soap*, struct __ns1__chkStationTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkStationTime(struct soap*, const struct __ns1__chkStationTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkStationTime(struct soap*, const char*, int, const struct __ns1__chkStationTime *, const char*);
SOAP_FMAC3 struct __ns1__chkStationTime * SOAP_FMAC4 soap_in___ns1__chkStationTime(struct soap*, const char*, struct __ns1__chkStationTime *, const char*);
SOAP_FMAC1 struct __ns1__chkStationTime * SOAP_FMAC2 soap_instantiate___ns1__chkStationTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkStationTime * soap_new___ns1__chkStationTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkStationTime(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkStationTime * soap_new_req___ns1__chkStationTime(
	struct soap *soap)
{
	struct __ns1__chkStationTime *_p = soap_new___ns1__chkStationTime(soap);
	if (_p)
	{	soap_default___ns1__chkStationTime(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkStationTime * soap_new_set___ns1__chkStationTime(
	struct soap *soap,
	_ns1__chkStationTime *ns1__chkStationTime)
{
	struct __ns1__chkStationTime *_p = soap_new___ns1__chkStationTime(soap);
	if (_p)
	{	soap_default___ns1__chkStationTime(soap, _p);
		_p->ns1__chkStationTime = ns1__chkStationTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkStationTime(struct soap*, const struct __ns1__chkStationTime *, const char*, const char*);

inline int soap_write___ns1__chkStationTime(struct soap *soap, struct __ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkStationTime(soap, p), 0) || soap_put___ns1__chkStationTime(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkStationTime(struct soap *soap, const char *URL, struct __ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkStationTime(soap, p), 0) || soap_put___ns1__chkStationTime(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkStationTime(struct soap *soap, const char *URL, struct __ns1__chkStationTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkStationTime(soap, p), 0) || soap_put___ns1__chkStationTime(soap, p, "-ns1:chkStationTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkStationTime * SOAP_FMAC4 soap_get___ns1__chkStationTime(struct soap*, struct __ns1__chkStationTime *, const char*, const char*);

inline int soap_read___ns1__chkStationTime(struct soap *soap, struct __ns1__chkStationTime *p)
{
	if (p)
	{	soap_default___ns1__chkStationTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkStationTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkStationTime(struct soap *soap, const char *URL, struct __ns1__chkStationTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkStationTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkStationTime(struct soap *soap, struct __ns1__chkStationTime *p)
{
	if (soap_read___ns1__chkStationTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InFruitsOrtQty_DEFINED
#define SOAP_TYPE___ns1__InFruitsOrtQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InFruitsOrtQty(struct soap*, struct __ns1__InFruitsOrtQty *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InFruitsOrtQty(struct soap*, const struct __ns1__InFruitsOrtQty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InFruitsOrtQty(struct soap*, const char*, int, const struct __ns1__InFruitsOrtQty *, const char*);
SOAP_FMAC3 struct __ns1__InFruitsOrtQty * SOAP_FMAC4 soap_in___ns1__InFruitsOrtQty(struct soap*, const char*, struct __ns1__InFruitsOrtQty *, const char*);
SOAP_FMAC1 struct __ns1__InFruitsOrtQty * SOAP_FMAC2 soap_instantiate___ns1__InFruitsOrtQty(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InFruitsOrtQty * soap_new___ns1__InFruitsOrtQty(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InFruitsOrtQty(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InFruitsOrtQty * soap_new_req___ns1__InFruitsOrtQty(
	struct soap *soap)
{
	struct __ns1__InFruitsOrtQty *_p = soap_new___ns1__InFruitsOrtQty(soap);
	if (_p)
	{	soap_default___ns1__InFruitsOrtQty(soap, _p);
	}
	return _p;
}

inline struct __ns1__InFruitsOrtQty * soap_new_set___ns1__InFruitsOrtQty(
	struct soap *soap,
	_ns1__InFruitsOrtQty *ns1__InFruitsOrtQty)
{
	struct __ns1__InFruitsOrtQty *_p = soap_new___ns1__InFruitsOrtQty(soap);
	if (_p)
	{	soap_default___ns1__InFruitsOrtQty(soap, _p);
		_p->ns1__InFruitsOrtQty = ns1__InFruitsOrtQty;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InFruitsOrtQty(struct soap*, const struct __ns1__InFruitsOrtQty *, const char*, const char*);

inline int soap_write___ns1__InFruitsOrtQty(struct soap *soap, struct __ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InFruitsOrtQty(soap, p), 0) || soap_put___ns1__InFruitsOrtQty(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InFruitsOrtQty(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InFruitsOrtQty(soap, p), 0) || soap_put___ns1__InFruitsOrtQty(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InFruitsOrtQty(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InFruitsOrtQty(soap, p), 0) || soap_put___ns1__InFruitsOrtQty(soap, p, "-ns1:InFruitsOrtQty", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InFruitsOrtQty * SOAP_FMAC4 soap_get___ns1__InFruitsOrtQty(struct soap*, struct __ns1__InFruitsOrtQty *, const char*, const char*);

inline int soap_read___ns1__InFruitsOrtQty(struct soap *soap, struct __ns1__InFruitsOrtQty *p)
{
	if (p)
	{	soap_default___ns1__InFruitsOrtQty(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InFruitsOrtQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InFruitsOrtQty(struct soap *soap, const char *URL, struct __ns1__InFruitsOrtQty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InFruitsOrtQty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InFruitsOrtQty(struct soap *soap, struct __ns1__InFruitsOrtQty *p)
{
	if (soap_read___ns1__InFruitsOrtQty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendTestResult_DEFINED
#define SOAP_TYPE___ns1__sendTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTestResult(struct soap*, struct __ns1__sendTestResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTestResult(struct soap*, const struct __ns1__sendTestResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTestResult(struct soap*, const char*, int, const struct __ns1__sendTestResult *, const char*);
SOAP_FMAC3 struct __ns1__sendTestResult * SOAP_FMAC4 soap_in___ns1__sendTestResult(struct soap*, const char*, struct __ns1__sendTestResult *, const char*);
SOAP_FMAC1 struct __ns1__sendTestResult * SOAP_FMAC2 soap_instantiate___ns1__sendTestResult(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTestResult * soap_new___ns1__sendTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendTestResult(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendTestResult * soap_new_req___ns1__sendTestResult(
	struct soap *soap)
{
	struct __ns1__sendTestResult *_p = soap_new___ns1__sendTestResult(soap);
	if (_p)
	{	soap_default___ns1__sendTestResult(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendTestResult * soap_new_set___ns1__sendTestResult(
	struct soap *soap,
	_ns1__sendTestResult *ns1__sendTestResult)
{
	struct __ns1__sendTestResult *_p = soap_new___ns1__sendTestResult(soap);
	if (_p)
	{	soap_default___ns1__sendTestResult(soap, _p);
		_p->ns1__sendTestResult = ns1__sendTestResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTestResult(struct soap*, const struct __ns1__sendTestResult *, const char*, const char*);

inline int soap_write___ns1__sendTestResult(struct soap *soap, struct __ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendTestResult(soap, p), 0) || soap_put___ns1__sendTestResult(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendTestResult(struct soap *soap, const char *URL, struct __ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestResult(soap, p), 0) || soap_put___ns1__sendTestResult(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendTestResult(struct soap *soap, const char *URL, struct __ns1__sendTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestResult(soap, p), 0) || soap_put___ns1__sendTestResult(soap, p, "-ns1:sendTestResult", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendTestResult * SOAP_FMAC4 soap_get___ns1__sendTestResult(struct soap*, struct __ns1__sendTestResult *, const char*, const char*);

inline int soap_read___ns1__sendTestResult(struct soap *soap, struct __ns1__sendTestResult *p)
{
	if (p)
	{	soap_default___ns1__sendTestResult(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendTestResult(struct soap *soap, const char *URL, struct __ns1__sendTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendTestResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendTestResult(struct soap *soap, struct __ns1__sendTestResult *p)
{
	if (soap_read___ns1__sendTestResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__sendTestData_DEFINED
#define SOAP_TYPE___ns1__sendTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTestData(struct soap*, struct __ns1__sendTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTestData(struct soap*, const struct __ns1__sendTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTestData(struct soap*, const char*, int, const struct __ns1__sendTestData *, const char*);
SOAP_FMAC3 struct __ns1__sendTestData * SOAP_FMAC4 soap_in___ns1__sendTestData(struct soap*, const char*, struct __ns1__sendTestData *, const char*);
SOAP_FMAC1 struct __ns1__sendTestData * SOAP_FMAC2 soap_instantiate___ns1__sendTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTestData * soap_new___ns1__sendTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__sendTestData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sendTestData * soap_new_req___ns1__sendTestData(
	struct soap *soap)
{
	struct __ns1__sendTestData *_p = soap_new___ns1__sendTestData(soap);
	if (_p)
	{	soap_default___ns1__sendTestData(soap, _p);
	}
	return _p;
}

inline struct __ns1__sendTestData * soap_new_set___ns1__sendTestData(
	struct soap *soap,
	_ns1__sendTestData *ns1__sendTestData)
{
	struct __ns1__sendTestData *_p = soap_new___ns1__sendTestData(soap);
	if (_p)
	{	soap_default___ns1__sendTestData(soap, _p);
		_p->ns1__sendTestData = ns1__sendTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTestData(struct soap*, const struct __ns1__sendTestData *, const char*, const char*);

inline int soap_write___ns1__sendTestData(struct soap *soap, struct __ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__sendTestData(soap, p), 0) || soap_put___ns1__sendTestData(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__sendTestData(struct soap *soap, const char *URL, struct __ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestData(soap, p), 0) || soap_put___ns1__sendTestData(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__sendTestData(struct soap *soap, const char *URL, struct __ns1__sendTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__sendTestData(soap, p), 0) || soap_put___ns1__sendTestData(soap, p, "-ns1:sendTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__sendTestData * SOAP_FMAC4 soap_get___ns1__sendTestData(struct soap*, struct __ns1__sendTestData *, const char*, const char*);

inline int soap_read___ns1__sendTestData(struct soap *soap, struct __ns1__sendTestData *p)
{
	if (p)
	{	soap_default___ns1__sendTestData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__sendTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__sendTestData(struct soap *soap, const char *URL, struct __ns1__sendTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__sendTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__sendTestData(struct soap *soap, struct __ns1__sendTestData *p)
{
	if (soap_read___ns1__sendTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSN_USCOREStation_DEFINED
#define SOAP_TYPE___ns1__checkSN_USCOREStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSN_USCOREStation(struct soap*, struct __ns1__checkSN_USCOREStation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSN_USCOREStation(struct soap*, const struct __ns1__checkSN_USCOREStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSN_USCOREStation(struct soap*, const char*, int, const struct __ns1__checkSN_USCOREStation *, const char*);
SOAP_FMAC3 struct __ns1__checkSN_USCOREStation * SOAP_FMAC4 soap_in___ns1__checkSN_USCOREStation(struct soap*, const char*, struct __ns1__checkSN_USCOREStation *, const char*);
SOAP_FMAC1 struct __ns1__checkSN_USCOREStation * SOAP_FMAC2 soap_instantiate___ns1__checkSN_USCOREStation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSN_USCOREStation * soap_new___ns1__checkSN_USCOREStation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSN_USCOREStation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSN_USCOREStation * soap_new_req___ns1__checkSN_USCOREStation(
	struct soap *soap)
{
	struct __ns1__checkSN_USCOREStation *_p = soap_new___ns1__checkSN_USCOREStation(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStation(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSN_USCOREStation * soap_new_set___ns1__checkSN_USCOREStation(
	struct soap *soap,
	_ns1__checkSN_USCOREStation *ns1__checkSN_USCOREStation)
{
	struct __ns1__checkSN_USCOREStation *_p = soap_new___ns1__checkSN_USCOREStation(soap);
	if (_p)
	{	soap_default___ns1__checkSN_USCOREStation(soap, _p);
		_p->ns1__checkSN_USCOREStation = ns1__checkSN_USCOREStation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSN_USCOREStation(struct soap*, const struct __ns1__checkSN_USCOREStation *, const char*, const char*);

inline int soap_write___ns1__checkSN_USCOREStation(struct soap *soap, struct __ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSN_USCOREStation(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStation(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkSN_USCOREStation(soap, p), 0) || soap_put___ns1__checkSN_USCOREStation(soap, p, "-ns1:checkSN_Station", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSN_USCOREStation * SOAP_FMAC4 soap_get___ns1__checkSN_USCOREStation(struct soap*, struct __ns1__checkSN_USCOREStation *, const char*, const char*);

inline int soap_read___ns1__checkSN_USCOREStation(struct soap *soap, struct __ns1__checkSN_USCOREStation *p)
{
	if (p)
	{	soap_default___ns1__checkSN_USCOREStation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSN_USCOREStation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkSN_USCOREStation(struct soap *soap, const char *URL, struct __ns1__checkSN_USCOREStation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkSN_USCOREStation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkSN_USCOREStation(struct soap *soap, struct __ns1__checkSN_USCOREStation *p)
{
	if (soap_read___ns1__checkSN_USCOREStation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkEmpNo_DEFINED
#define SOAP_TYPE___ns1__checkEmpNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkEmpNo(struct soap*, struct __ns1__checkEmpNo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkEmpNo(struct soap*, const struct __ns1__checkEmpNo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkEmpNo(struct soap*, const char*, int, const struct __ns1__checkEmpNo *, const char*);
SOAP_FMAC3 struct __ns1__checkEmpNo * SOAP_FMAC4 soap_in___ns1__checkEmpNo(struct soap*, const char*, struct __ns1__checkEmpNo *, const char*);
SOAP_FMAC1 struct __ns1__checkEmpNo * SOAP_FMAC2 soap_instantiate___ns1__checkEmpNo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkEmpNo * soap_new___ns1__checkEmpNo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkEmpNo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkEmpNo * soap_new_req___ns1__checkEmpNo(
	struct soap *soap)
{
	struct __ns1__checkEmpNo *_p = soap_new___ns1__checkEmpNo(soap);
	if (_p)
	{	soap_default___ns1__checkEmpNo(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkEmpNo * soap_new_set___ns1__checkEmpNo(
	struct soap *soap,
	_ns1__checkEmpNo *ns1__checkEmpNo)
{
	struct __ns1__checkEmpNo *_p = soap_new___ns1__checkEmpNo(soap);
	if (_p)
	{	soap_default___ns1__checkEmpNo(soap, _p);
		_p->ns1__checkEmpNo = ns1__checkEmpNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkEmpNo(struct soap*, const struct __ns1__checkEmpNo *, const char*, const char*);

inline int soap_write___ns1__checkEmpNo(struct soap *soap, struct __ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkEmpNo(soap, p), 0) || soap_put___ns1__checkEmpNo(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkEmpNo(struct soap *soap, const char *URL, struct __ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpNo(soap, p), 0) || soap_put___ns1__checkEmpNo(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkEmpNo(struct soap *soap, const char *URL, struct __ns1__checkEmpNo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkEmpNo(soap, p), 0) || soap_put___ns1__checkEmpNo(soap, p, "-ns1:checkEmpNo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkEmpNo * SOAP_FMAC4 soap_get___ns1__checkEmpNo(struct soap*, struct __ns1__checkEmpNo *, const char*, const char*);

inline int soap_read___ns1__checkEmpNo(struct soap *soap, struct __ns1__checkEmpNo *p)
{
	if (p)
	{	soap_default___ns1__checkEmpNo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkEmpNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkEmpNo(struct soap *soap, const char *URL, struct __ns1__checkEmpNo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkEmpNo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkEmpNo(struct soap *soap, struct __ns1__checkEmpNo *p)
{
	if (soap_read___ns1__checkEmpNo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkTestData_DEFINED
#define SOAP_TYPE___ns1__checkTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkTestData(struct soap*, struct __ns1__checkTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkTestData(struct soap*, const struct __ns1__checkTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkTestData(struct soap*, const char*, int, const struct __ns1__checkTestData *, const char*);
SOAP_FMAC3 struct __ns1__checkTestData * SOAP_FMAC4 soap_in___ns1__checkTestData(struct soap*, const char*, struct __ns1__checkTestData *, const char*);
SOAP_FMAC1 struct __ns1__checkTestData * SOAP_FMAC2 soap_instantiate___ns1__checkTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkTestData * soap_new___ns1__checkTestData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkTestData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkTestData * soap_new_req___ns1__checkTestData(
	struct soap *soap)
{
	struct __ns1__checkTestData *_p = soap_new___ns1__checkTestData(soap);
	if (_p)
	{	soap_default___ns1__checkTestData(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkTestData * soap_new_set___ns1__checkTestData(
	struct soap *soap,
	_ns1__checkTestData *ns1__checkTestData)
{
	struct __ns1__checkTestData *_p = soap_new___ns1__checkTestData(soap);
	if (_p)
	{	soap_default___ns1__checkTestData(soap, _p);
		_p->ns1__checkTestData = ns1__checkTestData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkTestData(struct soap*, const struct __ns1__checkTestData *, const char*, const char*);

inline int soap_write___ns1__checkTestData(struct soap *soap, struct __ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__checkTestData(soap, p), 0) || soap_put___ns1__checkTestData(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkTestData(struct soap *soap, const char *URL, struct __ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkTestData(soap, p), 0) || soap_put___ns1__checkTestData(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkTestData(struct soap *soap, const char *URL, struct __ns1__checkTestData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__checkTestData(soap, p), 0) || soap_put___ns1__checkTestData(soap, p, "-ns1:checkTestData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkTestData * SOAP_FMAC4 soap_get___ns1__checkTestData(struct soap*, struct __ns1__checkTestData *, const char*, const char*);

inline int soap_read___ns1__checkTestData(struct soap *soap, struct __ns1__checkTestData *p)
{
	if (p)
	{	soap_default___ns1__checkTestData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkTestData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkTestData(struct soap *soap, const char *URL, struct __ns1__checkTestData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__checkTestData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkTestData(struct soap *soap, struct __ns1__checkTestData *p)
{
	if (soap_read___ns1__checkTestData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsZjList_DEFINED
#define SOAP_TYPE___ns1__InsZjList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsZjList(struct soap*, struct __ns1__InsZjList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsZjList(struct soap*, const struct __ns1__InsZjList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsZjList(struct soap*, const char*, int, const struct __ns1__InsZjList *, const char*);
SOAP_FMAC3 struct __ns1__InsZjList * SOAP_FMAC4 soap_in___ns1__InsZjList(struct soap*, const char*, struct __ns1__InsZjList *, const char*);
SOAP_FMAC1 struct __ns1__InsZjList * SOAP_FMAC2 soap_instantiate___ns1__InsZjList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsZjList * soap_new___ns1__InsZjList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsZjList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsZjList * soap_new_req___ns1__InsZjList(
	struct soap *soap)
{
	struct __ns1__InsZjList *_p = soap_new___ns1__InsZjList(soap);
	if (_p)
	{	soap_default___ns1__InsZjList(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsZjList * soap_new_set___ns1__InsZjList(
	struct soap *soap,
	_ns1__InsZjList *ns1__InsZjList)
{
	struct __ns1__InsZjList *_p = soap_new___ns1__InsZjList(soap);
	if (_p)
	{	soap_default___ns1__InsZjList(soap, _p);
		_p->ns1__InsZjList = ns1__InsZjList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsZjList(struct soap*, const struct __ns1__InsZjList *, const char*, const char*);

inline int soap_write___ns1__InsZjList(struct soap *soap, struct __ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsZjList(soap, p), 0) || soap_put___ns1__InsZjList(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsZjList(struct soap *soap, const char *URL, struct __ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZjList(soap, p), 0) || soap_put___ns1__InsZjList(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsZjList(struct soap *soap, const char *URL, struct __ns1__InsZjList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsZjList(soap, p), 0) || soap_put___ns1__InsZjList(soap, p, "-ns1:InsZjList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsZjList * SOAP_FMAC4 soap_get___ns1__InsZjList(struct soap*, struct __ns1__InsZjList *, const char*, const char*);

inline int soap_read___ns1__InsZjList(struct soap *soap, struct __ns1__InsZjList *p)
{
	if (p)
	{	soap_default___ns1__InsZjList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsZjList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsZjList(struct soap *soap, const char *URL, struct __ns1__InsZjList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsZjList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsZjList(struct soap *soap, struct __ns1__InsZjList *p)
{
	if (soap_read___ns1__InsZjList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFruitMachineChk_DEFINED
#define SOAP_TYPE___ns1__GetFruitMachineChk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFruitMachineChk(struct soap*, struct __ns1__GetFruitMachineChk *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFruitMachineChk(struct soap*, const struct __ns1__GetFruitMachineChk *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFruitMachineChk(struct soap*, const char*, int, const struct __ns1__GetFruitMachineChk *, const char*);
SOAP_FMAC3 struct __ns1__GetFruitMachineChk * SOAP_FMAC4 soap_in___ns1__GetFruitMachineChk(struct soap*, const char*, struct __ns1__GetFruitMachineChk *, const char*);
SOAP_FMAC1 struct __ns1__GetFruitMachineChk * SOAP_FMAC2 soap_instantiate___ns1__GetFruitMachineChk(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFruitMachineChk * soap_new___ns1__GetFruitMachineChk(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFruitMachineChk(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFruitMachineChk * soap_new_req___ns1__GetFruitMachineChk(
	struct soap *soap)
{
	struct __ns1__GetFruitMachineChk *_p = soap_new___ns1__GetFruitMachineChk(soap);
	if (_p)
	{	soap_default___ns1__GetFruitMachineChk(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFruitMachineChk * soap_new_set___ns1__GetFruitMachineChk(
	struct soap *soap,
	_ns1__GetFruitMachineChk *ns1__GetFruitMachineChk)
{
	struct __ns1__GetFruitMachineChk *_p = soap_new___ns1__GetFruitMachineChk(soap);
	if (_p)
	{	soap_default___ns1__GetFruitMachineChk(soap, _p);
		_p->ns1__GetFruitMachineChk = ns1__GetFruitMachineChk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFruitMachineChk(struct soap*, const struct __ns1__GetFruitMachineChk *, const char*, const char*);

inline int soap_write___ns1__GetFruitMachineChk(struct soap *soap, struct __ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFruitMachineChk(soap, p), 0) || soap_put___ns1__GetFruitMachineChk(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitMachineChk(soap, p), 0) || soap_put___ns1__GetFruitMachineChk(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitMachineChk(soap, p), 0) || soap_put___ns1__GetFruitMachineChk(soap, p, "-ns1:GetFruitMachineChk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFruitMachineChk * SOAP_FMAC4 soap_get___ns1__GetFruitMachineChk(struct soap*, struct __ns1__GetFruitMachineChk *, const char*, const char*);

inline int soap_read___ns1__GetFruitMachineChk(struct soap *soap, struct __ns1__GetFruitMachineChk *p)
{
	if (p)
	{	soap_default___ns1__GetFruitMachineChk(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFruitMachineChk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__GetFruitMachineChk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFruitMachineChk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFruitMachineChk(struct soap *soap, struct __ns1__GetFruitMachineChk *p)
{
	if (soap_read___ns1__GetFruitMachineChk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsFruitMachineChk_DEFINED
#define SOAP_TYPE___ns1__InsFruitMachineChk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsFruitMachineChk(struct soap*, struct __ns1__InsFruitMachineChk *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsFruitMachineChk(struct soap*, const struct __ns1__InsFruitMachineChk *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsFruitMachineChk(struct soap*, const char*, int, const struct __ns1__InsFruitMachineChk *, const char*);
SOAP_FMAC3 struct __ns1__InsFruitMachineChk * SOAP_FMAC4 soap_in___ns1__InsFruitMachineChk(struct soap*, const char*, struct __ns1__InsFruitMachineChk *, const char*);
SOAP_FMAC1 struct __ns1__InsFruitMachineChk * SOAP_FMAC2 soap_instantiate___ns1__InsFruitMachineChk(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsFruitMachineChk * soap_new___ns1__InsFruitMachineChk(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsFruitMachineChk(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsFruitMachineChk * soap_new_req___ns1__InsFruitMachineChk(
	struct soap *soap)
{
	struct __ns1__InsFruitMachineChk *_p = soap_new___ns1__InsFruitMachineChk(soap);
	if (_p)
	{	soap_default___ns1__InsFruitMachineChk(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsFruitMachineChk * soap_new_set___ns1__InsFruitMachineChk(
	struct soap *soap,
	_ns1__InsFruitMachineChk *ns1__InsFruitMachineChk)
{
	struct __ns1__InsFruitMachineChk *_p = soap_new___ns1__InsFruitMachineChk(soap);
	if (_p)
	{	soap_default___ns1__InsFruitMachineChk(soap, _p);
		_p->ns1__InsFruitMachineChk = ns1__InsFruitMachineChk;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsFruitMachineChk(struct soap*, const struct __ns1__InsFruitMachineChk *, const char*, const char*);

inline int soap_write___ns1__InsFruitMachineChk(struct soap *soap, struct __ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsFruitMachineChk(soap, p), 0) || soap_put___ns1__InsFruitMachineChk(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFruitMachineChk(soap, p), 0) || soap_put___ns1__InsFruitMachineChk(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsFruitMachineChk(soap, p), 0) || soap_put___ns1__InsFruitMachineChk(soap, p, "-ns1:InsFruitMachineChk", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsFruitMachineChk * SOAP_FMAC4 soap_get___ns1__InsFruitMachineChk(struct soap*, struct __ns1__InsFruitMachineChk *, const char*, const char*);

inline int soap_read___ns1__InsFruitMachineChk(struct soap *soap, struct __ns1__InsFruitMachineChk *p)
{
	if (p)
	{	soap_default___ns1__InsFruitMachineChk(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsFruitMachineChk(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsFruitMachineChk(struct soap *soap, const char *URL, struct __ns1__InsFruitMachineChk *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsFruitMachineChk(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsFruitMachineChk(struct soap *soap, struct __ns1__InsFruitMachineChk *p)
{
	if (soap_read___ns1__InsFruitMachineChk(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnLnkOutSN_DEFINED
#define SOAP_TYPE___ns1__SnLnkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnLnkOutSN(struct soap*, struct __ns1__SnLnkOutSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnLnkOutSN(struct soap*, const struct __ns1__SnLnkOutSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnLnkOutSN(struct soap*, const char*, int, const struct __ns1__SnLnkOutSN *, const char*);
SOAP_FMAC3 struct __ns1__SnLnkOutSN * SOAP_FMAC4 soap_in___ns1__SnLnkOutSN(struct soap*, const char*, struct __ns1__SnLnkOutSN *, const char*);
SOAP_FMAC1 struct __ns1__SnLnkOutSN * SOAP_FMAC2 soap_instantiate___ns1__SnLnkOutSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnLnkOutSN * soap_new___ns1__SnLnkOutSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnLnkOutSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnLnkOutSN * soap_new_req___ns1__SnLnkOutSN(
	struct soap *soap)
{
	struct __ns1__SnLnkOutSN *_p = soap_new___ns1__SnLnkOutSN(soap);
	if (_p)
	{	soap_default___ns1__SnLnkOutSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnLnkOutSN * soap_new_set___ns1__SnLnkOutSN(
	struct soap *soap,
	_ns1__SnLnkOutSN *ns1__SnLnkOutSN)
{
	struct __ns1__SnLnkOutSN *_p = soap_new___ns1__SnLnkOutSN(soap);
	if (_p)
	{	soap_default___ns1__SnLnkOutSN(soap, _p);
		_p->ns1__SnLnkOutSN = ns1__SnLnkOutSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnLnkOutSN(struct soap*, const struct __ns1__SnLnkOutSN *, const char*, const char*);

inline int soap_write___ns1__SnLnkOutSN(struct soap *soap, struct __ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SnLnkOutSN(soap, p), 0) || soap_put___ns1__SnLnkOutSN(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SnLnkOutSN(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnLnkOutSN(soap, p), 0) || soap_put___ns1__SnLnkOutSN(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SnLnkOutSN(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SnLnkOutSN(soap, p), 0) || soap_put___ns1__SnLnkOutSN(soap, p, "-ns1:SnLnkOutSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnLnkOutSN * SOAP_FMAC4 soap_get___ns1__SnLnkOutSN(struct soap*, struct __ns1__SnLnkOutSN *, const char*, const char*);

inline int soap_read___ns1__SnLnkOutSN(struct soap *soap, struct __ns1__SnLnkOutSN *p)
{
	if (p)
	{	soap_default___ns1__SnLnkOutSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnLnkOutSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SnLnkOutSN(struct soap *soap, const char *URL, struct __ns1__SnLnkOutSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SnLnkOutSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SnLnkOutSN(struct soap *soap, struct __ns1__SnLnkOutSN *p)
{
	if (soap_read___ns1__SnLnkOutSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMoBase_DEFINED
#define SOAP_TYPE___ns1__getMoBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMoBase(struct soap*, struct __ns1__getMoBase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMoBase(struct soap*, const struct __ns1__getMoBase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMoBase(struct soap*, const char*, int, const struct __ns1__getMoBase *, const char*);
SOAP_FMAC3 struct __ns1__getMoBase * SOAP_FMAC4 soap_in___ns1__getMoBase(struct soap*, const char*, struct __ns1__getMoBase *, const char*);
SOAP_FMAC1 struct __ns1__getMoBase * SOAP_FMAC2 soap_instantiate___ns1__getMoBase(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMoBase * soap_new___ns1__getMoBase(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMoBase(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMoBase * soap_new_req___ns1__getMoBase(
	struct soap *soap)
{
	struct __ns1__getMoBase *_p = soap_new___ns1__getMoBase(soap);
	if (_p)
	{	soap_default___ns1__getMoBase(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMoBase * soap_new_set___ns1__getMoBase(
	struct soap *soap,
	_ns1__getMoBase *ns1__getMoBase)
{
	struct __ns1__getMoBase *_p = soap_new___ns1__getMoBase(soap);
	if (_p)
	{	soap_default___ns1__getMoBase(soap, _p);
		_p->ns1__getMoBase = ns1__getMoBase;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMoBase(struct soap*, const struct __ns1__getMoBase *, const char*, const char*);

inline int soap_write___ns1__getMoBase(struct soap *soap, struct __ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getMoBase(soap, p), 0) || soap_put___ns1__getMoBase(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMoBase(struct soap *soap, const char *URL, struct __ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoBase(soap, p), 0) || soap_put___ns1__getMoBase(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMoBase(struct soap *soap, const char *URL, struct __ns1__getMoBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getMoBase(soap, p), 0) || soap_put___ns1__getMoBase(soap, p, "-ns1:getMoBase", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMoBase * SOAP_FMAC4 soap_get___ns1__getMoBase(struct soap*, struct __ns1__getMoBase *, const char*, const char*);

inline int soap_read___ns1__getMoBase(struct soap *soap, struct __ns1__getMoBase *p)
{
	if (p)
	{	soap_default___ns1__getMoBase(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMoBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMoBase(struct soap *soap, const char *URL, struct __ns1__getMoBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getMoBase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMoBase(struct soap *soap, struct __ns1__getMoBase *p)
{
	if (soap_read___ns1__getMoBase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetNgCode_DEFINED
#define SOAP_TYPE___ns1__GetNgCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetNgCode(struct soap*, struct __ns1__GetNgCode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetNgCode(struct soap*, const struct __ns1__GetNgCode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetNgCode(struct soap*, const char*, int, const struct __ns1__GetNgCode *, const char*);
SOAP_FMAC3 struct __ns1__GetNgCode * SOAP_FMAC4 soap_in___ns1__GetNgCode(struct soap*, const char*, struct __ns1__GetNgCode *, const char*);
SOAP_FMAC1 struct __ns1__GetNgCode * SOAP_FMAC2 soap_instantiate___ns1__GetNgCode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetNgCode * soap_new___ns1__GetNgCode(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetNgCode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetNgCode * soap_new_req___ns1__GetNgCode(
	struct soap *soap)
{
	struct __ns1__GetNgCode *_p = soap_new___ns1__GetNgCode(soap);
	if (_p)
	{	soap_default___ns1__GetNgCode(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetNgCode * soap_new_set___ns1__GetNgCode(
	struct soap *soap,
	_ns1__GetNgCode *ns1__GetNgCode)
{
	struct __ns1__GetNgCode *_p = soap_new___ns1__GetNgCode(soap);
	if (_p)
	{	soap_default___ns1__GetNgCode(soap, _p);
		_p->ns1__GetNgCode = ns1__GetNgCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetNgCode(struct soap*, const struct __ns1__GetNgCode *, const char*, const char*);

inline int soap_write___ns1__GetNgCode(struct soap *soap, struct __ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetNgCode(soap, p), 0) || soap_put___ns1__GetNgCode(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetNgCode(struct soap *soap, const char *URL, struct __ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetNgCode(soap, p), 0) || soap_put___ns1__GetNgCode(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetNgCode(struct soap *soap, const char *URL, struct __ns1__GetNgCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetNgCode(soap, p), 0) || soap_put___ns1__GetNgCode(soap, p, "-ns1:GetNgCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetNgCode * SOAP_FMAC4 soap_get___ns1__GetNgCode(struct soap*, struct __ns1__GetNgCode *, const char*, const char*);

inline int soap_read___ns1__GetNgCode(struct soap *soap, struct __ns1__GetNgCode *p)
{
	if (p)
	{	soap_default___ns1__GetNgCode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetNgCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetNgCode(struct soap *soap, const char *URL, struct __ns1__GetNgCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetNgCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetNgCode(struct soap *soap, struct __ns1__GetNgCode *p)
{
	if (soap_read___ns1__GetNgCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetDiecastSN_DEFINED
#define SOAP_TYPE___ns1__SetDiecastSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetDiecastSN(struct soap*, struct __ns1__SetDiecastSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetDiecastSN(struct soap*, const struct __ns1__SetDiecastSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetDiecastSN(struct soap*, const char*, int, const struct __ns1__SetDiecastSN *, const char*);
SOAP_FMAC3 struct __ns1__SetDiecastSN * SOAP_FMAC4 soap_in___ns1__SetDiecastSN(struct soap*, const char*, struct __ns1__SetDiecastSN *, const char*);
SOAP_FMAC1 struct __ns1__SetDiecastSN * SOAP_FMAC2 soap_instantiate___ns1__SetDiecastSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetDiecastSN * soap_new___ns1__SetDiecastSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetDiecastSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetDiecastSN * soap_new_req___ns1__SetDiecastSN(
	struct soap *soap)
{
	struct __ns1__SetDiecastSN *_p = soap_new___ns1__SetDiecastSN(soap);
	if (_p)
	{	soap_default___ns1__SetDiecastSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetDiecastSN * soap_new_set___ns1__SetDiecastSN(
	struct soap *soap,
	_ns1__SetDiecastSN *ns1__SetDiecastSN)
{
	struct __ns1__SetDiecastSN *_p = soap_new___ns1__SetDiecastSN(soap);
	if (_p)
	{	soap_default___ns1__SetDiecastSN(soap, _p);
		_p->ns1__SetDiecastSN = ns1__SetDiecastSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetDiecastSN(struct soap*, const struct __ns1__SetDiecastSN *, const char*, const char*);

inline int soap_write___ns1__SetDiecastSN(struct soap *soap, struct __ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetDiecastSN(soap, p), 0) || soap_put___ns1__SetDiecastSN(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetDiecastSN(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetDiecastSN(soap, p), 0) || soap_put___ns1__SetDiecastSN(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetDiecastSN(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetDiecastSN(soap, p), 0) || soap_put___ns1__SetDiecastSN(soap, p, "-ns1:SetDiecastSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetDiecastSN * SOAP_FMAC4 soap_get___ns1__SetDiecastSN(struct soap*, struct __ns1__SetDiecastSN *, const char*, const char*);

inline int soap_read___ns1__SetDiecastSN(struct soap *soap, struct __ns1__SetDiecastSN *p)
{
	if (p)
	{	soap_default___ns1__SetDiecastSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetDiecastSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetDiecastSN(struct soap *soap, const char *URL, struct __ns1__SetDiecastSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetDiecastSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetDiecastSN(struct soap *soap, struct __ns1__SetDiecastSN *p)
{
	if (soap_read___ns1__SetDiecastSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMachineForGroup_DEFINED
#define SOAP_TYPE___ns1__GetMachineForGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMachineForGroup(struct soap*, struct __ns1__GetMachineForGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMachineForGroup(struct soap*, const struct __ns1__GetMachineForGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMachineForGroup(struct soap*, const char*, int, const struct __ns1__GetMachineForGroup *, const char*);
SOAP_FMAC3 struct __ns1__GetMachineForGroup * SOAP_FMAC4 soap_in___ns1__GetMachineForGroup(struct soap*, const char*, struct __ns1__GetMachineForGroup *, const char*);
SOAP_FMAC1 struct __ns1__GetMachineForGroup * SOAP_FMAC2 soap_instantiate___ns1__GetMachineForGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMachineForGroup * soap_new___ns1__GetMachineForGroup(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMachineForGroup(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMachineForGroup * soap_new_req___ns1__GetMachineForGroup(
	struct soap *soap)
{
	struct __ns1__GetMachineForGroup *_p = soap_new___ns1__GetMachineForGroup(soap);
	if (_p)
	{	soap_default___ns1__GetMachineForGroup(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMachineForGroup * soap_new_set___ns1__GetMachineForGroup(
	struct soap *soap,
	_ns1__GetMachineForGroup *ns1__GetMachineForGroup)
{
	struct __ns1__GetMachineForGroup *_p = soap_new___ns1__GetMachineForGroup(soap);
	if (_p)
	{	soap_default___ns1__GetMachineForGroup(soap, _p);
		_p->ns1__GetMachineForGroup = ns1__GetMachineForGroup;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMachineForGroup(struct soap*, const struct __ns1__GetMachineForGroup *, const char*, const char*);

inline int soap_write___ns1__GetMachineForGroup(struct soap *soap, struct __ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMachineForGroup(soap, p), 0) || soap_put___ns1__GetMachineForGroup(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMachineForGroup(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMachineForGroup(soap, p), 0) || soap_put___ns1__GetMachineForGroup(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMachineForGroup(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMachineForGroup(soap, p), 0) || soap_put___ns1__GetMachineForGroup(soap, p, "-ns1:GetMachineForGroup", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMachineForGroup * SOAP_FMAC4 soap_get___ns1__GetMachineForGroup(struct soap*, struct __ns1__GetMachineForGroup *, const char*, const char*);

inline int soap_read___ns1__GetMachineForGroup(struct soap *soap, struct __ns1__GetMachineForGroup *p)
{
	if (p)
	{	soap_default___ns1__GetMachineForGroup(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMachineForGroup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMachineForGroup(struct soap *soap, const char *URL, struct __ns1__GetMachineForGroup *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMachineForGroup(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMachineForGroup(struct soap *soap, struct __ns1__GetMachineForGroup *p)
{
	if (soap_read___ns1__GetMachineForGroup(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadForHP_DEFINED
#define SOAP_TYPE___ns1__UploadForHP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadForHP(struct soap*, struct __ns1__UploadForHP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadForHP(struct soap*, const struct __ns1__UploadForHP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadForHP(struct soap*, const char*, int, const struct __ns1__UploadForHP *, const char*);
SOAP_FMAC3 struct __ns1__UploadForHP * SOAP_FMAC4 soap_in___ns1__UploadForHP(struct soap*, const char*, struct __ns1__UploadForHP *, const char*);
SOAP_FMAC1 struct __ns1__UploadForHP * SOAP_FMAC2 soap_instantiate___ns1__UploadForHP(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadForHP * soap_new___ns1__UploadForHP(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadForHP(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadForHP * soap_new_req___ns1__UploadForHP(
	struct soap *soap)
{
	struct __ns1__UploadForHP *_p = soap_new___ns1__UploadForHP(soap);
	if (_p)
	{	soap_default___ns1__UploadForHP(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadForHP * soap_new_set___ns1__UploadForHP(
	struct soap *soap,
	_ns1__UploadForHP *ns1__UploadForHP)
{
	struct __ns1__UploadForHP *_p = soap_new___ns1__UploadForHP(soap);
	if (_p)
	{	soap_default___ns1__UploadForHP(soap, _p);
		_p->ns1__UploadForHP = ns1__UploadForHP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadForHP(struct soap*, const struct __ns1__UploadForHP *, const char*, const char*);

inline int soap_write___ns1__UploadForHP(struct soap *soap, struct __ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UploadForHP(soap, p), 0) || soap_put___ns1__UploadForHP(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadForHP(struct soap *soap, const char *URL, struct __ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadForHP(soap, p), 0) || soap_put___ns1__UploadForHP(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadForHP(struct soap *soap, const char *URL, struct __ns1__UploadForHP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadForHP(soap, p), 0) || soap_put___ns1__UploadForHP(soap, p, "-ns1:UploadForHP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadForHP * SOAP_FMAC4 soap_get___ns1__UploadForHP(struct soap*, struct __ns1__UploadForHP *, const char*, const char*);

inline int soap_read___ns1__UploadForHP(struct soap *soap, struct __ns1__UploadForHP *p)
{
	if (p)
	{	soap_default___ns1__UploadForHP(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UploadForHP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadForHP(struct soap *soap, const char *URL, struct __ns1__UploadForHP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UploadForHP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadForHP(struct soap *soap, struct __ns1__UploadForHP *p)
{
	if (soap_read___ns1__UploadForHP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelShelfLink_DEFINED
#define SOAP_TYPE___ns1__SelShelfLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelShelfLink(struct soap*, struct __ns1__SelShelfLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelShelfLink(struct soap*, const struct __ns1__SelShelfLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelShelfLink(struct soap*, const char*, int, const struct __ns1__SelShelfLink *, const char*);
SOAP_FMAC3 struct __ns1__SelShelfLink * SOAP_FMAC4 soap_in___ns1__SelShelfLink(struct soap*, const char*, struct __ns1__SelShelfLink *, const char*);
SOAP_FMAC1 struct __ns1__SelShelfLink * SOAP_FMAC2 soap_instantiate___ns1__SelShelfLink(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelShelfLink * soap_new___ns1__SelShelfLink(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelShelfLink(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelShelfLink * soap_new_req___ns1__SelShelfLink(
	struct soap *soap)
{
	struct __ns1__SelShelfLink *_p = soap_new___ns1__SelShelfLink(soap);
	if (_p)
	{	soap_default___ns1__SelShelfLink(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelShelfLink * soap_new_set___ns1__SelShelfLink(
	struct soap *soap,
	_ns1__SelShelfLink *ns1__SelShelfLink)
{
	struct __ns1__SelShelfLink *_p = soap_new___ns1__SelShelfLink(soap);
	if (_p)
	{	soap_default___ns1__SelShelfLink(soap, _p);
		_p->ns1__SelShelfLink = ns1__SelShelfLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelShelfLink(struct soap*, const struct __ns1__SelShelfLink *, const char*, const char*);

inline int soap_write___ns1__SelShelfLink(struct soap *soap, struct __ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelShelfLink(soap, p), 0) || soap_put___ns1__SelShelfLink(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelShelfLink(struct soap *soap, const char *URL, struct __ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelShelfLink(soap, p), 0) || soap_put___ns1__SelShelfLink(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelShelfLink(struct soap *soap, const char *URL, struct __ns1__SelShelfLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelShelfLink(soap, p), 0) || soap_put___ns1__SelShelfLink(soap, p, "-ns1:SelShelfLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelShelfLink * SOAP_FMAC4 soap_get___ns1__SelShelfLink(struct soap*, struct __ns1__SelShelfLink *, const char*, const char*);

inline int soap_read___ns1__SelShelfLink(struct soap *soap, struct __ns1__SelShelfLink *p)
{
	if (p)
	{	soap_default___ns1__SelShelfLink(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelShelfLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelShelfLink(struct soap *soap, const char *URL, struct __ns1__SelShelfLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelShelfLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelShelfLink(struct soap *soap, struct __ns1__SelShelfLink *p)
{
	if (soap_read___ns1__SelShelfLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SNLinkShelf_DEFINED
#define SOAP_TYPE___ns1__SNLinkShelf_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SNLinkShelf(struct soap*, struct __ns1__SNLinkShelf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SNLinkShelf(struct soap*, const struct __ns1__SNLinkShelf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SNLinkShelf(struct soap*, const char*, int, const struct __ns1__SNLinkShelf *, const char*);
SOAP_FMAC3 struct __ns1__SNLinkShelf * SOAP_FMAC4 soap_in___ns1__SNLinkShelf(struct soap*, const char*, struct __ns1__SNLinkShelf *, const char*);
SOAP_FMAC1 struct __ns1__SNLinkShelf * SOAP_FMAC2 soap_instantiate___ns1__SNLinkShelf(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SNLinkShelf * soap_new___ns1__SNLinkShelf(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SNLinkShelf(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SNLinkShelf * soap_new_req___ns1__SNLinkShelf(
	struct soap *soap)
{
	struct __ns1__SNLinkShelf *_p = soap_new___ns1__SNLinkShelf(soap);
	if (_p)
	{	soap_default___ns1__SNLinkShelf(soap, _p);
	}
	return _p;
}

inline struct __ns1__SNLinkShelf * soap_new_set___ns1__SNLinkShelf(
	struct soap *soap,
	_ns1__SNLinkShelf *ns1__SNLinkShelf)
{
	struct __ns1__SNLinkShelf *_p = soap_new___ns1__SNLinkShelf(soap);
	if (_p)
	{	soap_default___ns1__SNLinkShelf(soap, _p);
		_p->ns1__SNLinkShelf = ns1__SNLinkShelf;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SNLinkShelf(struct soap*, const struct __ns1__SNLinkShelf *, const char*, const char*);

inline int soap_write___ns1__SNLinkShelf(struct soap *soap, struct __ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SNLinkShelf(soap, p), 0) || soap_put___ns1__SNLinkShelf(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SNLinkShelf(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkShelf(soap, p), 0) || soap_put___ns1__SNLinkShelf(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SNLinkShelf(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SNLinkShelf(soap, p), 0) || soap_put___ns1__SNLinkShelf(soap, p, "-ns1:SNLinkShelf", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SNLinkShelf * SOAP_FMAC4 soap_get___ns1__SNLinkShelf(struct soap*, struct __ns1__SNLinkShelf *, const char*, const char*);

inline int soap_read___ns1__SNLinkShelf(struct soap *soap, struct __ns1__SNLinkShelf *p)
{
	if (p)
	{	soap_default___ns1__SNLinkShelf(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SNLinkShelf(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SNLinkShelf(struct soap *soap, const char *URL, struct __ns1__SNLinkShelf *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SNLinkShelf(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SNLinkShelf(struct soap *soap, struct __ns1__SNLinkShelf *p)
{
	if (soap_read___ns1__SNLinkShelf(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelSNTestForFruit_DEFINED
#define SOAP_TYPE___ns1__SelSNTestForFruit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelSNTestForFruit(struct soap*, struct __ns1__SelSNTestForFruit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelSNTestForFruit(struct soap*, const struct __ns1__SelSNTestForFruit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelSNTestForFruit(struct soap*, const char*, int, const struct __ns1__SelSNTestForFruit *, const char*);
SOAP_FMAC3 struct __ns1__SelSNTestForFruit * SOAP_FMAC4 soap_in___ns1__SelSNTestForFruit(struct soap*, const char*, struct __ns1__SelSNTestForFruit *, const char*);
SOAP_FMAC1 struct __ns1__SelSNTestForFruit * SOAP_FMAC2 soap_instantiate___ns1__SelSNTestForFruit(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelSNTestForFruit * soap_new___ns1__SelSNTestForFruit(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelSNTestForFruit(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelSNTestForFruit * soap_new_req___ns1__SelSNTestForFruit(
	struct soap *soap)
{
	struct __ns1__SelSNTestForFruit *_p = soap_new___ns1__SelSNTestForFruit(soap);
	if (_p)
	{	soap_default___ns1__SelSNTestForFruit(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelSNTestForFruit * soap_new_set___ns1__SelSNTestForFruit(
	struct soap *soap,
	_ns1__SelSNTestForFruit *ns1__SelSNTestForFruit)
{
	struct __ns1__SelSNTestForFruit *_p = soap_new___ns1__SelSNTestForFruit(soap);
	if (_p)
	{	soap_default___ns1__SelSNTestForFruit(soap, _p);
		_p->ns1__SelSNTestForFruit = ns1__SelSNTestForFruit;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelSNTestForFruit(struct soap*, const struct __ns1__SelSNTestForFruit *, const char*, const char*);

inline int soap_write___ns1__SelSNTestForFruit(struct soap *soap, struct __ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelSNTestForFruit(soap, p), 0) || soap_put___ns1__SelSNTestForFruit(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTestForFruit(soap, p), 0) || soap_put___ns1__SelSNTestForFruit(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTestForFruit(soap, p), 0) || soap_put___ns1__SelSNTestForFruit(soap, p, "-ns1:SelSNTestForFruit", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelSNTestForFruit * SOAP_FMAC4 soap_get___ns1__SelSNTestForFruit(struct soap*, struct __ns1__SelSNTestForFruit *, const char*, const char*);

inline int soap_read___ns1__SelSNTestForFruit(struct soap *soap, struct __ns1__SelSNTestForFruit *p)
{
	if (p)
	{	soap_default___ns1__SelSNTestForFruit(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelSNTestForFruit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__SelSNTestForFruit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelSNTestForFruit(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelSNTestForFruit(struct soap *soap, struct __ns1__SelSNTestForFruit *p)
{
	if (soap_read___ns1__SelSNTestForFruit(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNTestForFruit_DEFINED
#define SOAP_TYPE___ns1__InsSNTestForFruit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNTestForFruit(struct soap*, struct __ns1__InsSNTestForFruit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNTestForFruit(struct soap*, const struct __ns1__InsSNTestForFruit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNTestForFruit(struct soap*, const char*, int, const struct __ns1__InsSNTestForFruit *, const char*);
SOAP_FMAC3 struct __ns1__InsSNTestForFruit * SOAP_FMAC4 soap_in___ns1__InsSNTestForFruit(struct soap*, const char*, struct __ns1__InsSNTestForFruit *, const char*);
SOAP_FMAC1 struct __ns1__InsSNTestForFruit * SOAP_FMAC2 soap_instantiate___ns1__InsSNTestForFruit(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNTestForFruit * soap_new___ns1__InsSNTestForFruit(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNTestForFruit(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNTestForFruit * soap_new_req___ns1__InsSNTestForFruit(
	struct soap *soap)
{
	struct __ns1__InsSNTestForFruit *_p = soap_new___ns1__InsSNTestForFruit(soap);
	if (_p)
	{	soap_default___ns1__InsSNTestForFruit(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNTestForFruit * soap_new_set___ns1__InsSNTestForFruit(
	struct soap *soap,
	_ns1__InsSNTestForFruit *ns1__InsSNTestForFruit)
{
	struct __ns1__InsSNTestForFruit *_p = soap_new___ns1__InsSNTestForFruit(soap);
	if (_p)
	{	soap_default___ns1__InsSNTestForFruit(soap, _p);
		_p->ns1__InsSNTestForFruit = ns1__InsSNTestForFruit;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNTestForFruit(struct soap*, const struct __ns1__InsSNTestForFruit *, const char*, const char*);

inline int soap_write___ns1__InsSNTestForFruit(struct soap *soap, struct __ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNTestForFruit(soap, p), 0) || soap_put___ns1__InsSNTestForFruit(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTestForFruit(soap, p), 0) || soap_put___ns1__InsSNTestForFruit(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTestForFruit(soap, p), 0) || soap_put___ns1__InsSNTestForFruit(soap, p, "-ns1:InsSNTestForFruit", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNTestForFruit * SOAP_FMAC4 soap_get___ns1__InsSNTestForFruit(struct soap*, struct __ns1__InsSNTestForFruit *, const char*, const char*);

inline int soap_read___ns1__InsSNTestForFruit(struct soap *soap, struct __ns1__InsSNTestForFruit *p)
{
	if (p)
	{	soap_default___ns1__InsSNTestForFruit(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNTestForFruit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNTestForFruit(struct soap *soap, const char *URL, struct __ns1__InsSNTestForFruit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNTestForFruit(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNTestForFruit(struct soap *soap, struct __ns1__InsSNTestForFruit *p)
{
	if (soap_read___ns1__InsSNTestForFruit(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetStationNumberForSN_DEFINED
#define SOAP_TYPE___ns1__GetStationNumberForSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStationNumberForSN(struct soap*, struct __ns1__GetStationNumberForSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStationNumberForSN(struct soap*, const struct __ns1__GetStationNumberForSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStationNumberForSN(struct soap*, const char*, int, const struct __ns1__GetStationNumberForSN *, const char*);
SOAP_FMAC3 struct __ns1__GetStationNumberForSN * SOAP_FMAC4 soap_in___ns1__GetStationNumberForSN(struct soap*, const char*, struct __ns1__GetStationNumberForSN *, const char*);
SOAP_FMAC1 struct __ns1__GetStationNumberForSN * SOAP_FMAC2 soap_instantiate___ns1__GetStationNumberForSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStationNumberForSN * soap_new___ns1__GetStationNumberForSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetStationNumberForSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetStationNumberForSN * soap_new_req___ns1__GetStationNumberForSN(
	struct soap *soap)
{
	struct __ns1__GetStationNumberForSN *_p = soap_new___ns1__GetStationNumberForSN(soap);
	if (_p)
	{	soap_default___ns1__GetStationNumberForSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetStationNumberForSN * soap_new_set___ns1__GetStationNumberForSN(
	struct soap *soap,
	_ns1__GetStationNumberForSN *ns1__GetStationNumberForSN)
{
	struct __ns1__GetStationNumberForSN *_p = soap_new___ns1__GetStationNumberForSN(soap);
	if (_p)
	{	soap_default___ns1__GetStationNumberForSN(soap, _p);
		_p->ns1__GetStationNumberForSN = ns1__GetStationNumberForSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStationNumberForSN(struct soap*, const struct __ns1__GetStationNumberForSN *, const char*, const char*);

inline int soap_write___ns1__GetStationNumberForSN(struct soap *soap, struct __ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetStationNumberForSN(soap, p), 0) || soap_put___ns1__GetStationNumberForSN(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetStationNumberForSN(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetStationNumberForSN(soap, p), 0) || soap_put___ns1__GetStationNumberForSN(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetStationNumberForSN(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetStationNumberForSN(soap, p), 0) || soap_put___ns1__GetStationNumberForSN(soap, p, "-ns1:GetStationNumberForSN", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetStationNumberForSN * SOAP_FMAC4 soap_get___ns1__GetStationNumberForSN(struct soap*, struct __ns1__GetStationNumberForSN *, const char*, const char*);

inline int soap_read___ns1__GetStationNumberForSN(struct soap *soap, struct __ns1__GetStationNumberForSN *p)
{
	if (p)
	{	soap_default___ns1__GetStationNumberForSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetStationNumberForSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetStationNumberForSN(struct soap *soap, const char *URL, struct __ns1__GetStationNumberForSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetStationNumberForSN(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetStationNumberForSN(struct soap *soap, struct __ns1__GetStationNumberForSN *p)
{
	if (soap_read___ns1__GetStationNumberForSN(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTestValueResult_DEFINED
#define SOAP_TYPE___ns1__GetTestValueResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTestValueResult(struct soap*, struct __ns1__GetTestValueResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTestValueResult(struct soap*, const struct __ns1__GetTestValueResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTestValueResult(struct soap*, const char*, int, const struct __ns1__GetTestValueResult *, const char*);
SOAP_FMAC3 struct __ns1__GetTestValueResult * SOAP_FMAC4 soap_in___ns1__GetTestValueResult(struct soap*, const char*, struct __ns1__GetTestValueResult *, const char*);
SOAP_FMAC1 struct __ns1__GetTestValueResult * SOAP_FMAC2 soap_instantiate___ns1__GetTestValueResult(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTestValueResult * soap_new___ns1__GetTestValueResult(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTestValueResult(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTestValueResult * soap_new_req___ns1__GetTestValueResult(
	struct soap *soap)
{
	struct __ns1__GetTestValueResult *_p = soap_new___ns1__GetTestValueResult(soap);
	if (_p)
	{	soap_default___ns1__GetTestValueResult(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTestValueResult * soap_new_set___ns1__GetTestValueResult(
	struct soap *soap,
	_ns1__GetTestValueResult *ns1__GetTestValueResult)
{
	struct __ns1__GetTestValueResult *_p = soap_new___ns1__GetTestValueResult(soap);
	if (_p)
	{	soap_default___ns1__GetTestValueResult(soap, _p);
		_p->ns1__GetTestValueResult = ns1__GetTestValueResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTestValueResult(struct soap*, const struct __ns1__GetTestValueResult *, const char*, const char*);

inline int soap_write___ns1__GetTestValueResult(struct soap *soap, struct __ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTestValueResult(soap, p), 0) || soap_put___ns1__GetTestValueResult(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTestValueResult(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValueResult(soap, p), 0) || soap_put___ns1__GetTestValueResult(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTestValueResult(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetTestValueResult(soap, p), 0) || soap_put___ns1__GetTestValueResult(soap, p, "-ns1:GetTestValueResult", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTestValueResult * SOAP_FMAC4 soap_get___ns1__GetTestValueResult(struct soap*, struct __ns1__GetTestValueResult *, const char*, const char*);

inline int soap_read___ns1__GetTestValueResult(struct soap *soap, struct __ns1__GetTestValueResult *p)
{
	if (p)
	{	soap_default___ns1__GetTestValueResult(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTestValueResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTestValueResult(struct soap *soap, const char *URL, struct __ns1__GetTestValueResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTestValueResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTestValueResult(struct soap *soap, struct __ns1__GetTestValueResult *p)
{
	if (soap_read___ns1__GetTestValueResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsCLScada_DEFINED
#define SOAP_TYPE___ns1__InsCLScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsCLScada(struct soap*, struct __ns1__InsCLScada *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsCLScada(struct soap*, const struct __ns1__InsCLScada *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsCLScada(struct soap*, const char*, int, const struct __ns1__InsCLScada *, const char*);
SOAP_FMAC3 struct __ns1__InsCLScada * SOAP_FMAC4 soap_in___ns1__InsCLScada(struct soap*, const char*, struct __ns1__InsCLScada *, const char*);
SOAP_FMAC1 struct __ns1__InsCLScada * SOAP_FMAC2 soap_instantiate___ns1__InsCLScada(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsCLScada * soap_new___ns1__InsCLScada(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsCLScada(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsCLScada * soap_new_req___ns1__InsCLScada(
	struct soap *soap)
{
	struct __ns1__InsCLScada *_p = soap_new___ns1__InsCLScada(soap);
	if (_p)
	{	soap_default___ns1__InsCLScada(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsCLScada * soap_new_set___ns1__InsCLScada(
	struct soap *soap,
	_ns1__InsCLScada *ns1__InsCLScada)
{
	struct __ns1__InsCLScada *_p = soap_new___ns1__InsCLScada(soap);
	if (_p)
	{	soap_default___ns1__InsCLScada(soap, _p);
		_p->ns1__InsCLScada = ns1__InsCLScada;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsCLScada(struct soap*, const struct __ns1__InsCLScada *, const char*, const char*);

inline int soap_write___ns1__InsCLScada(struct soap *soap, struct __ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsCLScada(soap, p), 0) || soap_put___ns1__InsCLScada(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsCLScada(struct soap *soap, const char *URL, struct __ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsCLScada(soap, p), 0) || soap_put___ns1__InsCLScada(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsCLScada(struct soap *soap, const char *URL, struct __ns1__InsCLScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsCLScada(soap, p), 0) || soap_put___ns1__InsCLScada(soap, p, "-ns1:InsCLScada", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsCLScada * SOAP_FMAC4 soap_get___ns1__InsCLScada(struct soap*, struct __ns1__InsCLScada *, const char*, const char*);

inline int soap_read___ns1__InsCLScada(struct soap *soap, struct __ns1__InsCLScada *p)
{
	if (p)
	{	soap_default___ns1__InsCLScada(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsCLScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsCLScada(struct soap *soap, const char *URL, struct __ns1__InsCLScada *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsCLScada(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsCLScada(struct soap *soap, struct __ns1__InsCLScada *p)
{
	if (soap_read___ns1__InsCLScada(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsAoiMo_DEFINED
#define SOAP_TYPE___ns1__InsAoiMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsAoiMo(struct soap*, struct __ns1__InsAoiMo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsAoiMo(struct soap*, const struct __ns1__InsAoiMo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsAoiMo(struct soap*, const char*, int, const struct __ns1__InsAoiMo *, const char*);
SOAP_FMAC3 struct __ns1__InsAoiMo * SOAP_FMAC4 soap_in___ns1__InsAoiMo(struct soap*, const char*, struct __ns1__InsAoiMo *, const char*);
SOAP_FMAC1 struct __ns1__InsAoiMo * SOAP_FMAC2 soap_instantiate___ns1__InsAoiMo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsAoiMo * soap_new___ns1__InsAoiMo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsAoiMo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsAoiMo * soap_new_req___ns1__InsAoiMo(
	struct soap *soap)
{
	struct __ns1__InsAoiMo *_p = soap_new___ns1__InsAoiMo(soap);
	if (_p)
	{	soap_default___ns1__InsAoiMo(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsAoiMo * soap_new_set___ns1__InsAoiMo(
	struct soap *soap,
	_ns1__InsAoiMo *ns1__InsAoiMo)
{
	struct __ns1__InsAoiMo *_p = soap_new___ns1__InsAoiMo(soap);
	if (_p)
	{	soap_default___ns1__InsAoiMo(soap, _p);
		_p->ns1__InsAoiMo = ns1__InsAoiMo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsAoiMo(struct soap*, const struct __ns1__InsAoiMo *, const char*, const char*);

inline int soap_write___ns1__InsAoiMo(struct soap *soap, struct __ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsAoiMo(soap, p), 0) || soap_put___ns1__InsAoiMo(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsAoiMo(struct soap *soap, const char *URL, struct __ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsAoiMo(soap, p), 0) || soap_put___ns1__InsAoiMo(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsAoiMo(struct soap *soap, const char *URL, struct __ns1__InsAoiMo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsAoiMo(soap, p), 0) || soap_put___ns1__InsAoiMo(soap, p, "-ns1:InsAoiMo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsAoiMo * SOAP_FMAC4 soap_get___ns1__InsAoiMo(struct soap*, struct __ns1__InsAoiMo *, const char*, const char*);

inline int soap_read___ns1__InsAoiMo(struct soap *soap, struct __ns1__InsAoiMo *p)
{
	if (p)
	{	soap_default___ns1__InsAoiMo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsAoiMo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsAoiMo(struct soap *soap, const char *URL, struct __ns1__InsAoiMo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsAoiMo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsAoiMo(struct soap *soap, struct __ns1__InsAoiMo *p)
{
	if (soap_read___ns1__InsAoiMo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__chkMoSNForAOI_DEFINED
#define SOAP_TYPE___ns1__chkMoSNForAOI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__chkMoSNForAOI(struct soap*, struct __ns1__chkMoSNForAOI *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__chkMoSNForAOI(struct soap*, const struct __ns1__chkMoSNForAOI *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__chkMoSNForAOI(struct soap*, const char*, int, const struct __ns1__chkMoSNForAOI *, const char*);
SOAP_FMAC3 struct __ns1__chkMoSNForAOI * SOAP_FMAC4 soap_in___ns1__chkMoSNForAOI(struct soap*, const char*, struct __ns1__chkMoSNForAOI *, const char*);
SOAP_FMAC1 struct __ns1__chkMoSNForAOI * SOAP_FMAC2 soap_instantiate___ns1__chkMoSNForAOI(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__chkMoSNForAOI * soap_new___ns1__chkMoSNForAOI(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__chkMoSNForAOI(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__chkMoSNForAOI * soap_new_req___ns1__chkMoSNForAOI(
	struct soap *soap)
{
	struct __ns1__chkMoSNForAOI *_p = soap_new___ns1__chkMoSNForAOI(soap);
	if (_p)
	{	soap_default___ns1__chkMoSNForAOI(soap, _p);
	}
	return _p;
}

inline struct __ns1__chkMoSNForAOI * soap_new_set___ns1__chkMoSNForAOI(
	struct soap *soap,
	_ns1__chkMoSNForAOI *ns1__chkMoSNForAOI)
{
	struct __ns1__chkMoSNForAOI *_p = soap_new___ns1__chkMoSNForAOI(soap);
	if (_p)
	{	soap_default___ns1__chkMoSNForAOI(soap, _p);
		_p->ns1__chkMoSNForAOI = ns1__chkMoSNForAOI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__chkMoSNForAOI(struct soap*, const struct __ns1__chkMoSNForAOI *, const char*, const char*);

inline int soap_write___ns1__chkMoSNForAOI(struct soap *soap, struct __ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__chkMoSNForAOI(soap, p), 0) || soap_put___ns1__chkMoSNForAOI(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__chkMoSNForAOI(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoSNForAOI(soap, p), 0) || soap_put___ns1__chkMoSNForAOI(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__chkMoSNForAOI(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__chkMoSNForAOI(soap, p), 0) || soap_put___ns1__chkMoSNForAOI(soap, p, "-ns1:chkMoSNForAOI", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__chkMoSNForAOI * SOAP_FMAC4 soap_get___ns1__chkMoSNForAOI(struct soap*, struct __ns1__chkMoSNForAOI *, const char*, const char*);

inline int soap_read___ns1__chkMoSNForAOI(struct soap *soap, struct __ns1__chkMoSNForAOI *p)
{
	if (p)
	{	soap_default___ns1__chkMoSNForAOI(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__chkMoSNForAOI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__chkMoSNForAOI(struct soap *soap, const char *URL, struct __ns1__chkMoSNForAOI *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__chkMoSNForAOI(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__chkMoSNForAOI(struct soap *soap, struct __ns1__chkMoSNForAOI *p)
{
	if (soap_read___ns1__chkMoSNForAOI(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PunchOut_DEFINED
#define SOAP_TYPE___ns1__PunchOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PunchOut(struct soap*, struct __ns1__PunchOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PunchOut(struct soap*, const struct __ns1__PunchOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PunchOut(struct soap*, const char*, int, const struct __ns1__PunchOut *, const char*);
SOAP_FMAC3 struct __ns1__PunchOut * SOAP_FMAC4 soap_in___ns1__PunchOut(struct soap*, const char*, struct __ns1__PunchOut *, const char*);
SOAP_FMAC1 struct __ns1__PunchOut * SOAP_FMAC2 soap_instantiate___ns1__PunchOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PunchOut * soap_new___ns1__PunchOut(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PunchOut(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PunchOut * soap_new_req___ns1__PunchOut(
	struct soap *soap)
{
	struct __ns1__PunchOut *_p = soap_new___ns1__PunchOut(soap);
	if (_p)
	{	soap_default___ns1__PunchOut(soap, _p);
	}
	return _p;
}

inline struct __ns1__PunchOut * soap_new_set___ns1__PunchOut(
	struct soap *soap,
	_ns1__PunchOut *ns1__PunchOut)
{
	struct __ns1__PunchOut *_p = soap_new___ns1__PunchOut(soap);
	if (_p)
	{	soap_default___ns1__PunchOut(soap, _p);
		_p->ns1__PunchOut = ns1__PunchOut;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PunchOut(struct soap*, const struct __ns1__PunchOut *, const char*, const char*);

inline int soap_write___ns1__PunchOut(struct soap *soap, struct __ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__PunchOut(soap, p), 0) || soap_put___ns1__PunchOut(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PunchOut(struct soap *soap, const char *URL, struct __ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PunchOut(soap, p), 0) || soap_put___ns1__PunchOut(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PunchOut(struct soap *soap, const char *URL, struct __ns1__PunchOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PunchOut(soap, p), 0) || soap_put___ns1__PunchOut(soap, p, "-ns1:PunchOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PunchOut * SOAP_FMAC4 soap_get___ns1__PunchOut(struct soap*, struct __ns1__PunchOut *, const char*, const char*);

inline int soap_read___ns1__PunchOut(struct soap *soap, struct __ns1__PunchOut *p)
{
	if (p)
	{	soap_default___ns1__PunchOut(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PunchOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PunchOut(struct soap *soap, const char *URL, struct __ns1__PunchOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__PunchOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__PunchOut(struct soap *soap, struct __ns1__PunchOut *p)
{
	if (soap_read___ns1__PunchOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BasketLinkPunch_DEFINED
#define SOAP_TYPE___ns1__BasketLinkPunch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BasketLinkPunch(struct soap*, struct __ns1__BasketLinkPunch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BasketLinkPunch(struct soap*, const struct __ns1__BasketLinkPunch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BasketLinkPunch(struct soap*, const char*, int, const struct __ns1__BasketLinkPunch *, const char*);
SOAP_FMAC3 struct __ns1__BasketLinkPunch * SOAP_FMAC4 soap_in___ns1__BasketLinkPunch(struct soap*, const char*, struct __ns1__BasketLinkPunch *, const char*);
SOAP_FMAC1 struct __ns1__BasketLinkPunch * SOAP_FMAC2 soap_instantiate___ns1__BasketLinkPunch(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BasketLinkPunch * soap_new___ns1__BasketLinkPunch(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BasketLinkPunch(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BasketLinkPunch * soap_new_req___ns1__BasketLinkPunch(
	struct soap *soap)
{
	struct __ns1__BasketLinkPunch *_p = soap_new___ns1__BasketLinkPunch(soap);
	if (_p)
	{	soap_default___ns1__BasketLinkPunch(soap, _p);
	}
	return _p;
}

inline struct __ns1__BasketLinkPunch * soap_new_set___ns1__BasketLinkPunch(
	struct soap *soap,
	_ns1__BasketLinkPunch *ns1__BasketLinkPunch)
{
	struct __ns1__BasketLinkPunch *_p = soap_new___ns1__BasketLinkPunch(soap);
	if (_p)
	{	soap_default___ns1__BasketLinkPunch(soap, _p);
		_p->ns1__BasketLinkPunch = ns1__BasketLinkPunch;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BasketLinkPunch(struct soap*, const struct __ns1__BasketLinkPunch *, const char*, const char*);

inline int soap_write___ns1__BasketLinkPunch(struct soap *soap, struct __ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BasketLinkPunch(soap, p), 0) || soap_put___ns1__BasketLinkPunch(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BasketLinkPunch(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BasketLinkPunch(soap, p), 0) || soap_put___ns1__BasketLinkPunch(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BasketLinkPunch(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BasketLinkPunch(soap, p), 0) || soap_put___ns1__BasketLinkPunch(soap, p, "-ns1:BasketLinkPunch", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BasketLinkPunch * SOAP_FMAC4 soap_get___ns1__BasketLinkPunch(struct soap*, struct __ns1__BasketLinkPunch *, const char*, const char*);

inline int soap_read___ns1__BasketLinkPunch(struct soap *soap, struct __ns1__BasketLinkPunch *p)
{
	if (p)
	{	soap_default___ns1__BasketLinkPunch(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BasketLinkPunch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BasketLinkPunch(struct soap *soap, const char *URL, struct __ns1__BasketLinkPunch *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BasketLinkPunch(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BasketLinkPunch(struct soap *soap, struct __ns1__BasketLinkPunch *p)
{
	if (soap_read___ns1__BasketLinkPunch(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__HPSNLinkBasket_DEFINED
#define SOAP_TYPE___ns1__HPSNLinkBasket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__HPSNLinkBasket(struct soap*, struct __ns1__HPSNLinkBasket *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__HPSNLinkBasket(struct soap*, const struct __ns1__HPSNLinkBasket *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__HPSNLinkBasket(struct soap*, const char*, int, const struct __ns1__HPSNLinkBasket *, const char*);
SOAP_FMAC3 struct __ns1__HPSNLinkBasket * SOAP_FMAC4 soap_in___ns1__HPSNLinkBasket(struct soap*, const char*, struct __ns1__HPSNLinkBasket *, const char*);
SOAP_FMAC1 struct __ns1__HPSNLinkBasket * SOAP_FMAC2 soap_instantiate___ns1__HPSNLinkBasket(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__HPSNLinkBasket * soap_new___ns1__HPSNLinkBasket(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__HPSNLinkBasket(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__HPSNLinkBasket * soap_new_req___ns1__HPSNLinkBasket(
	struct soap *soap)
{
	struct __ns1__HPSNLinkBasket *_p = soap_new___ns1__HPSNLinkBasket(soap);
	if (_p)
	{	soap_default___ns1__HPSNLinkBasket(soap, _p);
	}
	return _p;
}

inline struct __ns1__HPSNLinkBasket * soap_new_set___ns1__HPSNLinkBasket(
	struct soap *soap,
	_ns1__HPSNLinkBasket *ns1__HPSNLinkBasket)
{
	struct __ns1__HPSNLinkBasket *_p = soap_new___ns1__HPSNLinkBasket(soap);
	if (_p)
	{	soap_default___ns1__HPSNLinkBasket(soap, _p);
		_p->ns1__HPSNLinkBasket = ns1__HPSNLinkBasket;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__HPSNLinkBasket(struct soap*, const struct __ns1__HPSNLinkBasket *, const char*, const char*);

inline int soap_write___ns1__HPSNLinkBasket(struct soap *soap, struct __ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__HPSNLinkBasket(soap, p), 0) || soap_put___ns1__HPSNLinkBasket(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__HPSNLinkBasket(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__HPSNLinkBasket(soap, p), 0) || soap_put___ns1__HPSNLinkBasket(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__HPSNLinkBasket(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__HPSNLinkBasket(soap, p), 0) || soap_put___ns1__HPSNLinkBasket(soap, p, "-ns1:HPSNLinkBasket", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__HPSNLinkBasket * SOAP_FMAC4 soap_get___ns1__HPSNLinkBasket(struct soap*, struct __ns1__HPSNLinkBasket *, const char*, const char*);

inline int soap_read___ns1__HPSNLinkBasket(struct soap *soap, struct __ns1__HPSNLinkBasket *p)
{
	if (p)
	{	soap_default___ns1__HPSNLinkBasket(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__HPSNLinkBasket(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__HPSNLinkBasket(struct soap *soap, const char *URL, struct __ns1__HPSNLinkBasket *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__HPSNLinkBasket(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__HPSNLinkBasket(struct soap *soap, struct __ns1__HPSNLinkBasket *p)
{
	if (soap_read___ns1__HPSNLinkBasket(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetAutoLineRec_DEFINED
#define SOAP_TYPE___ns1__SetAutoLineRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAutoLineRec(struct soap*, struct __ns1__SetAutoLineRec *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAutoLineRec(struct soap*, const struct __ns1__SetAutoLineRec *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAutoLineRec(struct soap*, const char*, int, const struct __ns1__SetAutoLineRec *, const char*);
SOAP_FMAC3 struct __ns1__SetAutoLineRec * SOAP_FMAC4 soap_in___ns1__SetAutoLineRec(struct soap*, const char*, struct __ns1__SetAutoLineRec *, const char*);
SOAP_FMAC1 struct __ns1__SetAutoLineRec * SOAP_FMAC2 soap_instantiate___ns1__SetAutoLineRec(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAutoLineRec * soap_new___ns1__SetAutoLineRec(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetAutoLineRec(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetAutoLineRec * soap_new_req___ns1__SetAutoLineRec(
	struct soap *soap)
{
	struct __ns1__SetAutoLineRec *_p = soap_new___ns1__SetAutoLineRec(soap);
	if (_p)
	{	soap_default___ns1__SetAutoLineRec(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetAutoLineRec * soap_new_set___ns1__SetAutoLineRec(
	struct soap *soap,
	_ns1__SetAutoLineRec *ns1__SetAutoLineRec)
{
	struct __ns1__SetAutoLineRec *_p = soap_new___ns1__SetAutoLineRec(soap);
	if (_p)
	{	soap_default___ns1__SetAutoLineRec(soap, _p);
		_p->ns1__SetAutoLineRec = ns1__SetAutoLineRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAutoLineRec(struct soap*, const struct __ns1__SetAutoLineRec *, const char*, const char*);

inline int soap_write___ns1__SetAutoLineRec(struct soap *soap, struct __ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetAutoLineRec(soap, p), 0) || soap_put___ns1__SetAutoLineRec(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetAutoLineRec(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAutoLineRec(soap, p), 0) || soap_put___ns1__SetAutoLineRec(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetAutoLineRec(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetAutoLineRec(soap, p), 0) || soap_put___ns1__SetAutoLineRec(soap, p, "-ns1:SetAutoLineRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetAutoLineRec * SOAP_FMAC4 soap_get___ns1__SetAutoLineRec(struct soap*, struct __ns1__SetAutoLineRec *, const char*, const char*);

inline int soap_read___ns1__SetAutoLineRec(struct soap *soap, struct __ns1__SetAutoLineRec *p)
{
	if (p)
	{	soap_default___ns1__SetAutoLineRec(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetAutoLineRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetAutoLineRec(struct soap *soap, const char *URL, struct __ns1__SetAutoLineRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetAutoLineRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetAutoLineRec(struct soap *soap, struct __ns1__SetAutoLineRec *p)
{
	if (soap_read___ns1__SetAutoLineRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSNForLink_DEFINED
#define SOAP_TYPE___ns1__GetSNForLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSNForLink(struct soap*, struct __ns1__GetSNForLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSNForLink(struct soap*, const struct __ns1__GetSNForLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSNForLink(struct soap*, const char*, int, const struct __ns1__GetSNForLink *, const char*);
SOAP_FMAC3 struct __ns1__GetSNForLink * SOAP_FMAC4 soap_in___ns1__GetSNForLink(struct soap*, const char*, struct __ns1__GetSNForLink *, const char*);
SOAP_FMAC1 struct __ns1__GetSNForLink * SOAP_FMAC2 soap_instantiate___ns1__GetSNForLink(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSNForLink * soap_new___ns1__GetSNForLink(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSNForLink(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSNForLink * soap_new_req___ns1__GetSNForLink(
	struct soap *soap)
{
	struct __ns1__GetSNForLink *_p = soap_new___ns1__GetSNForLink(soap);
	if (_p)
	{	soap_default___ns1__GetSNForLink(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSNForLink * soap_new_set___ns1__GetSNForLink(
	struct soap *soap,
	_ns1__GetSNForLink *ns1__GetSNForLink)
{
	struct __ns1__GetSNForLink *_p = soap_new___ns1__GetSNForLink(soap);
	if (_p)
	{	soap_default___ns1__GetSNForLink(soap, _p);
		_p->ns1__GetSNForLink = ns1__GetSNForLink;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSNForLink(struct soap*, const struct __ns1__GetSNForLink *, const char*, const char*);

inline int soap_write___ns1__GetSNForLink(struct soap *soap, struct __ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSNForLink(soap, p), 0) || soap_put___ns1__GetSNForLink(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSNForLink(struct soap *soap, const char *URL, struct __ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSNForLink(soap, p), 0) || soap_put___ns1__GetSNForLink(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSNForLink(struct soap *soap, const char *URL, struct __ns1__GetSNForLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSNForLink(soap, p), 0) || soap_put___ns1__GetSNForLink(soap, p, "-ns1:GetSNForLink", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSNForLink * SOAP_FMAC4 soap_get___ns1__GetSNForLink(struct soap*, struct __ns1__GetSNForLink *, const char*, const char*);

inline int soap_read___ns1__GetSNForLink(struct soap *soap, struct __ns1__GetSNForLink *p)
{
	if (p)
	{	soap_default___ns1__GetSNForLink(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSNForLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSNForLink(struct soap *soap, const char *URL, struct __ns1__GetSNForLink *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSNForLink(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSNForLink(struct soap *soap, struct __ns1__GetSNForLink *p)
{
	if (soap_read___ns1__GetSNForLink(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetFlatnessFruitRec_DEFINED
#define SOAP_TYPE___ns1__SetFlatnessFruitRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetFlatnessFruitRec(struct soap*, struct __ns1__SetFlatnessFruitRec *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetFlatnessFruitRec(struct soap*, const struct __ns1__SetFlatnessFruitRec *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetFlatnessFruitRec(struct soap*, const char*, int, const struct __ns1__SetFlatnessFruitRec *, const char*);
SOAP_FMAC3 struct __ns1__SetFlatnessFruitRec * SOAP_FMAC4 soap_in___ns1__SetFlatnessFruitRec(struct soap*, const char*, struct __ns1__SetFlatnessFruitRec *, const char*);
SOAP_FMAC1 struct __ns1__SetFlatnessFruitRec * SOAP_FMAC2 soap_instantiate___ns1__SetFlatnessFruitRec(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetFlatnessFruitRec * soap_new___ns1__SetFlatnessFruitRec(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetFlatnessFruitRec(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetFlatnessFruitRec * soap_new_req___ns1__SetFlatnessFruitRec(
	struct soap *soap)
{
	struct __ns1__SetFlatnessFruitRec *_p = soap_new___ns1__SetFlatnessFruitRec(soap);
	if (_p)
	{	soap_default___ns1__SetFlatnessFruitRec(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetFlatnessFruitRec * soap_new_set___ns1__SetFlatnessFruitRec(
	struct soap *soap,
	_ns1__SetFlatnessFruitRec *ns1__SetFlatnessFruitRec)
{
	struct __ns1__SetFlatnessFruitRec *_p = soap_new___ns1__SetFlatnessFruitRec(soap);
	if (_p)
	{	soap_default___ns1__SetFlatnessFruitRec(soap, _p);
		_p->ns1__SetFlatnessFruitRec = ns1__SetFlatnessFruitRec;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetFlatnessFruitRec(struct soap*, const struct __ns1__SetFlatnessFruitRec *, const char*, const char*);

inline int soap_write___ns1__SetFlatnessFruitRec(struct soap *soap, struct __ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SetFlatnessFruitRec(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetFlatnessFruitRec(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SetFlatnessFruitRec(soap, p), 0) || soap_put___ns1__SetFlatnessFruitRec(soap, p, "-ns1:SetFlatnessFruitRec", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetFlatnessFruitRec * SOAP_FMAC4 soap_get___ns1__SetFlatnessFruitRec(struct soap*, struct __ns1__SetFlatnessFruitRec *, const char*, const char*);

inline int soap_read___ns1__SetFlatnessFruitRec(struct soap *soap, struct __ns1__SetFlatnessFruitRec *p)
{
	if (p)
	{	soap_default___ns1__SetFlatnessFruitRec(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetFlatnessFruitRec(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetFlatnessFruitRec(struct soap *soap, const char *URL, struct __ns1__SetFlatnessFruitRec *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SetFlatnessFruitRec(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetFlatnessFruitRec(struct soap *soap, struct __ns1__SetFlatnessFruitRec *p)
{
	if (soap_read___ns1__SetFlatnessFruitRec(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getStationByMoForTestPad_DEFINED
#define SOAP_TYPE___ns1__getStationByMoForTestPad_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStationByMoForTestPad(struct soap*, struct __ns1__getStationByMoForTestPad *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStationByMoForTestPad(struct soap*, const struct __ns1__getStationByMoForTestPad *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStationByMoForTestPad(struct soap*, const char*, int, const struct __ns1__getStationByMoForTestPad *, const char*);
SOAP_FMAC3 struct __ns1__getStationByMoForTestPad * SOAP_FMAC4 soap_in___ns1__getStationByMoForTestPad(struct soap*, const char*, struct __ns1__getStationByMoForTestPad *, const char*);
SOAP_FMAC1 struct __ns1__getStationByMoForTestPad * SOAP_FMAC2 soap_instantiate___ns1__getStationByMoForTestPad(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStationByMoForTestPad * soap_new___ns1__getStationByMoForTestPad(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getStationByMoForTestPad(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getStationByMoForTestPad * soap_new_req___ns1__getStationByMoForTestPad(
	struct soap *soap)
{
	struct __ns1__getStationByMoForTestPad *_p = soap_new___ns1__getStationByMoForTestPad(soap);
	if (_p)
	{	soap_default___ns1__getStationByMoForTestPad(soap, _p);
	}
	return _p;
}

inline struct __ns1__getStationByMoForTestPad * soap_new_set___ns1__getStationByMoForTestPad(
	struct soap *soap,
	_ns1__getStationByMoForTestPad *ns1__getStationByMoForTestPad)
{
	struct __ns1__getStationByMoForTestPad *_p = soap_new___ns1__getStationByMoForTestPad(soap);
	if (_p)
	{	soap_default___ns1__getStationByMoForTestPad(soap, _p);
		_p->ns1__getStationByMoForTestPad = ns1__getStationByMoForTestPad;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStationByMoForTestPad(struct soap*, const struct __ns1__getStationByMoForTestPad *, const char*, const char*);

inline int soap_write___ns1__getStationByMoForTestPad(struct soap *soap, struct __ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getStationByMoForTestPad(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMoForTestPad(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getStationByMoForTestPad(soap, p), 0) || soap_put___ns1__getStationByMoForTestPad(soap, p, "-ns1:getStationByMoForTestPad", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getStationByMoForTestPad * SOAP_FMAC4 soap_get___ns1__getStationByMoForTestPad(struct soap*, struct __ns1__getStationByMoForTestPad *, const char*, const char*);

inline int soap_read___ns1__getStationByMoForTestPad(struct soap *soap, struct __ns1__getStationByMoForTestPad *p)
{
	if (p)
	{	soap_default___ns1__getStationByMoForTestPad(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getStationByMoForTestPad(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getStationByMoForTestPad(struct soap *soap, const char *URL, struct __ns1__getStationByMoForTestPad *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getStationByMoForTestPad(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getStationByMoForTestPad(struct soap *soap, struct __ns1__getStationByMoForTestPad *p)
{
	if (soap_read___ns1__getStationByMoForTestPad(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingWeight_DEFINED
#define SOAP_TYPE___ns1__GetShippingWeight_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingWeight(struct soap*, struct __ns1__GetShippingWeight *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingWeight(struct soap*, const struct __ns1__GetShippingWeight *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingWeight(struct soap*, const char*, int, const struct __ns1__GetShippingWeight *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingWeight * SOAP_FMAC4 soap_in___ns1__GetShippingWeight(struct soap*, const char*, struct __ns1__GetShippingWeight *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingWeight * SOAP_FMAC2 soap_instantiate___ns1__GetShippingWeight(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingWeight * soap_new___ns1__GetShippingWeight(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingWeight(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingWeight * soap_new_req___ns1__GetShippingWeight(
	struct soap *soap)
{
	struct __ns1__GetShippingWeight *_p = soap_new___ns1__GetShippingWeight(soap);
	if (_p)
	{	soap_default___ns1__GetShippingWeight(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingWeight * soap_new_set___ns1__GetShippingWeight(
	struct soap *soap,
	_ns1__GetShippingWeight *ns1__GetShippingWeight)
{
	struct __ns1__GetShippingWeight *_p = soap_new___ns1__GetShippingWeight(soap);
	if (_p)
	{	soap_default___ns1__GetShippingWeight(soap, _p);
		_p->ns1__GetShippingWeight = ns1__GetShippingWeight;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingWeight(struct soap*, const struct __ns1__GetShippingWeight *, const char*, const char*);

inline int soap_write___ns1__GetShippingWeight(struct soap *soap, struct __ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingWeight(soap, p), 0) || soap_put___ns1__GetShippingWeight(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingWeight(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingWeight(soap, p), 0) || soap_put___ns1__GetShippingWeight(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingWeight(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingWeight(soap, p), 0) || soap_put___ns1__GetShippingWeight(soap, p, "-ns1:GetShippingWeight", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingWeight * SOAP_FMAC4 soap_get___ns1__GetShippingWeight(struct soap*, struct __ns1__GetShippingWeight *, const char*, const char*);

inline int soap_read___ns1__GetShippingWeight(struct soap *soap, struct __ns1__GetShippingWeight *p)
{
	if (p)
	{	soap_default___ns1__GetShippingWeight(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingWeight(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingWeight(struct soap *soap, const char *URL, struct __ns1__GetShippingWeight *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingWeight(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingWeight(struct soap *soap, struct __ns1__GetShippingWeight *p)
{
	if (soap_read___ns1__GetShippingWeight(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingForBerth_DEFINED
#define SOAP_TYPE___ns1__GetShippingForBerth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingForBerth(struct soap*, struct __ns1__GetShippingForBerth *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingForBerth(struct soap*, const struct __ns1__GetShippingForBerth *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingForBerth(struct soap*, const char*, int, const struct __ns1__GetShippingForBerth *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingForBerth * SOAP_FMAC4 soap_in___ns1__GetShippingForBerth(struct soap*, const char*, struct __ns1__GetShippingForBerth *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingForBerth * SOAP_FMAC2 soap_instantiate___ns1__GetShippingForBerth(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingForBerth * soap_new___ns1__GetShippingForBerth(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingForBerth(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingForBerth * soap_new_req___ns1__GetShippingForBerth(
	struct soap *soap)
{
	struct __ns1__GetShippingForBerth *_p = soap_new___ns1__GetShippingForBerth(soap);
	if (_p)
	{	soap_default___ns1__GetShippingForBerth(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingForBerth * soap_new_set___ns1__GetShippingForBerth(
	struct soap *soap,
	_ns1__GetShippingForBerth *ns1__GetShippingForBerth)
{
	struct __ns1__GetShippingForBerth *_p = soap_new___ns1__GetShippingForBerth(soap);
	if (_p)
	{	soap_default___ns1__GetShippingForBerth(soap, _p);
		_p->ns1__GetShippingForBerth = ns1__GetShippingForBerth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingForBerth(struct soap*, const struct __ns1__GetShippingForBerth *, const char*, const char*);

inline int soap_write___ns1__GetShippingForBerth(struct soap *soap, struct __ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingForBerth(soap, p), 0) || soap_put___ns1__GetShippingForBerth(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingForBerth(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingForBerth(soap, p), 0) || soap_put___ns1__GetShippingForBerth(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingForBerth(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingForBerth(soap, p), 0) || soap_put___ns1__GetShippingForBerth(soap, p, "-ns1:GetShippingForBerth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingForBerth * SOAP_FMAC4 soap_get___ns1__GetShippingForBerth(struct soap*, struct __ns1__GetShippingForBerth *, const char*, const char*);

inline int soap_read___ns1__GetShippingForBerth(struct soap *soap, struct __ns1__GetShippingForBerth *p)
{
	if (p)
	{	soap_default___ns1__GetShippingForBerth(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingForBerth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingForBerth(struct soap *soap, const char *URL, struct __ns1__GetShippingForBerth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingForBerth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingForBerth(struct soap *soap, struct __ns1__GetShippingForBerth *p)
{
	if (soap_read___ns1__GetShippingForBerth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsShippingBerth_DEFINED
#define SOAP_TYPE___ns1__InsShippingBerth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsShippingBerth(struct soap*, struct __ns1__InsShippingBerth *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsShippingBerth(struct soap*, const struct __ns1__InsShippingBerth *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsShippingBerth(struct soap*, const char*, int, const struct __ns1__InsShippingBerth *, const char*);
SOAP_FMAC3 struct __ns1__InsShippingBerth * SOAP_FMAC4 soap_in___ns1__InsShippingBerth(struct soap*, const char*, struct __ns1__InsShippingBerth *, const char*);
SOAP_FMAC1 struct __ns1__InsShippingBerth * SOAP_FMAC2 soap_instantiate___ns1__InsShippingBerth(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsShippingBerth * soap_new___ns1__InsShippingBerth(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsShippingBerth(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsShippingBerth * soap_new_req___ns1__InsShippingBerth(
	struct soap *soap)
{
	struct __ns1__InsShippingBerth *_p = soap_new___ns1__InsShippingBerth(soap);
	if (_p)
	{	soap_default___ns1__InsShippingBerth(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsShippingBerth * soap_new_set___ns1__InsShippingBerth(
	struct soap *soap,
	_ns1__InsShippingBerth *ns1__InsShippingBerth)
{
	struct __ns1__InsShippingBerth *_p = soap_new___ns1__InsShippingBerth(soap);
	if (_p)
	{	soap_default___ns1__InsShippingBerth(soap, _p);
		_p->ns1__InsShippingBerth = ns1__InsShippingBerth;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsShippingBerth(struct soap*, const struct __ns1__InsShippingBerth *, const char*, const char*);

inline int soap_write___ns1__InsShippingBerth(struct soap *soap, struct __ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsShippingBerth(soap, p), 0) || soap_put___ns1__InsShippingBerth(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsShippingBerth(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingBerth(soap, p), 0) || soap_put___ns1__InsShippingBerth(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsShippingBerth(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingBerth(soap, p), 0) || soap_put___ns1__InsShippingBerth(soap, p, "-ns1:InsShippingBerth", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsShippingBerth * SOAP_FMAC4 soap_get___ns1__InsShippingBerth(struct soap*, struct __ns1__InsShippingBerth *, const char*, const char*);

inline int soap_read___ns1__InsShippingBerth(struct soap *soap, struct __ns1__InsShippingBerth *p)
{
	if (p)
	{	soap_default___ns1__InsShippingBerth(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsShippingBerth(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsShippingBerth(struct soap *soap, const char *URL, struct __ns1__InsShippingBerth *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsShippingBerth(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsShippingBerth(struct soap *soap, struct __ns1__InsShippingBerth *p)
{
	if (soap_read___ns1__InsShippingBerth(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsShippingPalle_DEFINED
#define SOAP_TYPE___ns1__InsShippingPalle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsShippingPalle(struct soap*, struct __ns1__InsShippingPalle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsShippingPalle(struct soap*, const struct __ns1__InsShippingPalle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsShippingPalle(struct soap*, const char*, int, const struct __ns1__InsShippingPalle *, const char*);
SOAP_FMAC3 struct __ns1__InsShippingPalle * SOAP_FMAC4 soap_in___ns1__InsShippingPalle(struct soap*, const char*, struct __ns1__InsShippingPalle *, const char*);
SOAP_FMAC1 struct __ns1__InsShippingPalle * SOAP_FMAC2 soap_instantiate___ns1__InsShippingPalle(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsShippingPalle * soap_new___ns1__InsShippingPalle(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsShippingPalle(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsShippingPalle * soap_new_req___ns1__InsShippingPalle(
	struct soap *soap)
{
	struct __ns1__InsShippingPalle *_p = soap_new___ns1__InsShippingPalle(soap);
	if (_p)
	{	soap_default___ns1__InsShippingPalle(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsShippingPalle * soap_new_set___ns1__InsShippingPalle(
	struct soap *soap,
	_ns1__InsShippingPalle *ns1__InsShippingPalle)
{
	struct __ns1__InsShippingPalle *_p = soap_new___ns1__InsShippingPalle(soap);
	if (_p)
	{	soap_default___ns1__InsShippingPalle(soap, _p);
		_p->ns1__InsShippingPalle = ns1__InsShippingPalle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsShippingPalle(struct soap*, const struct __ns1__InsShippingPalle *, const char*, const char*);

inline int soap_write___ns1__InsShippingPalle(struct soap *soap, struct __ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsShippingPalle(soap, p), 0) || soap_put___ns1__InsShippingPalle(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsShippingPalle(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingPalle(soap, p), 0) || soap_put___ns1__InsShippingPalle(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsShippingPalle(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsShippingPalle(soap, p), 0) || soap_put___ns1__InsShippingPalle(soap, p, "-ns1:InsShippingPalle", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsShippingPalle * SOAP_FMAC4 soap_get___ns1__InsShippingPalle(struct soap*, struct __ns1__InsShippingPalle *, const char*, const char*);

inline int soap_read___ns1__InsShippingPalle(struct soap *soap, struct __ns1__InsShippingPalle *p)
{
	if (p)
	{	soap_default___ns1__InsShippingPalle(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsShippingPalle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsShippingPalle(struct soap *soap, const char *URL, struct __ns1__InsShippingPalle *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsShippingPalle(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsShippingPalle(struct soap *soap, struct __ns1__InsShippingPalle *p)
{
	if (soap_read___ns1__InsShippingPalle(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingPalle_DEFINED
#define SOAP_TYPE___ns1__GetShippingPalle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingPalle(struct soap*, struct __ns1__GetShippingPalle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingPalle(struct soap*, const struct __ns1__GetShippingPalle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingPalle(struct soap*, const char*, int, const struct __ns1__GetShippingPalle *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingPalle * SOAP_FMAC4 soap_in___ns1__GetShippingPalle(struct soap*, const char*, struct __ns1__GetShippingPalle *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingPalle * SOAP_FMAC2 soap_instantiate___ns1__GetShippingPalle(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingPalle * soap_new___ns1__GetShippingPalle(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingPalle(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingPalle * soap_new_req___ns1__GetShippingPalle(
	struct soap *soap)
{
	struct __ns1__GetShippingPalle *_p = soap_new___ns1__GetShippingPalle(soap);
	if (_p)
	{	soap_default___ns1__GetShippingPalle(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingPalle * soap_new_set___ns1__GetShippingPalle(
	struct soap *soap,
	_ns1__GetShippingPalle *ns1__GetShippingPalle)
{
	struct __ns1__GetShippingPalle *_p = soap_new___ns1__GetShippingPalle(soap);
	if (_p)
	{	soap_default___ns1__GetShippingPalle(soap, _p);
		_p->ns1__GetShippingPalle = ns1__GetShippingPalle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingPalle(struct soap*, const struct __ns1__GetShippingPalle *, const char*, const char*);

inline int soap_write___ns1__GetShippingPalle(struct soap *soap, struct __ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingPalle(soap, p), 0) || soap_put___ns1__GetShippingPalle(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingPalle(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingPalle(soap, p), 0) || soap_put___ns1__GetShippingPalle(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingPalle(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingPalle(soap, p), 0) || soap_put___ns1__GetShippingPalle(soap, p, "-ns1:GetShippingPalle", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingPalle * SOAP_FMAC4 soap_get___ns1__GetShippingPalle(struct soap*, struct __ns1__GetShippingPalle *, const char*, const char*);

inline int soap_read___ns1__GetShippingPalle(struct soap *soap, struct __ns1__GetShippingPalle *p)
{
	if (p)
	{	soap_default___ns1__GetShippingPalle(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingPalle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingPalle(struct soap *soap, const char *URL, struct __ns1__GetShippingPalle *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingPalle(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingPalle(struct soap *soap, struct __ns1__GetShippingPalle *p)
{
	if (soap_read___ns1__GetShippingPalle(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdShipping_DEFINED
#define SOAP_TYPE___ns1__UpdShipping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdShipping(struct soap*, struct __ns1__UpdShipping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdShipping(struct soap*, const struct __ns1__UpdShipping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdShipping(struct soap*, const char*, int, const struct __ns1__UpdShipping *, const char*);
SOAP_FMAC3 struct __ns1__UpdShipping * SOAP_FMAC4 soap_in___ns1__UpdShipping(struct soap*, const char*, struct __ns1__UpdShipping *, const char*);
SOAP_FMAC1 struct __ns1__UpdShipping * SOAP_FMAC2 soap_instantiate___ns1__UpdShipping(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdShipping * soap_new___ns1__UpdShipping(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdShipping(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdShipping * soap_new_req___ns1__UpdShipping(
	struct soap *soap)
{
	struct __ns1__UpdShipping *_p = soap_new___ns1__UpdShipping(soap);
	if (_p)
	{	soap_default___ns1__UpdShipping(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdShipping * soap_new_set___ns1__UpdShipping(
	struct soap *soap,
	_ns1__UpdShipping *ns1__UpdShipping)
{
	struct __ns1__UpdShipping *_p = soap_new___ns1__UpdShipping(soap);
	if (_p)
	{	soap_default___ns1__UpdShipping(soap, _p);
		_p->ns1__UpdShipping = ns1__UpdShipping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdShipping(struct soap*, const struct __ns1__UpdShipping *, const char*, const char*);

inline int soap_write___ns1__UpdShipping(struct soap *soap, struct __ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdShipping(soap, p), 0) || soap_put___ns1__UpdShipping(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdShipping(struct soap *soap, const char *URL, struct __ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdShipping(soap, p), 0) || soap_put___ns1__UpdShipping(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdShipping(struct soap *soap, const char *URL, struct __ns1__UpdShipping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdShipping(soap, p), 0) || soap_put___ns1__UpdShipping(soap, p, "-ns1:UpdShipping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdShipping * SOAP_FMAC4 soap_get___ns1__UpdShipping(struct soap*, struct __ns1__UpdShipping *, const char*, const char*);

inline int soap_read___ns1__UpdShipping(struct soap *soap, struct __ns1__UpdShipping *p)
{
	if (p)
	{	soap_default___ns1__UpdShipping(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdShipping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdShipping(struct soap *soap, const char *URL, struct __ns1__UpdShipping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdShipping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdShipping(struct soap *soap, struct __ns1__UpdShipping *p)
{
	if (soap_read___ns1__UpdShipping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingBerthList_DEFINED
#define SOAP_TYPE___ns1__GetShippingBerthList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingBerthList(struct soap*, struct __ns1__GetShippingBerthList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingBerthList(struct soap*, const struct __ns1__GetShippingBerthList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingBerthList(struct soap*, const char*, int, const struct __ns1__GetShippingBerthList *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingBerthList * SOAP_FMAC4 soap_in___ns1__GetShippingBerthList(struct soap*, const char*, struct __ns1__GetShippingBerthList *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingBerthList * SOAP_FMAC2 soap_instantiate___ns1__GetShippingBerthList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingBerthList * soap_new___ns1__GetShippingBerthList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingBerthList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingBerthList * soap_new_req___ns1__GetShippingBerthList(
	struct soap *soap)
{
	struct __ns1__GetShippingBerthList *_p = soap_new___ns1__GetShippingBerthList(soap);
	if (_p)
	{	soap_default___ns1__GetShippingBerthList(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingBerthList * soap_new_set___ns1__GetShippingBerthList(
	struct soap *soap,
	_ns1__GetShippingBerthList *ns1__GetShippingBerthList)
{
	struct __ns1__GetShippingBerthList *_p = soap_new___ns1__GetShippingBerthList(soap);
	if (_p)
	{	soap_default___ns1__GetShippingBerthList(soap, _p);
		_p->ns1__GetShippingBerthList = ns1__GetShippingBerthList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingBerthList(struct soap*, const struct __ns1__GetShippingBerthList *, const char*, const char*);

inline int soap_write___ns1__GetShippingBerthList(struct soap *soap, struct __ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingBerthList(soap, p), 0) || soap_put___ns1__GetShippingBerthList(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingBerthList(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingBerthList(soap, p), 0) || soap_put___ns1__GetShippingBerthList(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingBerthList(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingBerthList(soap, p), 0) || soap_put___ns1__GetShippingBerthList(soap, p, "-ns1:GetShippingBerthList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingBerthList * SOAP_FMAC4 soap_get___ns1__GetShippingBerthList(struct soap*, struct __ns1__GetShippingBerthList *, const char*, const char*);

inline int soap_read___ns1__GetShippingBerthList(struct soap *soap, struct __ns1__GetShippingBerthList *p)
{
	if (p)
	{	soap_default___ns1__GetShippingBerthList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingBerthList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingBerthList(struct soap *soap, const char *URL, struct __ns1__GetShippingBerthList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingBerthList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingBerthList(struct soap *soap, struct __ns1__GetShippingBerthList *p)
{
	if (soap_read___ns1__GetShippingBerthList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShippingList_DEFINED
#define SOAP_TYPE___ns1__GetShippingList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShippingList(struct soap*, struct __ns1__GetShippingList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShippingList(struct soap*, const struct __ns1__GetShippingList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShippingList(struct soap*, const char*, int, const struct __ns1__GetShippingList *, const char*);
SOAP_FMAC3 struct __ns1__GetShippingList * SOAP_FMAC4 soap_in___ns1__GetShippingList(struct soap*, const char*, struct __ns1__GetShippingList *, const char*);
SOAP_FMAC1 struct __ns1__GetShippingList * SOAP_FMAC2 soap_instantiate___ns1__GetShippingList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShippingList * soap_new___ns1__GetShippingList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShippingList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShippingList * soap_new_req___ns1__GetShippingList(
	struct soap *soap)
{
	struct __ns1__GetShippingList *_p = soap_new___ns1__GetShippingList(soap);
	if (_p)
	{	soap_default___ns1__GetShippingList(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShippingList * soap_new_set___ns1__GetShippingList(
	struct soap *soap,
	_ns1__GetShippingList *ns1__GetShippingList)
{
	struct __ns1__GetShippingList *_p = soap_new___ns1__GetShippingList(soap);
	if (_p)
	{	soap_default___ns1__GetShippingList(soap, _p);
		_p->ns1__GetShippingList = ns1__GetShippingList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShippingList(struct soap*, const struct __ns1__GetShippingList *, const char*, const char*);

inline int soap_write___ns1__GetShippingList(struct soap *soap, struct __ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShippingList(soap, p), 0) || soap_put___ns1__GetShippingList(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShippingList(struct soap *soap, const char *URL, struct __ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingList(soap, p), 0) || soap_put___ns1__GetShippingList(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShippingList(struct soap *soap, const char *URL, struct __ns1__GetShippingList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShippingList(soap, p), 0) || soap_put___ns1__GetShippingList(soap, p, "-ns1:GetShippingList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShippingList * SOAP_FMAC4 soap_get___ns1__GetShippingList(struct soap*, struct __ns1__GetShippingList *, const char*, const char*);

inline int soap_read___ns1__GetShippingList(struct soap *soap, struct __ns1__GetShippingList *p)
{
	if (p)
	{	soap_default___ns1__GetShippingList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShippingList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShippingList(struct soap *soap, const char *URL, struct __ns1__GetShippingList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShippingList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShippingList(struct soap *soap, struct __ns1__GetShippingList *p)
{
	if (soap_read___ns1__GetShippingList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doLotLinkForApple_DEFINED
#define SOAP_TYPE___ns1__doLotLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doLotLinkForApple(struct soap*, struct __ns1__doLotLinkForApple *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doLotLinkForApple(struct soap*, const struct __ns1__doLotLinkForApple *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doLotLinkForApple(struct soap*, const char*, int, const struct __ns1__doLotLinkForApple *, const char*);
SOAP_FMAC3 struct __ns1__doLotLinkForApple * SOAP_FMAC4 soap_in___ns1__doLotLinkForApple(struct soap*, const char*, struct __ns1__doLotLinkForApple *, const char*);
SOAP_FMAC1 struct __ns1__doLotLinkForApple * SOAP_FMAC2 soap_instantiate___ns1__doLotLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doLotLinkForApple * soap_new___ns1__doLotLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doLotLinkForApple(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doLotLinkForApple * soap_new_req___ns1__doLotLinkForApple(
	struct soap *soap)
{
	struct __ns1__doLotLinkForApple *_p = soap_new___ns1__doLotLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__doLotLinkForApple(soap, _p);
	}
	return _p;
}

inline struct __ns1__doLotLinkForApple * soap_new_set___ns1__doLotLinkForApple(
	struct soap *soap,
	_ns1__doLotLinkForApple *ns1__doLotLinkForApple)
{
	struct __ns1__doLotLinkForApple *_p = soap_new___ns1__doLotLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__doLotLinkForApple(soap, _p);
		_p->ns1__doLotLinkForApple = ns1__doLotLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doLotLinkForApple(struct soap*, const struct __ns1__doLotLinkForApple *, const char*, const char*);

inline int soap_write___ns1__doLotLinkForApple(struct soap *soap, struct __ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doLotLinkForApple(soap, p), 0) || soap_put___ns1__doLotLinkForApple(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doLotLinkForApple(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLotLinkForApple(soap, p), 0) || soap_put___ns1__doLotLinkForApple(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doLotLinkForApple(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doLotLinkForApple(soap, p), 0) || soap_put___ns1__doLotLinkForApple(soap, p, "-ns1:doLotLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doLotLinkForApple * SOAP_FMAC4 soap_get___ns1__doLotLinkForApple(struct soap*, struct __ns1__doLotLinkForApple *, const char*, const char*);

inline int soap_read___ns1__doLotLinkForApple(struct soap *soap, struct __ns1__doLotLinkForApple *p)
{
	if (p)
	{	soap_default___ns1__doLotLinkForApple(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doLotLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doLotLinkForApple(struct soap *soap, const char *URL, struct __ns1__doLotLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doLotLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doLotLinkForApple(struct soap *soap, struct __ns1__doLotLinkForApple *p)
{
	if (soap_read___ns1__doLotLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetLotLinkCount_DEFINED
#define SOAP_TYPE___ns1__GetLotLinkCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLotLinkCount(struct soap*, struct __ns1__GetLotLinkCount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLotLinkCount(struct soap*, const struct __ns1__GetLotLinkCount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLotLinkCount(struct soap*, const char*, int, const struct __ns1__GetLotLinkCount *, const char*);
SOAP_FMAC3 struct __ns1__GetLotLinkCount * SOAP_FMAC4 soap_in___ns1__GetLotLinkCount(struct soap*, const char*, struct __ns1__GetLotLinkCount *, const char*);
SOAP_FMAC1 struct __ns1__GetLotLinkCount * SOAP_FMAC2 soap_instantiate___ns1__GetLotLinkCount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLotLinkCount * soap_new___ns1__GetLotLinkCount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetLotLinkCount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLotLinkCount * soap_new_req___ns1__GetLotLinkCount(
	struct soap *soap)
{
	struct __ns1__GetLotLinkCount *_p = soap_new___ns1__GetLotLinkCount(soap);
	if (_p)
	{	soap_default___ns1__GetLotLinkCount(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLotLinkCount * soap_new_set___ns1__GetLotLinkCount(
	struct soap *soap,
	_ns1__GetLotLinkCount *ns1__GetLotLinkCount)
{
	struct __ns1__GetLotLinkCount *_p = soap_new___ns1__GetLotLinkCount(soap);
	if (_p)
	{	soap_default___ns1__GetLotLinkCount(soap, _p);
		_p->ns1__GetLotLinkCount = ns1__GetLotLinkCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLotLinkCount(struct soap*, const struct __ns1__GetLotLinkCount *, const char*, const char*);

inline int soap_write___ns1__GetLotLinkCount(struct soap *soap, struct __ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetLotLinkCount(soap, p), 0) || soap_put___ns1__GetLotLinkCount(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLotLinkCount(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLotLinkCount(soap, p), 0) || soap_put___ns1__GetLotLinkCount(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLotLinkCount(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetLotLinkCount(soap, p), 0) || soap_put___ns1__GetLotLinkCount(soap, p, "-ns1:GetLotLinkCount", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLotLinkCount * SOAP_FMAC4 soap_get___ns1__GetLotLinkCount(struct soap*, struct __ns1__GetLotLinkCount *, const char*, const char*);

inline int soap_read___ns1__GetLotLinkCount(struct soap *soap, struct __ns1__GetLotLinkCount *p)
{
	if (p)
	{	soap_default___ns1__GetLotLinkCount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetLotLinkCount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLotLinkCount(struct soap *soap, const char *URL, struct __ns1__GetLotLinkCount *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetLotLinkCount(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetLotLinkCount(struct soap *soap, struct __ns1__GetLotLinkCount *p)
{
	if (soap_read___ns1__GetLotLinkCount(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFruitSNCheck_DEFINED
#define SOAP_TYPE___ns1__GetFruitSNCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFruitSNCheck(struct soap*, struct __ns1__GetFruitSNCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFruitSNCheck(struct soap*, const struct __ns1__GetFruitSNCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFruitSNCheck(struct soap*, const char*, int, const struct __ns1__GetFruitSNCheck *, const char*);
SOAP_FMAC3 struct __ns1__GetFruitSNCheck * SOAP_FMAC4 soap_in___ns1__GetFruitSNCheck(struct soap*, const char*, struct __ns1__GetFruitSNCheck *, const char*);
SOAP_FMAC1 struct __ns1__GetFruitSNCheck * SOAP_FMAC2 soap_instantiate___ns1__GetFruitSNCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFruitSNCheck * soap_new___ns1__GetFruitSNCheck(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFruitSNCheck(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFruitSNCheck * soap_new_req___ns1__GetFruitSNCheck(
	struct soap *soap)
{
	struct __ns1__GetFruitSNCheck *_p = soap_new___ns1__GetFruitSNCheck(soap);
	if (_p)
	{	soap_default___ns1__GetFruitSNCheck(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFruitSNCheck * soap_new_set___ns1__GetFruitSNCheck(
	struct soap *soap,
	_ns1__GetFruitSNCheck *ns1__GetFruitSNCheck)
{
	struct __ns1__GetFruitSNCheck *_p = soap_new___ns1__GetFruitSNCheck(soap);
	if (_p)
	{	soap_default___ns1__GetFruitSNCheck(soap, _p);
		_p->ns1__GetFruitSNCheck = ns1__GetFruitSNCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFruitSNCheck(struct soap*, const struct __ns1__GetFruitSNCheck *, const char*, const char*);

inline int soap_write___ns1__GetFruitSNCheck(struct soap *soap, struct __ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFruitSNCheck(soap, p), 0) || soap_put___ns1__GetFruitSNCheck(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFruitSNCheck(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitSNCheck(soap, p), 0) || soap_put___ns1__GetFruitSNCheck(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFruitSNCheck(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetFruitSNCheck(soap, p), 0) || soap_put___ns1__GetFruitSNCheck(soap, p, "-ns1:GetFruitSNCheck", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFruitSNCheck * SOAP_FMAC4 soap_get___ns1__GetFruitSNCheck(struct soap*, struct __ns1__GetFruitSNCheck *, const char*, const char*);

inline int soap_read___ns1__GetFruitSNCheck(struct soap *soap, struct __ns1__GetFruitSNCheck *p)
{
	if (p)
	{	soap_default___ns1__GetFruitSNCheck(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFruitSNCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFruitSNCheck(struct soap *soap, const char *URL, struct __ns1__GetFruitSNCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFruitSNCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFruitSNCheck(struct soap *soap, struct __ns1__GetFruitSNCheck *p)
{
	if (soap_read___ns1__GetFruitSNCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetObeNW_DEFINED
#define SOAP_TYPE___ns1__GetObeNW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetObeNW(struct soap*, struct __ns1__GetObeNW *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetObeNW(struct soap*, const struct __ns1__GetObeNW *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetObeNW(struct soap*, const char*, int, const struct __ns1__GetObeNW *, const char*);
SOAP_FMAC3 struct __ns1__GetObeNW * SOAP_FMAC4 soap_in___ns1__GetObeNW(struct soap*, const char*, struct __ns1__GetObeNW *, const char*);
SOAP_FMAC1 struct __ns1__GetObeNW * SOAP_FMAC2 soap_instantiate___ns1__GetObeNW(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetObeNW * soap_new___ns1__GetObeNW(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetObeNW(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetObeNW * soap_new_req___ns1__GetObeNW(
	struct soap *soap)
{
	struct __ns1__GetObeNW *_p = soap_new___ns1__GetObeNW(soap);
	if (_p)
	{	soap_default___ns1__GetObeNW(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetObeNW * soap_new_set___ns1__GetObeNW(
	struct soap *soap,
	_ns1__GetObeNW *ns1__GetObeNW)
{
	struct __ns1__GetObeNW *_p = soap_new___ns1__GetObeNW(soap);
	if (_p)
	{	soap_default___ns1__GetObeNW(soap, _p);
		_p->ns1__GetObeNW = ns1__GetObeNW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetObeNW(struct soap*, const struct __ns1__GetObeNW *, const char*, const char*);

inline int soap_write___ns1__GetObeNW(struct soap *soap, struct __ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetObeNW(soap, p), 0) || soap_put___ns1__GetObeNW(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetObeNW(struct soap *soap, const char *URL, struct __ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetObeNW(soap, p), 0) || soap_put___ns1__GetObeNW(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetObeNW(struct soap *soap, const char *URL, struct __ns1__GetObeNW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetObeNW(soap, p), 0) || soap_put___ns1__GetObeNW(soap, p, "-ns1:GetObeNW", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetObeNW * SOAP_FMAC4 soap_get___ns1__GetObeNW(struct soap*, struct __ns1__GetObeNW *, const char*, const char*);

inline int soap_read___ns1__GetObeNW(struct soap *soap, struct __ns1__GetObeNW *p)
{
	if (p)
	{	soap_default___ns1__GetObeNW(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetObeNW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetObeNW(struct soap *soap, const char *URL, struct __ns1__GetObeNW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetObeNW(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetObeNW(struct soap *soap, struct __ns1__GetObeNW *p)
{
	if (soap_read___ns1__GetObeNW(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__doSnLinkForApple_DEFINED
#define SOAP_TYPE___ns1__doSnLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__doSnLinkForApple(struct soap*, struct __ns1__doSnLinkForApple *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__doSnLinkForApple(struct soap*, const struct __ns1__doSnLinkForApple *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__doSnLinkForApple(struct soap*, const char*, int, const struct __ns1__doSnLinkForApple *, const char*);
SOAP_FMAC3 struct __ns1__doSnLinkForApple * SOAP_FMAC4 soap_in___ns1__doSnLinkForApple(struct soap*, const char*, struct __ns1__doSnLinkForApple *, const char*);
SOAP_FMAC1 struct __ns1__doSnLinkForApple * SOAP_FMAC2 soap_instantiate___ns1__doSnLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__doSnLinkForApple * soap_new___ns1__doSnLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__doSnLinkForApple(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__doSnLinkForApple * soap_new_req___ns1__doSnLinkForApple(
	struct soap *soap)
{
	struct __ns1__doSnLinkForApple *_p = soap_new___ns1__doSnLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__doSnLinkForApple(soap, _p);
	}
	return _p;
}

inline struct __ns1__doSnLinkForApple * soap_new_set___ns1__doSnLinkForApple(
	struct soap *soap,
	_ns1__doSnLinkForApple *ns1__doSnLinkForApple)
{
	struct __ns1__doSnLinkForApple *_p = soap_new___ns1__doSnLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__doSnLinkForApple(soap, _p);
		_p->ns1__doSnLinkForApple = ns1__doSnLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__doSnLinkForApple(struct soap*, const struct __ns1__doSnLinkForApple *, const char*, const char*);

inline int soap_write___ns1__doSnLinkForApple(struct soap *soap, struct __ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__doSnLinkForApple(soap, p), 0) || soap_put___ns1__doSnLinkForApple(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__doSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doSnLinkForApple(soap, p), 0) || soap_put___ns1__doSnLinkForApple(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__doSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__doSnLinkForApple(soap, p), 0) || soap_put___ns1__doSnLinkForApple(soap, p, "-ns1:doSnLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__doSnLinkForApple * SOAP_FMAC4 soap_get___ns1__doSnLinkForApple(struct soap*, struct __ns1__doSnLinkForApple *, const char*, const char*);

inline int soap_read___ns1__doSnLinkForApple(struct soap *soap, struct __ns1__doSnLinkForApple *p)
{
	if (p)
	{	soap_default___ns1__doSnLinkForApple(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__doSnLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__doSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__doSnLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__doSnLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__doSnLinkForApple(struct soap *soap, struct __ns1__doSnLinkForApple *p)
{
	if (soap_read___ns1__doSnLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkSnLinkForApple_DEFINED
#define SOAP_TYPE___ns1__ChkSnLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkSnLinkForApple(struct soap*, struct __ns1__ChkSnLinkForApple *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkSnLinkForApple(struct soap*, const struct __ns1__ChkSnLinkForApple *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkSnLinkForApple(struct soap*, const char*, int, const struct __ns1__ChkSnLinkForApple *, const char*);
SOAP_FMAC3 struct __ns1__ChkSnLinkForApple * SOAP_FMAC4 soap_in___ns1__ChkSnLinkForApple(struct soap*, const char*, struct __ns1__ChkSnLinkForApple *, const char*);
SOAP_FMAC1 struct __ns1__ChkSnLinkForApple * SOAP_FMAC2 soap_instantiate___ns1__ChkSnLinkForApple(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkSnLinkForApple * soap_new___ns1__ChkSnLinkForApple(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkSnLinkForApple(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkSnLinkForApple * soap_new_req___ns1__ChkSnLinkForApple(
	struct soap *soap)
{
	struct __ns1__ChkSnLinkForApple *_p = soap_new___ns1__ChkSnLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLinkForApple(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkSnLinkForApple * soap_new_set___ns1__ChkSnLinkForApple(
	struct soap *soap,
	_ns1__ChkSnLinkForApple *ns1__ChkSnLinkForApple)
{
	struct __ns1__ChkSnLinkForApple *_p = soap_new___ns1__ChkSnLinkForApple(soap);
	if (_p)
	{	soap_default___ns1__ChkSnLinkForApple(soap, _p);
		_p->ns1__ChkSnLinkForApple = ns1__ChkSnLinkForApple;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkSnLinkForApple(struct soap*, const struct __ns1__ChkSnLinkForApple *, const char*, const char*);

inline int soap_write___ns1__ChkSnLinkForApple(struct soap *soap, struct __ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkSnLinkForApple(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLinkForApple(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkSnLinkForApple(soap, p), 0) || soap_put___ns1__ChkSnLinkForApple(soap, p, "-ns1:ChkSnLinkForApple", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkSnLinkForApple * SOAP_FMAC4 soap_get___ns1__ChkSnLinkForApple(struct soap*, struct __ns1__ChkSnLinkForApple *, const char*, const char*);

inline int soap_read___ns1__ChkSnLinkForApple(struct soap *soap, struct __ns1__ChkSnLinkForApple *p)
{
	if (p)
	{	soap_default___ns1__ChkSnLinkForApple(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkSnLinkForApple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkSnLinkForApple(struct soap *soap, const char *URL, struct __ns1__ChkSnLinkForApple *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkSnLinkForApple(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkSnLinkForApple(struct soap *soap, struct __ns1__ChkSnLinkForApple *p)
{
	if (soap_read___ns1__ChkSnLinkForApple(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DelSNTest_DEFINED
#define SOAP_TYPE___ns1__DelSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DelSNTest(struct soap*, struct __ns1__DelSNTest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DelSNTest(struct soap*, const struct __ns1__DelSNTest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DelSNTest(struct soap*, const char*, int, const struct __ns1__DelSNTest *, const char*);
SOAP_FMAC3 struct __ns1__DelSNTest * SOAP_FMAC4 soap_in___ns1__DelSNTest(struct soap*, const char*, struct __ns1__DelSNTest *, const char*);
SOAP_FMAC1 struct __ns1__DelSNTest * SOAP_FMAC2 soap_instantiate___ns1__DelSNTest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DelSNTest * soap_new___ns1__DelSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DelSNTest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DelSNTest * soap_new_req___ns1__DelSNTest(
	struct soap *soap)
{
	struct __ns1__DelSNTest *_p = soap_new___ns1__DelSNTest(soap);
	if (_p)
	{	soap_default___ns1__DelSNTest(soap, _p);
	}
	return _p;
}

inline struct __ns1__DelSNTest * soap_new_set___ns1__DelSNTest(
	struct soap *soap,
	_ns1__DelSNTest *ns1__DelSNTest)
{
	struct __ns1__DelSNTest *_p = soap_new___ns1__DelSNTest(soap);
	if (_p)
	{	soap_default___ns1__DelSNTest(soap, _p);
		_p->ns1__DelSNTest = ns1__DelSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DelSNTest(struct soap*, const struct __ns1__DelSNTest *, const char*, const char*);

inline int soap_write___ns1__DelSNTest(struct soap *soap, struct __ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DelSNTest(soap, p), 0) || soap_put___ns1__DelSNTest(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DelSNTest(struct soap *soap, const char *URL, struct __ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DelSNTest(soap, p), 0) || soap_put___ns1__DelSNTest(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DelSNTest(struct soap *soap, const char *URL, struct __ns1__DelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DelSNTest(soap, p), 0) || soap_put___ns1__DelSNTest(soap, p, "-ns1:DelSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DelSNTest * SOAP_FMAC4 soap_get___ns1__DelSNTest(struct soap*, struct __ns1__DelSNTest *, const char*, const char*);

inline int soap_read___ns1__DelSNTest(struct soap *soap, struct __ns1__DelSNTest *p)
{
	if (p)
	{	soap_default___ns1__DelSNTest(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DelSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DelSNTest(struct soap *soap, const char *URL, struct __ns1__DelSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DelSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DelSNTest(struct soap *soap, struct __ns1__DelSNTest *p)
{
	if (soap_read___ns1__DelSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelSNTest_DEFINED
#define SOAP_TYPE___ns1__SelSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelSNTest(struct soap*, struct __ns1__SelSNTest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelSNTest(struct soap*, const struct __ns1__SelSNTest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelSNTest(struct soap*, const char*, int, const struct __ns1__SelSNTest *, const char*);
SOAP_FMAC3 struct __ns1__SelSNTest * SOAP_FMAC4 soap_in___ns1__SelSNTest(struct soap*, const char*, struct __ns1__SelSNTest *, const char*);
SOAP_FMAC1 struct __ns1__SelSNTest * SOAP_FMAC2 soap_instantiate___ns1__SelSNTest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelSNTest * soap_new___ns1__SelSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelSNTest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelSNTest * soap_new_req___ns1__SelSNTest(
	struct soap *soap)
{
	struct __ns1__SelSNTest *_p = soap_new___ns1__SelSNTest(soap);
	if (_p)
	{	soap_default___ns1__SelSNTest(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelSNTest * soap_new_set___ns1__SelSNTest(
	struct soap *soap,
	_ns1__SelSNTest *ns1__SelSNTest)
{
	struct __ns1__SelSNTest *_p = soap_new___ns1__SelSNTest(soap);
	if (_p)
	{	soap_default___ns1__SelSNTest(soap, _p);
		_p->ns1__SelSNTest = ns1__SelSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelSNTest(struct soap*, const struct __ns1__SelSNTest *, const char*, const char*);

inline int soap_write___ns1__SelSNTest(struct soap *soap, struct __ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SelSNTest(soap, p), 0) || soap_put___ns1__SelSNTest(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SelSNTest(struct soap *soap, const char *URL, struct __ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTest(soap, p), 0) || soap_put___ns1__SelSNTest(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SelSNTest(struct soap *soap, const char *URL, struct __ns1__SelSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SelSNTest(soap, p), 0) || soap_put___ns1__SelSNTest(soap, p, "-ns1:SelSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelSNTest * SOAP_FMAC4 soap_get___ns1__SelSNTest(struct soap*, struct __ns1__SelSNTest *, const char*, const char*);

inline int soap_read___ns1__SelSNTest(struct soap *soap, struct __ns1__SelSNTest *p)
{
	if (p)
	{	soap_default___ns1__SelSNTest(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SelSNTest(struct soap *soap, const char *URL, struct __ns1__SelSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SelSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SelSNTest(struct soap *soap, struct __ns1__SelSNTest *p)
{
	if (soap_read___ns1__SelSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsSNTest_DEFINED
#define SOAP_TYPE___ns1__InsSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsSNTest(struct soap*, struct __ns1__InsSNTest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsSNTest(struct soap*, const struct __ns1__InsSNTest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsSNTest(struct soap*, const char*, int, const struct __ns1__InsSNTest *, const char*);
SOAP_FMAC3 struct __ns1__InsSNTest * SOAP_FMAC4 soap_in___ns1__InsSNTest(struct soap*, const char*, struct __ns1__InsSNTest *, const char*);
SOAP_FMAC1 struct __ns1__InsSNTest * SOAP_FMAC2 soap_instantiate___ns1__InsSNTest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsSNTest * soap_new___ns1__InsSNTest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsSNTest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsSNTest * soap_new_req___ns1__InsSNTest(
	struct soap *soap)
{
	struct __ns1__InsSNTest *_p = soap_new___ns1__InsSNTest(soap);
	if (_p)
	{	soap_default___ns1__InsSNTest(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsSNTest * soap_new_set___ns1__InsSNTest(
	struct soap *soap,
	_ns1__InsSNTest *ns1__InsSNTest)
{
	struct __ns1__InsSNTest *_p = soap_new___ns1__InsSNTest(soap);
	if (_p)
	{	soap_default___ns1__InsSNTest(soap, _p);
		_p->ns1__InsSNTest = ns1__InsSNTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsSNTest(struct soap*, const struct __ns1__InsSNTest *, const char*, const char*);

inline int soap_write___ns1__InsSNTest(struct soap *soap, struct __ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InsSNTest(soap, p), 0) || soap_put___ns1__InsSNTest(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsSNTest(struct soap *soap, const char *URL, struct __ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTest(soap, p), 0) || soap_put___ns1__InsSNTest(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsSNTest(struct soap *soap, const char *URL, struct __ns1__InsSNTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__InsSNTest(soap, p), 0) || soap_put___ns1__InsSNTest(soap, p, "-ns1:InsSNTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsSNTest * SOAP_FMAC4 soap_get___ns1__InsSNTest(struct soap*, struct __ns1__InsSNTest *, const char*, const char*);

inline int soap_read___ns1__InsSNTest(struct soap *soap, struct __ns1__InsSNTest *p)
{
	if (p)
	{	soap_default___ns1__InsSNTest(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsSNTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsSNTest(struct soap *soap, const char *URL, struct __ns1__InsSNTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InsSNTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InsSNTest(struct soap *soap, struct __ns1__InsSNTest *p)
{
	if (soap_read___ns1__InsSNTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChkWeightTime_DEFINED
#define SOAP_TYPE___ns1__ChkWeightTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChkWeightTime(struct soap*, struct __ns1__ChkWeightTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChkWeightTime(struct soap*, const struct __ns1__ChkWeightTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChkWeightTime(struct soap*, const char*, int, const struct __ns1__ChkWeightTime *, const char*);
SOAP_FMAC3 struct __ns1__ChkWeightTime * SOAP_FMAC4 soap_in___ns1__ChkWeightTime(struct soap*, const char*, struct __ns1__ChkWeightTime *, const char*);
SOAP_FMAC1 struct __ns1__ChkWeightTime * SOAP_FMAC2 soap_instantiate___ns1__ChkWeightTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChkWeightTime * soap_new___ns1__ChkWeightTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChkWeightTime(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChkWeightTime * soap_new_req___ns1__ChkWeightTime(
	struct soap *soap)
{
	struct __ns1__ChkWeightTime *_p = soap_new___ns1__ChkWeightTime(soap);
	if (_p)
	{	soap_default___ns1__ChkWeightTime(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChkWeightTime * soap_new_set___ns1__ChkWeightTime(
	struct soap *soap,
	_ns1__ChkWeightTime *ns1__ChkWeightTime)
{
	struct __ns1__ChkWeightTime *_p = soap_new___ns1__ChkWeightTime(soap);
	if (_p)
	{	soap_default___ns1__ChkWeightTime(soap, _p);
		_p->ns1__ChkWeightTime = ns1__ChkWeightTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChkWeightTime(struct soap*, const struct __ns1__ChkWeightTime *, const char*, const char*);

inline int soap_write___ns1__ChkWeightTime(struct soap *soap, struct __ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChkWeightTime(soap, p), 0) || soap_put___ns1__ChkWeightTime(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChkWeightTime(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkWeightTime(soap, p), 0) || soap_put___ns1__ChkWeightTime(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChkWeightTime(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChkWeightTime(soap, p), 0) || soap_put___ns1__ChkWeightTime(soap, p, "-ns1:ChkWeightTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChkWeightTime * SOAP_FMAC4 soap_get___ns1__ChkWeightTime(struct soap*, struct __ns1__ChkWeightTime *, const char*, const char*);

inline int soap_read___ns1__ChkWeightTime(struct soap *soap, struct __ns1__ChkWeightTime *p)
{
	if (p)
	{	soap_default___ns1__ChkWeightTime(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChkWeightTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChkWeightTime(struct soap *soap, const char *URL, struct __ns1__ChkWeightTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChkWeightTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChkWeightTime(struct soap *soap, struct __ns1__ChkWeightTime *p)
{
	if (soap_read___ns1__ChkWeightTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdAhsBarcode_DEFINED
#define SOAP_TYPE___ns1__UpdAhsBarcode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdAhsBarcode(struct soap*, struct __ns1__UpdAhsBarcode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdAhsBarcode(struct soap*, const struct __ns1__UpdAhsBarcode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdAhsBarcode(struct soap*, const char*, int, const struct __ns1__UpdAhsBarcode *, const char*);
SOAP_FMAC3 struct __ns1__UpdAhsBarcode * SOAP_FMAC4 soap_in___ns1__UpdAhsBarcode(struct soap*, const char*, struct __ns1__UpdAhsBarcode *, const char*);
SOAP_FMAC1 struct __ns1__UpdAhsBarcode * SOAP_FMAC2 soap_instantiate___ns1__UpdAhsBarcode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdAhsBarcode * soap_new___ns1__UpdAhsBarcode(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdAhsBarcode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdAhsBarcode * soap_new_req___ns1__UpdAhsBarcode(
	struct soap *soap)
{
	struct __ns1__UpdAhsBarcode *_p = soap_new___ns1__UpdAhsBarcode(soap);
	if (_p)
	{	soap_default___ns1__UpdAhsBarcode(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdAhsBarcode * soap_new_set___ns1__UpdAhsBarcode(
	struct soap *soap,
	_ns1__UpdAhsBarcode *ns1__UpdAhsBarcode)
{
	struct __ns1__UpdAhsBarcode *_p = soap_new___ns1__UpdAhsBarcode(soap);
	if (_p)
	{	soap_default___ns1__UpdAhsBarcode(soap, _p);
		_p->ns1__UpdAhsBarcode = ns1__UpdAhsBarcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdAhsBarcode(struct soap*, const struct __ns1__UpdAhsBarcode *, const char*, const char*);

inline int soap_write___ns1__UpdAhsBarcode(struct soap *soap, struct __ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdAhsBarcode(soap, p), 0) || soap_put___ns1__UpdAhsBarcode(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UpdAhsBarcode(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdAhsBarcode(soap, p), 0) || soap_put___ns1__UpdAhsBarcode(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UpdAhsBarcode(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UpdAhsBarcode(soap, p), 0) || soap_put___ns1__UpdAhsBarcode(soap, p, "-ns1:UpdAhsBarcode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdAhsBarcode * SOAP_FMAC4 soap_get___ns1__UpdAhsBarcode(struct soap*, struct __ns1__UpdAhsBarcode *, const char*, const char*);

inline int soap_read___ns1__UpdAhsBarcode(struct soap *soap, struct __ns1__UpdAhsBarcode *p)
{
	if (p)
	{	soap_default___ns1__UpdAhsBarcode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdAhsBarcode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UpdAhsBarcode(struct soap *soap, const char *URL, struct __ns1__UpdAhsBarcode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UpdAhsBarcode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UpdAhsBarcode(struct soap *soap, struct __ns1__UpdAhsBarcode *p)
{
	if (soap_read___ns1__UpdAhsBarcode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAhsBarcode_DEFINED
#define SOAP_TYPE___ns1__GetAhsBarcode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAhsBarcode(struct soap*, struct __ns1__GetAhsBarcode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAhsBarcode(struct soap*, const struct __ns1__GetAhsBarcode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAhsBarcode(struct soap*, const char*, int, const struct __ns1__GetAhsBarcode *, const char*);
SOAP_FMAC3 struct __ns1__GetAhsBarcode * SOAP_FMAC4 soap_in___ns1__GetAhsBarcode(struct soap*, const char*, struct __ns1__GetAhsBarcode *, const char*);
SOAP_FMAC1 struct __ns1__GetAhsBarcode * SOAP_FMAC2 soap_instantiate___ns1__GetAhsBarcode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAhsBarcode * soap_new___ns1__GetAhsBarcode(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAhsBarcode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAhsBarcode * soap_new_req___ns1__GetAhsBarcode(
	struct soap *soap)
{
	struct __ns1__GetAhsBarcode *_p = soap_new___ns1__GetAhsBarcode(soap);
	if (_p)
	{	soap_default___ns1__GetAhsBarcode(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAhsBarcode * soap_new_set___ns1__GetAhsBarcode(
	struct soap *soap,
	_ns1__GetAhsBarcode *ns1__GetAhsBarcode)
{
	struct __ns1__GetAhsBarcode *_p = soap_new___ns1__GetAhsBarcode(soap);
	if (_p)
	{	soap_default___ns1__GetAhsBarcode(soap, _p);
		_p->ns1__GetAhsBarcode = ns1__GetAhsBarcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAhsBarcode(struct soap*, const struct __ns1__GetAhsBarcode *, const char*, const char*);

inline int soap_write___ns1__GetAhsBarcode(struct soap *soap, struct __ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAhsBarcode(soap, p), 0) || soap_put___ns1__GetAhsBarcode(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAhsBarcode(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsBarcode(soap, p), 0) || soap_put___ns1__GetAhsBarcode(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAhsBarcode(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetAhsBarcode(soap, p), 0) || soap_put___ns1__GetAhsBarcode(soap, p, "-ns1:GetAhsBarcode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAhsBarcode * SOAP_FMAC4 soap_get___ns1__GetAhsBarcode(struct soap*, struct __ns1__GetAhsBarcode *, const char*, const char*);

inline int soap_read___ns1__GetAhsBarcode(struct soap *soap, struct __ns1__GetAhsBarcode *p)
{
	if (p)
	{	soap_default___ns1__GetAhsBarcode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAhsBarcode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAhsBarcode(struct soap *soap, const char *URL, struct __ns1__GetAhsBarcode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAhsBarcode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAhsBarcode(struct soap *soap, struct __ns1__GetAhsBarcode *p)
{
	if (soap_read___ns1__GetAhsBarcode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAhsMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAhsMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAhsMo(struct soap*, _ns1__GetAhsMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAhsMo(struct soap*, const char *, int, _ns1__GetAhsMo *const*, const char *);
SOAP_FMAC3 _ns1__GetAhsMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAhsMo(struct soap*, const char*, _ns1__GetAhsMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAhsMo(struct soap*, _ns1__GetAhsMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAhsMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAhsMo(struct soap*, _ns1__GetAhsMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPackWeigth_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPackWeigth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPackWeigth(struct soap*, _ns1__GetPackWeigth *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPackWeigth(struct soap*, const char *, int, _ns1__GetPackWeigth *const*, const char *);
SOAP_FMAC3 _ns1__GetPackWeigth ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPackWeigth(struct soap*, const char*, _ns1__GetPackWeigth **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPackWeigth(struct soap*, _ns1__GetPackWeigth *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPackWeigth ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPackWeigth(struct soap*, _ns1__GetPackWeigth **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPackStation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPackStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPackStation(struct soap*, _ns1__GetPackStation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPackStation(struct soap*, const char *, int, _ns1__GetPackStation *const*, const char *);
SOAP_FMAC3 _ns1__GetPackStation ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPackStation(struct soap*, const char*, _ns1__GetPackStation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPackStation(struct soap*, _ns1__GetPackStation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPackStation ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPackStation(struct soap*, _ns1__GetPackStation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetPallentForWMS_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetPallentForWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetPallentForWMS(struct soap*, _ns1__SetPallentForWMS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetPallentForWMS(struct soap*, const char *, int, _ns1__SetPallentForWMS *const*, const char *);
SOAP_FMAC3 _ns1__SetPallentForWMS ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetPallentForWMS(struct soap*, const char*, _ns1__SetPallentForWMS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetPallentForWMS(struct soap*, _ns1__SetPallentForWMS *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetPallentForWMS ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetPallentForWMS(struct soap*, _ns1__SetPallentForWMS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPallentToWMS_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPallentToWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPallentToWMS(struct soap*, _ns1__GetPallentToWMS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPallentToWMS(struct soap*, const char *, int, _ns1__GetPallentToWMS *const*, const char *);
SOAP_FMAC3 _ns1__GetPallentToWMS ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPallentToWMS(struct soap*, const char*, _ns1__GetPallentToWMS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPallentToWMS(struct soap*, _ns1__GetPallentToWMS *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPallentToWMS ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPallentToWMS(struct soap*, _ns1__GetPallentToWMS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPackToWMS_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPackToWMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPackToWMS(struct soap*, _ns1__GetPackToWMS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPackToWMS(struct soap*, const char *, int, _ns1__GetPackToWMS *const*, const char *);
SOAP_FMAC3 _ns1__GetPackToWMS ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPackToWMS(struct soap*, const char*, _ns1__GetPackToWMS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPackToWMS(struct soap*, _ns1__GetPackToWMS *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPackToWMS ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPackToWMS(struct soap*, _ns1__GetPackToWMS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetWeightSet_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetWeightSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetWeightSet(struct soap*, _ns1__GetWeightSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetWeightSet(struct soap*, const char *, int, _ns1__GetWeightSet *const*, const char *);
SOAP_FMAC3 _ns1__GetWeightSet ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetWeightSet(struct soap*, const char*, _ns1__GetWeightSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetWeightSet(struct soap*, _ns1__GetWeightSet *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetWeightSet ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetWeightSet(struct soap*, _ns1__GetWeightSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CancelLnkSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CancelLnkSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CancelLnkSN(struct soap*, _ns1__CancelLnkSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CancelLnkSN(struct soap*, const char *, int, _ns1__CancelLnkSN *const*, const char *);
SOAP_FMAC3 _ns1__CancelLnkSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__CancelLnkSN(struct soap*, const char*, _ns1__CancelLnkSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CancelLnkSN(struct soap*, _ns1__CancelLnkSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CancelLnkSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__CancelLnkSN(struct soap*, _ns1__CancelLnkSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CancelGrillSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CancelGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CancelGrillSN(struct soap*, _ns1__CancelGrillSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CancelGrillSN(struct soap*, const char *, int, _ns1__CancelGrillSN *const*, const char *);
SOAP_FMAC3 _ns1__CancelGrillSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__CancelGrillSN(struct soap*, const char*, _ns1__CancelGrillSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CancelGrillSN(struct soap*, _ns1__CancelGrillSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CancelGrillSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__CancelGrillSN(struct soap*, _ns1__CancelGrillSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OutGrillBySN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OutGrillBySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OutGrillBySN(struct soap*, _ns1__OutGrillBySN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OutGrillBySN(struct soap*, const char *, int, _ns1__OutGrillBySN *const*, const char *);
SOAP_FMAC3 _ns1__OutGrillBySN ** SOAP_FMAC4 soap_in_PointerTo_ns1__OutGrillBySN(struct soap*, const char*, _ns1__OutGrillBySN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OutGrillBySN(struct soap*, _ns1__OutGrillBySN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OutGrillBySN ** SOAP_FMAC4 soap_get_PointerTo_ns1__OutGrillBySN(struct soap*, _ns1__OutGrillBySN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetGrillTime_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetGrillTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGrillTime(struct soap*, _ns1__GetGrillTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGrillTime(struct soap*, const char *, int, _ns1__GetGrillTime *const*, const char *);
SOAP_FMAC3 _ns1__GetGrillTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGrillTime(struct soap*, const char*, _ns1__GetGrillTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGrillTime(struct soap*, _ns1__GetGrillTime *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetGrillTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGrillTime(struct soap*, _ns1__GetGrillTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsGrillBySN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsGrillBySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsGrillBySN(struct soap*, _ns1__InsGrillBySN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsGrillBySN(struct soap*, const char *, int, _ns1__InsGrillBySN *const*, const char *);
SOAP_FMAC3 _ns1__InsGrillBySN ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsGrillBySN(struct soap*, const char*, _ns1__InsGrillBySN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsGrillBySN(struct soap*, _ns1__InsGrillBySN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsGrillBySN ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsGrillBySN(struct soap*, _ns1__InsGrillBySN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CloseGrillSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CloseGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseGrillSN(struct soap*, _ns1__CloseGrillSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseGrillSN(struct soap*, const char *, int, _ns1__CloseGrillSN *const*, const char *);
SOAP_FMAC3 _ns1__CloseGrillSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseGrillSN(struct soap*, const char*, _ns1__CloseGrillSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseGrillSN(struct soap*, _ns1__CloseGrillSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CloseGrillSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseGrillSN(struct soap*, _ns1__CloseGrillSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LnkGrillSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LnkGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LnkGrillSN(struct soap*, _ns1__LnkGrillSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LnkGrillSN(struct soap*, const char *, int, _ns1__LnkGrillSN *const*, const char *);
SOAP_FMAC3 _ns1__LnkGrillSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__LnkGrillSN(struct soap*, const char*, _ns1__LnkGrillSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LnkGrillSN(struct soap*, _ns1__LnkGrillSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LnkGrillSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__LnkGrillSN(struct soap*, _ns1__LnkGrillSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkGrillSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkGrillSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkGrillSN(struct soap*, _ns1__chkGrillSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkGrillSN(struct soap*, const char *, int, _ns1__chkGrillSN *const*, const char *);
SOAP_FMAC3 _ns1__chkGrillSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkGrillSN(struct soap*, const char*, _ns1__chkGrillSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkGrillSN(struct soap*, _ns1__chkGrillSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkGrillSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkGrillSN(struct soap*, _ns1__chkGrillSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LnkSideSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LnkSideSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LnkSideSN(struct soap*, _ns1__LnkSideSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LnkSideSN(struct soap*, const char *, int, _ns1__LnkSideSN *const*, const char *);
SOAP_FMAC3 _ns1__LnkSideSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__LnkSideSN(struct soap*, const char*, _ns1__LnkSideSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LnkSideSN(struct soap*, _ns1__LnkSideSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LnkSideSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__LnkSideSN(struct soap*, _ns1__LnkSideSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LnkZJSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LnkZJSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LnkZJSN(struct soap*, _ns1__LnkZJSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LnkZJSN(struct soap*, const char *, int, _ns1__LnkZJSN *const*, const char *);
SOAP_FMAC3 _ns1__LnkZJSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__LnkZJSN(struct soap*, const char*, _ns1__LnkZJSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LnkZJSN(struct soap*, _ns1__LnkZJSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LnkZJSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__LnkZJSN(struct soap*, _ns1__LnkZJSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkZJSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkZJSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkZJSN(struct soap*, _ns1__chkZJSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkZJSN(struct soap*, const char *, int, _ns1__chkZJSN *const*, const char *);
SOAP_FMAC3 _ns1__chkZJSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkZJSN(struct soap*, const char*, _ns1__chkZJSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkZJSN(struct soap*, _ns1__chkZJSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkZJSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkZJSN(struct soap*, _ns1__chkZJSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkDispensing_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkDispensing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkDispensing(struct soap*, _ns1__chkDispensing *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkDispensing(struct soap*, const char *, int, _ns1__chkDispensing *const*, const char *);
SOAP_FMAC3 _ns1__chkDispensing ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkDispensing(struct soap*, const char*, _ns1__chkDispensing **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkDispensing(struct soap*, _ns1__chkDispensing *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkDispensing ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkDispensing(struct soap*, _ns1__chkDispensing **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsIotTestData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsIotTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsIotTestData(struct soap*, _ns1__InsIotTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsIotTestData(struct soap*, const char *, int, _ns1__InsIotTestData *const*, const char *);
SOAP_FMAC3 _ns1__InsIotTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsIotTestData(struct soap*, const char*, _ns1__InsIotTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsIotTestData(struct soap*, _ns1__InsIotTestData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsIotTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsIotTestData(struct soap*, _ns1__InsIotTestData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsIotMachineRec_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsIotMachineRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsIotMachineRec(struct soap*, _ns1__InsIotMachineRec *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsIotMachineRec(struct soap*, const char *, int, _ns1__InsIotMachineRec *const*, const char *);
SOAP_FMAC3 _ns1__InsIotMachineRec ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsIotMachineRec(struct soap*, const char*, _ns1__InsIotMachineRec **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsIotMachineRec(struct soap*, _ns1__InsIotMachineRec *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsIotMachineRec ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsIotMachineRec(struct soap*, _ns1__InsIotMachineRec **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLnkData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLnkData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLnkData(struct soap*, _ns1__GetLnkData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLnkData(struct soap*, const char *, int, _ns1__GetLnkData *const*, const char *);
SOAP_FMAC3 _ns1__GetLnkData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLnkData(struct soap*, const char*, _ns1__GetLnkData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLnkData(struct soap*, _ns1__GetLnkData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLnkData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLnkData(struct soap*, _ns1__GetLnkData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTestValue_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTestValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTestValue(struct soap*, _ns1__GetTestValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTestValue(struct soap*, const char *, int, _ns1__GetTestValue *const*, const char *);
SOAP_FMAC3 _ns1__GetTestValue ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTestValue(struct soap*, const char*, _ns1__GetTestValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTestValue(struct soap*, _ns1__GetTestValue *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTestValue ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTestValue(struct soap*, _ns1__GetTestValue **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetMoBase_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetMoBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMoBase(struct soap*, _ns1__GetMoBase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMoBase(struct soap*, const char *, int, _ns1__GetMoBase *const*, const char *);
SOAP_FMAC3 _ns1__GetMoBase ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMoBase(struct soap*, const char*, _ns1__GetMoBase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMoBase(struct soap*, _ns1__GetMoBase *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetMoBase ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMoBase(struct soap*, _ns1__GetMoBase **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdSnRecInfo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdSnRecInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdSnRecInfo(struct soap*, _ns1__UpdSnRecInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdSnRecInfo(struct soap*, const char *, int, _ns1__UpdSnRecInfo *const*, const char *);
SOAP_FMAC3 _ns1__UpdSnRecInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdSnRecInfo(struct soap*, const char*, _ns1__UpdSnRecInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdSnRecInfo(struct soap*, _ns1__UpdSnRecInfo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdSnRecInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdSnRecInfo(struct soap*, _ns1__UpdSnRecInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsBoxInfo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsBoxInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsBoxInfo(struct soap*, _ns1__InsBoxInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsBoxInfo(struct soap*, const char *, int, _ns1__InsBoxInfo *const*, const char *);
SOAP_FMAC3 _ns1__InsBoxInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsBoxInfo(struct soap*, const char*, _ns1__InsBoxInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsBoxInfo(struct soap*, _ns1__InsBoxInfo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsBoxInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsBoxInfo(struct soap*, _ns1__InsBoxInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsLnkOutSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsLnkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsLnkOutSN(struct soap*, _ns1__InsLnkOutSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsLnkOutSN(struct soap*, const char *, int, _ns1__InsLnkOutSN *const*, const char *);
SOAP_FMAC3 _ns1__InsLnkOutSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsLnkOutSN(struct soap*, const char*, _ns1__InsLnkOutSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsLnkOutSN(struct soap*, _ns1__InsLnkOutSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsLnkOutSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsLnkOutSN(struct soap*, _ns1__InsLnkOutSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsSNStationEmp_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsSNStationEmp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsSNStationEmp(struct soap*, _ns1__InsSNStationEmp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsSNStationEmp(struct soap*, const char *, int, _ns1__InsSNStationEmp *const*, const char *);
SOAP_FMAC3 _ns1__InsSNStationEmp ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsSNStationEmp(struct soap*, const char*, _ns1__InsSNStationEmp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsSNStationEmp(struct soap*, _ns1__InsSNStationEmp *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsSNStationEmp ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsSNStationEmp(struct soap*, _ns1__InsSNStationEmp **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CancelBoxLnk_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CancelBoxLnk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CancelBoxLnk(struct soap*, _ns1__CancelBoxLnk *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CancelBoxLnk(struct soap*, const char *, int, _ns1__CancelBoxLnk *const*, const char *);
SOAP_FMAC3 _ns1__CancelBoxLnk ** SOAP_FMAC4 soap_in_PointerTo_ns1__CancelBoxLnk(struct soap*, const char*, _ns1__CancelBoxLnk **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CancelBoxLnk(struct soap*, _ns1__CancelBoxLnk *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CancelBoxLnk ** SOAP_FMAC4 soap_get_PointerTo_ns1__CancelBoxLnk(struct soap*, _ns1__CancelBoxLnk **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OutStationbyBox_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OutStationbyBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OutStationbyBox(struct soap*, _ns1__OutStationbyBox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OutStationbyBox(struct soap*, const char *, int, _ns1__OutStationbyBox *const*, const char *);
SOAP_FMAC3 _ns1__OutStationbyBox ** SOAP_FMAC4 soap_in_PointerTo_ns1__OutStationbyBox(struct soap*, const char*, _ns1__OutStationbyBox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OutStationbyBox(struct soap*, _ns1__OutStationbyBox *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OutStationbyBox ** SOAP_FMAC4 soap_get_PointerTo_ns1__OutStationbyBox(struct soap*, _ns1__OutStationbyBox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InStationbyBox_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InStationbyBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InStationbyBox(struct soap*, _ns1__InStationbyBox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InStationbyBox(struct soap*, const char *, int, _ns1__InStationbyBox *const*, const char *);
SOAP_FMAC3 _ns1__InStationbyBox ** SOAP_FMAC4 soap_in_PointerTo_ns1__InStationbyBox(struct soap*, const char*, _ns1__InStationbyBox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InStationbyBox(struct soap*, _ns1__InStationbyBox *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InStationbyBox ** SOAP_FMAC4 soap_get_PointerTo_ns1__InStationbyBox(struct soap*, _ns1__InStationbyBox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EndSNtoBox_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EndSNtoBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndSNtoBox(struct soap*, _ns1__EndSNtoBox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndSNtoBox(struct soap*, const char *, int, _ns1__EndSNtoBox *const*, const char *);
SOAP_FMAC3 _ns1__EndSNtoBox ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndSNtoBox(struct soap*, const char*, _ns1__EndSNtoBox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndSNtoBox(struct soap*, _ns1__EndSNtoBox *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EndSNtoBox ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndSNtoBox(struct soap*, _ns1__EndSNtoBox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InSNtoBox_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InSNtoBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InSNtoBox(struct soap*, _ns1__InSNtoBox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InSNtoBox(struct soap*, const char *, int, _ns1__InSNtoBox *const*, const char *);
SOAP_FMAC3 _ns1__InSNtoBox ** SOAP_FMAC4 soap_in_PointerTo_ns1__InSNtoBox(struct soap*, const char*, _ns1__InSNtoBox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InSNtoBox(struct soap*, _ns1__InSNtoBox *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InSNtoBox ** SOAP_FMAC4 soap_get_PointerTo_ns1__InSNtoBox(struct soap*, _ns1__InSNtoBox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkBoxNo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkBoxNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkBoxNo(struct soap*, _ns1__chkBoxNo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkBoxNo(struct soap*, const char *, int, _ns1__chkBoxNo *const*, const char *);
SOAP_FMAC3 _ns1__chkBoxNo ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkBoxNo(struct soap*, const char*, _ns1__chkBoxNo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkBoxNo(struct soap*, _ns1__chkBoxNo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkBoxNo ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkBoxNo(struct soap*, _ns1__chkBoxNo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsBoxNOTime_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsBoxNOTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsBoxNOTime(struct soap*, _ns1__InsBoxNOTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsBoxNOTime(struct soap*, const char *, int, _ns1__InsBoxNOTime *const*, const char *);
SOAP_FMAC3 _ns1__InsBoxNOTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsBoxNOTime(struct soap*, const char*, _ns1__InsBoxNOTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsBoxNOTime(struct soap*, _ns1__InsBoxNOTime *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsBoxNOTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsBoxNOTime(struct soap*, _ns1__InsBoxNOTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLinkZJCount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLinkZJCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLinkZJCount(struct soap*, _ns1__GetLinkZJCount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLinkZJCount(struct soap*, const char *, int, _ns1__GetLinkZJCount *const*, const char *);
SOAP_FMAC3 _ns1__GetLinkZJCount ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLinkZJCount(struct soap*, const char*, _ns1__GetLinkZJCount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLinkZJCount(struct soap*, _ns1__GetLinkZJCount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLinkZJCount ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLinkZJCount(struct soap*, _ns1__GetLinkZJCount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsLinkSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsLinkSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsLinkSN(struct soap*, _ns1__InsLinkSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsLinkSN(struct soap*, const char *, int, _ns1__InsLinkSN *const*, const char *);
SOAP_FMAC3 _ns1__InsLinkSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsLinkSN(struct soap*, const char*, _ns1__InsLinkSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsLinkSN(struct soap*, _ns1__InsLinkSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsLinkSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsLinkSN(struct soap*, _ns1__InsLinkSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doLinkOutSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doLinkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doLinkOutSN(struct soap*, _ns1__doLinkOutSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doLinkOutSN(struct soap*, const char *, int, _ns1__doLinkOutSN *const*, const char *);
SOAP_FMAC3 _ns1__doLinkOutSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__doLinkOutSN(struct soap*, const char*, _ns1__doLinkOutSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doLinkOutSN(struct soap*, _ns1__doLinkOutSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doLinkOutSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__doLinkOutSN(struct soap*, _ns1__doLinkOutSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkLinkOutSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkLinkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkLinkOutSN(struct soap*, _ns1__ChkLinkOutSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkLinkOutSN(struct soap*, const char *, int, _ns1__ChkLinkOutSN *const*, const char *);
SOAP_FMAC3 _ns1__ChkLinkOutSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkLinkOutSN(struct soap*, const char*, _ns1__ChkLinkOutSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkLinkOutSN(struct soap*, _ns1__ChkLinkOutSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkLinkOutSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkLinkOutSN(struct soap*, _ns1__ChkLinkOutSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkOutSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkOutSN(struct soap*, _ns1__chkOutSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkOutSN(struct soap*, const char *, int, _ns1__chkOutSN *const*, const char *);
SOAP_FMAC3 _ns1__chkOutSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkOutSN(struct soap*, const char*, _ns1__chkOutSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkOutSN(struct soap*, _ns1__chkOutSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkOutSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkOutSN(struct soap*, _ns1__chkOutSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLintOutQty_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLintOutQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLintOutQty(struct soap*, _ns1__GetLintOutQty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLintOutQty(struct soap*, const char *, int, _ns1__GetLintOutQty *const*, const char *);
SOAP_FMAC3 _ns1__GetLintOutQty ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLintOutQty(struct soap*, const char*, _ns1__GetLintOutQty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLintOutQty(struct soap*, _ns1__GetLintOutQty *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLintOutQty ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLintOutQty(struct soap*, _ns1__GetLintOutQty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SNLinkZJ_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SNLinkZJ_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SNLinkZJ(struct soap*, _ns1__SNLinkZJ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SNLinkZJ(struct soap*, const char *, int, _ns1__SNLinkZJ *const*, const char *);
SOAP_FMAC3 _ns1__SNLinkZJ ** SOAP_FMAC4 soap_in_PointerTo_ns1__SNLinkZJ(struct soap*, const char*, _ns1__SNLinkZJ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SNLinkZJ(struct soap*, _ns1__SNLinkZJ *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SNLinkZJ ** SOAP_FMAC4 soap_get_PointerTo_ns1__SNLinkZJ(struct soap*, _ns1__SNLinkZJ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsZJTestData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsZJTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsZJTestData(struct soap*, _ns1__InsZJTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsZJTestData(struct soap*, const char *, int, _ns1__InsZJTestData *const*, const char *);
SOAP_FMAC3 _ns1__InsZJTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsZJTestData(struct soap*, const char*, _ns1__InsZJTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsZJTestData(struct soap*, _ns1__InsZJTestData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsZJTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsZJTestData(struct soap*, _ns1__InsZJTestData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doPmcSNLink_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doPmcSNLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doPmcSNLink(struct soap*, _ns1__doPmcSNLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doPmcSNLink(struct soap*, const char *, int, _ns1__doPmcSNLink *const*, const char *);
SOAP_FMAC3 _ns1__doPmcSNLink ** SOAP_FMAC4 soap_in_PointerTo_ns1__doPmcSNLink(struct soap*, const char*, _ns1__doPmcSNLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doPmcSNLink(struct soap*, _ns1__doPmcSNLink *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doPmcSNLink ** SOAP_FMAC4 soap_get_PointerTo_ns1__doPmcSNLink(struct soap*, _ns1__doPmcSNLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPmcSNPart_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPmcSNPart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPmcSNPart(struct soap*, _ns1__GetPmcSNPart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPmcSNPart(struct soap*, const char *, int, _ns1__GetPmcSNPart *const*, const char *);
SOAP_FMAC3 _ns1__GetPmcSNPart ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPmcSNPart(struct soap*, const char*, _ns1__GetPmcSNPart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPmcSNPart(struct soap*, _ns1__GetPmcSNPart *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPmcSNPart ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPmcSNPart(struct soap*, _ns1__GetPmcSNPart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPmcPartAssyList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPmcPartAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPmcPartAssyList(struct soap*, _ns1__getPmcPartAssyList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPmcPartAssyList(struct soap*, const char *, int, _ns1__getPmcPartAssyList *const*, const char *);
SOAP_FMAC3 _ns1__getPmcPartAssyList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPmcPartAssyList(struct soap*, const char*, _ns1__getPmcPartAssyList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPmcPartAssyList(struct soap*, _ns1__getPmcPartAssyList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPmcPartAssyList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPmcPartAssyList(struct soap*, _ns1__getPmcPartAssyList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPmcAssyList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPmcAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPmcAssyList(struct soap*, _ns1__getPmcAssyList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPmcAssyList(struct soap*, const char *, int, _ns1__getPmcAssyList *const*, const char *);
SOAP_FMAC3 _ns1__getPmcAssyList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPmcAssyList(struct soap*, const char*, _ns1__getPmcAssyList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPmcAssyList(struct soap*, _ns1__getPmcAssyList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPmcAssyList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPmcAssyList(struct soap*, _ns1__getPmcAssyList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doAssy_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doAssy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doAssy(struct soap*, _ns1__doAssy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doAssy(struct soap*, const char *, int, _ns1__doAssy *const*, const char *);
SOAP_FMAC3 _ns1__doAssy ** SOAP_FMAC4 soap_in_PointerTo_ns1__doAssy(struct soap*, const char*, _ns1__doAssy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doAssy(struct soap*, _ns1__doAssy *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doAssy ** SOAP_FMAC4 soap_get_PointerTo_ns1__doAssy(struct soap*, _ns1__doAssy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkAssySN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkAssySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkAssySN(struct soap*, _ns1__chkAssySN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkAssySN(struct soap*, const char *, int, _ns1__chkAssySN *const*, const char *);
SOAP_FMAC3 _ns1__chkAssySN ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkAssySN(struct soap*, const char*, _ns1__chkAssySN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkAssySN(struct soap*, _ns1__chkAssySN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkAssySN ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkAssySN(struct soap*, _ns1__chkAssySN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPNbySN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPNbySN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPNbySN(struct soap*, _ns1__getPNbySN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPNbySN(struct soap*, const char *, int, _ns1__getPNbySN *const*, const char *);
SOAP_FMAC3 _ns1__getPNbySN ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPNbySN(struct soap*, const char*, _ns1__getPNbySN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPNbySN(struct soap*, _ns1__getPNbySN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPNbySN ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPNbySN(struct soap*, _ns1__getPNbySN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getMoAssyCount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getMoAssyCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMoAssyCount(struct soap*, _ns1__getMoAssyCount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMoAssyCount(struct soap*, const char *, int, _ns1__getMoAssyCount *const*, const char *);
SOAP_FMAC3 _ns1__getMoAssyCount ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMoAssyCount(struct soap*, const char*, _ns1__getMoAssyCount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMoAssyCount(struct soap*, _ns1__getMoAssyCount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getMoAssyCount ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMoAssyCount(struct soap*, _ns1__getMoAssyCount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLinkOutSn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLinkOutSn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLinkOutSn(struct soap*, _ns1__GetLinkOutSn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLinkOutSn(struct soap*, const char *, int, _ns1__GetLinkOutSn *const*, const char *);
SOAP_FMAC3 _ns1__GetLinkOutSn ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLinkOutSn(struct soap*, const char*, _ns1__GetLinkOutSn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLinkOutSn(struct soap*, _ns1__GetLinkOutSn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLinkOutSn ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLinkOutSn(struct soap*, _ns1__GetLinkOutSn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsPartAssy_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsPartAssy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsPartAssy(struct soap*, _ns1__InsPartAssy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsPartAssy(struct soap*, const char *, int, _ns1__InsPartAssy *const*, const char *);
SOAP_FMAC3 _ns1__InsPartAssy ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsPartAssy(struct soap*, const char*, _ns1__InsPartAssy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsPartAssy(struct soap*, _ns1__InsPartAssy *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsPartAssy ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsPartAssy(struct soap*, _ns1__InsPartAssy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPartBomExt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPartBomExt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPartBomExt(struct soap*, _ns1__getPartBomExt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPartBomExt(struct soap*, const char *, int, _ns1__getPartBomExt *const*, const char *);
SOAP_FMAC3 _ns1__getPartBomExt ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPartBomExt(struct soap*, const char*, _ns1__getPartBomExt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPartBomExt(struct soap*, _ns1__getPartBomExt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPartBomExt ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPartBomExt(struct soap*, _ns1__getPartBomExt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getMoAssyList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getMoAssyList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMoAssyList(struct soap*, _ns1__getMoAssyList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMoAssyList(struct soap*, const char *, int, _ns1__getMoAssyList *const*, const char *);
SOAP_FMAC3 _ns1__getMoAssyList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMoAssyList(struct soap*, const char*, _ns1__getMoAssyList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMoAssyList(struct soap*, _ns1__getMoAssyList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getMoAssyList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMoAssyList(struct soap*, _ns1__getMoAssyList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkSnMapping_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkSnMapping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkSnMapping(struct soap*, _ns1__chkSnMapping *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkSnMapping(struct soap*, const char *, int, _ns1__chkSnMapping *const*, const char *);
SOAP_FMAC3 _ns1__chkSnMapping ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkSnMapping(struct soap*, const char*, _ns1__chkSnMapping **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkSnMapping(struct soap*, _ns1__chkSnMapping *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkSnMapping ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkSnMapping(struct soap*, _ns1__chkSnMapping **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getStationTypeDesc_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getStationTypeDesc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getStationTypeDesc(struct soap*, _ns1__getStationTypeDesc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getStationTypeDesc(struct soap*, const char *, int, _ns1__getStationTypeDesc *const*, const char *);
SOAP_FMAC3 _ns1__getStationTypeDesc ** SOAP_FMAC4 soap_in_PointerTo_ns1__getStationTypeDesc(struct soap*, const char*, _ns1__getStationTypeDesc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getStationTypeDesc(struct soap*, _ns1__getStationTypeDesc *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getStationTypeDesc ** SOAP_FMAC4 soap_get_PointerTo_ns1__getStationTypeDesc(struct soap*, _ns1__getStationTypeDesc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getStationByMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getStationByMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getStationByMo(struct soap*, _ns1__getStationByMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getStationByMo(struct soap*, const char *, int, _ns1__getStationByMo *const*, const char *);
SOAP_FMAC3 _ns1__getStationByMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getStationByMo(struct soap*, const char*, _ns1__getStationByMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getStationByMo(struct soap*, _ns1__getStationByMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getStationByMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getStationByMo(struct soap*, _ns1__getStationByMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SnDoMapping_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SnDoMapping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SnDoMapping(struct soap*, _ns1__SnDoMapping *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SnDoMapping(struct soap*, const char *, int, _ns1__SnDoMapping *const*, const char *);
SOAP_FMAC3 _ns1__SnDoMapping ** SOAP_FMAC4 soap_in_PointerTo_ns1__SnDoMapping(struct soap*, const char*, _ns1__SnDoMapping **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SnDoMapping(struct soap*, _ns1__SnDoMapping *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SnDoMapping ** SOAP_FMAC4 soap_get_PointerTo_ns1__SnDoMapping(struct soap*, _ns1__SnDoMapping **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__eMesNextMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__eMesNextMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__eMesNextMo(struct soap*, _ns1__eMesNextMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__eMesNextMo(struct soap*, const char *, int, _ns1__eMesNextMo *const*, const char *);
SOAP_FMAC3 _ns1__eMesNextMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__eMesNextMo(struct soap*, const char*, _ns1__eMesNextMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__eMesNextMo(struct soap*, _ns1__eMesNextMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__eMesNextMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__eMesNextMo(struct soap*, _ns1__eMesNextMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__sendResultForStationNumber_DEFINED
#define SOAP_TYPE_PointerTo_ns1__sendResultForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendResultForStationNumber(struct soap*, _ns1__sendResultForStationNumber *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendResultForStationNumber(struct soap*, const char *, int, _ns1__sendResultForStationNumber *const*, const char *);
SOAP_FMAC3 _ns1__sendResultForStationNumber ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendResultForStationNumber(struct soap*, const char*, _ns1__sendResultForStationNumber **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendResultForStationNumber(struct soap*, _ns1__sendResultForStationNumber *const*, const char*, const char*);
SOAP_FMAC3 _ns1__sendResultForStationNumber ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendResultForStationNumber(struct soap*, _ns1__sendResultForStationNumber **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__sendDataForStationNumber_DEFINED
#define SOAP_TYPE_PointerTo_ns1__sendDataForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendDataForStationNumber(struct soap*, _ns1__sendDataForStationNumber *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendDataForStationNumber(struct soap*, const char *, int, _ns1__sendDataForStationNumber *const*, const char *);
SOAP_FMAC3 _ns1__sendDataForStationNumber ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendDataForStationNumber(struct soap*, const char*, _ns1__sendDataForStationNumber **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendDataForStationNumber(struct soap*, _ns1__sendDataForStationNumber *const*, const char*, const char*);
SOAP_FMAC3 _ns1__sendDataForStationNumber ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendDataForStationNumber(struct soap*, _ns1__sendDataForStationNumber **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkEmpForStationNumber_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkEmpForStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkEmpForStationNumber(struct soap*, _ns1__checkEmpForStationNumber *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkEmpForStationNumber(struct soap*, const char *, int, _ns1__checkEmpForStationNumber *const*, const char *);
SOAP_FMAC3 _ns1__checkEmpForStationNumber ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkEmpForStationNumber(struct soap*, const char*, _ns1__checkEmpForStationNumber **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkEmpForStationNumber(struct soap*, _ns1__checkEmpForStationNumber *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkEmpForStationNumber ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkEmpForStationNumber(struct soap*, _ns1__checkEmpForStationNumber **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkSN_USCOREStationNumber_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkSN_USCOREStationNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkSN_USCOREStationNumber(struct soap*, _ns1__checkSN_USCOREStationNumber *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkSN_USCOREStationNumber(struct soap*, const char *, int, _ns1__checkSN_USCOREStationNumber *const*, const char *);
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumber ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkSN_USCOREStationNumber(struct soap*, const char*, _ns1__checkSN_USCOREStationNumber **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkSN_USCOREStationNumber(struct soap*, _ns1__checkSN_USCOREStationNumber *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStationNumber ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkSN_USCOREStationNumber(struct soap*, _ns1__checkSN_USCOREStationNumber **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkSnNextMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkSnNextMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkSnNextMo(struct soap*, _ns1__ChkSnNextMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkSnNextMo(struct soap*, const char *, int, _ns1__ChkSnNextMo *const*, const char *);
SOAP_FMAC3 _ns1__ChkSnNextMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkSnNextMo(struct soap*, const char*, _ns1__ChkSnNextMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkSnNextMo(struct soap*, _ns1__ChkSnNextMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkSnNextMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkSnNextMo(struct soap*, _ns1__ChkSnNextMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkSnMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkSnMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkSnMo(struct soap*, _ns1__ChkSnMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkSnMo(struct soap*, const char *, int, _ns1__ChkSnMo *const*, const char *);
SOAP_FMAC3 _ns1__ChkSnMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkSnMo(struct soap*, const char*, _ns1__ChkSnMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkSnMo(struct soap*, _ns1__ChkSnMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkSnMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkSnMo(struct soap*, _ns1__ChkSnMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkMoStation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkMoStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkMoStation(struct soap*, _ns1__chkMoStation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkMoStation(struct soap*, const char *, int, _ns1__chkMoStation *const*, const char *);
SOAP_FMAC3 _ns1__chkMoStation ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkMoStation(struct soap*, const char*, _ns1__chkMoStation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkMoStation(struct soap*, _ns1__chkMoStation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkMoStation ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkMoStation(struct soap*, _ns1__chkMoStation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetEnergyStat_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetEnergyStat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEnergyStat(struct soap*, _ns1__SetEnergyStat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEnergyStat(struct soap*, const char *, int, _ns1__SetEnergyStat *const*, const char *);
SOAP_FMAC3 _ns1__SetEnergyStat ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEnergyStat(struct soap*, const char*, _ns1__SetEnergyStat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEnergyStat(struct soap*, _ns1__SetEnergyStat *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetEnergyStat ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEnergyStat(struct soap*, _ns1__SetEnergyStat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getInfoByMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getInfoByMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getInfoByMo(struct soap*, _ns1__getInfoByMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getInfoByMo(struct soap*, const char *, int, _ns1__getInfoByMo *const*, const char *);
SOAP_FMAC3 _ns1__getInfoByMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getInfoByMo(struct soap*, const char*, _ns1__getInfoByMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getInfoByMo(struct soap*, _ns1__getInfoByMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getInfoByMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getInfoByMo(struct soap*, _ns1__getInfoByMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsThermalNew_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsThermalNew_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsThermalNew(struct soap*, _ns1__InsThermalNew *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsThermalNew(struct soap*, const char *, int, _ns1__InsThermalNew *const*, const char *);
SOAP_FMAC3 _ns1__InsThermalNew ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsThermalNew(struct soap*, const char*, _ns1__InsThermalNew **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsThermalNew(struct soap*, _ns1__InsThermalNew *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsThermalNew ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsThermalNew(struct soap*, _ns1__InsThermalNew **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkSnLink_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkSnLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkSnLink(struct soap*, _ns1__ChkSnLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkSnLink(struct soap*, const char *, int, _ns1__ChkSnLink *const*, const char *);
SOAP_FMAC3 _ns1__ChkSnLink ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkSnLink(struct soap*, const char*, _ns1__ChkSnLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkSnLink(struct soap*, _ns1__ChkSnLink *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkSnLink ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkSnLink(struct soap*, _ns1__ChkSnLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsThermal_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsThermal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsThermal(struct soap*, _ns1__InsThermal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsThermal(struct soap*, const char *, int, _ns1__InsThermal *const*, const char *);
SOAP_FMAC3 _ns1__InsThermal ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsThermal(struct soap*, const char*, _ns1__InsThermal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsThermal(struct soap*, _ns1__InsThermal *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsThermal ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsThermal(struct soap*, _ns1__InsThermal **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsWHDetection_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsWHDetection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsWHDetection(struct soap*, _ns1__InsWHDetection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsWHDetection(struct soap*, const char *, int, _ns1__InsWHDetection *const*, const char *);
SOAP_FMAC3 _ns1__InsWHDetection ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsWHDetection(struct soap*, const char*, _ns1__InsWHDetection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsWHDetection(struct soap*, _ns1__InsWHDetection *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsWHDetection ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsWHDetection(struct soap*, _ns1__InsWHDetection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsFlatNessForCL_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsFlatNessForCL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsFlatNessForCL(struct soap*, _ns1__InsFlatNessForCL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsFlatNessForCL(struct soap*, const char *, int, _ns1__InsFlatNessForCL *const*, const char *);
SOAP_FMAC3 _ns1__InsFlatNessForCL ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsFlatNessForCL(struct soap*, const char*, _ns1__InsFlatNessForCL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsFlatNessForCL(struct soap*, _ns1__InsFlatNessForCL *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForCL ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsFlatNessForCL(struct soap*, _ns1__InsFlatNessForCL **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsFlatNessForLSD_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsFlatNessForLSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsFlatNessForLSD(struct soap*, _ns1__InsFlatNessForLSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsFlatNessForLSD(struct soap*, const char *, int, _ns1__InsFlatNessForLSD *const*, const char *);
SOAP_FMAC3 _ns1__InsFlatNessForLSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsFlatNessForLSD(struct soap*, const char*, _ns1__InsFlatNessForLSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsFlatNessForLSD(struct soap*, _ns1__InsFlatNessForLSD *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsFlatNessForLSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsFlatNessForLSD(struct soap*, _ns1__InsFlatNessForLSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsFlatNess_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsFlatNess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsFlatNess(struct soap*, _ns1__InsFlatNess *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsFlatNess(struct soap*, const char *, int, _ns1__InsFlatNess *const*, const char *);
SOAP_FMAC3 _ns1__InsFlatNess ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsFlatNess(struct soap*, const char*, _ns1__InsFlatNess **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsFlatNess(struct soap*, _ns1__InsFlatNess *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsFlatNess ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsFlatNess(struct soap*, _ns1__InsFlatNess **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ImpMesAteTestData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ImpMesAteTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ImpMesAteTestData(struct soap*, _ns1__ImpMesAteTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ImpMesAteTestData(struct soap*, const char *, int, _ns1__ImpMesAteTestData *const*, const char *);
SOAP_FMAC3 _ns1__ImpMesAteTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__ImpMesAteTestData(struct soap*, const char*, _ns1__ImpMesAteTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ImpMesAteTestData(struct soap*, _ns1__ImpMesAteTestData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ImpMesAteTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__ImpMesAteTestData(struct soap*, _ns1__ImpMesAteTestData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkStationTime_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkStationTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkStationTime(struct soap*, _ns1__chkStationTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkStationTime(struct soap*, const char *, int, _ns1__chkStationTime *const*, const char *);
SOAP_FMAC3 _ns1__chkStationTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkStationTime(struct soap*, const char*, _ns1__chkStationTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkStationTime(struct soap*, _ns1__chkStationTime *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkStationTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkStationTime(struct soap*, _ns1__chkStationTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InFruitsOrtQty_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InFruitsOrtQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InFruitsOrtQty(struct soap*, _ns1__InFruitsOrtQty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InFruitsOrtQty(struct soap*, const char *, int, _ns1__InFruitsOrtQty *const*, const char *);
SOAP_FMAC3 _ns1__InFruitsOrtQty ** SOAP_FMAC4 soap_in_PointerTo_ns1__InFruitsOrtQty(struct soap*, const char*, _ns1__InFruitsOrtQty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InFruitsOrtQty(struct soap*, _ns1__InFruitsOrtQty *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InFruitsOrtQty ** SOAP_FMAC4 soap_get_PointerTo_ns1__InFruitsOrtQty(struct soap*, _ns1__InFruitsOrtQty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__sendTestResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__sendTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendTestResult(struct soap*, _ns1__sendTestResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendTestResult(struct soap*, const char *, int, _ns1__sendTestResult *const*, const char *);
SOAP_FMAC3 _ns1__sendTestResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendTestResult(struct soap*, const char*, _ns1__sendTestResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendTestResult(struct soap*, _ns1__sendTestResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__sendTestResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendTestResult(struct soap*, _ns1__sendTestResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__sendTestData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__sendTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendTestData(struct soap*, _ns1__sendTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendTestData(struct soap*, const char *, int, _ns1__sendTestData *const*, const char *);
SOAP_FMAC3 _ns1__sendTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendTestData(struct soap*, const char*, _ns1__sendTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendTestData(struct soap*, _ns1__sendTestData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__sendTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendTestData(struct soap*, _ns1__sendTestData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkSN_USCOREStation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkSN_USCOREStation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkSN_USCOREStation(struct soap*, _ns1__checkSN_USCOREStation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkSN_USCOREStation(struct soap*, const char *, int, _ns1__checkSN_USCOREStation *const*, const char *);
SOAP_FMAC3 _ns1__checkSN_USCOREStation ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkSN_USCOREStation(struct soap*, const char*, _ns1__checkSN_USCOREStation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkSN_USCOREStation(struct soap*, _ns1__checkSN_USCOREStation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkSN_USCOREStation ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkSN_USCOREStation(struct soap*, _ns1__checkSN_USCOREStation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkEmpNo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkEmpNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkEmpNo(struct soap*, _ns1__checkEmpNo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkEmpNo(struct soap*, const char *, int, _ns1__checkEmpNo *const*, const char *);
SOAP_FMAC3 _ns1__checkEmpNo ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkEmpNo(struct soap*, const char*, _ns1__checkEmpNo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkEmpNo(struct soap*, _ns1__checkEmpNo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkEmpNo ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkEmpNo(struct soap*, _ns1__checkEmpNo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkTestData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkTestData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkTestData(struct soap*, _ns1__checkTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkTestData(struct soap*, const char *, int, _ns1__checkTestData *const*, const char *);
SOAP_FMAC3 _ns1__checkTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkTestData(struct soap*, const char*, _ns1__checkTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkTestData(struct soap*, _ns1__checkTestData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkTestData(struct soap*, _ns1__checkTestData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsZjList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsZjList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsZjList(struct soap*, _ns1__InsZjList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsZjList(struct soap*, const char *, int, _ns1__InsZjList *const*, const char *);
SOAP_FMAC3 _ns1__InsZjList ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsZjList(struct soap*, const char*, _ns1__InsZjList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsZjList(struct soap*, _ns1__InsZjList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsZjList ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsZjList(struct soap*, _ns1__InsZjList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFruitMachineChk_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFruitMachineChk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFruitMachineChk(struct soap*, _ns1__GetFruitMachineChk *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFruitMachineChk(struct soap*, const char *, int, _ns1__GetFruitMachineChk *const*, const char *);
SOAP_FMAC3 _ns1__GetFruitMachineChk ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFruitMachineChk(struct soap*, const char*, _ns1__GetFruitMachineChk **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFruitMachineChk(struct soap*, _ns1__GetFruitMachineChk *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFruitMachineChk ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFruitMachineChk(struct soap*, _ns1__GetFruitMachineChk **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsFruitMachineChk_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsFruitMachineChk_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsFruitMachineChk(struct soap*, _ns1__InsFruitMachineChk *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsFruitMachineChk(struct soap*, const char *, int, _ns1__InsFruitMachineChk *const*, const char *);
SOAP_FMAC3 _ns1__InsFruitMachineChk ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsFruitMachineChk(struct soap*, const char*, _ns1__InsFruitMachineChk **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsFruitMachineChk(struct soap*, _ns1__InsFruitMachineChk *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsFruitMachineChk ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsFruitMachineChk(struct soap*, _ns1__InsFruitMachineChk **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SnLnkOutSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SnLnkOutSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SnLnkOutSN(struct soap*, _ns1__SnLnkOutSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SnLnkOutSN(struct soap*, const char *, int, _ns1__SnLnkOutSN *const*, const char *);
SOAP_FMAC3 _ns1__SnLnkOutSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__SnLnkOutSN(struct soap*, const char*, _ns1__SnLnkOutSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SnLnkOutSN(struct soap*, _ns1__SnLnkOutSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SnLnkOutSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__SnLnkOutSN(struct soap*, _ns1__SnLnkOutSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getMoBase_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getMoBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMoBase(struct soap*, _ns1__getMoBase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMoBase(struct soap*, const char *, int, _ns1__getMoBase *const*, const char *);
SOAP_FMAC3 _ns1__getMoBase ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMoBase(struct soap*, const char*, _ns1__getMoBase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMoBase(struct soap*, _ns1__getMoBase *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getMoBase ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMoBase(struct soap*, _ns1__getMoBase **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetNgCode_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetNgCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetNgCode(struct soap*, _ns1__GetNgCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetNgCode(struct soap*, const char *, int, _ns1__GetNgCode *const*, const char *);
SOAP_FMAC3 _ns1__GetNgCode ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetNgCode(struct soap*, const char*, _ns1__GetNgCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetNgCode(struct soap*, _ns1__GetNgCode *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetNgCode ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetNgCode(struct soap*, _ns1__GetNgCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetDiecastSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetDiecastSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetDiecastSN(struct soap*, _ns1__SetDiecastSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetDiecastSN(struct soap*, const char *, int, _ns1__SetDiecastSN *const*, const char *);
SOAP_FMAC3 _ns1__SetDiecastSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetDiecastSN(struct soap*, const char*, _ns1__SetDiecastSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetDiecastSN(struct soap*, _ns1__SetDiecastSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetDiecastSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetDiecastSN(struct soap*, _ns1__SetDiecastSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetMachineForGroup_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetMachineForGroup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMachineForGroup(struct soap*, _ns1__GetMachineForGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMachineForGroup(struct soap*, const char *, int, _ns1__GetMachineForGroup *const*, const char *);
SOAP_FMAC3 _ns1__GetMachineForGroup ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMachineForGroup(struct soap*, const char*, _ns1__GetMachineForGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMachineForGroup(struct soap*, _ns1__GetMachineForGroup *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetMachineForGroup ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMachineForGroup(struct soap*, _ns1__GetMachineForGroup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UploadForHP_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UploadForHP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadForHP(struct soap*, _ns1__UploadForHP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadForHP(struct soap*, const char *, int, _ns1__UploadForHP *const*, const char *);
SOAP_FMAC3 _ns1__UploadForHP ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadForHP(struct soap*, const char*, _ns1__UploadForHP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadForHP(struct soap*, _ns1__UploadForHP *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UploadForHP ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadForHP(struct soap*, _ns1__UploadForHP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SelShelfLink_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SelShelfLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SelShelfLink(struct soap*, _ns1__SelShelfLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SelShelfLink(struct soap*, const char *, int, _ns1__SelShelfLink *const*, const char *);
SOAP_FMAC3 _ns1__SelShelfLink ** SOAP_FMAC4 soap_in_PointerTo_ns1__SelShelfLink(struct soap*, const char*, _ns1__SelShelfLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SelShelfLink(struct soap*, _ns1__SelShelfLink *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SelShelfLink ** SOAP_FMAC4 soap_get_PointerTo_ns1__SelShelfLink(struct soap*, _ns1__SelShelfLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SNLinkShelf_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SNLinkShelf_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SNLinkShelf(struct soap*, _ns1__SNLinkShelf *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SNLinkShelf(struct soap*, const char *, int, _ns1__SNLinkShelf *const*, const char *);
SOAP_FMAC3 _ns1__SNLinkShelf ** SOAP_FMAC4 soap_in_PointerTo_ns1__SNLinkShelf(struct soap*, const char*, _ns1__SNLinkShelf **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SNLinkShelf(struct soap*, _ns1__SNLinkShelf *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SNLinkShelf ** SOAP_FMAC4 soap_get_PointerTo_ns1__SNLinkShelf(struct soap*, _ns1__SNLinkShelf **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SelSNTestForFruit_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SelSNTestForFruit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SelSNTestForFruit(struct soap*, _ns1__SelSNTestForFruit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SelSNTestForFruit(struct soap*, const char *, int, _ns1__SelSNTestForFruit *const*, const char *);
SOAP_FMAC3 _ns1__SelSNTestForFruit ** SOAP_FMAC4 soap_in_PointerTo_ns1__SelSNTestForFruit(struct soap*, const char*, _ns1__SelSNTestForFruit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SelSNTestForFruit(struct soap*, _ns1__SelSNTestForFruit *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SelSNTestForFruit ** SOAP_FMAC4 soap_get_PointerTo_ns1__SelSNTestForFruit(struct soap*, _ns1__SelSNTestForFruit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsSNTestForFruit_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsSNTestForFruit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsSNTestForFruit(struct soap*, _ns1__InsSNTestForFruit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsSNTestForFruit(struct soap*, const char *, int, _ns1__InsSNTestForFruit *const*, const char *);
SOAP_FMAC3 _ns1__InsSNTestForFruit ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsSNTestForFruit(struct soap*, const char*, _ns1__InsSNTestForFruit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsSNTestForFruit(struct soap*, _ns1__InsSNTestForFruit *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsSNTestForFruit ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsSNTestForFruit(struct soap*, _ns1__InsSNTestForFruit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetStationNumberForSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetStationNumberForSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStationNumberForSN(struct soap*, _ns1__GetStationNumberForSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStationNumberForSN(struct soap*, const char *, int, _ns1__GetStationNumberForSN *const*, const char *);
SOAP_FMAC3 _ns1__GetStationNumberForSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStationNumberForSN(struct soap*, const char*, _ns1__GetStationNumberForSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStationNumberForSN(struct soap*, _ns1__GetStationNumberForSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetStationNumberForSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStationNumberForSN(struct soap*, _ns1__GetStationNumberForSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTestValueResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTestValueResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTestValueResult(struct soap*, _ns1__GetTestValueResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTestValueResult(struct soap*, const char *, int, _ns1__GetTestValueResult *const*, const char *);
SOAP_FMAC3 _ns1__GetTestValueResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTestValueResult(struct soap*, const char*, _ns1__GetTestValueResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTestValueResult(struct soap*, _ns1__GetTestValueResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTestValueResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTestValueResult(struct soap*, _ns1__GetTestValueResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsCLScada_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsCLScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsCLScada(struct soap*, _ns1__InsCLScada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsCLScada(struct soap*, const char *, int, _ns1__InsCLScada *const*, const char *);
SOAP_FMAC3 _ns1__InsCLScada ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsCLScada(struct soap*, const char*, _ns1__InsCLScada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsCLScada(struct soap*, _ns1__InsCLScada *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsCLScada ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsCLScada(struct soap*, _ns1__InsCLScada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsAoiMo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsAoiMo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsAoiMo(struct soap*, _ns1__InsAoiMo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsAoiMo(struct soap*, const char *, int, _ns1__InsAoiMo *const*, const char *);
SOAP_FMAC3 _ns1__InsAoiMo ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsAoiMo(struct soap*, const char*, _ns1__InsAoiMo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsAoiMo(struct soap*, _ns1__InsAoiMo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsAoiMo ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsAoiMo(struct soap*, _ns1__InsAoiMo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__chkMoSNForAOI_DEFINED
#define SOAP_TYPE_PointerTo_ns1__chkMoSNForAOI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__chkMoSNForAOI(struct soap*, _ns1__chkMoSNForAOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__chkMoSNForAOI(struct soap*, const char *, int, _ns1__chkMoSNForAOI *const*, const char *);
SOAP_FMAC3 _ns1__chkMoSNForAOI ** SOAP_FMAC4 soap_in_PointerTo_ns1__chkMoSNForAOI(struct soap*, const char*, _ns1__chkMoSNForAOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__chkMoSNForAOI(struct soap*, _ns1__chkMoSNForAOI *const*, const char*, const char*);
SOAP_FMAC3 _ns1__chkMoSNForAOI ** SOAP_FMAC4 soap_get_PointerTo_ns1__chkMoSNForAOI(struct soap*, _ns1__chkMoSNForAOI **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PunchOut_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PunchOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PunchOut(struct soap*, _ns1__PunchOut *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PunchOut(struct soap*, const char *, int, _ns1__PunchOut *const*, const char *);
SOAP_FMAC3 _ns1__PunchOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__PunchOut(struct soap*, const char*, _ns1__PunchOut **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PunchOut(struct soap*, _ns1__PunchOut *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PunchOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__PunchOut(struct soap*, _ns1__PunchOut **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BasketLinkPunch_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BasketLinkPunch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BasketLinkPunch(struct soap*, _ns1__BasketLinkPunch *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BasketLinkPunch(struct soap*, const char *, int, _ns1__BasketLinkPunch *const*, const char *);
SOAP_FMAC3 _ns1__BasketLinkPunch ** SOAP_FMAC4 soap_in_PointerTo_ns1__BasketLinkPunch(struct soap*, const char*, _ns1__BasketLinkPunch **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BasketLinkPunch(struct soap*, _ns1__BasketLinkPunch *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BasketLinkPunch ** SOAP_FMAC4 soap_get_PointerTo_ns1__BasketLinkPunch(struct soap*, _ns1__BasketLinkPunch **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__HPSNLinkBasket_DEFINED
#define SOAP_TYPE_PointerTo_ns1__HPSNLinkBasket_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__HPSNLinkBasket(struct soap*, _ns1__HPSNLinkBasket *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__HPSNLinkBasket(struct soap*, const char *, int, _ns1__HPSNLinkBasket *const*, const char *);
SOAP_FMAC3 _ns1__HPSNLinkBasket ** SOAP_FMAC4 soap_in_PointerTo_ns1__HPSNLinkBasket(struct soap*, const char*, _ns1__HPSNLinkBasket **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__HPSNLinkBasket(struct soap*, _ns1__HPSNLinkBasket *const*, const char*, const char*);
SOAP_FMAC3 _ns1__HPSNLinkBasket ** SOAP_FMAC4 soap_get_PointerTo_ns1__HPSNLinkBasket(struct soap*, _ns1__HPSNLinkBasket **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetAutoLineRec_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetAutoLineRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAutoLineRec(struct soap*, _ns1__SetAutoLineRec *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAutoLineRec(struct soap*, const char *, int, _ns1__SetAutoLineRec *const*, const char *);
SOAP_FMAC3 _ns1__SetAutoLineRec ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAutoLineRec(struct soap*, const char*, _ns1__SetAutoLineRec **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAutoLineRec(struct soap*, _ns1__SetAutoLineRec *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetAutoLineRec ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAutoLineRec(struct soap*, _ns1__SetAutoLineRec **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSNForLink_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSNForLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSNForLink(struct soap*, _ns1__GetSNForLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSNForLink(struct soap*, const char *, int, _ns1__GetSNForLink *const*, const char *);
SOAP_FMAC3 _ns1__GetSNForLink ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSNForLink(struct soap*, const char*, _ns1__GetSNForLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSNForLink(struct soap*, _ns1__GetSNForLink *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSNForLink ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSNForLink(struct soap*, _ns1__GetSNForLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetFlatnessFruitRec_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetFlatnessFruitRec_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetFlatnessFruitRec(struct soap*, _ns1__SetFlatnessFruitRec *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetFlatnessFruitRec(struct soap*, const char *, int, _ns1__SetFlatnessFruitRec *const*, const char *);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetFlatnessFruitRec(struct soap*, const char*, _ns1__SetFlatnessFruitRec **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetFlatnessFruitRec(struct soap*, _ns1__SetFlatnessFruitRec *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetFlatnessFruitRec(struct soap*, _ns1__SetFlatnessFruitRec **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getStationByMoForTestPad_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getStationByMoForTestPad_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getStationByMoForTestPad(struct soap*, _ns1__getStationByMoForTestPad *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getStationByMoForTestPad(struct soap*, const char *, int, _ns1__getStationByMoForTestPad *const*, const char *);
SOAP_FMAC3 _ns1__getStationByMoForTestPad ** SOAP_FMAC4 soap_in_PointerTo_ns1__getStationByMoForTestPad(struct soap*, const char*, _ns1__getStationByMoForTestPad **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getStationByMoForTestPad(struct soap*, _ns1__getStationByMoForTestPad *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getStationByMoForTestPad ** SOAP_FMAC4 soap_get_PointerTo_ns1__getStationByMoForTestPad(struct soap*, _ns1__getStationByMoForTestPad **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingWeight_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingWeight_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingWeight(struct soap*, _ns1__GetShippingWeight *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingWeight(struct soap*, const char *, int, _ns1__GetShippingWeight *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingWeight ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingWeight(struct soap*, const char*, _ns1__GetShippingWeight **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingWeight(struct soap*, _ns1__GetShippingWeight *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingWeight ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingWeight(struct soap*, _ns1__GetShippingWeight **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingForBerth_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingForBerth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingForBerth(struct soap*, _ns1__GetShippingForBerth *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingForBerth(struct soap*, const char *, int, _ns1__GetShippingForBerth *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingForBerth ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingForBerth(struct soap*, const char*, _ns1__GetShippingForBerth **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingForBerth(struct soap*, _ns1__GetShippingForBerth *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingForBerth ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingForBerth(struct soap*, _ns1__GetShippingForBerth **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsShippingBerth_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsShippingBerth_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsShippingBerth(struct soap*, _ns1__InsShippingBerth *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsShippingBerth(struct soap*, const char *, int, _ns1__InsShippingBerth *const*, const char *);
SOAP_FMAC3 _ns1__InsShippingBerth ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsShippingBerth(struct soap*, const char*, _ns1__InsShippingBerth **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsShippingBerth(struct soap*, _ns1__InsShippingBerth *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsShippingBerth ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsShippingBerth(struct soap*, _ns1__InsShippingBerth **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsShippingPalle_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsShippingPalle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsShippingPalle(struct soap*, _ns1__InsShippingPalle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsShippingPalle(struct soap*, const char *, int, _ns1__InsShippingPalle *const*, const char *);
SOAP_FMAC3 _ns1__InsShippingPalle ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsShippingPalle(struct soap*, const char*, _ns1__InsShippingPalle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsShippingPalle(struct soap*, _ns1__InsShippingPalle *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsShippingPalle ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsShippingPalle(struct soap*, _ns1__InsShippingPalle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingPalle_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingPalle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingPalle(struct soap*, _ns1__GetShippingPalle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingPalle(struct soap*, const char *, int, _ns1__GetShippingPalle *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingPalle ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingPalle(struct soap*, const char*, _ns1__GetShippingPalle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingPalle(struct soap*, _ns1__GetShippingPalle *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingPalle ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingPalle(struct soap*, _ns1__GetShippingPalle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdShipping_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdShipping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdShipping(struct soap*, _ns1__UpdShipping *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdShipping(struct soap*, const char *, int, _ns1__UpdShipping *const*, const char *);
SOAP_FMAC3 _ns1__UpdShipping ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdShipping(struct soap*, const char*, _ns1__UpdShipping **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdShipping(struct soap*, _ns1__UpdShipping *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdShipping ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdShipping(struct soap*, _ns1__UpdShipping **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingBerthList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingBerthList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingBerthList(struct soap*, _ns1__GetShippingBerthList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingBerthList(struct soap*, const char *, int, _ns1__GetShippingBerthList *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingBerthList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingBerthList(struct soap*, const char*, _ns1__GetShippingBerthList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingBerthList(struct soap*, _ns1__GetShippingBerthList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingBerthList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingBerthList(struct soap*, _ns1__GetShippingBerthList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingList(struct soap*, _ns1__GetShippingList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingList(struct soap*, const char *, int, _ns1__GetShippingList *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingList(struct soap*, const char*, _ns1__GetShippingList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingList(struct soap*, _ns1__GetShippingList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingList(struct soap*, _ns1__GetShippingList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doLotLinkForApple_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doLotLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doLotLinkForApple(struct soap*, _ns1__doLotLinkForApple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doLotLinkForApple(struct soap*, const char *, int, _ns1__doLotLinkForApple *const*, const char *);
SOAP_FMAC3 _ns1__doLotLinkForApple ** SOAP_FMAC4 soap_in_PointerTo_ns1__doLotLinkForApple(struct soap*, const char*, _ns1__doLotLinkForApple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doLotLinkForApple(struct soap*, _ns1__doLotLinkForApple *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doLotLinkForApple ** SOAP_FMAC4 soap_get_PointerTo_ns1__doLotLinkForApple(struct soap*, _ns1__doLotLinkForApple **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLotLinkCount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLotLinkCount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLotLinkCount(struct soap*, _ns1__GetLotLinkCount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLotLinkCount(struct soap*, const char *, int, _ns1__GetLotLinkCount *const*, const char *);
SOAP_FMAC3 _ns1__GetLotLinkCount ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLotLinkCount(struct soap*, const char*, _ns1__GetLotLinkCount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLotLinkCount(struct soap*, _ns1__GetLotLinkCount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLotLinkCount ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLotLinkCount(struct soap*, _ns1__GetLotLinkCount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFruitSNCheck_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFruitSNCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFruitSNCheck(struct soap*, _ns1__GetFruitSNCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFruitSNCheck(struct soap*, const char *, int, _ns1__GetFruitSNCheck *const*, const char *);
SOAP_FMAC3 _ns1__GetFruitSNCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFruitSNCheck(struct soap*, const char*, _ns1__GetFruitSNCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFruitSNCheck(struct soap*, _ns1__GetFruitSNCheck *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFruitSNCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFruitSNCheck(struct soap*, _ns1__GetFruitSNCheck **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetObeNW_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetObeNW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetObeNW(struct soap*, _ns1__GetObeNW *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetObeNW(struct soap*, const char *, int, _ns1__GetObeNW *const*, const char *);
SOAP_FMAC3 _ns1__GetObeNW ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetObeNW(struct soap*, const char*, _ns1__GetObeNW **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetObeNW(struct soap*, _ns1__GetObeNW *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetObeNW ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetObeNW(struct soap*, _ns1__GetObeNW **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doSnLinkForApple_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doSnLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doSnLinkForApple(struct soap*, _ns1__doSnLinkForApple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doSnLinkForApple(struct soap*, const char *, int, _ns1__doSnLinkForApple *const*, const char *);
SOAP_FMAC3 _ns1__doSnLinkForApple ** SOAP_FMAC4 soap_in_PointerTo_ns1__doSnLinkForApple(struct soap*, const char*, _ns1__doSnLinkForApple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doSnLinkForApple(struct soap*, _ns1__doSnLinkForApple *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doSnLinkForApple ** SOAP_FMAC4 soap_get_PointerTo_ns1__doSnLinkForApple(struct soap*, _ns1__doSnLinkForApple **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkSnLinkForApple_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkSnLinkForApple_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkSnLinkForApple(struct soap*, _ns1__ChkSnLinkForApple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkSnLinkForApple(struct soap*, const char *, int, _ns1__ChkSnLinkForApple *const*, const char *);
SOAP_FMAC3 _ns1__ChkSnLinkForApple ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkSnLinkForApple(struct soap*, const char*, _ns1__ChkSnLinkForApple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkSnLinkForApple(struct soap*, _ns1__ChkSnLinkForApple *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkSnLinkForApple ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkSnLinkForApple(struct soap*, _ns1__ChkSnLinkForApple **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DelSNTest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DelSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DelSNTest(struct soap*, _ns1__DelSNTest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DelSNTest(struct soap*, const char *, int, _ns1__DelSNTest *const*, const char *);
SOAP_FMAC3 _ns1__DelSNTest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DelSNTest(struct soap*, const char*, _ns1__DelSNTest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DelSNTest(struct soap*, _ns1__DelSNTest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DelSNTest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DelSNTest(struct soap*, _ns1__DelSNTest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SelSNTest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SelSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SelSNTest(struct soap*, _ns1__SelSNTest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SelSNTest(struct soap*, const char *, int, _ns1__SelSNTest *const*, const char *);
SOAP_FMAC3 _ns1__SelSNTest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SelSNTest(struct soap*, const char*, _ns1__SelSNTest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SelSNTest(struct soap*, _ns1__SelSNTest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SelSNTest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SelSNTest(struct soap*, _ns1__SelSNTest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsSNTest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsSNTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsSNTest(struct soap*, _ns1__InsSNTest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsSNTest(struct soap*, const char *, int, _ns1__InsSNTest *const*, const char *);
SOAP_FMAC3 _ns1__InsSNTest ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsSNTest(struct soap*, const char*, _ns1__InsSNTest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsSNTest(struct soap*, _ns1__InsSNTest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsSNTest ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsSNTest(struct soap*, _ns1__InsSNTest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChkWeightTime_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChkWeightTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChkWeightTime(struct soap*, _ns1__ChkWeightTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChkWeightTime(struct soap*, const char *, int, _ns1__ChkWeightTime *const*, const char *);
SOAP_FMAC3 _ns1__ChkWeightTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChkWeightTime(struct soap*, const char*, _ns1__ChkWeightTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChkWeightTime(struct soap*, _ns1__ChkWeightTime *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChkWeightTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChkWeightTime(struct soap*, _ns1__ChkWeightTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdAhsBarcode_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdAhsBarcode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdAhsBarcode(struct soap*, _ns1__UpdAhsBarcode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdAhsBarcode(struct soap*, const char *, int, _ns1__UpdAhsBarcode *const*, const char *);
SOAP_FMAC3 _ns1__UpdAhsBarcode ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdAhsBarcode(struct soap*, const char*, _ns1__UpdAhsBarcode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdAhsBarcode(struct soap*, _ns1__UpdAhsBarcode *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdAhsBarcode ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdAhsBarcode(struct soap*, _ns1__UpdAhsBarcode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAhsBarcode_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAhsBarcode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAhsBarcode(struct soap*, _ns1__GetAhsBarcode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAhsBarcode(struct soap*, const char *, int, _ns1__GetAhsBarcode *const*, const char *);
SOAP_FMAC3 _ns1__GetAhsBarcode ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAhsBarcode(struct soap*, const char*, _ns1__GetAhsBarcode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAhsBarcode(struct soap*, _ns1__GetAhsBarcode *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAhsBarcode ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAhsBarcode(struct soap*, _ns1__GetAhsBarcode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, _ns1__GetAhsMoResponse_GetAhsMoResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, const char *, int, _ns1__GetAhsMoResponse_GetAhsMoResult *const*, const char *);
SOAP_FMAC3 _ns1__GetAhsMoResponse_GetAhsMoResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, const char*, _ns1__GetAhsMoResponse_GetAhsMoResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, _ns1__GetAhsMoResponse_GetAhsMoResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAhsMoResponse_GetAhsMoResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAhsMoResponse_GetAhsMoResult(struct soap*, _ns1__GetAhsMoResponse_GetAhsMoResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, const char *, int, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *const*, const char *);
SOAP_FMAC3 _ns1__GetPallentToWMSResponse_GetPallentToWMSResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, const char*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPallentToWMSResponse_GetPallentToWMSResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPallentToWMSResponse_GetPallentToWMSResult(struct soap*, _ns1__GetPallentToWMSResponse_GetPallentToWMSResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doLinkOutSN_assyDt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doLinkOutSN_assyDt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doLinkOutSN_assyDt(struct soap*, _ns1__doLinkOutSN_assyDt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doLinkOutSN_assyDt(struct soap*, const char *, int, _ns1__doLinkOutSN_assyDt *const*, const char *);
SOAP_FMAC3 _ns1__doLinkOutSN_assyDt ** SOAP_FMAC4 soap_in_PointerTo_ns1__doLinkOutSN_assyDt(struct soap*, const char*, _ns1__doLinkOutSN_assyDt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doLinkOutSN_assyDt(struct soap*, _ns1__doLinkOutSN_assyDt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doLinkOutSN_assyDt ** SOAP_FMAC4 soap_get_PointerTo_ns1__doLinkOutSN_assyDt(struct soap*, _ns1__doLinkOutSN_assyDt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doPmcSNLink_assyDt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doPmcSNLink_assyDt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doPmcSNLink_assyDt(struct soap*, _ns1__doPmcSNLink_assyDt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doPmcSNLink_assyDt(struct soap*, const char *, int, _ns1__doPmcSNLink_assyDt *const*, const char *);
SOAP_FMAC3 _ns1__doPmcSNLink_assyDt ** SOAP_FMAC4 soap_in_PointerTo_ns1__doPmcSNLink_assyDt(struct soap*, const char*, _ns1__doPmcSNLink_assyDt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doPmcSNLink_assyDt(struct soap*, _ns1__doPmcSNLink_assyDt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doPmcSNLink_assyDt ** SOAP_FMAC4 soap_get_PointerTo_ns1__doPmcSNLink_assyDt(struct soap*, _ns1__doPmcSNLink_assyDt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, const char *, int, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *const*, const char *);
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, const char*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult(struct soap*, _ns1__getPmcPartAssyListResponse_getPmcPartAssyListResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, _ns1__getPmcAssyListResponse_getPmcAssyListResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, const char *, int, _ns1__getPmcAssyListResponse_getPmcAssyListResult *const*, const char *);
SOAP_FMAC3 _ns1__getPmcAssyListResponse_getPmcAssyListResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, const char*, _ns1__getPmcAssyListResponse_getPmcAssyListResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, _ns1__getPmcAssyListResponse_getPmcAssyListResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPmcAssyListResponse_getPmcAssyListResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPmcAssyListResponse_getPmcAssyListResult(struct soap*, _ns1__getPmcAssyListResponse_getPmcAssyListResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doAssy_assyDt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doAssy_assyDt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doAssy_assyDt(struct soap*, _ns1__doAssy_assyDt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doAssy_assyDt(struct soap*, const char *, int, _ns1__doAssy_assyDt *const*, const char *);
SOAP_FMAC3 _ns1__doAssy_assyDt ** SOAP_FMAC4 soap_in_PointerTo_ns1__doAssy_assyDt(struct soap*, const char*, _ns1__doAssy_assyDt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doAssy_assyDt(struct soap*, _ns1__doAssy_assyDt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doAssy_assyDt ** SOAP_FMAC4 soap_get_PointerTo_ns1__doAssy_assyDt(struct soap*, _ns1__doAssy_assyDt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, const char *, int, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *const*, const char *);
SOAP_FMAC3 _ns1__GetLinkOutSnResponse_GetLinkOutSnResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, const char*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLinkOutSnResponse_GetLinkOutSnResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLinkOutSnResponse_GetLinkOutSnResult(struct soap*, _ns1__GetLinkOutSnResponse_GetLinkOutSnResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, _ns1__getPartBomExtResponse_getPartBomExtResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, const char *, int, _ns1__getPartBomExtResponse_getPartBomExtResult *const*, const char *);
SOAP_FMAC3 _ns1__getPartBomExtResponse_getPartBomExtResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, const char*, _ns1__getPartBomExtResponse_getPartBomExtResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, _ns1__getPartBomExtResponse_getPartBomExtResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getPartBomExtResponse_getPartBomExtResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getPartBomExtResponse_getPartBomExtResult(struct soap*, _ns1__getPartBomExtResponse_getPartBomExtResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, _ns1__getMoAssyListResponse_getMoAssyListResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, const char *, int, _ns1__getMoAssyListResponse_getMoAssyListResult *const*, const char *);
SOAP_FMAC3 _ns1__getMoAssyListResponse_getMoAssyListResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, const char*, _ns1__getMoAssyListResponse_getMoAssyListResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, _ns1__getMoAssyListResponse_getMoAssyListResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getMoAssyListResponse_getMoAssyListResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMoAssyListResponse_getMoAssyListResult(struct soap*, _ns1__getMoAssyListResponse_getMoAssyListResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, _ns1__getInfoByMoResponse_getInfoByMoResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, const char *, int, _ns1__getInfoByMoResponse_getInfoByMoResult *const*, const char *);
SOAP_FMAC3 _ns1__getInfoByMoResponse_getInfoByMoResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, const char*, _ns1__getInfoByMoResponse_getInfoByMoResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, _ns1__getInfoByMoResponse_getInfoByMoResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getInfoByMoResponse_getInfoByMoResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getInfoByMoResponse_getInfoByMoResult(struct soap*, _ns1__getInfoByMoResponse_getInfoByMoResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap*, const char *, int, ns1__ArrayOfString *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, const char *, int, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *const*, const char *);
SOAP_FMAC3 _ns1__GetMachineForGroupResponse_GetMachineForGroupResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, const char*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetMachineForGroupResponse_GetMachineForGroupResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMachineForGroupResponse_GetMachineForGroupResult(struct soap*, _ns1__GetMachineForGroupResponse_GetMachineForGroupResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetFlatnessFruitRec_dt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetFlatnessFruitRec_dt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetFlatnessFruitRec_dt(struct soap*, _ns1__SetFlatnessFruitRec_dt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetFlatnessFruitRec_dt(struct soap*, const char *, int, _ns1__SetFlatnessFruitRec_dt *const*, const char *);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec_dt ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetFlatnessFruitRec_dt(struct soap*, const char*, _ns1__SetFlatnessFruitRec_dt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetFlatnessFruitRec_dt(struct soap*, _ns1__SetFlatnessFruitRec_dt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetFlatnessFruitRec_dt ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetFlatnessFruitRec_dt(struct soap*, _ns1__SetFlatnessFruitRec_dt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, _ns1__GetShippingWeightResponse_GetShippingWeightResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, const char *, int, _ns1__GetShippingWeightResponse_GetShippingWeightResult *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingWeightResponse_GetShippingWeightResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, const char*, _ns1__GetShippingWeightResponse_GetShippingWeightResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, _ns1__GetShippingWeightResponse_GetShippingWeightResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingWeightResponse_GetShippingWeightResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingWeightResponse_GetShippingWeightResult(struct soap*, _ns1__GetShippingWeightResponse_GetShippingWeightResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, const char *, int, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingForBerthResponse_GetShippingForBerthResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, const char*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingForBerthResponse_GetShippingForBerthResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingForBerthResponse_GetShippingForBerthResult(struct soap*, _ns1__GetShippingForBerthResponse_GetShippingForBerthResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, const char *, int, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingBerthListResponse_GetShippingBerthListResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, const char*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingBerthListResponse_GetShippingBerthListResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingBerthListResponse_GetShippingBerthListResult(struct soap*, _ns1__GetShippingBerthListResponse_GetShippingBerthListResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShippingListResponse_GetShippingListResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShippingListResponse_GetShippingListResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShippingListResponse_GetShippingListResult(struct soap*, _ns1__GetShippingListResponse_GetShippingListResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShippingListResponse_GetShippingListResult(struct soap*, const char *, int, _ns1__GetShippingListResponse_GetShippingListResult *const*, const char *);
SOAP_FMAC3 _ns1__GetShippingListResponse_GetShippingListResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShippingListResponse_GetShippingListResult(struct soap*, const char*, _ns1__GetShippingListResponse_GetShippingListResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShippingListResponse_GetShippingListResult(struct soap*, _ns1__GetShippingListResponse_GetShippingListResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShippingListResponse_GetShippingListResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShippingListResponse_GetShippingListResult(struct soap*, _ns1__GetShippingListResponse_GetShippingListResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doLotLinkForApple_assyDt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doLotLinkForApple_assyDt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doLotLinkForApple_assyDt(struct soap*, _ns1__doLotLinkForApple_assyDt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doLotLinkForApple_assyDt(struct soap*, const char *, int, _ns1__doLotLinkForApple_assyDt *const*, const char *);
SOAP_FMAC3 _ns1__doLotLinkForApple_assyDt ** SOAP_FMAC4 soap_in_PointerTo_ns1__doLotLinkForApple_assyDt(struct soap*, const char*, _ns1__doLotLinkForApple_assyDt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doLotLinkForApple_assyDt(struct soap*, _ns1__doLotLinkForApple_assyDt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doLotLinkForApple_assyDt ** SOAP_FMAC4 soap_get_PointerTo_ns1__doLotLinkForApple_assyDt(struct soap*, _ns1__doLotLinkForApple_assyDt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__doSnLinkForApple_assyDt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__doSnLinkForApple_assyDt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__doSnLinkForApple_assyDt(struct soap*, _ns1__doSnLinkForApple_assyDt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__doSnLinkForApple_assyDt(struct soap*, const char *, int, _ns1__doSnLinkForApple_assyDt *const*, const char *);
SOAP_FMAC3 _ns1__doSnLinkForApple_assyDt ** SOAP_FMAC4 soap_in_PointerTo_ns1__doSnLinkForApple_assyDt(struct soap*, const char*, _ns1__doSnLinkForApple_assyDt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__doSnLinkForApple_assyDt(struct soap*, _ns1__doSnLinkForApple_assyDt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__doSnLinkForApple_assyDt ** SOAP_FMAC4 soap_get_PointerTo_ns1__doSnLinkForApple_assyDt(struct soap*, _ns1__doSnLinkForApple_assyDt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, const char *, int, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *const*, const char *);
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, const char*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult(struct soap*, _ns1__GetAhsBarcodeResponse_GetAhsBarcodeResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif
/* _xsd__schema is a typedef synonym for _XML */

#ifndef SOAP_TYPE__xsd__schema_DEFINED
#define SOAP_TYPE__xsd__schema_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
